
Перем мБухИтоги;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьПрошлыйПериод(НачалоПериода, КонецПериода)

	КонецПрошлогоПериода = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, НачалоМесяца(КонецПериода)-1, НачалоКвартала(КонецПериода)-1);
	
	Если КонецПрошлогоПериода < НачалоПериода Тогда
		Возврат НачалоПериода;
	Иначе	
		Возврат КонецПрошлогоПериода;
	КонецЕсли;

КонецФункции // ПолучитьПрошлыйПериод()

// Создает массив и заполняет элементы массива нулями
//
// Параметры
//  Размерность  - Число - размерность массива
//
// Возвращаемое значение:
//   Массив
//
Функция МассивНулей(Размерность)

	Массив = Новый Массив(Размерность);
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Массив[Индекс] = 0;
	КонецЦикла;
	Возврат Массив;

КонецФункции // МассивНулей()

// Создает структуру строк по шаблону и заполняет элементами массива
//
// Параметры
//  Шаблон  - Строка - шаблон по которому будут сформированы строки
//  Массив  - Массив - массив из которого будут сформированы строки
//
// Возвращаемое значение:
//   Структура   - структура строк
//
Функция СтруктураСтрок10(Шаблон, Массив, Строки = Неопределено, НачальныйИндекс = 0)

	Если Строки = Неопределено Тогда
		Строки = Новый Структура;
	КонецЕсли;
	Для Индекс = 0 По Массив.ВГраница() Цикл
		КодСтроки = Шаблон + Формат((НачальныйИндекс+Индекс)*10+10, "ЧЦ=3; ЧДЦ=0; ЧВН=");
		Строки.Вставить(КодСтроки, Массив[Индекс]);
	КонецЦикла;
	Возврат Строки;

КонецФункции // СтруктураСтрок()

// Создает структуру строк по шаблону и заполняет элементами массива
//
// Параметры
//  Шаблон  - Строка - шаблон по которому будут сформированы строки
//  Массив  - Массив - массив из которого будут сформированы строки
//
// Возвращаемое значение:
//   Структура   - структура строк
//
Функция СтруктураСтрок1(Шаблон, Массив, Строки = Неопределено, НачальныйИндекс = 0)

	Если Строки = Неопределено Тогда
		Строки = Новый Структура;
	КонецЕсли;
	Для Индекс = 0 По Массив.ВГраница() Цикл
		КодСтроки = Шаблон + Формат((НачальныйИндекс+Индекс)+1, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		Строки.Вставить(КодСтроки, Массив[Индекс]);
	КонецЦикла;
	Возврат Строки;

КонецФункции // СтруктураСтрок()

// Формирует таблицу значений с бух.итогами по видам деятельности
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция БИпоВидамДеятельности(НачалоПериода, КонецПериода) Экспорт

	ТЗВидыДеятельности = Новый ТаблицаЗначений;
	ТЗВидыДеятельности.Колонки.Добавить("НомерСтроки");
	ТЗВидыДеятельности.Колонки.Добавить("ВидДеятельности");
	ТЗВидыДеятельности.Колонки.Добавить("Ставка");
	ТЗВидыДеятельности.Колонки.Добавить("Выручка");
	ТЗВидыДеятельности.Колонки.Добавить("УдельныйВес");
	Выборка = Справочники.ВидыДеятельностиОрганизации.Выбрать(, Организация);
	СписокСчетов = "";
	к=1;
	Пока Выборка.Следующий() Цикл
		СписокСчетов = СписокСчетов + Выборка.СчетУчета.Код+", ";
		НоваяСтрока = ТЗВидыДеятельности.Добавить();
		НоваяСтрока.ВидДеятельности = Выборка.Ссылка;
		Если Организация.ОсновнойВидДеятельности = Выборка.Ссылка Тогда
			НоваяСтрока.НомерСтроки = 1;
		Иначе	
			к=к+1;
			НоваяСтрока.НомерСтроки = к;
		КонецЕсли;
	КонецЦикла;
	ТЗВидыДеятельности.Сортировать("НомерСтроки");
	//
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	//
	СтавкиЕНП = РегистрыСведений.СтавкиЕНППоВидамДеятельности;
	Для каждого СтрокаТЗ Из ТЗВидыДеятельности Цикл
		СтрокаТЗ.Выручка = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", СтрокаТЗ.ВидДеятельности.СчетУчета);
		ТекущийВидДеятельности = Новый Структура("ВидДеятельности", СтрокаТЗ.ВидДеятельности.ВидДеятельности);
		ТекущаяСтавкаЕНП = СтавкиЕНП.СрезПоследних(КонецПериода, ТекущийВидДеятельности);
		СтрокаТЗ.Ставка = ?(ТекущаяСтавкаЕНП.Количество() = 0, 0, ТекущаяСтавкаЕНП[0].Ставка);
	КонецЦикла;
	Выручка = ТЗВидыДеятельности.Итог("Выручка");
	Для каждого СтрокаТЗ Из ТЗВидыДеятельности Цикл
		СтрокаТЗ.УдельныйВес = ?(Выручка = 0, 0, Окр(СтрокаТЗ.Выручка/Выручка*100, 1));
	КонецЦикла;
	Если НЕ ТЗВидыДеятельности.Количество() = 0 Тогда
		ТЗВидыДеятельности[0].УдельныйВес = ТЗВидыДеятельности[0].УдельныйВес + (100 - ТЗВидыДеятельности.Итог("УдельныйВес"));
	КонецЕсли;
	Возврат ТЗВидыДеятельности;
	
КонецФункции // БИпоВидамДеятельности()

// Формирует таблицу значений занимаемых помещений организации
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗанимаемыеПомещения(ВидПомещения) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("ВидПомещения", ВидПомещения);
	ТЗПомещений = Организация.ЗанимаемыеПомещения.Выгрузить(Отбор);
	ТЗПомещений.Колонки.Добавить("База");
	ТЗПомещений.Колонки.Добавить("Сумма");
	Для каждого СтрокаТЗ Из ТЗПомещений Цикл
	    СтрокаТЗ.База = СтрокаТЗ.Площадь - СтрокаТЗ.НеоблагаемаяПлощадь;
		СтрокаТЗ.Сумма = СтрокаТЗ.База * СтрокаТЗ.МинимальнаяСтавка;
	КонецЦикла;
	Возврат ТЗПомещений;
	
КонецФункции // ЗанимаемыеПомещения()

// Рассчитывает доначисление ЕНП (стр.50 справки-расчет) за период
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДоначислениеЕНП(НачалоПериода, КонецПериода) Экспорт

	//КонецПрошлогоПериода = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, НачалоМесяца(КонецПериода)-1, НачалоКвартала(КонецПериода)-1);
	КонецПрошлогоПериода = ПолучитьПрошлыйПериод(НачалоПериода, КонецПериода);
	ТЗВыручка = БИпоВидамДеятельности(НачалоПериода, КонецПериода);
	Для каждого СтрокаТЗ Из ТЗВыручка Цикл
		Если СтрокаТЗ.НомерСтроки = 1 Тогда
			СтавкаД1 = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 2 Тогда
			СтавкаД2 = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 3 Тогда
			СтавкаД3 = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 4 Тогда
			СтавкаД4 = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 5 Тогда
			СтавкаД5 = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 6 Тогда
			СтавкаД6 = СтрокаТЗ.Ставка;
		КонецЕсли;
	КонецЦикла;
	Выручка1 = РасчетЧ1_Получить(Истина, "*_040", НачалоПериода, КонецПериода);
	Выручка2 = РасчетЧ1_Получить(Истина, "*_040", НачалоПериода, КонецПрошлогоПериода);
	ВыручкаД1 = Выручка1.а1_040 - Выручка2.а1_040;
	ВыручкаД2 = Выручка1.а2_040 - Выручка2.а2_040;
	ВыручкаД3 = Выручка1.а3_040 - Выручка2.а3_040;
	ВыручкаД4 = Выручка1.а4_040 - Выручка2.а4_040;
	ВыручкаД5 = Выручка1.а5_040 - Выручка2.а5_040;
	ВыручкаД6 = Выручка1.а6_040 - Выручка2.а6_040;
	// Расчетная сумма ЕНП
	ЕНП1 = ВыручкаД1 * ?(СтавкаД1 = Неопределено, 0, СтавкаД1) / 100;
	ЕНП2 = ВыручкаД2 * ?(СтавкаД2 = Неопределено, 0, СтавкаД2) / 100;
	ЕНП3 = ВыручкаД3 * ?(СтавкаД3 = Неопределено, 0, СтавкаД3) / 100;
	ЕНП4 = ВыручкаД4 * ?(СтавкаД4 = Неопределено, 0, СтавкаД4) / 100;
	ЕНП5 = ВыручкаД5 * ?(СтавкаД5 = Неопределено, 0, СтавкаД5) / 100;
	ЕНП6 = ВыручкаД6 * ?(СтавкаД6 = Неопределено, 0, СтавкаД6) / 100;
	ЕНП = ЕНП1+ЕНП2+ЕНП3+ЕНП4+ЕНП5+ЕНП6;
	// Минимальный размер ЕНП
	МинЕНП = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, 
					ПриложениеП2_Получить(Истина, "в11")/12, ПриложениеП2_Получить(Истина, "в11")/4);
	Разница = МинЕНП - ЕНП;
	ДоначисленныйЕНП = ?(Разница<0, 0, Разница);
	
	Возврат ДоначисленныйЕНП;
	
КонецФункции // ДоначислениеЕНП()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РасчетЧ1_Получить(ПолучитьСтроку = Ложь, Стр = "", НачалоПериода, КонецПериода) Экспорт
	
	// Формирование начальных массивов нулей
	// Строки 010...130
	Всего = МассивНулей(13);			// Колонка всего
	ВидД1 = МассивНулей(13);			// По видам деятельности (Колонка 1)
	ВидД2 = МассивНулей(13);			// По видам деятельности (Колонка 2)
	ВидД3 = МассивНулей(13);			// По видам деятельности (Колонка 3)
	ВидД4 = МассивНулей(13);			// По видам деятельности (Колонка 4)
	ВидД5 = МассивНулей(13);			// По видам деятельности (Колонка 5)
	ВидД6 = МассивНулей(13);			// По видам деятельности (Колонка 6)
	// Строка 025
	Всего_25 = МассивНулей(1);			// Колонка всего
	ВидД1_25 = МассивНулей(1);			// По видам деятельности (Колонка 1)
	ВидД2_25 = МассивНулей(1);			// По видам деятельности (Колонка 2)
	ВидД3_25 = МассивНулей(1);			// По видам деятельности (Колонка 3)
	ВидД4_25 = МассивНулей(1);			// По видам деятельности (Колонка 4)
	ВидД5_25 = МассивНулей(1);			// По видам деятельности (Колонка 5)
	ВидД6_25 = МассивНулей(1);			// По видам деятельности (Колонка 6)
	// Строки 0501...0502
	Всего_50 = МассивНулей(2);			// Колонка всего
	ВидД1_50 = МассивНулей(2);			// По видам деятельности (Колонка 1)
	ВидД2_50 = МассивНулей(2);			// По видам деятельности (Колонка 2)
	ВидД3_50 = МассивНулей(2);			// По видам деятельности (Колонка 3)
	ВидД4_50 = МассивНулей(2);			// По видам деятельности (Колонка 4)
	ВидД5_50 = МассивНулей(2);			// По видам деятельности (Колонка 5)
	ВидД6_50 = МассивНулей(2);			// По видам деятельности (Колонка 6)
	// Строки 0601...0602
	Всего_60 = МассивНулей(2);			// Колонка всего
	ВидД1_60 = МассивНулей(2);			// По видам деятельности (Колонка 1)
	ВидД2_60 = МассивНулей(2);			// По видам деятельности (Колонка 2)
	ВидД3_60 = МассивНулей(2);			// По видам деятельности (Колонка 3)
	ВидД4_60 = МассивНулей(2);			// По видам деятельности (Колонка 4)
	ВидД5_60 = МассивНулей(2);			// По видам деятельности (Колонка 5)
	ВидД6_60 = МассивНулей(2);			// По видам деятельности (Колонка 6)
	// Строки 0801...0802
	Всего_80 = МассивНулей(2);			// Колонка всего
	ВидД1_80 = МассивНулей(2);			// По видам деятельности (Колонка 1)
	ВидД2_80 = МассивНулей(2);			// По видам деятельности (Колонка 2)
	ВидД3_80 = МассивНулей(2);			// По видам деятельности (Колонка 3)
	ВидД4_80 = МассивНулей(2);			// По видам деятельности (Колонка 4)
	ВидД5_80 = МассивНулей(2);			// По видам деятельности (Колонка 5)
	ВидД6_80 = МассивНулей(2);			// По видам деятельности (Колонка 6)
	// Строки 0901...0902
	Всего_90 = МассивНулей(2);			// Колонка всего
	ВидД1_90 = МассивНулей(2);			// По видам деятельности (Колонка 1)
	ВидД2_90 = МассивНулей(2);			// По видам деятельности (Колонка 2)
	ВидД3_90 = МассивНулей(2);			// По видам деятельности (Колонка 3)
	ВидД4_90 = МассивНулей(2);			// По видам деятельности (Колонка 4)
	ВидД5_90 = МассивНулей(2);			// По видам деятельности (Колонка 5)
	ВидД6_90 = МассивНулей(2);			// По видам деятельности (Колонка 6)
	
	// Расчет
	// строки 010 ... 020
	ТЗВыручка = БИпоВидамДеятельности(НачалоПериода, КонецПериода);
	Для каждого СтрокаТЗ Из ТЗВыручка Цикл
		Если СтрокаТЗ.НомерСтроки = 1 Тогда
			ВидД1[0] = СтрокаТЗ.Выручка;
			ВидД1[1] = СтрокаТЗ.УдельныйВес;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 2 Тогда
			ВидД2[0] = СтрокаТЗ.Выручка;
			ВидД2[1] = СтрокаТЗ.УдельныйВес;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 3 Тогда
			ВидД3[0] = СтрокаТЗ.Выручка;
			ВидД3[1] = СтрокаТЗ.УдельныйВес;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 4 Тогда
			ВидД4[0] = СтрокаТЗ.Выручка;
			ВидД4[1] = СтрокаТЗ.УдельныйВес;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 5 Тогда
			ВидД5[0] = СтрокаТЗ.Выручка;
			ВидД5[1] = СтрокаТЗ.УдельныйВес;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 6 Тогда
			ВидД6[0] = СтрокаТЗ.Выручка;
			ВидД6[1] = СтрокаТЗ.УдельныйВес;
		КонецЕсли;
	КонецЦикла;
	Всего[0] = ТЗВыручка.Итог("Выручка");
	Всего[1] = ТЗВыручка.Итог("УдельныйВес");
	// строка 025
	// строка 030
	ПрочиеДоходы = Приложение1_Получить(Истина, "а010");
	Всего[2] = ПрочиеДоходы;
	ВидД1[2] = ПрочиеДоходы;
	// строка 040
	ВидД1[3] = ВидД1[0]+ВидД1_25[0]+ВидД1[2];
	ВидД2[3] = ВидД2[0]+ВидД2_25[0]+ВидД2[2];
	ВидД3[3] = ВидД3[0]+ВидД3_25[0]+ВидД3[2];
	ВидД4[3] = ВидД4[0]+ВидД4_25[0]+ВидД4[2];
	ВидД5[3] = ВидД5[0]+ВидД5_25[0]+ВидД5[2];
	ВидД6[3] = ВидД6[0]+ВидД6_25[0]+ВидД6[2];
	Всего[3] = ВидД1[3]+ВидД2[3]+ВидД3[3]+ВидД4[3]+ВидД5[3]+ВидД6[3];
	// для вывода строки 040 в приложениях
	Если ПолучитьСтроку И Прав(Стр, 5) = "*_040" Тогда
		Строки = Новый Структура;
		Строки.Вставить("а_040" , Всего[3]);
		Строки.Вставить("а1_040", ВидД1[3]);
		Строки.Вставить("а2_040", ВидД2[3]);
		Строки.Вставить("а3_040", ВидД3[3]);
		Строки.Вставить("а4_040", ВидД4[3]);
		Строки.Вставить("а5_040", ВидД5[3]);
		Строки.Вставить("а6_040", ВидД6[3]);
		Возврат Строки;
	КонецЕсли;
	// строка 0501
	Льготы1 = Приложение2_Получить(Истина, "а010");
	Всего_50[0] = Льготы1;
	ВидД1_50[0] = Льготы1;
	// строка 0502
	Льготы2 = Приложение3_Получить(Истина, "а010");
	Всего_50[1] = Льготы2;
	ВидД1_50[1] = Льготы2;
	// строка 050
	ВидД1[4] = ВидД1_50[0]+ВидД1_50[1];
	ВидД2[4] = ВидД2_50[0]+ВидД2_50[1];
	ВидД3[4] = ВидД3_50[0]+ВидД3_50[1];
	ВидД4[4] = ВидД4_50[0]+ВидД4_50[1];
	ВидД5[4] = ВидД5_50[0]+ВидД5_50[1];
	ВидД6[4] = ВидД6_50[0]+ВидД6_50[1];
	Всего[4] = ВидД1[4]+ВидД2[4]+ВидД3[4]+ВидД4[4]+ВидД5[4]+ВидД6[4];
	// строка 060
	ВидД1[5] = ВидД1[3]-ВидД1[4];
	ВидД2[5] = ВидД2[3]-ВидД2[4];
	ВидД3[5] = ВидД3[3]-ВидД3[4];
	ВидД4[5] = ВидД4[3]-ВидД4[4];
	ВидД5[5] = ВидД5[3]-ВидД5[4];
	ВидД6[5] = ВидД6[3]-ВидД6[4];
	Всего[5] = ВидД1[5]+ВидД2[5]+ВидД3[5]+ВидД4[5]+ВидД5[5]+ВидД6[5];
	// строка 0601
	// строка 0602
	ВидД1_60[1] = ВидД1[5]-ВидД1_60[0];
	ВидД2_60[1] = ВидД2[5]-ВидД2_60[0];
	ВидД3_60[1] = ВидД3[5]-ВидД3_60[0];
	ВидД4_60[1] = ВидД4[5]-ВидД4_60[0];
	ВидД5_60[1] = ВидД5[5]-ВидД5_60[0];
	ВидД6_60[1] = ВидД6[5]-ВидД6_60[0];
	Всего_60[1] = ВидД1_60[1]+ВидД2_60[1]+ВидД3_60[1]+ВидД4_60[1]+ВидД5_60[1]+ВидД6_60[1];
	// строка 070
	Для каждого СтрокаТЗ Из ТЗВыручка Цикл
		Если СтрокаТЗ.НомерСтроки = 1 Тогда
			ВидД1[6] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 2 Тогда
			ВидД2[6] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 3 Тогда
			ВидД3[6] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 4 Тогда
			ВидД4[6] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 5 Тогда
			ВидД5[6] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 6 Тогда
			ВидД6[6] = СтрокаТЗ.Ставка;
		КонецЕсли;
	КонецЦикла;
	// строка 080
	// строка 0801
	ВидД1_80[0] = Приложение5_Получить(Истина, "а1_060");
	ВидД2_80[0] = Приложение5_Получить(Истина, "а2_060");
	ВидД3_80[0] = Приложение5_Получить(Истина, "а3_060");
	ВидД4_80[0] = Приложение5_Получить(Истина, "а4_060");
	ВидД5_80[0] = Приложение5_Получить(Истина, "а5_060");
	ВидД6_80[0] = Приложение5_Получить(Истина, "а6_060");
	// строка 0802
	ВидД1_80[1] = ?(ВидД1_80[0]=0, ВидД1[6]-ВидД1[6]*10/100, ВидД1_80[0]-ВидД1_80[0]*10/100);
	ВидД2_80[1] = ?(ВидД2_80[0]=0, ВидД2[6]-ВидД2[6]*10/100, ВидД2_80[0]-ВидД2_80[0]*10/100);
	ВидД3_80[1] = ?(ВидД3_80[0]=0, ВидД3[6]-ВидД3[6]*10/100, ВидД3_80[0]-ВидД3_80[0]*10/100);
	ВидД4_80[1] = ?(ВидД4_80[0]=0, ВидД4[6]-ВидД4[6]*10/100, ВидД4_80[0]-ВидД4_80[0]*10/100);
	ВидД5_80[1] = ?(ВидД5_80[0]=0, ВидД5[6]-ВидД5[6]*10/100, ВидД5_80[0]-ВидД5_80[0]*10/100);
	ВидД6_80[1] = ?(ВидД6_80[0]=0, ВидД6[6]-ВидД6[6]*10/100, ВидД6_80[0]-ВидД6_80[0]*10/100);
	// строка 0901
	ВидД1_90[0] = ВидД1_60[0]*ВидД1_80[1]/100;
	ВидД2_90[0] = ВидД2_60[0]*ВидД2_80[1]/100;
	ВидД3_90[0] = ВидД3_60[0]*ВидД3_80[1]/100;
	ВидД4_90[0] = ВидД4_60[0]*ВидД4_80[1]/100;
	ВидД5_90[0] = ВидД5_60[0]*ВидД5_80[1]/100;
	ВидД6_90[0] = ВидД6_60[0]*ВидД6_80[1]/100;
	Всего_90[0] = ВидД1_90[0]+ВидД2_90[0]+ВидД3_90[0]+ВидД4_90[0]+ВидД5_90[0]+ВидД6_90[0];
	// строка 0902
	ВидД1_90[1] = ?(ВидД1_80[0]=0, ВидД1_60[1]*ВидД1[6]/100, ВидД1_60[1]*ВидД1_80[0]/100);
	ВидД2_90[1] = ?(ВидД2_80[0]=0, ВидД2_60[1]*ВидД2[6]/100, ВидД2_60[1]*ВидД2_80[0]/100);
	ВидД3_90[1] = ?(ВидД3_80[0]=0, ВидД3_60[1]*ВидД3[6]/100, ВидД3_60[1]*ВидД3_80[0]/100);
	ВидД4_90[1] = ?(ВидД4_80[0]=0, ВидД4_60[1]*ВидД4[6]/100, ВидД4_60[1]*ВидД4_80[0]/100);
	ВидД5_90[1] = ?(ВидД5_80[0]=0, ВидД5_60[1]*ВидД5[6]/100, ВидД5_60[1]*ВидД5_80[0]/100);
	ВидД6_90[1] = ?(ВидД6_80[0]=0, ВидД6_60[1]*ВидД6[6]/100, ВидД6_60[1]*ВидД6_80[0]/100);
	Всего_90[1] = ВидД1_90[1]+ВидД2_90[1]+ВидД3_90[1]+ВидД4_90[1]+ВидД5_90[1]+ВидД6_90[1];
	// строка 090
	ВидД1[8] = ВидД1_90[0]+ВидД1_90[1];
	ВидД2[8] = ВидД2_90[0]+ВидД2_90[1];
	ВидД3[8] = ВидД3_90[0]+ВидД3_90[1];
	ВидД4[8] = ВидД4_90[0]+ВидД4_90[1];
	ВидД5[8] = ВидД5_90[0]+ВидД5_90[1];
	ВидД6[8] = ВидД6_90[0]+ВидД6_90[1];
	Всего[8] = ВидД1[8]+ВидД2[8]+ВидД3[8]+ВидД4[8]+ВидД5[8]+ВидД6[8];
	// строка 100
	Всего[9] = НалоговаяОтчетность.РасчетНДС_Получить(Истина, "а050");
	// строка 110
	Всего[10] = Мин(Всего[9], Всего[8]*50/100);
	// строка 120
	Всего[11] = Всего[8] - Всего[10];
	// строка 130
	Всего[12] = ?(Организация.Камолот, Всего[11] - Всего[11]*5/100, Всего[11]);
	
	// Формирование структуры строк
	Строки = Новый Структура;
	// Строки 010...130
	Строки = СтруктураСтрок10("а_" , Всего, Строки);			// Колонка всего
	Строки = СтруктураСтрок10("а1_", ВидД1, Строки);			// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок10("а2_", ВидД2, Строки);			// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок10("а3_", ВидД3, Строки);			// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок10("а4_", ВидД4, Строки);			// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок10("а5_", ВидД5, Строки);			// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок10("а6_", ВидД6, Строки);			// По видам деятельности (Колонка 6)
	// Строка 025
	Строки.Вставить("а_025" , Всего_25[0]);						// Колонка всего
	Строки.Вставить("а1_025", ВидД1_25[0]);						// По видам деятельности (Колонка 1)
	Строки.Вставить("а2_025", ВидД2_25[0]);						// По видам деятельности (Колонка 2)
	Строки.Вставить("а3_025", ВидД3_25[0]);						// По видам деятельности (Колонка 3)
	Строки.Вставить("а4_025", ВидД4_25[0]);						// По видам деятельности (Колонка 4)
	Строки.Вставить("а5_025", ВидД5_25[0]);						// По видам деятельности (Колонка 5)
	Строки.Вставить("а6_025", ВидД6_25[0]);						// По видам деятельности (Колонка 6)
	// Строки 0501...0502
	Строки = СтруктураСтрок1("а_05" , Всего_50, Строки);		// Колонка всего
	Строки = СтруктураСтрок1("а1_05", ВидД1_50, Строки);		// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок1("а2_05", ВидД2_50, Строки);		// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок1("а3_05", ВидД3_50, Строки);		// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок1("а4_05", ВидД4_50, Строки);		// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок1("а5_05", ВидД5_50, Строки);		// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок1("а6_05", ВидД6_50, Строки);		// По видам деятельности (Колонка 6)
	// Строки 0601...0602
	Строки = СтруктураСтрок1("а_06" , Всего_60, Строки);		// Колонка всего
	Строки = СтруктураСтрок1("а1_06", ВидД1_60, Строки);		// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок1("а2_06", ВидД2_60, Строки);		// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок1("а3_06", ВидД3_60, Строки);		// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок1("а4_06", ВидД4_60, Строки);		// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок1("а5_06", ВидД5_60, Строки);		// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок1("а6_06", ВидД6_60, Строки);		// По видам деятельности (Колонка 6)
	// Строки 0801...0802
	Строки = СтруктураСтрок1("а_08" , Всего_80, Строки);		// Колонка всего
	Строки = СтруктураСтрок1("а1_08", ВидД1_80, Строки);		// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок1("а2_08", ВидД2_80, Строки);		// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок1("а3_08", ВидД3_80, Строки);		// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок1("а4_08", ВидД4_80, Строки);		// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок1("а5_08", ВидД5_80, Строки);		// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок1("а6_08", ВидД6_80, Строки);		// По видам деятельности (Колонка 6)
	// Строки 0901...0902
	Строки = СтруктураСтрок1("а_09" , Всего_90, Строки);		// Колонка всего
	Строки = СтруктураСтрок1("а1_09", ВидД1_90, Строки);		// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок1("а2_09", ВидД2_90, Строки);		// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок1("а3_09", ВидД3_90, Строки);		// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок1("а4_09", ВидД4_90, Строки);		// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок1("а5_09", ВидД5_90, Строки);		// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок1("а6_09", ВидД6_90, Строки);		// По видам деятельности (Колонка 6)
	//
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // РасчетЧ1_Получить()

Функция РасчетЧ2_Получить(ПолучитьСтроку = Ложь, Стр = "", ПараметрыРасчета) Экспорт
	
	а_140 = 0;
	а_150 = 0;
	а_160 = 0;
	а_170 = 0;
	а_180 = 0;
	
	//КонецПрошлогоПериода = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, НачалоМесяца(КонецПериода)-1, НачалоКвартала(КонецПериода)-1);
	КонецПрошлогоПериода = ПолучитьПрошлыйПериод(НачалоПериода, КонецПериода);
	а_140 = РасчетЧ1_Получить(Истина, "а_130", НачалоПериода, КонецПрошлогоПериода);
	а_160 = ПараметрыРасчета.а_120 - ПараметрыРасчета.а_130;
	а_170 = ПриложениеП3_Получить(Истина, "а_070");
	а_180 = ПараметрыРасчета.а_130 + а_150 + а_170;
	
	Строки = Новый Структура;
	Строки.Вставить("а_140", а_140);
	Строки.Вставить("а_150", а_150);
	Строки.Вставить("а_160", а_160);
	Строки.Вставить("а_170", а_170);
	Строки.Вставить("а_180", а_180);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // РасчетЧ2_Получить()

Функция Приложение1_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	МСтрок = МассивНулей(18);
	//
	ПС = ПланыСчетов.Хозрасчетный;
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	// Строка 020
	Обороты_9310 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9310"));
	Обороты_9320 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9320"));
	МСтрок[1] = Обороты_9310 + Обороты_9320;
	// Строка 030
	Обороты_9350 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9350"));
	МСтрок[2] = Обороты_9350;
	// Строка 040
	Обороты_9550 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9550"));
	МСтрок[3] = Обороты_9550;
	// Строка 050
	Обороты_9380 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9380"));
	МСтрок[4] = Обороты_9380;
	// Строка 060
	// Строка 070
	Обороты_9340 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9340"));
	МСтрок[6] = Обороты_9340;
	// Строка 080
	Обороты_9360 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9360"));
	МСтрок[7] = Обороты_9360;
	// Строка 090
	// Строка 100
	// Строка 110
	// Строка 120
	// Строка 130
	Обороты_9330 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9330"));
	МСтрок[12] = Обороты_9330;
	// Строка 140
	Обороты_9540 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9540"));
	Обороты_9620 = мБухИтоги.ПолучитьИтог("СуммаОборотДт","Счет", ПС.НайтиПоКоду("9620"));
	МСтрок[13] = Макс(Обороты_9540 - Обороты_9620, 0);
	// Строка 150
	Обороты_9520 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9520"));
	МСтрок[14] = Обороты_9520;
	// Строка 160
	Обороты_9530 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9530"));
	МСтрок[15] = Обороты_9530;
	// Строка 170
	Обороты_9510 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9510"));
	МСтрок[16] = Обороты_9510;
	// Строка 180
	Обороты_9590 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9590"));
	Обороты_9700 = мБухИтоги.ПолучитьИтог("СуммаОборотКт","Счет", ПС.НайтиПоКоду("9700"));
	МСтрок[17] = Обороты_9590 + Обороты_9700;
	// Строка 010
	Сумма = 0;
	Для к=1 По 17 Цикл
		Сумма = Сумма + МСтрок[к];
	КонецЦикла;
	МСтрок[0] = Сумма;
	// Формирование структуры строк
	Строки = СтруктураСтрок10("а", МСтрок, Неопределено);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение1_Получить()

Функция Приложение2_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	МСтрок = МассивНулей(6);
	//
	ПС = ПланыСчетов.Хозрасчетный;
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	// Строка 020
	// Строка 030
	// Строка 040
	// Строка 050
	// Строка 060
	// Строка 010
	Сумма = 0;
	Для к=1 По 5 Цикл
		Сумма = Сумма + МСтрок[к];
	КонецЦикла;
	МСтрок[0] = Сумма;
	// Формирование структуры строк
	Строки = СтруктураСтрок10("а", МСтрок, Неопределено);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение2_Получить()

Функция Приложение3_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	МСтрок   = МассивНулей(5);		// основные строки
	МСтрок20 = МассивНулей(13);		// дополнительные подстроки строки 20
	МСтрок30 = МассивНулей(1);		// дополнительные подстроки строки 30
	//
	ПС = ПланыСчетов.Хозрасчетный;
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	// Строка 0201
	// Строка 0202
	// Строка 0203
	// Строка 0204
	// Строка 0205
	// Строка 0206
	// Строка 0207
	// Строка 0208
	// Строка 0209
	// Строка 0210
	// Строка 0211
	// Строка 0212
	// Строка 0213
	// Строка 020
	Сумма = 0;
	Для к=0 По 12 Цикл
		Сумма = Сумма + МСтрок20[к];
	КонецЦикла;
	МСтрок[1] = Сумма;
	// Строка 0301
	// Строка 030
	МСтрок[2] = МСтрок30[0];
	// Строка 040
	// Строка 050
	к = Квартал(КонецПериода);
	МСтрок[4] = Приложение4_Получить(Истина, "а"+Строка(к)+"_050");
	// Строка 010
	МСтрок[0] = МСтрок[1]+МСтрок[2]+МСтрок[3]+МСтрок[4];
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а"  , МСтрок  , Строки);		// основные строки
	Строки = СтруктураСтрок1 ("а02", МСтрок20, Строки);		// дополнительные подстроки строки 20
	Строки = СтруктураСтрок1 ("а03", МСтрок30, Строки);		// дополнительные подстроки строки 30
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение3_Получить()

Функция Приложение4_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	// Графа "1 квартал"
	М1Строк   = МассивНулей(6);		// основные строки
	М1Строк10 = МассивНулей(5);		// дополнительные подстроки строки 10
	М1Строк20 = МассивНулей(3);		// дополнительные подстроки строки 20
	// Графа "Полугодие"
	М2Строк   = МассивНулей(6);		// основные строки
	М2Строк10 = МассивНулей(5);		// дополнительные подстроки строки 10
	М2Строк20 = МассивНулей(3);		// дополнительные подстроки строки 20
	// Графа "9 месяцев"
	М3Строк   = МассивНулей(6);		// основные строки
	М3Строк10 = МассивНулей(5);		// дополнительные подстроки строки 10
	М3Строк20 = МассивНулей(3);		// дополнительные подстроки строки 20
	// Графа "Год"
	М4Строк   = МассивНулей(6);		// основные строки
	М4Строк10 = МассивНулей(5);		// дополнительные подстроки строки 10
	М4Строк20 = МассивНулей(3);		// дополнительные подстроки строки 20
	//
	ПС = ПланыСчетов.Хозрасчетный;
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	
	
	
	// Формирование структуры строк
	Строки = Новый Структура;
	// Графа "1 квартал"
	Строки = СтруктураСтрок10("а1_"  , М1Строк  , Строки);		// основные строки
	Строки = СтруктураСтрок1 ("а1_01", М1Строк10, Строки);		// дополнительные подстроки строки 10
	Строки = СтруктураСтрок1 ("а1_02", М1Строк20, Строки);		// дополнительные подстроки строки 20
	// Графа "Полугодие"
	Строки = СтруктураСтрок10("а2_"  , М2Строк  , Строки);		// основные строки
	Строки = СтруктураСтрок1 ("а2_01", М2Строк10, Строки);		// дополнительные подстроки строки 10
	Строки = СтруктураСтрок1 ("а2_02", М2Строк20, Строки);		// дополнительные подстроки строки 20
	// Графа "9 месяцев"
	Строки = СтруктураСтрок10("а3_"  , М3Строк  , Строки);		// основные строки
	Строки = СтруктураСтрок1 ("а3_01", М3Строк10, Строки);		// дополнительные подстроки строки 10
	Строки = СтруктураСтрок1 ("а3_02", М3Строк20, Строки);		// дополнительные подстроки строки 20
	// Графа "Год"
	Строки = СтруктураСтрок10("а4_"  , М4Строк  , Строки);		// основные строки
	Строки = СтруктураСтрок1 ("а4_01", М4Строк10, Строки);		// дополнительные подстроки строки 10
	Строки = СтруктураСтрок1 ("а4_02", М4Строк20, Строки);		// дополнительные подстроки строки 20
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение4_Получить()

Функция Приложение5_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	МСтрок   = МассивНулей(6);		// Колонка всего
	М1Строк  = МассивНулей(6);		// По видам деятельности (Колонка 1)
	М2Строк  = МассивНулей(6);		// По видам деятельности (Колонка 2)
	М3Строк  = МассивНулей(6);		// По видам деятельности (Колонка 3)
	М4Строк  = МассивНулей(6);		// По видам деятельности (Колонка 4)
	М5Строк  = МассивНулей(6);		// По видам деятельности (Колонка 5)
	М6Строк  = МассивНулей(6);		// По видам деятельности (Колонка 6)
	//
	ПС = ПланыСчетов.Хозрасчетный;
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать(); 
	Обороты = "ОборотДт, ОборотКт";
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Обороты, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	
	
	
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а_" , МСтрок , Строки);		// Колонка всего
	Строки = СтруктураСтрок10("а1_", М1Строк, Строки);		// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок10("а2_", М2Строк, Строки);		// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок10("а3_", М3Строк, Строки);		// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок10("а4_", М4Строк, Строки);		// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок10("а5_", М5Строк, Строки);		// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок10("а6_", М6Строк, Строки);		// По видам деятельности (Колонка 6)
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение5_Получить()

Функция ПриложениеП2_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	а = МассивНулей(11);		// По месту расположения
	б = МассивНулей(11);		// По месту нахождения земельных участков (арендуемых помещений)
	в = МассивНулей(11);		// Общая площадь земельных участков(арендуемых помещений)
	
	// По месту расположения юридического лица
	СобственныеПомещения  = ЗанимаемыеПомещения(Перечисления.ВидыПомещения.ПоМестуРасположения);
	а[2] = СобственныеПомещения.Итог("Площадь");
	а[3] = СобственныеПомещения.Итог("НеоблагаемаяПлощадь");
	а[4] = СобственныеПомещения.Итог("База");
	а[7] = СобственныеПомещения.Итог("Сумма");
	// По месту нахождения земельных участков (арендуемых помещений)
	АрендованныеПомещения = ЗанимаемыеПомещения(Перечисления.ВидыПомещения.ЗемельныйУчасток);
	б[2] = АрендованныеПомещения.Итог("Площадь");
	б[3] = АрендованныеПомещения.Итог("НеоблагаемаяПлощадь");
	б[4] = АрендованныеПомещения.Итог("База");
	б[7] = АрендованныеПомещения.Итог("Сумма");
	// Общая площадь земельных участков(арендуемых помещений)
	в[2] = а[2] + б[2];
	в[3] = а[3] + б[3];
	в[4] = а[4] + б[4];
	в[7] = а[7] + б[7];
	в[8] = Организация.КоэффициентВидДеятельности;
	в[9] = Организация.КоэффициентМестоРасположения;
	в[10] = 3 * в[7] * в[8] * в[9];
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок1("а", а, Строки);		// По месту расположения
	Строки = СтруктураСтрок1("б", б, Строки);		// По месту нахождения земельных участков (арендуемых помещений)
	Строки = СтруктураСтрок1("в", в, Строки);		// Общая площадь земельных участков(арендуемых помещений)
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // ПриложениеП2_Получить()

Функция ПриложениеП3_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	// Строки 010...070
	Всего = МассивНулей(7);			// Колонка всего
	ВидД1 = МассивНулей(7);			// По видам деятельности (Колонка 1)
	ВидД2 = МассивНулей(7);			// По видам деятельности (Колонка 2)
	ВидД3 = МассивНулей(7);			// По видам деятельности (Колонка 3)
	ВидД4 = МассивНулей(7);			// По видам деятельности (Колонка 4)
	ВидД5 = МассивНулей(7);			// По видам деятельности (Колонка 5)
	ВидД6 = МассивНулей(7);			// По видам деятельности (Колонка 6)
	
	// Строка 010
	//КонецПрошлогоПериода = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, НачалоМесяца(КонецПериода)-1, НачалоКвартала(КонецПериода)-1);
	КонецПрошлогоПериода = ПолучитьПрошлыйПериод(НачалоПериода, КонецПериода);
	Выручка1 = РасчетЧ1_Получить(Истина, "*_040", НачалоПериода, КонецПериода);
	Выручка2 = РасчетЧ1_Получить(Истина, "*_040", НачалоПериода, КонецПрошлогоПериода);
	ВидД1[0] = Выручка1.а1_040 - Выручка2.а1_040;
	ВидД2[0] = Выручка1.а2_040 - Выручка2.а2_040;
	ВидД3[0] = Выручка1.а3_040 - Выручка2.а3_040;
	ВидД4[0] = Выручка1.а4_040 - Выручка2.а4_040;
	ВидД5[0] = Выручка1.а5_040 - Выручка2.а5_040;
	ВидД6[0] = Выручка1.а6_040 - Выручка2.а6_040;
	Всего[0] = ВидД1[0]+ВидД2[0]+ВидД3[0]+ВидД4[0]+ВидД5[0]+ВидД6[0];
	// Строка 020
	ТЗВыручка = БИпоВидамДеятельности(НачалоПериода, КонецПериода);
	Для каждого СтрокаТЗ Из ТЗВыручка Цикл
		Если СтрокаТЗ.НомерСтроки = 1 Тогда
			ВидД1[1] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 2 Тогда
			ВидД2[1] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 3 Тогда
			ВидД3[1] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 4 Тогда
			ВидД4[1] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 5 Тогда
			ВидД5[1] = СтрокаТЗ.Ставка;
		ИначеЕсли СтрокаТЗ.НомерСтроки = 6 Тогда
			ВидД6[1] = СтрокаТЗ.Ставка;
		КонецЕсли;
	КонецЦикла;
	// Строка 030
	ВидД1[2] = ВидД1[0]*ВидД1[1]/100;
	ВидД2[2] = ВидД2[0]*ВидД2[1]/100;
	ВидД3[2] = ВидД3[0]*ВидД3[1]/100;
	ВидД4[2] = ВидД4[0]*ВидД4[1]/100;
	ВидД5[2] = ВидД5[0]*ВидД5[1]/100;
	ВидД6[2] = ВидД6[0]*ВидД6[1]/100;
	Всего[2] = ВидД1[2]+ВидД2[2]+ВидД3[2]+ВидД4[2]+ВидД5[2]+ВидД6[2];
	// Строка 040
	ВидД1[3] = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, 
					ПриложениеП2_Получить(Истина, "в11")/12, ПриложениеП2_Получить(Истина, "в11")/4);
	Всего[3] = ВидД1[3];
	// Строка 050
	ДоначисленЕНП = Всего[3] - Всего[2];
	Всего[4] = ?(ДоначисленЕНП<0, 0, ДоначисленЕНП);
	// Строка 060
	СуммаДоначисленногоЕНП = 0;
	Пока КонецПрошлогоПериода > НачалоПериода Цикл
		СуммаДоначисленногоЕНП = СуммаДоначисленногоЕНП + ДоначислениеЕНП(НачалоПериода, КонецПрошлогоПериода);
		//КонецПрошлогоПериода = ?(Организация.СтатусОрганизации = Перечисления.СтатусОрганизации.КрупноеПредприятие, НачалоМесяца(КонецПрошлогоПериода)-1, НачалоКвартала(КонецПрошлогоПериода)-1);
		КонецПрошлогоПериода = ПолучитьПрошлыйПериод(НачалоПериода, КонецПрошлогоПериода);
	КонецЦикла;
	Всего[5] = СуммаДоначисленногоЕНП;
	// Строка 070
	Всего[6] = Всего[4] + Всего[5];
	// Формирование структуры строк
	Строки = Новый Структура;
	// Строки 010...070
	Строки = СтруктураСтрок10("а_" , Всего, Строки);			// Колонка всего
	Строки = СтруктураСтрок10("а1_", ВидД1, Строки);			// По видам деятельности (Колонка 1)
	Строки = СтруктураСтрок10("а2_", ВидД2, Строки);			// По видам деятельности (Колонка 2)
	Строки = СтруктураСтрок10("а3_", ВидД3, Строки);			// По видам деятельности (Колонка 3)
	Строки = СтруктураСтрок10("а4_", ВидД4, Строки);			// По видам деятельности (Колонка 4)
	Строки = СтруктураСтрок10("а5_", ВидД5, Строки);			// По видам деятельности (Колонка 5)
	Строки = СтруктураСтрок10("а6_", ВидД6, Строки);			// По видам деятельности (Колонка 6)
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // ПриложениеП3_Получить()
