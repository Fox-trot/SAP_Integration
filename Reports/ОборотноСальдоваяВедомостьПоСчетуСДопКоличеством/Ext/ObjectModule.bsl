#Если Клиент Тогда
	
Перем НП Экспорт;

Перем ИмяРегистраБухгалтерии Экспорт;

Перем СписокВсехОрганизаций;

Перем СоответсвиеСчетов;

Перем СоставнойЗапрос;


//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость по счету " + ?(НЕ ЗначениеНеЗаполнено(Счет), Счет, " не выбран счет");	
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	// Если итоги по счету не анализируются, берем общий
	Если Выборка.Счет = NULL Тогда 
		РасшифровываемыйСчет = Счет;
		РасшифровываемыйСчетПредставление = Строка(Счет);
	Иначе
		РасшифровываемыйСчет = Выборка.Счет;
		РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
	КонецЕсли;

	ПараметрыКарточкиСчета = Новый Соответствие;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);

	ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Выборка.Группировка());
			
			Если Измерение <> Неопределено Тогда
				ОтборСубконто.Вставить(Измерение.ПутьКДанным, Выборка[Выборка.Группировка()]);
			Иначе
				ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			КонецЕсли;
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
		
	ИначеЕсли Выборка.Группировка() = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит показатели
//
// Параметры:
//	ДокументРезультат - таблица отчета
//	Макет - используемый макет
//	Результат - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка,ВыборкаГруппировка, ЭтоПерваяСтрока, СтруктураПараметров)

	ВыведеноПоказателей = 0; // количество выведенных показателей
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Если ИмяПоказателя = "ВалютнаяСумма" Тогда
			Если Выборка.Группировка() <> "Валюта" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//Если ЭтоПерваяСтрока = Истина Тогда
		//	Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		//Иначе
		Если Выборка.Группировка() <> "Валюта" Тогда
			Если ИмяПоказателя="Количество" Тогда
				Область = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+"КоличествоЧисла"];
			Иначе	
				Область = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+"Числа"];
			КонецЕсли; 
			
		Иначе	
			Область = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+ИмяСекцииПоГруппировке(ВыборкаГруппировка)+"Числа"];
		КонецЕсли;	
		//КонецЕсли;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
		СальдоНачКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
		СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
		СальдоКонКт = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
		ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];
		
		// Сальдо по счетам нужно привести к традиционному виду, в зависимости от вида выбранного счета:
		// если группировки Счет еще не было, сальдо в выборке рассчитаны как для активно-пассивного счета.
		Если Счет.Вид = ВидСчета.Активный Тогда
			СальдоНачДт = СальдоНачДт - СальдоНачКт;
			СальдоНачКт = 0;
			
			СальдоКонДт = СальдоКонДт - СальдоКонКт;
			СальдоКонКт = 0;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			СальдоНачКт = СальдоНачКт - СальдоНачДт;
			СальдоНачДт = 0;
			
			СальдоКонКт = СальдоКонКт - СальдоКонДт;
			СальдоКонДт = 0;
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(СальдоНачДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СальдоНачКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,    ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,    ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СальдоКонДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СальдоКонКт, ФорматПоказателя);

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;

		Если ЭтоПерваяСтрока = Истина Тогда
			
			Если Счет.Валютный Тогда
				ВыводимаяОбласть = СтруктураПараметров["Валюта"+ИмяСекцииПоГруппировке(ВыборкаГруппировка)+"Начало"];
			Иначе
				Если ИмяПоказателя="Количество" Тогда
					ВыводимаяОбласть = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+"КоличествоНачало"];
				Иначе	
					ВыводимаяОбласть = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+"Начало"];
				КонецЕсли; 
			КонецЕсли; 

			
			Если Выборка.Группировка()<>"Счет" Тогда
				Если ИмяПоказателя = "ВалютнаяСумма" Тогда
					ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валютная сумма";
				ИначеЕсли ИмяПоказателя = "Количество" Тогда
					ВыводимаяОбласть.Параметры.СубконтоПредставление = "Количество";
				Иначе
					ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
				КонецЕсли;
			Иначе
				Если ИмяПоказателя = "Количество" Тогда
					ВыводимаяОбласть.Параметры.СубконтоПредставление = "Количество";
				Иначе
					ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
				КонецЕсли;
			КонецЕсли; 
		
			ВыведеннаяОбласть = ДокументРезультат.Вывести(ВыводимаяОбласть);

			Если ВыведеноПоказателей > 0 Тогда
				ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии; //Область(1,3,1,4)
			КонецЕсли;
			
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ВыведеноПоказателей = ВыведеноПоказателей+1;
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;

КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров, ОтборСубконто)

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "Счет" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров[Выборка.Группировка()+"Начало"];
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто);
			
		//ИначеЕсли Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда
		ИначеЕсли Лев(Выборка.Группировка(), 8) = "Субконто" Тогда
			
			Если Выборка[Выборка.Группировка()]=Null Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийВидСубконто = Неопределено;
			СтруктураПараметров.СтруктураВидовСубконто.Свойство(Лев(Выборка.Группировка(), Найти(Выборка.Группировка()+".",".")), ТекущийВидСубконто);
			
			ВыводимаяОбласть = СтруктураПараметров[ИмяСекцииПоГруппировке(Выборка.Группировка())+"Начало"];
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()+"Представление"];
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто)
			
		Иначе
			
			ВыводимаяОбласть = СтруктураПараметров[Выборка.Группировка()+"Начало"];
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()];
			
		КонецЕсли;
		
		// При выводе субсчетов не делаем отступы
		Если Выборка.Группировка() = "Счет" Тогда
			
			Если СброситьСдвигУровня Тогда
				СброситьСдвигУровня = Ложь;
				СдвигУровня = 0;
			КонецЕсли;
			
			Отступ = 0;
			СдвигУровня = Выборка.Уровень();
			
		Иначе
			
			Отступ = Макс(Выборка.Уровень() - СдвигУровня - 1, 0);
			СброситьСдвигУровня = Истина;
			
		КонецЕсли;
		
		// Не выводим счета более высокого уровня
		Если Выборка.Группировка() = "Счет" Тогда
			Если СоответсвиеСчетов[Выборка.Счет] <> Неопределено Тогда
				Перейти ~М1;
			КонецЕсли;
		КонецЕсли;
		
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		
		ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень() );
		
		ЭтоПерваяСтрока = Ложь;
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии И 
			
			Выборка.Группировка() <> "Счет" Тогда
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			
		КонецЕсли;
		
		ВывестиПоказатели(Выборка,"Счет", ЭтоПерваяСтрока, СтруктураПараметров);
		
		// Если по валютам,
		Если ПоВалютам Тогда
			
			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				ВыводимаяОбласть = СтруктураПараметров["Валюта"+ИмяСекцииПоГруппировке(Выборка.Группировка())+"Начало"];

				
				ВыводимаяОбласть.Параметры.Заполнить(Выборка);
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;
				
				ВыводимаяОбласть.Область("R1C2").Отступ = Отступ+1;
				
				// Заполенние параметров расшифровки
				ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка);
				
				ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
				
				ЭтоПерваяСтрока = Ложь;
				
				ВывестиПоказатели(ВыборкаПоВалютам,Выборка.Группировка(), ЭтоПерваяСтрока, СтруктураПараметров);
				
			КонецЦикла;
		КонецЕсли;


		// Если есть следующая группировка, то выбираем ее
~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			КопияОтборСубконто = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
				
				КопияОтборСубконто.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
			КонецЦикла; 

			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров, КопияОтборСубконто);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьЗапросОтчета()
	
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + ",
	|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт";
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт
		|	";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		
		Текст = Текст + ",
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоСЗНачальныйОстатокДт КАК КоличествоСЗНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоСЗНачальныйОстатокКт КАК КоличествоСЗНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоСЗОборотДт КАК КоличествоСЗОборотДт,
		|	ОстаткиИОбороты.КоличествоСЗОборотКт КАК КоличествоСЗОборотКт,
		|	ОстаткиИОбороты.КоличествоСЗКонечныйОстатокДт КАК КоличествоСЗКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоСЗКонечныйОстатокКт КАК КоличествоСЗКонечныйОстатокКт
		|	";
		
	КонецЕсли;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	СоотТипыИзмерений = Новый Соответствие;
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Иерархия, " ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.ТолькоИерархия, " ТОЛЬКО ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Элементы, "");
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + СоотТипыИзмерений[Измерение.ТипИзмерения];
	
	КонецЦикла;
	
	Сч = 0;
	Для каждого Поле Из ПостроительОтчета.Отбор Цикл
	
		Сч = Сч+1;
		
		Если Поле.Использование Тогда
		
			ТекстОтбор = ТекстОтбор + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(Поле.ВидСравнения, "&Значение"+Сч, Поле.ПутьКДанным, "&ЗначениеС"+Сч, "&ЗначениеПо"+Сч, Поле.Значение, Поле.ЗначениеС, Поле.ЗначениеПо);
			
			Запрос.УстановитьПараметр("Значение"+Сч, Поле.Значение);
			Запрос.УстановитьПараметр("ЗначениеС"+Сч, Поле.ЗначениеС);
			Запрос.УстановитьПараметр("ЗначениеПо"+Сч, Поле.ЗначениеПо);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, Организация В (&СписокОрганизаций) "+ТекстОтбор+") КАК ОстаткиИОбороты
	|";
	//|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Текст = Текст + "
	|ИТОГИ СУММА(СуммаНачальныйОстатокДт), СУММА(СуммаНачальныйОстатокКт), СУММА(СуммаКонечныйОстатокДт), СУММА(СуммаКонечныйОстатокКт), СУММА(СуммаОборотДт), СУММА(СуммаОборотКт) ";
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	СУММА(ВалютнаяСуммаНачальныйОстатокДт), СУММА(ВалютнаяСуммаНачальныйОстатокКт), СУММА(ВалютнаяСуммаОборотДт), СУММА(ВалютнаяСуммаОборотКт), СУММА(ВалютнаяСуммаКонечныйОстатокДт), СУММА(ВалютнаяСуммаКонечныйОстатокКт) ";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
	
		Текст = Текст + ",
		|	СУММА(КоличествоНачальныйОстатокДт), СУММА(КоличествоНачальныйОстатокКт), СУММА(КоличествоОборотДт), СУММА(КоличествоОборотКт), СУММА(КоличествоКонечныйОстатокДт), СУММА(КоличествоКонечныйОстатокКт) ";
	
		Текст = Текст + ",
		|	СУММА(КоличествоСЗНачальныйОстатокДт), СУММА(КоличествоСЗНачальныйОстатокКт), СУММА(КоличествоСЗОборотДт), СУММА(КоличествоСЗОборотКт), СУММА(КоличествоСЗКонечныйОстатокДт), СУММА(КоличествоСЗКонечныйОстатокКт) ";
	КонецЕсли; 
	
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокВсехОрганизаций);
	Иначе
		Запрос.УстановитьПараметр("СписокОрганизаций", Организация);
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	Итоги       = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Начало").Шрифт,,,,Истина);

	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;

	СтруктураВидовСубконто = Новый Структура;
	
	СоотвИзмерений = Новый Соответствие;
	МожноИспользоватьСоставнойЗапрос = Истина; // признак того, что можно использовать составной запрос
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным;
		Если СоотвИзмерений[ПутьКДанным]<>Неопределено Тогда
			Предупреждение("Повторяющееся поле детализации """ + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление +"""!");
			Возврат;
		КонецЕсли;
		СоотвИзмерений.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].ПутьКДанным, 0);
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
		МассивПоказателей.Добавить("КоличествоСЗ");
	КонецЕсли;
	
	
	// Формат показателей
	ФорматПоказателей = Новый Структура;

	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Ресурс = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы.Найти(ИмяПоказателя);
		Если Ресурс <> Неопределено Тогда

			ФорматПоказателей.Вставить(ИмяПоказателя,"ЧЦ = "+Ресурс.Тип.КвалификаторыЧисла.Разрядность
			+" ; ЧДЦ = "+Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);

		Иначе // по умолчанию - сумма
			ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧЦ = 15 ; ЧДЦ = 2");
		КонецЕсли;
	КонецЦикла;
	
	РезультатЗапроса = ВыполнитьЗапросОтчета();

	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Начало");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги|Начало");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Начало");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Начало");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("СтруктураВидовСубконто", СтруктураВидовСубконто);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", ФорматПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);

	СтруктураПараметров.Вставить("СчетНачало", Макет.ПолучитьОбласть("Счет|Начало"));
	СтруктураПараметров.Вставить("СчетКоличествоНачало", Макет.ПолучитьОбласть("СчетКоличество|Начало"));
	СтруктураПараметров.Вставить("ВалютаСчетНачало", Макет.ПолучитьОбласть("ВалютаСчет|Начало"));
	СтруктураПараметров.Вставить("ВалютаНачало", Макет.ПолучитьОбласть("Валюта|Начало"));
	СтруктураПараметров.Вставить("Субконто1Начало", Макет.ПолучитьОбласть("Субконто1|Начало"));
  	СтруктураПараметров.Вставить("Субконто2Начало", Макет.ПолучитьОбласть("Субконто2|Начало"));
	СтруктураПараметров.Вставить("Субконто3Начало", Макет.ПолучитьОбласть("Субконто3|Начало"));
	СтруктураПараметров.Вставить("Субконто4Начало", Макет.ПолучитьОбласть("Субконто4|Начало"));
	СтруктураПараметров.Вставить("ВалютаСубконто1Начало", Макет.ПолучитьОбласть("ВалютаСубконто1|Начало"));
  	СтруктураПараметров.Вставить("ВалютаСубконто2Начало", Макет.ПолучитьОбласть("ВалютаСубконто2|Начало"));
	СтруктураПараметров.Вставить("ВалютаСубконто3Начало", Макет.ПолучитьОбласть("ВалютаСубконто3|Начало"));
	СтруктураПараметров.Вставить("ВалютаСубконто4Начало", Макет.ПолучитьОбласть("ВалютаСубконто4|Начало"));
 	СтруктураПараметров.Вставить("Субконто1КоличествоНачало", Макет.ПолучитьОбласть("Субконто1Количество|Начало"));
  	СтруктураПараметров.Вставить("Субконто2КоличествоНачало", Макет.ПолучитьОбласть("Субконто2Количество|Начало"));
	СтруктураПараметров.Вставить("Субконто3КоличествоНачало", Макет.ПолучитьОбласть("Субконто3Количество|Начало"));
	СтруктураПараметров.Вставить("Субконто4КоличествоНачало", Макет.ПолучитьОбласть("Субконто4Количество|Начало"));
  	СтруктураПараметров.Вставить("Субконто1КоличествоСЗНачало", Макет.ПолучитьОбласть("Субконто1КоличествоСЗ|Начало"));
  	СтруктураПараметров.Вставить("Субконто2КоличествоСЗНачало", Макет.ПолучитьОбласть("Субконто2КоличествоСЗ|Начало"));
	СтруктураПараметров.Вставить("Субконто3КоличествоСЗНачало", Макет.ПолучитьОбласть("Субконто3КоличествоСЗ|Начало"));
	СтруктураПараметров.Вставить("Субконто4КоличествоСЗНачало", Макет.ПолучитьОбласть("Субконто4КоличествоСЗ|Начало"));

	СтруктураПараметров.Вставить("СчетЧисла", Макет.ПолучитьОбласть("Счет|Числа"));
	СтруктураПараметров.Вставить("СчетКоличествоЧисла", Макет.ПолучитьОбласть("СчетКоличество|Числа"));
	СтруктураПараметров.Вставить("ВалютаСчетЧисла", Макет.ПолучитьОбласть("ВалютаСчет|Числа"));
	СтруктураПараметров.Вставить("ВалютаЧисла", Макет.ПолучитьОбласть("Валюта|Числа"));
	СтруктураПараметров.Вставить("Субконто1Числа", Макет.ПолучитьОбласть("Субконто1|Числа"));
  	СтруктураПараметров.Вставить("Субконто2Числа", Макет.ПолучитьОбласть("Субконто2|Числа"));
	СтруктураПараметров.Вставить("Субконто3Числа", Макет.ПолучитьОбласть("Субконто3|Числа"));
	СтруктураПараметров.Вставить("Субконто4Числа", Макет.ПолучитьОбласть("Субконто4|Числа"));
	СтруктураПараметров.Вставить("ВалютаСубконто1Числа", Макет.ПолучитьОбласть("ВалютаСубконто1|Числа"));
  	СтруктураПараметров.Вставить("ВалютаСубконто2Числа", Макет.ПолучитьОбласть("ВалютаСубконто2|Числа"));
	СтруктураПараметров.Вставить("ВалютаСубконто3Числа", Макет.ПолучитьОбласть("ВалютаСубконто3|Числа"));
	СтруктураПараметров.Вставить("ВалютаСубконто4Числа", Макет.ПолучитьОбласть("ВалютаСубконто4|Числа"));
	СтруктураПараметров.Вставить("Субконто1КоличествоЧисла", Макет.ПолучитьОбласть("Субконто1Количество|Числа"));
  	СтруктураПараметров.Вставить("Субконто2КоличествоЧисла", Макет.ПолучитьОбласть("Субконто2Количество|Числа"));
	СтруктураПараметров.Вставить("Субконто3КоличествоЧисла", Макет.ПолучитьОбласть("Субконто3Количество|Числа"));
	СтруктураПараметров.Вставить("Субконто4КоличествоЧисла", Макет.ПолучитьОбласть("Субконто4Количество|Числа"));
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ОтборСубконто = Новый Соответствие;
	Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ОтборСубконто.Вставить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, МассивГруппировок, 
							СдвигУровня, СброситьСдвигУровня, 
							СтруктураПараметров, ОтборСубконто);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	ЭтоПерваяСтрока = Ложь;

	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Если НЕ Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
			Продолжить;
		КонецЕсли;

		//Если ЭтоПерваяСтрока = Истина Тогда
		//	Область = ОбластьИтогиСтрокаЧисла;
		//Иначе
			Область = Макет.ПолучитьОбласть("Итоги|Числа");;
		//КонецЕсли;

		ФорматПоказателя = "";
		ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
		НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
		ОборотДт           = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт           = Выборка[ИмяПоказателя + "ОборотКт"];
		КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
		КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			Если НачальныйОстатокДт = 0 Тогда
				НачальныйОстатокДт = -НачальныйОстатокКт;
				НачальныйОстатокКт = 0;
			КонецЕсли;
			Если КонечныйОстатокДт = 0 Тогда
				КонечныйОстатокДт = -КонечныйОстатокКт;
				КонечныйОстатокКт = 0;
			КонецЕсли;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			Если НачальныйОстатокКт = 0 Тогда
				НачальныйОстатокКт = -НачальныйОстатокДт;
				НачальныйОстатокДт = 0;
			КонецЕсли;
			Если КонечныйОстатокКт = 0 Тогда
				КонечныйОстатокКт = -КонечныйОстатокДт;
				КонечныйОстатокДт = 0;
			КонецЕсли;
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);

		Если ЭтоПерваяСтрока = Истина Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 1);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;

	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету "+ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глТекущийПользователь));
	
КонецПроцедуры // СформироватьОтчет()


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст +	",
	|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт
		|	";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоСЗНачальныйОстатокДт КАК КоличествоСЗНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоСЗНачальныйОстатокКт КАК КоличествоСЗНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоСЗОборотДт КАК КоличествоСЗОборотДт,
		|	ОстаткиИОбороты.КоличествоСЗОборотКт КАК КоличествоСЗОборотКт,
		|	ОстаткиИОбороты.КоличествоСЗКонечныйОстатокДт КАК КоличествоСЗКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоСЗКонечныйОстатокКт КАК КоличествоСЗКонечныйОстатокКт
		|	";
		
	КонецЕсли;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто"+Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто"+Сч+"Представление";
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		ТекстПорядок = ТекстПорядок + ", Субконто"+Сч+".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	//Текст = Текст +	ТекстПоля;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
		
	КонецЕсли;
	
	Текст = Текст +" 
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	//|&МассивСубконто
	|, Организация В (&СписокОрганизаций) "+ТекстОтбор+") КАК ОстаткиИОбороты
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
	
	Текст = Текст + "
	|ИТОГИ СУММА(СуммаНачальныйОстатокДт), СУММА(СуммаНачальныйОстатокКт), СУММА(СуммаКонечныйОстатокДт), СУММА(СуммаКонечныйОстатокКт), СУММА(СуммаОборотДт), СУММА(СуммаОборотКт) ";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	СУММА(ВалютнаяСуммаНачальныйОстатокДт), СУММА(ВалютнаяСуммаНачальныйОстатокКт), СУММА(ВалютнаяСуммаОборотДт), СУММА(ВалютнаяСуммаОборотКт), СУММА(ВалютнаяСуммаКонечныйОстатокДт), СУММА(ВалютнаяСуммаКонечныйОстатокКт) ";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
	
		Текст = Текст +	",
		|	СУММА(КоличествоНачальныйОстатокДт), СУММА(КоличествоНачальныйОстатокКт), СУММА(КоличествоОборотДт), СУММА(КоличествоОборотКт), СУММА(КоличествоКонечныйОстатокДт), СУММА(КоличествоКонечныйОстатокКт) ";
	
		Текст = Текст +	",
		|	СУММА(КоличествоСЗНачальныйОстатокДт), СУММА(КоличествоСЗНачальныйОстатокКт), СУММА(КоличествоСЗОборотДт), СУММА(КоличествоСЗОборотКт), СУММА(КоличествоСЗКонечныйОстатокДт), СУММА(КоличествоСЗКонечныйОстатокКт) ";
	
	КонецЕсли; 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	ПостроительОтчета.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	ПостроительОтчета.Параметры.Вставить("МассивСубконто", МассивСубконто);
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
	
	// Получим список всех организаций
	СписокВсехОрганизаций=Новый Массив;
	ЗапросОрганизации = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации");
	Выборка=ЗапросОрганизации.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВсехОрганизаций.Добавить(Выборка.Ссылка);
	КонецЦикла;
	СписокВсехОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	
	// Определим иерархию счетов
	ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	ЗапросСчета = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовРегистра.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
	|
	|ГДЕ
	|	ПланСчетовРегистра.Ссылка = &Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	ЗапросСчета.УстановитьПараметр("Ссылка", Счет);
	
	ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СоответсвиеСчетов = Новый Соответствие();
	Пока ВыборкаСчета.Следующий() Цикл
		СоответсвиеСчетов.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	Если Счет.Валютный Тогда
	
		ПоВалютам = Истина;
		
	Иначе
		
		ПоВалютам = Ложь;
	
	КонецЕсли; 
	
//	Если Счет.Количественный Тогда
	
		ПоКоличеству = Истина;
	
	//Иначе
	//
	//	ПоКоличеству = Ложь;
	//
	//КонецЕсли;
	
	ПоСубсчетам = Истина;
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ПостроительОтчета.Отбор.Добавить("Субконто"+Сч).Использование = Ложь;
		
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Субконто"+Сч);
		
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетам  = Параметры["ПоСубсчетам"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
			КонецЕсли;
			
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора);
		
	КонецЕсли;

КонецПроцедуры


Функция ИмяСекцииПоГруппировке(ИмяГруппировки)
	
	Если Лев(ИмяГруппировки,8)="Субконто" Тогда
		Возврат Лев(ИмяГруппировки,9);
	Иначе
		Возврат ИмяГруппировки;
	КонецЕсли; 
	
КонецФункции	

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

СоставнойЗапрос = Истина; // Признак того, что запрос будет состоять из двух: 
// внешнего, выбирающего представления субконто и вложенного, ограничивающего типы полей субконто.
// В противном случае запрос не содержит вложенного. Составной запрос выполняется существенно эффективнее, 
// но в случае, если вид субконто имеет большое количество типов (более десятка), может приводить к ошибке MS SQL сервера.

#КонецЕсли