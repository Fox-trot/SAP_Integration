#Если Клиент Тогда

Перем НП Экспорт;
Перем ИмяРегистраБухгалтерии Экспорт;

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит шапку отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и шапки
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");

		Иначе

			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");

		КонецЕсли;

	КонецЕсли;

	Макет = ПолучитьМакет("КарточкаСчета");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрФильтры   = "";

	СтрФильтры = Сред(СтрФильтры + ", " + УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор), 3);

	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрФильтры) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрФильтры;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	Возврат "Карточка счета " + Счет;	
КонецФункции // ЗаголовокОтчета()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Формирует текст отбора запроса
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция СформироватьТекстОтбора(Запрос)
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Значение" + Индекс, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + Индекс, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + Индекс, СтрокаОтбора.ЗначениеПо);
		
		СтрЗначенияФильтры = " " + СтрокаОтбора.Значение; // Строка для заголовка отчета
		
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение"+Индекс, СтрокаОтбора.ПутьКДанным, "&ЗначениеС"+Индекс, "&ЗначениеПо"+Индекс, СтрокаОтбора.Значение, СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
		
	КонецЦикла;
	
	Возврат Сред(ТекстФильтры,2);
	
КонецФункции // СформироватьТекстОтбора()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Проверка на пустые значения
	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		Возврат;
	КонецЕсли;

	// Выберем в соответствие все подчиненные счета (для определения принадлежности выводимого счета деьбета, кредита):
	СоответствиеПодчиненныеСчета = Новый Соответствие();
	
	СоответствиеКэшСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов."+ИмяРегистраБухгалтерии+" КАК ПланСчетов
	|
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (&Счет) ");
	Запрос.УстановитьПараметр("Счет", Счет);
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСчетов.Следующий() Цикл
		СоответствиеПодчиненныеСчета.Вставить(ВыборкаСчетов.Ссылка, ВыборкаСчетов.Ссылка);
	КонецЦикла;

	ДокументРезультат.Очистить();

	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Макет = ПолучитьМакет("КарточкаСчета");

	ДокументРезультат.Область("R1:R4").Видимость = ПоказыватьЗаголовок;

	ЗапросПоОстаткам = Новый Запрос();
	ЗапросПоОстаткам.УстановитьПараметр("СчетАнализа", Счет);
	ЗапросПоОстаткам.УстановитьПараметр("Период",      ?(ЗначениеНеЗаполнено(ДатаНач), (ДатаНач + 1), НачалоДня(ДатаНач)));
	ЗапросПоОстаткам.УстановитьПараметр("Организация", Организация);

	ТекстФильтры = СформироватьТекстОтбора(ЗапросПоОстаткам);

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Выборка.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	СУММА(Выборка.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	СУММА(Выборка.СуммаОстаток)   КАК СуммаОстаток,
	|	СУММА(Выборка.КоличествоОстатокДт) КАК КоличествоОстатокДт,
	|	СУММА(Выборка.КоличествоОстатокКт) КАК КоличествоОстатокКт
	|ИЗ
	|(ВЫБРАТЬ
	|	Счет,
	|	СуммаОстатокДт,
	|	СуммаОстатокКт,
	|	СуммаОстаток,
	|	КоличествоОстатокДт,
	|	КоличествоОстатокКт
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа), ," 
	+ ?(НЕ ЗначениеНеЗаполнено(Организация), "
	|	Организация = &Организация", "") 
	+ ?(НЕ ЗначениеНеЗаполнено(Организация) И ТекстФильтры <> "", " И ", "") + Сред(ТекстФильтры, 3) + ") КАК ОсновнойОстатки "	
	+ "
	|) КАК Выборка";
	
	ЗапросПоОстаткам.Текст = ТекстЗапроса;

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("СчетАнализа", Счет);
	ЗапросПоПроводкам.УстановитьПараметр("НачПериода",  ?(ЗначениеНеЗаполнено(ДатаНач), ДатаНач, НачалоДня(ДатаНач)));
	ЗапросПоПроводкам.УстановитьПараметр("КонПериода",  ?(ЗначениеНеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	ЗапросПоПроводкам.УстановитьПараметр("Организация", Организация);
	ЗапросПоПроводкам.УстановитьПараметр("Дебет",       ВидДвиженияБухгалтерии.Дебет);
	ЗапросПоПроводкам.УстановитьПараметр("Кредит",      ВидДвиженияБухгалтерии.Кредит);
	ЗапросПоПроводкам.УстановитьПараметр("ПустойСчет",  ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка());

	Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Корреспонденция тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетДт,
		|	СчетКт,
		|	СчетДт.Представление КАК СчетДтПредставление,
		|	СчетКт.Представление КАК СчетКтПредставление,
		|	ВалютаДт,
		|	ВалютаКт,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаДт) КАК ВалютаДтПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаКт) КАК ВалютаКтПредставление,
		|	КоличествоДт     КАК КоличествоДт,
		|	КоличествоКт     КАК КоличествоКт,
		|	ВалютнаяСуммаДт  КАК ВалютнаяСуммаДт,
		|	ВалютнаяСуммаКт  КАК ВалютнаяСуммаКт,
		|	ПервичныйДокумент  КАК ПервичныйДокумент,";

		Для Индекс = 1 По Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	СубконтоДт"+ Строка(Индекс) + "," + Символы.ПС + "
			|	ПРЕДСТАВЛЕНИЕ(СубконтоДт"+ Строка(Индекс) + ") КАК СубконтоДт" + Строка(Индекс) + "Представление," + Символы.ПС + 
			"	СубконтоКт"+ Строка(Индекс) + "," + Символы.ПС + " 
			|	ПРЕДСТАВЛЕНИЕ(СубконтоКт"+ Строка(Индекс) + ") КАК СубконтоКт" + Строка(Индекс) + "Представление,";
		КонецЦикла;

	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидДвижения,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетДтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетКтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаДтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаКтПредставление,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоКт,
		|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаКт,";

		Для Индекс = 1 По Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт"+ Строка(Индекс)+"," + Символы.ПС + 
			"	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт"+ Строка(Индекс); 
		КонецЦикла;

	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
		|	Сумма            КАК Сумма,";
		
	Если Не ПустаяСтрока(Период) И Не ВРег(Период) = "ПЕРИОД" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	НАЧАЛОПЕРИОДА(Период, " + Период + ") КАК Период,";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|	ПРЕДСТАВЛЕНИЕ(Регистратор)КАК ПредставлениеОперации,
	|	Регистратор      КАК ДокументОперации,
	|	Период           КАК ДатаОперации,
	|	Содержание       КАК Операция,
	|	НомерЖурнала,
	|	НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Организация) КАК Организация
	|
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто(
	|		&НачПериода,
	|		&КонПериода,
	|		(
	|		 Счет В ИЕРАРХИИ (&СчетАнализа)
	|		)";
	
	ТекстФильтры = СформироватьТекстОтбора(ЗапросПоПроводкам);
	
	Если НЕ ПустаяСтрока(ТекстФильтры) тогда
		ТекстЗапроса  = ТекстЗапроса + "
		|			И (" + Сред(ТекстФильтры, 3) + ")";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	) КАК ОсновнойДвиженияССубконто
	|ГДЕ
	|	Активность = ИСТИНА
	| " + ?(НЕ ЗначениеНеЗаполнено(Организация), "
	|	И Организация = &Организация ", "");
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО Период, Регистратор ";
	
	Если Не ПустаяСтрока(Период) И Не ВРег(Период) = "ПЕРИОД" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ 
			|	СУММА(КоличествоДт), 
			|	СУММА(ВалютнаяСуммаДт), 
			|	СУММА(КоличествоКт), 
			|	СУММА(ВалютнаяСуммаКт), 
			|	СУММА(Сумма) 
			|
			|ПО
			|	Период";
	КонецЕсли;
		
	ЗапросПоПроводкам.Текст = ТекстЗапроса;
	Проводки = ЗапросПоПроводкам.Выполнить().Выбрать();

	ОбластьМакет = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ДокументРезультат.Вывести(ОбластьМакет);

	ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
	Остатки      = ЗапросПоОстаткам.Выполнить().Выбрать();
	Остатки.Следующий();
	ОбластьМакет.Параметры.ОписательСальдо = "Сальдо на начало";

	СуммаОстатокДт = ВЧисло(Остатки.СуммаОстатокДт);
	СуммаОстатокКт = ВЧисло(Остатки.СуммаОстатокКт);
	КоличествоОстатокДт = ВЧисло(Остатки.КоличествоОстатокДт);
	КоличествоОстатокКт = ВЧисло(Остатки.КоличествоОстатокКт);
	
	ТекущееСальдо = СуммаОстатокДт - СуммаОстатокКт;
	ТекущееСальдоКолво = КоличествоОстатокДт - КоличествоОстатокКт;

	Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
		Если СуммаОстатокДт > СуммаОстатокКт Тогда
			ОбластьМакет.Параметры.СуммаСальдоДт   = СуммаОстатокДт - СуммаОстатокКт;
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
		Иначе
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
			ОбластьМакет.Параметры.СуммаСальдоКт   = СуммаОстатокКт - СуммаОстатокДт;
		КонецЕсли;
	Иначе
		ОбластьМакет.Параметры.СуммаСальдоДт   = СуммаОстатокДт;
		ОбластьМакет.Параметры.СуммаСальдоКт   = СуммаОстатокКт;
	КонецЕсли;

	ДокументРезультат.Вывести(ОбластьМакет);

	ОборотДт = 0;
	ОборотКт = 0;
	ИтогоОборотДт   = 0;
	ИтогоОборотКт   = 0;
	ИтогоОборотКолвоДт   = 0;
	ИтогоОборотКолвоКт   = 0;
	ПоследнийПериод = Неопределено;

	Пока Проводки.Следующий() Цикл

		Если Проводки.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			Если ПоследнийПериод = Неопределено Тогда

				ОбластьОборота = Макет.ПолучитьОбласть("Обороты");
				ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + ПериодСтрокой(Проводки.Период);
				ПоследнийПериод = Истина;

			Иначе

				ОбластьОборота.Параметры.ОборотДт = ОборотДт;
				ОбластьОборота.Параметры.ОборотКт = ОборотКт;
				ДокументРезультат.Вывести(ОбластьОборота);
				ОборотДт = 0;
				ОборотКт = 0;
				ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + ПериодСтрокой(Проводки.Период);
				ОбластьОборота.Параметры.Заполнить(Проводки);

			КонецЕсли;

		Иначе

			НачалоСтроки = ДокументРезультат.ВысотаТаблицы + 1;

			// детальные проводки 
			ОбластьМакет = Макет.ПолучитьОбласть("ЗаголовокПроводки");
			ОбластьМакет.Параметры.Заполнить(Проводки);
			ОбластьМакет.Параметры.Операция=сокрлп(Проводки.ПервичныйДокумент+" "+Проводки.Операция);

			Если СоответствиеПодчиненныеСчета[Проводки.СчетДт] <> Неопределено Тогда

				Если СоответствуетОтбору(Проводки, "Дт") Тогда
					
					ОбластьМакет.Параметры.СуммаДт = Проводки.Сумма;
					ОборотДт      = ОборотДт      + Проводки.Сумма;
					ИтогоОборотДт = ИтогоОборотДт + Проводки.Сумма;
					ТекущееСальдо = ТекущееСальдо + Проводки.Сумма;
					
					ИтогоОборотКолвоДт = ИтогоОборотКолвоДт + ВЧисло(Проводки.КоличествоДт);
					ТекущееСальдоКолво = ТекущееСальдоКолво + ВЧисло(Проводки.КоличествоДт);
					
				КонецЕсли;

			КонецЕсли;

			Если СоответствиеПодчиненныеСчета[Проводки.СчетКт] <> Неопределено Тогда

				Если СоответствуетОтбору(Проводки, "Кт") Тогда
					
					ОбластьМакет.Параметры.СуммаКт = Проводки.Сумма;
					ОборотКт      = ОборотКт      + Проводки.Сумма;
					ИтогоОборотКт = ИтогоОборотКт + Проводки.Сумма;
					ТекущееСальдо = ТекущееСальдо - Проводки.Сумма;
					
					ИтогоОборотКолвоКт = ИтогоОборотКолвоКт + ВЧисло(Проводки.КоличествоКт);
					ТекущееСальдоКолво = ТекущееСальдоКолво - ВЧисло(Проводки.КоличествоКт);
					
				КонецЕсли;

			КонецЕсли;

			ОбластьМакет.Параметры.Флаг   = ?(ТекущееСальдо = 0, "",?(ТекущееСальдо < 0,"К","Д"));
			ОбластьМакет.Параметры.Сальдо = ?(ТекущееСальдо > 0, ТекущееСальдо, - ТекущееСальдо);
			ДокументРезультат.Вывести(ОбластьМакет);

			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("ДокументОперации", Проводки.ДокументОперации);
			СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);

			// Вывод Всех субконто операции
			ОбластьМакет = Макет.ПолучитьОбласть("СтрокаПроводки");

			КоличествоСубконтоСчета = СоответствиеКэшСчетов[Проводки.СчетДтПредставление];
			Если КоличествоСубконтоСчета = Неопределено Тогда
				КоличествоСубконтоСчета = Проводки.СчетДт.ВидыСубконто.Количество();
				СоответствиеКэшСчетов[Проводки.СчетДтПредставление] = КоличествоСубконтоСчета;
			КонецЕсли;
			
			Если КоличествоСубконтоСчета > 0 Тогда

				Для Индекс = 0 По КоличествоСубконтоСчета - 1 Цикл

					ОбластьМакет.Параметры.Содержание = ?(ЗначениеНеЗаполнено(Проводки["СубконтоДт" + Строка(Индекс+1)])
						, "<...>"
						, Проводки["СубконтоДт" + Строка(Индекс+1) + "Представление"]);

					ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЦикла;

			КонецЕсли;
			
			КоличествоСубконтоСчета = СоответствиеКэшСчетов[Проводки.СчетКтПредставление];
			Если КоличествоСубконтоСчета = Неопределено Тогда
				КоличествоСубконтоСчета = Проводки.СчетКт.ВидыСубконто.Количество();
				СоответствиеКэшСчетов[Проводки.СчетКтПредставление] = КоличествоСубконтоСчета;
			КонецЕсли;
			
			Если КоличествоСубконтоСчета > 0 Тогда

				Для Индекс = 0 По КоличествоСубконтоСчета - 1 Цикл

					ОбластьМакет.Параметры.Содержание = ?(ЗначениеНеЗаполнено(Проводки["СубконтоКт" + Строка(Индекс+1)])
												, "<...>"
											, Проводки["СубконтоКт" + Строка(Индекс+1) + "Представление"]);
					ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЦикла;

			КонецЕсли;

			Если (Проводки.КоличествоДт <> NULL ) ИЛИ (Проводки.КоличествоКт <> NULL) Тогда

				ОбластьМакет = Макет.ПолучитьОбласть("КоличествоПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);
				ОбластьМакет.Параметры.СальдоКолво = ТекущееСальдоКолво;
				ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
				ДокументРезультат.Вывести(ОбластьМакет);

			КонецЕсли;

			Если (Проводки.ВалютнаяСуммаДт <> NULL ) ИЛИ (Проводки.ВалютнаяСуммаКт <> NULL) Тогда

				ОбластьМакет = Макет.ПолучитьОбласть("ВалютнаяСуммаПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);
				ОбластьМакет.Параметры.ОписательВалюты = "В валюте :";
				ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
				ДокументРезультат.Вывести(ОбластьМакет);

			КонецЕсли;

			КонецСтроки = ДокументРезультат.ВысотаТаблицы;

			Область = ДокументРезультат.Область(НачалоСтроки, 3, КонецСтроки, 3);
			Область.Объединить();
			Область.Текст       = Проводки.ПредставлениеОперации;
			Область.Расшифровка = СтруктураРасшифровки;
			Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Строка;
			Область.РазмещениеТекста         = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(Период) И Не ВРег(Период) = "ПЕРИОД" Тогда
		
		Если Проводки.Количество() > 0 Тогда

			ОбластьОборота.Параметры.ОборотДт = ОборотДт;
			ОбластьОборота.Параметры.ОборотКт = ОборотКт;
			ДокументРезультат.Вывести(ОбластьОборота);

		КонецЕсли;

	КонецЕсли;
	
	Если ИтогоОборотКолвоДт<>0 или ИтогоОборотКолвоКт<>0 Тогда
		// Общий оборот за период
		ОбластьМакет = Макет.ПолучитьОбласть("ОборотыКоличество");
		
		ОбластьМакет.Параметры.ОписательПериода = "Обороты за период";
		ОбластьМакет.Параметры.ОборотДт = ИтогоОборотДт;
		ОбластьМакет.Параметры.ОборотКт = ИтогоОборотКт;
		
		ОбластьМакет.Параметры.ОборотКоличествоДт = ИтогоОборотКолвоДт;
		ОбластьМакет.Параметры.ОборотКоличествоКт = ИтогоОборотКолвоКт;
		
		ДокументРезультат.Вывести(ОбластьМакет);
		
	Иначе
		// Общий оборот за период
		ОбластьМакет = Макет.ПолучитьОбласть("Обороты");
		
		ОбластьМакет.Параметры.ОписательПериода = "Обороты за период";
		ОбластьМакет.Параметры.ОборотДт = ИтогоОборотДт;
		ОбластьМакет.Параметры.ОборотКт = ИтогоОборотКт;
		
		ДокументРезультат.Вывести(ОбластьМакет);
		
	КонецЕсли;

	СчетКоличественный = Счет.Количественный;
	Если СчетКоличественный Тогда
		ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
	Иначе
		ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
	КонецЕсли;

	ЗапросПоОстаткам.УстановитьПараметр("Период", ?(ЗначениеНеЗаполнено(ДатаКон), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
	Остатки      = ЗапросПоОстаткам.Выполнить().Выбрать();
	Остатки.Следующий();
	ОбластьМакет.Параметры.ОписательСальдо = "Сальдо на конец";
	
	СуммаОстатокДт = ВЧисло(Остатки.СуммаОстатокДт);
	СуммаОстатокКт = ВЧисло(Остатки.СуммаОстатокКт);
	КоличествоОстатокДт = ВЧисло(Остатки.КоличествоОстатокДт);
	КоличествоОстатокКт = ВЧисло(Остатки.КоличествоОстатокКт);

	Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
		Если СуммаОстатокДт > СуммаОстатокКт Тогда
			ОбластьМакет.Параметры.СуммаСальдоДт   = СуммаОстатокДт - СуммаОстатокКт;
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
			
			Если СчетКоличественный Тогда
				ОбластьМакет.Параметры.КоличествоСальдоДт   = КоличествоОстатокДт - КоличествоОстатокКт;
				ОбластьМакет.Параметры.КоличествоСальдоКт   = 0;
			КонецЕсли;
		Иначе
			ОбластьМакет.Параметры.СуммаСальдоКт   = 0;
			ОбластьМакет.Параметры.СуммаСальдоКт   = СуммаОстатокКт - СуммаОстатокДт;
			
			Если СчетКоличественный Тогда
				ОбластьМакет.Параметры.КоличествоСальдоДт   = 0;
				ОбластьМакет.Параметры.КоличествоСальдоКт   = КоличествоОстатокКт - КоличествоОстатокДт;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбластьМакет.Параметры.СуммаСальдоДт   = СуммаОстатокДт;
		ОбластьМакет.Параметры.СуммаСальдоКт   = СуммаОстатокКт;
		
		Если СчетКоличественный Тогда
			ОбластьМакет.Параметры.КоличествоСальдоДт   = КоличествоОстатокДт;
			ОбластьМакет.Параметры.КоличествоСальдоКт   = КоличествоОстатокКт;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьМакет);

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка+2,,ВысотаЗаголовка+3,);
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "КарточкаСчета "+ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глТекущийПользователь));
	ДокументРезультат.Автомасштаб=истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Проверка соответствия половины проводки установленным отборам пользователя
//
// Параметры
//  Выборка  – ВыборкаИзРезультатаЗапроса – Выборка из результата запроса
//  Сторона  – Строка                     – Дт/Кт
//
// Возвращаемое значение:
//   Булево   – Соответствует или нет сторона проводки установленным отборам
//
Функция СоответствуетОтбору(Выборка, СторонаПроводки)

	Результат = Истина;
	
	Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
	
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = СтрЗаменить(ЭлементОтбора.ПутьКДанным, "Субконто", "Субконто"+СторонаПроводки);
		Если ВРЕГ(Лев(ЭлементОтбора.ПутьКДанным, 8)) = "СУБКОНТО" Тогда
			ИмяПоля = "Субконто" + СторонаПроводки + Сред(ЭлементОтбора.ПутьКДанным,9);
		КонецЕсли;
		Если ВРЕГ(Лев(ЭлементОтбора.ПутьКДанным, 6)) = "ВАЛЮТА" Тогда
			ИмяПоля = "Валюта" + СторонаПроводки + Сред(ЭлементОтбора.ПутьКДанным,7);
		КонецЕсли;
		
		ИндексТочки = Найти(ИмяПоля, ".");
		Если ИндексТочки <> 0 Тогда
			_ВремЗначение = Выборка[Лев(ИмяПоля,ИндексТочки-1)];
			ЗначениеПоля = Неопределено;
			Выполнить("ЗначениеПоля = _ВремЗначение" + Сред(ИмяПоля,ИндексТочки));
		Иначе
			ЗначениеПоля = Выборка[ИмяПоля];
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
		
			Результат = ЗначениеПоля > ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		
			Результат = ЗначениеПоля >= ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
		
			Результат = ЗначениеПоля.ПринадлежитЭлементу(ЭлементОтбора.Значение);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		
			Результат = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеПоля) <> Неопределено;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		
			ПромРезультат = Ложь;
			
			Для каждого Элемент Из ЭлементОтбора.Значение Цикл
			
				Если ЗначениеПоля.ПринадлежитЭлементу(Элемент.Значение) Тогда
					ПромРезультат = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			Результат = ПромРезультат;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
		
			Результат = (ЗначениеПоля > ЭлементОтбора.ЗначениеС) и (ЗначениеПоля < ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		
			Результат = (ЗначениеПоля >= ЭлементОтбора.ЗначениеС) и (ЗначениеПоля <= ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		
			Результат = (ЗначениеПоля >= ЭлементОтбора.ЗначениеС) и (ЗначениеПоля < ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			Результат = (ЗначениеПоля > ЭлементОтбора.ЗначениеС) и (ЗначениеПоля <= ЭлементОтбора.ЗначениеПо);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
		
			Результат = ЗначениеПоля < ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		
			Результат = ЗначениеПоля <= ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		
			Результат = Не ЗначениеПоля.ПринадлежитЭлементу(ЭлементОтбора.Значение);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		
			Результат = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеПоля) = Неопределено;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
			ПромРезультат = Ложь;
			
			Для каждого Элемент Из ЭлементОтбора.Значение Цикл
			
				Если ЗначениеПоля.ПринадлежитЭлементу(Элемент.Значение) Тогда
					ПромРезультат = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			Результат = Не ПромРезультат;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
			Результат = ЗначениеПоля <> ЭлементОтбора.Значение;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
			
			ШаблонСтроки = ЭлементОтбора.Значение;
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "\%", "[|||]");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%", "");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "[|||]", "%");
			Результат = Найти(Строка(ЗначениеПоля), ШаблонСтроки) = 0;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		
			Результат = (ЗначениеПоля = ЭлементОтбора.Значение);
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
		
			ШаблонСтроки = ЭлементОтбора.Значение;
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "\%", "[|||]");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%", "");
			ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "[|||]", "%");
			Результат = Найти(Строка(ЗначениеПоля), ШаблонСтроки) <> 0;
		
		КонецЕсли;
		
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // СоответствуетОтбору()

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

Функция ВЧисло(Значение)
	
	Если Значение=NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ВЧисло()

// Функция возвращает представление периода строкой
//
// Параметры:
//  ДатаПериода - Дата в интревале опредеяемого периода
//
// Возвращаемое значение:
//  Строковое представление интервала
//
Функция ПериодСтрокой(ДатаПериода)

	ПериодСтр = Период;
	Если      ПериодСтр = "ДЕНЬ" тогда
		ДатаНачала    = НачалоДня(ДатаПериода);
		ДатаОкончания = КонецДня(ДатаПериода);
	ИначеЕсли ПериодСтр = "НЕДЕЛЯ" тогда
		ДатаНачала    = НачалоНедели(ДатаПериода);
		ДатаОкончания = КонецНедели (ДатаПериода);
	ИначеЕсли ПериодСтр = "МЕСЯЦ" тогда
		ДатаНачала    = НачалоМесяца(ДатаПериода);
		ДатаОкончания = КонецМесяца (ДатаПериода);
	ИначеЕсли ПериодСтр = "КВАРТАЛ" тогда
		ДатаНачала    = НачалоКвартала(ДатаПериода);
		ДатаОкончания = КонецКвартала (ДатаПериода);
	ИначеЕсли ПериодСтр = "ГОД" тогда
		ДатаНачала    = НачалоГода(ДатаПериода);
		ДатаОкончания = КонецГода (ДатаПериода);
	КонецЕсли;

	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина")

КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если Не ЗначениеНеЗаполнено(Счет) Тогда
		
		СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);

		// Если есть субсчета, поставим флажок разворота по субсчетам
		ВыборкаПоСчету = ПланыСчетов[ИмяРегистраБухгалтерии].Выбрать(Счет);

		Если ВыборкаПоСчету.Следующий() Тогда
			ПоСубсчетам = Истина;
		КонецЕсли;

		Пока ПостроительОтчета.Отбор.Количество() > 0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла;
		
		ТекстСубконто = "";
		// Если есть субконто, настроим отбор по субконто
		СтруктураСубконто = Новый Структура;
		
		Если Счет.ВидыСубконто.Количество() >0 Тогда

			Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

				СтруктураСубконто.Вставить("Субконто"+ВидСубконто.НомерСтроки, ВидСубконто.ВидСубконто);
				
				ТекстСубконто = ТекстСубконто + ", Субконто" + ВидСубконто.НомерСтроки+".*";

			КонецЦикла;
		КонецЕсли;
		
		ПостроительОтчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто(,,{" + Сред(ТекстСубконто + ", Валюта.*", 3)+"})";
		
		Для каждого Элемент Из СтруктураСубконто Цикл
			
			Поле = ПостроительОтчета.ДоступныеПоля.Найти(Элемент.Ключ);
			Поле.ТипЗначения = Элемент.Значение.ТипЗначения;
			Поле.Представление = Элемент.Значение.Наименование;
			
			Если ПостроительОтчета.Отбор.Найти(Элемент.Ключ) = Неопределено Тогда
				ПостроительОтчета.Отбор.Добавить(Элемент.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОтборПоСчету()

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора);
		
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

#КонецЕсли