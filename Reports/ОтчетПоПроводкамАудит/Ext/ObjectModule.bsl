#Если Клиент Тогда

Перем НП Экспорт;

Перем ИмяРегистраБухгалтерии Экспорт;
Перем МаксКоличествоСубконто Экспорт;

Перем Линия;
Перем ЛинияЖирная;


//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат "Отчет по проводкам";
КонецФункции // ЗаголовокОтчета()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ОписаниеНастроек = ПолучитьОписаниеНастроек();
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.ОписаниеПериода     = ОписаниеПериода;
	ЗаголовокОтчета.Параметры.ОписаниеНастроек    = ОписаниеНастроек;
	ЗаголовокОтчета.Параметры.Заголовок           = ЗаголовокОтчета();
	
	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

// Формирование строки описания корреспонденций для заголовка отчета
Функция ПолучитьОписаниеКорреспондеций() Экспорт

	СтрокаОписания = "";

	Для каждого стр Из Корреспонденции Цикл
		СтрокаКор = ?(стр.СчетДт.Пустая(),"*",Строка(стр.СчетДт));
		СтрокаКор = СтрокаКор+","+?(стр.СчетКт.Пустая(),"*",Строка(стр.СчетКт));
		СтрокаКор = СтрокаКор+?(ПустаяСтрока(стр.ПредставлениеСубконто), "", ", "+стр.ПредставлениеСубконто);
		
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+СтрокаКор;
	КонецЦикла;

	Возврат СтрокаОписания;

КонецФункции // ПолучитьОписаниеКорреспондеций()

// Функция возвращает строку описания настроек отборов
//
// Параметры
//  Нет параметров
//
// Возвращаемое значение:
//   Строка   – Строка описания настроек, выводимая в шапку отчета
//
Функция ПолучитьОписаниеНастроек()
	
	СтрокаОписания = ПолучитьОписаниеКорреспондеций();
	
	Если ПоПодстрокеСодержание Тогда
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+"Содержание содержит '"+Строка(Подстрока)+"'";
	КонецЕсли;
	Если ПоПодстрокеСубконто Тогда
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+"Субконто содержит '"+Строка(Подстрока)+"'";
	КонецЕсли;
	Если ОтборПоВалюте Тогда
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+"Валюта="+Строка(Валюта);
	КонецЕсли;
	Если ПоНомеруЖурнала Тогда
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+"НомерЖурнала="+Строка(НомерЖурнала);
	КонецЕсли;
	Если ПоРегистратору Тогда
		СтрокаОписания = СтрокаОписания+?(ПустаяСтрока(СтрокаОписания),"","; ")+"Регистратор="+Строка(Регистратор);
	КонецЕсли;
	
	СтрокаОписания = ?(ПустаяСтрока(СтрокаОписания),"фильтры не заданы",СтрокаОписания);
	
	Возврат СтрокаОписания;
	
КонецФункции // ПолучитьОписаниеНастроек()


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Формирование текста запроса для выборки проводок
//
// Параметры
//
// Возвращаемое значение:
//   Строка   – Сформированный текст запроса
//
Функция ПолучитьТекстЗапроса()
	ТекстЗапроса = "";
	
	ТекстПолей = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,
	|	Проводки.ВалютаДт,
	|	Проводки.ВалютаКт,
	|	Проводки.Сумма,
	|	Проводки.ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт,
	|	Проводки.КоличествоКт,
	|	Проводки.Содержание,
	|	Проводки.НомерЖурнала,
	|	Проводки.СчетДт,
	|	Проводки.СчетКт";
	
	ТекстОтбора = "Активность = ИСТИНА И Организация = &Организация";
	Если ОтборПоВалюте Тогда
		ТекстОтбора = ТекстОтбора+" И Валюта = &Валюта"
	КонецЕсли;
	Если ПоНомеруЖурнала Тогда
		ТекстОтбора = ТекстОтбора+" И НомерЖурнала = &НомерЖурнала"
	КонецЕсли;
	Если ПоРегистратору Тогда
		ТекстОтбора = ТекстОтбора+" И Регистратор = &Регистратор"
	КонецЕсли;
	
	ТекстСубконто = "";
	
	Для н=1 По МаксКоличествоСубконто Цикл
		ТекстСубконто = ТекстСубконто+","+Символы.ПС+"	Проводки.СубконтоДт"+н+" КАК СубконтоДт"+н;
		ТекстСубконто = ТекстСубконто+","+Символы.ПС+"	Проводки.СубконтоКт"+н+" КАК СубконтоКт"+н;
	КонецЦикла;
	
	Если Корреспонденции.Количество()>0 Тогда
		Для каждого стр Из Корреспонденции Цикл
			НомерСтроки = Корреспонденции.Индекс(стр) + 1;
			
			ТекстОтбораСчетов = "";
			Если Не ЗначениеНеЗаполнено(стр.СчетДт) Тогда
				ТекстОтбораСчетов = ТекстОтбораСчетов+" И СчетДт В ИЕРАРХИИ(&СчетДт"+НомерСтроки+")";
			КонецЕсли;
			Если Не ЗначениеНеЗаполнено(стр.СчетКт) Тогда
				ТекстОтбораСчетов = ТекстОтбораСчетов+" И СчетКт В ИЕРАРХИИ(&СчетКт"+НомерСтроки+")";
			КонецЕсли;
			
			ТекстОтбораСубконто = "";
			Для каждого Элемент Из стр.Субконто Цикл
				
				НомерОтбора = ""+НомерСтроки+"_"+(стр.Субконто.Индекс(Элемент)+1);
				
				ТекстОтбораСубконто = ТекстОтбораСубконто+" И "+УправлениеОтчетами.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, 
																	"&Значение"+НомерОтбора,
																	Элемент.ПутьКДанным,
																	"&ЗначениеС"+НомерОтбора,
																	"&ЗначениеПо"+НомерОтбора, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
				
			КонецЦикла;
			
			ТекстИсточника = "РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто(&ДатаНач, &ДатаКон, "+ТекстОтбора+ТекстОтбораСчетов+ТекстОтбораСубконто+") КАК Проводки";
			
			ТекстПодзапроса = 
			"ВЫБРАТЬ 
			|"+ТекстПолей+ТекстСубконто+"
			|ИЗ
			|	"+ТекстИсточника;
			
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"Проводки","Проводки"+НомерСтроки);
			
			ТекстЗапроса = ТекстЗапроса
			+?(ПустаяСтрока(ТекстЗапроса),"",Символы.ПС+" ОБЪЕДИНИТЬ "+Символы.ПС)
			+ТекстПодзапроса;
		КонецЦикла;
	Иначе
		ТекстИсточника = "РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто(&ДатаНач, &ДатаКон, "+ТекстОтбора+") КАК Проводки";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|"+ТекстПолей+ТекстСубконто+"
		|ИЗ
		|	"+ТекстИсточника;
	КонецЕсли;
	
	// обернем наш запрос еще одним и добавим свойства счетов
	ТекстПолейВнеш = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.Регистратор) КАК РегистраторПредставление,
	|	Проводки.ВалютаДт,
	|	Проводки.ВалютаКт,
	|	Проводки.Сумма,
	|	Проводки.ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт,
	|	Проводки.КоличествоКт,
	|	Проводки.Содержание,
	|	Проводки.НомерЖурнала,
	|	ЕСТЬNULL(СчетаДт.Количественный, Ложь) КАК КоличественныйДт,
	|	ЕСТЬNULL(СчетаКт.Количественный, Ложь) КАК КоличественныйКт,
	|	ЕСТЬNULL(СчетаДт.Валютный, Ложь) КАК ВалютныйДт,
	|	ЕСТЬNULL(СчетаКт.Валютный, Ложь) КАК ВалютныйКт,
	|	ЕСТЬNULL(СчетаДт.КолвоСубконто, 0) КАК КолвоСубконтоДт,
	|	ЕСТЬNULL(СчетаКт.КолвоСубконто, 0) КАК КолвоСубконтоКт,
	|	Проводки.СчетДт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетДт) КАК СчетДтПредставление,
	|	Проводки.СчетКт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетКт) КАК СчетКтПредставление";
	
	ТекстСубконтоВнеш = "";
	
	Для н=1 По МаксКоличествоСубконто Цикл
		ТекстСубконтоВнеш = ТекстСубконтоВнеш+","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоДт"+н+") КАК СубконтоДт"+н;
		ТекстСубконтоВнеш = ТекстСубконтоВнеш+","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоКт"+н+") КАК СубконтоКт"+н;
	КонецЦикла;
	
	ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	
	ТекстВыбораСчетов = 
	"	ВЫБРАТЬ
	|		Счета.Ссылка КАК ССЫЛКА,
	|		Счета.Количественный КАК Количественный,
	|		Счета.Валютный КАК Валютный,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субконто.ВидСубконто) КАК КолвоСубконто
	|	ИЗ
	|		ПланСчетов." + ИмяПланаСчетов + " КАК Счета
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК Субконто
	|			ПО Субконто.Ссылка = Счета.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Счета.Ссылка";
	
	ТекстЗапросаВнеш = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|"+ТекстПолейВнеш+ТекстСубконтоВнеш+"
	|ИЗ
	|	("+ТекстЗапроса+") КАК Проводки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|" + ТекстВыбораСчетов + "
	|) КАК СчетаДт
	|	ПО Проводки.СчетДт = СчетаДт.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|" + ТекстВыбораСчетов + "
	|) КАК СчетаКт
	|	ПО Проводки.СчетКт = СчетаКт.Ссылка
	|";
	
	
	ТекстЗапросаВнеш = ТекстЗапросаВнеш+"
	|Упорядочить По Период, Регистратор";
	
	Возврат ТекстЗапросаВнеш;
КонецФункции // ПолучитьТекстЗапроса()

// Установка значений параметров запроса
//
// Параметры
//  Запрос  – Запрос – Запрос, в котором устанавливаются значения параметров
//
Процедура УстановитьПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("ДатаНач",      ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",      ?(ДатаКон='00010101', ДатаКон, КонецДня(ДатаКон)));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Валюта",       Валюта);
	Запрос.УстановитьПараметр("НомерЖурнала", НомерЖурнала);
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	
	Для каждого стр Из Корреспонденции Цикл
		НомерСтроки = Корреспонденции.Индекс(стр) + 1;
		
		Запрос.УстановитьПараметр("СчетДт"+НомерСтроки, стр.СчетДт);
		Запрос.УстановитьПараметр("СчетКт"+НомерСтроки, стр.СчетКт);
		
		Для каждого Элемент Из стр.Субконто Цикл
			
			НомерОтбора = ""+НомерСтроки+"_"+(стр.Субконто.Индекс(Элемент)+1);
			
			Запрос.УстановитьПараметр("Значение"+НомерОтбора, Элемент.Значение);
			Запрос.УстановитьПараметр("ЗначениеС"+НомерОтбора, Элемент.ЗначениеС);
			Запрос.УстановитьПараметр("ЗначениеПо"+НомерОтбора, Элемент.ЗначениеПо);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверка соответствия строки выборки критериям поиска по подстроке
//
// Параметры
//  Выборка  – ВыборкаИзРезультатаЗапроса – очередная строка выборки
//
// Возвращаемое значение:
//   Булево   – Истина, если строка выборки не содержит подстроку поиска
//
Функция ПропуститьСтроку(Выборка)

	Если ПоПодстрокеСодержание или ПоПодстрокеСубконто Тогда
		// ищем нашу подстроку
		Результат = Истина;
		
		Если ПоПодстрокеСодержание Тогда
			Если БезУчетаРегистра Тогда
				Результат = Найти(НРег(Выборка.Содержание),НРег(Подстрока))=0;
			Иначе
				Результат = Найти(Выборка.Содержание,Подстрока)=0;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат и ПоПодстрокеСубконто Тогда
			Для н=1 По МаксКоличествоСубконто Цикл
				Если БезУчетаРегистра Тогда
					Если Найти(НРег(Выборка["СубконтоДт"+н]),НРег(Подстрока))>0
						или Найти(НРег(Выборка["СубконтоКт"+н]),НРег(Подстрока))>0 Тогда
						
						Результат = Ложь;
						Прервать;
						
					КонецЕсли;
				Иначе
					Если Найти(Выборка["СубконтоДт"+н],Подстрока)>0
						или Найти(Выборка["СубконтоКт"+н],Подстрока)>0 Тогда
						
						Результат = Ложь;
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// поиск по подстроке не указан
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПропуститьСтроку()

Процедура ОбвестиОбласти(ДокументРезультат, НачалоСекции=0)
	
	КонСтр = ДокументРезультат.ВысотаТаблицы;

	//ДокументРезультат.Область(КонСтр,2,КонСтр,4).ГраницаСнизу = Линия;
	//ДокументРезультат.Область(КонСтр,5,КонСтр,8).ГраницаСнизу = ЛинияЖирная;
	//ДокументРезультат.Область(КонСтр,9,КонСтр,12).ГраницаСнизу = Линия;
	
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,2).Объединить();
	ДокументРезультат.Область(НачалоСекции,3,КонСтр,3).Объединить();
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,3).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
КонецПроцедуры

// Формирование отчета
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();

	ТекстЗапроса = ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УстановитьПараметрыЗапроса(Запрос);

	Состояние("Выполнение запроса");
	Результат = Запрос.Выполнить();
	
	ТаблицаПоВалютам=Результат.Выгрузить();
	ТаблицаПоВалютам.Свернуть("ВалютаДт,ВалютаКт","ВалютнаяСуммаДт,ВалютнаяСуммаКт,Сумма");
	ТаблицаПоВалютам.Сортировать("ВалютаДт,ВалютаКт");
	
	Макет = ПолучитьМакет("Макет");

	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ДокументРезультат.Вывести(ОбластьШапки, 1);
	
	ОблСтрока           = Макет.ПолучитьОбласть("Строка");
	//ОблСтрокаСубконто   = Макет.ПолучитьОбласть("СтрокаСубконто");
	//ОблСтрокаКоличество = Макет.ПолучитьОбласть("СтрокаКоличество");
	//ОблСтрокаВалюта     = Макет.ПолучитьОбласть("СтрокаВалюта");
	ОблИтого            = Макет.ПолучитьОбласть("Итого");
	//ОблИтогоВал         = Макет.ПолучитьОбласть("ИтогоВал");
	//ОблСтрокаВал        = Макет.ПолучитьОбласть("СтрокаВал");
	ОблКонецИтогоВал    = Макет.ПолучитьОбласть("КонецИтогоВал");
	
	ЕстьВалюта = Ложь;
	СуммаИтого = 0;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		Если Не ПропуститьСтроку(Выборка) Тогда
			
			Расшифровка = Новый Структура;
			Расшифровка.Вставить("Регистратор", Выборка.Регистратор);
			Расшифровка.Вставить("НомерСтроки", Выборка.НомерСтроки);
			
			ОблСтрока.Параметры.Заполнить(Выборка);
			ОблСтрока.Параметры.СубконтоДт1 = Выборка.СубконтоДт1;
			ОблСтрока.Параметры.СубконтоКт1 = Выборка.СубконтоКт1;
			ОблСтрока.Параметры.Расшифровка = Расшифровка;
			ДокументРезультат.Вывести(ОблСтрока, 1);
			УжеВыведено = 1;
			
			СуммаИтого = СуммаИтого + Выборка.Сумма;
			
			НачалоСекции = ДокументРезультат.ВысотаТаблицы;
			
			КолвоСубконтоДт = ?(Выборка.КолвоСубконтоДт<>NULL, Выборка.КолвоСубконтоДт, 0);
			КолвоСубконтоКт = ?(Выборка.КолвоСубконтоКт<>NULL, Выборка.КолвоСубконтоКт, 0);
			
			КолвоСтрокСубконто = Макс(КолвоСубконтоДт, КолвоСубконтоКт);
			
			ЕстьВалюта = Выборка.ВалютныйДт       или Выборка.ВалютныйКт;
			ЕстьКолво  = Выборка.КоличественныйДт или Выборка.КоличественныйКт;
			
			КолвоСтрокПрочих = 1 + ?(ЕстьВалюта,1,0) + ?(ЕстьКолво,1,0);
			
			ВыводитьСтрокСубконто = КолвоСтрокСубконто - КолвоСтрокПрочих;
			ВсегоСтрок = Макс(КолвоСтрокСубконто, КолвоСтрокПрочих);
			
			Если УжеВыведено<ВсегоСтрок Тогда
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
			КонецЕсли;
			
			Для н=1 По ВыводитьСтрокСубконто Цикл
				
				ОблСтрока.Параметры.Заполнить(Выборка);
				//ОблСтрока.Параметры.СубконтоДт  = Выборка["СубконтоДт"+Строка(1+н)];
				//ОблСтрока.Параметры.СубконтоКт  = Выборка["СубконтоКт"+Строка(1+н)];
				
				ОблСтрока.Параметры.Расшифровка = Расшифровка;
				
				//ДокументРезультат.Вывести(ОблСтрока, 1);
				
				УжеВыведено = УжеВыведено + 1;
				
				Если УжеВыведено<ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьКолво Тогда
				
				ОблСтрока.Параметры.Заполнить(Выборка);
				//ОблСтрока.Параметры.КоличествоДт = Выборка.КоличествоДт;
				//ОблСтрока.Параметры.КоличествоКт = Выборка.КоличествоКт;
				//ОблСтрока.Параметры.СубконтоДт  = Выборка["СубконтоДт"+Строка(УжеВыведено+1)];
				//ОблСтрока.Параметры.СубконтоКт  = Выборка["СубконтоКт"+Строка(УжеВыведено+1)];
				
				ОблСтрока.Параметры.Расшифровка = Расшифровка;
				
				//ДокументРезультат.Вывести(ОблСтрока, 1);
				
				УжеВыведено = УжеВыведено + 1;
				
				Если УжеВыведено<ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьВалюта Тогда
				
				ОблСтрока.Параметры.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
				ОблСтрока.Параметры.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
				
				ОблСтрока.Параметры.ВалютаДт = Выборка.ВалютаДт;
				ОблСтрока.Параметры.ВалютаКт = Выборка.ВалютаКт;
				
				//ОблСтрока.Параметры.СубконтоДт  = Выборка["СубконтоДт"+Строка(УжеВыведено+1)];
				//ОблСтрока.Параметры.СубконтоКт  = Выборка["СубконтоКт"+Строка(УжеВыведено+1)];
				//
				//ОблСтрока.Параметры.Расшифровка = Расшифровка;
				
				
			КонецЕсли;
			//ДокументРезультат.Вывести(ОблСтрока, 1);
			ОбвестиОбласти(ДокументРезультат, НачалоСекции);
		КонецЕсли;
	
	КонецЦикла;

	ОблИтого.Параметры.Сумма = СуммаИтого;
	ДокументРезультат.Вывести(ОблИтого);
	
	
	//Если ЕстьВалюта Тогда
	//	
	//	Область=ОблИтогоВал;
	//	
	//	Для Каждого Строка из ТаблицаПоВалютам Цикл
	//		
	//		Если Строка.ВалютнаяСуммаДт=0 и Строка.ВалютнаяСуммаКт=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Область.Параметры.Заполнить(Строка);
	//		ДокументРезультат.Вывести(Область);
	//		Область=ОблСтрокаВал;
	//		
	//	КонецЦикла;
	//	
	//	ДокументРезультат.Вывести(ОблКонецИтогоВал);
	//	
	//КонецЕсли;	
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;

	// Шапку таблицы печатаем на всех страницах
	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 1,,ВысотаЗаголовка + 2);
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы+1,ДокументРезультат.ШиринаТаблицы);
	
	// Печатать отчет будем ландшафтом
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОтчетПоПроводкам "+ИмяРегистраБухгалтерии;

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глТекущийПользователь));
	
КонецПроцедуры


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирование списка номеров журналов, присутствующих в базе
//
// Параметры
//    Нет
//
// Возвращаемое значение:
//   СписокЗначений   – Список номеров журналов, которые есть в базе
//
Функция ПолучитьСписокНомеровЖурналов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.НомерЖурнала КАК НомерЖурнала
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+" КАК Регистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЖурнала";
	

	СписокНомеровЖурналов = Новый СписокЗначений;
	СписокНомеровЖурналов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерЖурнала"));
	
	Возврат СписокНомеровЖурналов;
	
КонецФункции // ПолучитьСписокНомеровЖурналов()

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Валюта = Параметры["Валюта"];
	Если ЗначениеНеЗаполнено(Валюта) Тогда
		ОтборПоВалюте = Параметры["ОтборПоВалюте"];
	Иначе
		ОтборПоВалюте = Истина;
	КонецЕсли;
	
	Регистратор = Параметры["Регистратор"];
	Если ЗначениеНеЗаполнено(Регистратор) Тогда
		ПоРегистратору = Параметры["ПоРегистратору"];
	Иначе
		ПоРегистратору = Истина;
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	ОтборСубконто = Новый Соответствие;
	ОтборКорСубконто = Новый Соответствие;
	ОтборСубконтоДт = Новый Соответствие;
	ОтборСубконтоКт = Новый Соответствие;
	
	КорСчет = Неопределено;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
	
		Для каждого ЭлементОтбора Из СтрокиОтбора Цикл
			
			Если ВРег(Лев(ЭлементОтбора.Ключ,8)) = "СУБКОНТО" Тогда
				
				Если ВРег(Лев(ЭлементОтбора.Ключ,10)) = "СУБКОНТОДТ" Тогда
					ОтборСубконтоДт.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				ИначеЕсли ВРег(Лев(ЭлементОтбора.Ключ,10)) = "СУБКОНТОКТ" Тогда
					ОтборСубконтоКт.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Иначе
					ОтборСубконто.Вставить(Сред(ЭлементОтбора.Ключ, 9), ЭлементОтбора.Значение);
				КонецЕсли;
				
			ИначеЕсли ВРег(Лев(ЭлементОтбора.Ключ,11)) = "КОРСУБКОНТО" Тогда
				
				ОтборКорСубконто.Вставить(Сред(ЭлементОтбора.Ключ, 12), ЭлементОтбора.Значение);
				
			ИначеЕсли ВРег(ЭлементОтбора.Ключ) = "ВАЛЮТА" и ЗначениеНеЗаполнено(Валюта) Тогда
				
				Валюта = ЭлементОтбора.Значение;
				ОтборПоВалюте = Не ЗначениеНеЗаполнено(Валюта);
				
			ИначеЕсли ВРег(ЭлементОтбора.Ключ) = "КОРСЧЕТ" Тогда
				
				КорСчет = ЭлементОтбора.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СчетДт =  Параметры["СчетДт"];
	СчетКт =  Параметры["СчетКт"];

	Счет    = Параметры["Счет"];
	Если КорСчет = Неопределено Тогда
		КорСчет = Параметры["КорСчет"];
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(СчетДт) или Не ЗначениеНеЗаполнено(СчетКт) Тогда
		стр = Корреспонденции.Добавить();
		
		СоздатьСтрукутруОтбора(стр.Субконто);
		
		// заполним фильтры по дебетовой аналитике
		Если Не ЗначениеНеЗаполнено(СчетДт) Тогда
			стр.СчетДт = СчетДт;
			Для каждого Элемент Из ОтборСубконтоДт Цикл
				
				СтрокаПоискаНомера = Сред(Элемент.Ключ, 11);
				КонецНомера = Найти(СтрокаПоискаНомера, ".");
				НомерСубконто = Число(?(КонецНомера=0, СтрокаПоискаНомера, Лев(СтрокаПоискаНомера, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(СтрокаПоискаНомера,КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = Элемент.Ключ;
				СтрокаАналитики.Представление = "Дт " + Строка(СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
		КонецЕсли;
		
		// заполним фильтры по кредитовой аналитике
		Если Не ЗначениеНеЗаполнено(СчетКт) Тогда
			стр.СчетКт = СчетКт;
			Для каждого Элемент Из ОтборСубконтоКт Цикл
				
				СтрокаПоискаНомера = Сред(Элемент.Ключ, 11);
				КонецНомера = Найти(СтрокаПоискаНомера, ".");
				НомерСубконто = Число(?(КонецНомера=0, СтрокаПоискаНомера, Лев(СтрокаПоискаНомера, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(СтрокаПоискаНомера, КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = Элемент.Ключ;
				СтрокаАналитики.Представление = "Кт " + Строка(СчетКт.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
		КонецЕсли;
		
		стр.ПредставлениеСубконто = ПолучитьПредставлениеОтбора(стр.Субконто);
		
	Иначе
		стр = Корреспонденции.Добавить();
		
			стр.СчетДт = Счет;
			СоздатьСтрукутруОтбора(стр.Субконто);
			
			Для каждого Элемент Из ОтборСубконто Цикл
				
				КонецНомера = Найти(Элемент.Ключ, ".");
				НомерСубконто = Число(?(КонецНомера=0, Элемент.Ключ, Лев(Элемент.Ключ, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(Элемент.Ключ, КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = "СубконтоДт" + Элемент.Ключ;
				Если Не ЗначениеНеЗаполнено(Счет) Тогда
					СтрокаАналитики.Представление = "Дт " + Строка(Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				Иначе
					СтрокаАналитики.Представление = "СубконтоДт" + Элемент.Ключ;
				КонецЕсли;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
			
			Для каждого Элемент Из ОтборКорСубконто Цикл
				
				КонецНомера = Найти(Элемент.Ключ, ".");
				НомерСубконто = Число(?(КонецНомера=0, Элемент.Ключ, Лев(Элемент.Ключ, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(Элемент.Ключ, КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = "СубконтоКт" + Элемент.Ключ;
				Если Не ЗначениеНеЗаполнено(КорСчет) Тогда
					СтрокаАналитики.Представление = "Кт " + Строка(КорСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				Иначе
					СтрокаАналитики.Представление = "СубконтоКт" + Элемент.Ключ;
				КонецЕсли;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
			
			стр.ПредставлениеСубконто = ПолучитьПредставлениеОтбора(стр.Субконто);
			
			стр.СчетКт = КорСчет;
		
		стр = Корреспонденции.Добавить();
		
			стр.СчетКт = Счет;
			СоздатьСтрукутруОтбора(стр.Субконто);
			
			Для каждого Элемент Из ОтборСубконто Цикл
				
				КонецНомера = Найти(Элемент.Ключ, ".");
				НомерСубконто = Число(?(КонецНомера=0, Элемент.Ключ, Лев(Элемент.Ключ, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(Элемент.Ключ, КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = "СубконтоКт" + Элемент.Ключ;
				Если Не ЗначениеНеЗаполнено(Счет) Тогда
					СтрокаАналитики.Представление = "Кт " + Строка(Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				Иначе
					СтрокаАналитики.Представление = "СубконтоКт" + Элемент.Ключ;
				КонецЕсли;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
			
			Для каждого Элемент Из ОтборКорСубконто Цикл
				
				КонецНомера = Найти(Элемент.Ключ, ".");
				НомерСубконто = Число(?(КонецНомера=0, Элемент.Ключ, Лев(Элемент.Ключ, КонецНомера-1)));
				ХвостИмениОтбора = ?(КонецНомера=0, "", Сред(Элемент.Ключ, КонецНомера+1));
				
				СтрокаАналитики = стр.Субконто.Добавить();
				СтрокаАналитики.ПутьКДанным = "СубконтоДт" + Элемент.Ключ;
				Если Не ЗначениеНеЗаполнено(КорСчет) Тогда
					СтрокаАналитики.Представление = "Дт " + Строка(КорСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто) + ХвостИмениОтбора;
				Иначе
					СтрокаАналитики.Представление = "СубконтоДт" + Элемент.Ключ;
				КонецЕсли;
				СтрокаАналитики.Значение = Элемент.Значение;
				СтрокаАналитики.ВидСравнения = ?(ТипЗнч(Элемент.Значение)=Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
				
			КонецЦикла;
			
			стр.ПредставлениеСубконто = ПолучитьПредставлениеОтбора(стр.Субконто);
			
			стр.СчетДт = КорСчет;
			
	КонецЕсли;
	
КонецПроцедуры

// Создание структуры таблицы для хранения данных об отборе по субконто каждой корреспонденции
Процедура СоздатьСтрукутруОтбора(тзОтбора) Экспорт
	
	Если ТипЗнч(тзОтбора) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	тзОтбора.Колонки.Очистить();
	тзОтбора.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	тзОтбора.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	тзОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	тзОтбора.Колонки.Добавить("Значение");
	тзОтбора.Колонки.Добавить("ЗначениеС");
	тзОтбора.Колонки.Добавить("ЗначениеПо");
	
КонецПроцедуры

// Получение строкового представления строки отборов
//
// Параметры
//  тзОтбора  – ТаблицаЗначений, Отбор – Таблица отборов
//
// Возвращаемое значение:
//   Строка   – строковое представление списка отборов
//
Функция ПолучитьПредставлениеОтбора(тзОтбора) Экспорт

	СтрокаОтборов = "";
	
	Если ТипЗнч(тзОтбора) <> Тип("ТаблицаЗначений") и ТипЗнч(тзОтбора) <> Тип("Отбор") Тогда
		Возврат СтрокаОтборов;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из тзОтбора Цикл
		
		СтрокаОтборов = СтрокаОтборов + ", ";
	
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " = "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <> "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если ЗначениеНеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если ЗначениеНеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке по иерархии "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если ЗначениеНеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если ЗначениеНеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке по иерархии "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в иерархии "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", ЭлементОтбора.Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в иерархии "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", ЭлементОтбора.Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " > "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " >= "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " < "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " < " + ЭлементОтбора.Представление + " < "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " <= " + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " <= " + ЭлементОтбора.Представление + " < "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " < " + ЭлементОтбора.Представление + " <= "+ ?(ЗначениеНеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Сред(СтрокаОтборов, 3);

КонецФункции // ПолучитьПредставлениеОтбора()

//////////////////////////////////////////////////////////
// ТЕКСТ МОДУЛЯ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;

МаксКоличествоСубконто = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;

ОписаниеТиповПланСчетов = Новый ОписаниеТипов("ПланСчетовСсылка." + ИмяПланаСчетов);
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(200);

Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
ЛинияЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);

Корреспонденции.Колонки.Добавить("СчетДт",     ОписаниеТиповПланСчетов, "Дебет");
Корреспонденции.Колонки.Добавить("СчетКт",     ОписаниеТиповПланСчетов, "Кредит");
Корреспонденции.Колонки.Добавить("Субконто",   ОписаниеТиповТаблицаЗначений);
Корреспонденции.Колонки.Добавить("ПредставлениеСубконто", ОписаниеТиповСтрока);

#КонецЕсли