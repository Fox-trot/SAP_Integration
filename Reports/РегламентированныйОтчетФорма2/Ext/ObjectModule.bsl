//#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;
Перем мТаблицаСоставПоказателейНалог Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранит дерево значений - структуру листов отчета.
Перем мДеревоСтраницОтчета Экспорт;

// Хранит признак выбора печатных листов.
Перем мЕстьВыбранные Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;
Перем мВыбраннаяФормаНалог Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;
Перем мСкопированаФормаНалог Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;
Перем мСохраненныйДокНалог Экспорт;

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

// поле табличного документа
Перем мФормаОтчета Экспорт;
// переменные для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;
// хранит значение делителя при представлении чисел в назначенной размерности
Перем мДелитель Экспорт;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруНалогов()
	
	СтруктураНалогов = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НалогиИОтчисления.Ссылка,
	|	ВложенныйЗапрос.Ставка,
	|	ВложенныйЗапрос.СчетНачисления,
	|	ВложенныйЗапрос.СчетАванса
	|ИЗ
	|	Справочник.НалогиИОтчисления КАК НалогиИОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НастройкиНалоговИОтчисленийСрезПоследних.НалогиИОтчисления.Ссылка КАК НалогиИОтчисленияСсылка,
	|			НастройкиНалоговИОтчисленийСрезПоследних.Ставка КАК Ставка,
	|			НастройкиНалоговИОтчисленийСрезПоследних.СчетНачисления КАК СчетНачисления,
	|			НастройкиНалоговИОтчисленийСрезПоследних.СчетАванса КАК СчетАванса
	|		ИЗ
	|			РегистрСведений.НастройкиНалоговИОтчислений.СрезПоследних(&Период, Организация = &Организация) КАК НастройкиНалоговИОтчисленийСрезПоследних) КАК ВложенныйЗапрос
	|		ПО НалогиИОтчисления.Ссылка = ВложенныйЗапрос.НалогиИОтчисленияСсылка";
	
	Запрос.УстановитьПараметр("Период", мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураНалога = Новый Структура;
		СтруктураНалога.Вставить("Вид",Выборка.Ссылка);
		СтруктураНалога.Вставить("Ставка",Выборка.Ставка);
		СтруктураНалога.Вставить("СчетНачисления",Выборка.СчетНачисления);
		СтруктураНалога.Вставить("СчетАванса",Выборка.СчетАванса);
		СтруктураНалогов.Вставить(Выборка.Ссылка.Код,СтруктураНалога);
	КонецЦикла;
	
	Возврат СтруктураНалогов;
	
КонецФункции


// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки(ИмяМакетаСоставаПоказателей) Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(ИмяМакетаСоставаПоказателей);
	ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выполняет начальные настройки параметров отчета Расчет Налога.
// По данным макета "СоствПоказателейНалог" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройкиНалог() Экспорт

	МакетСоставаПоказателейНалог = ЭтотОбъект.ПолучитьМакет("СоставПоказателейНалог");

	ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателейНалог.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателейНалог.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателейНалог.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателейНалог.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателейНалог.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателейНалог.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателейНалог.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателейНалог.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателейНалог.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройкиНалог()

// Процедура выполняет заполнение отчета автоматически по данным.
//
Процедура ЗаполнитьАвто(СпП, ЭтаФорма) Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	//СпП.Очистить();

	Показатели=РассчитатьПоказателиЗаПериод(Организация,мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);

	// строка 010 "Чистая выручка от реализации"
	П010001005 = Показатели.а010;
	УстановитьЗначениеПоказателя("П000010001005", П010001005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001005", "Строка 010 ""Чистая выручка от реализации"", графа 5 ""За отчетный период""", "+", "!КО", П010001005, ПланыСчетов.Хозрасчетный.А9000);
	
	// строка 050 "Расходы по реализации"
	П010005006 = Показатели.в050;
	УстановитьЗначениеПоказателя("П000010005006", П010005006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010005006", "Строка 050 ""Расходы по реализации"", графа 6 ""За отчетный период""", "+", "!ДО", П010005006, ПланыСчетов.Хозрасчетный.А9410);
	
	// строка 060 "Административные расходы"
	П010006006 = Показатели.в060;
	УстановитьЗначениеПоказателя("П000010006006", П010006006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006006", "Строка 060 ""Административные расходы"", графа 6 ""За отчетный период""", "+", "!ДО", П010006006, ПланыСчетов.Хозрасчетный.А9420);

	// строка 070 "Прочие операционные расходы"
	П010007006 = Показатели.в070;
	УстановитьЗначениеПоказателя("П000010007006", П010007006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007006", "Строка 070 ""Прочие операционные расходы"", графа 6 ""За отчетный период""", "+", "!ДО", П010007006, ПланыСчетов.Хозрасчетный.А9430);

	// строка 080 
	П010008006 = Показатели.в080;
    УстановитьЗначениеПоказателя("П000010008006", П010008006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009005", "Строка 080 ""Расходы отч. периода исключ. из НОБ в будущем"", графа 5 ""За отчетный период""", "+", "!КО", П010008006, ПланыСчетов.Хозрасчетный.А9440);

	// строка 090 "Прочие доходы от основной деятельности"
	П010009005 = Показатели.а090;
    УстановитьЗначениеПоказателя("П000010009005", П010009005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009005", "Строка 090 ""Прочие доходы от основной деятельности"", графа 5 ""За отчетный период""", "+", "!КО", П010009005, ПланыСчетов.Хозрасчетный.А9300);

	// строка 120 "Доходы в виде дивидендов"
	П010012005 = Показатели.а120;
	УстановитьЗначениеПоказателя("П000010012005", П010012005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012005", "Строка 120 ""Доходы в виде дивидендов"", графа 5 ""За отчетный период""", "+", "!КО", П010012005, ПланыСчетов.Хозрасчетный.А9520);
	
	// строка 130 "Доходы в виде процентов"
	П010013005 = Показатели.а130;
	УстановитьЗначениеПоказателя("П000010013005", П010013005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013005", "Строка 130 ""Доходы в виде процентов"", графа 5 ""За отчетный период""", "+", "!КО", П010013005, ПланыСчетов.Хозрасчетный.А9530);

	// строка 140 "Доходы от долгосрочной аренды"
	П010014005 = Показатели.а140;
	УстановитьЗначениеПоказателя("П000010014005", П010014005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014005", "Строка 140 ""Доходы в виде процентов"", графа 5 ""За отчетный период""", "+", "!КО", П010014005,  ПланыСчетов.Хозрасчетный.А9550);

	// строка 150 "Доходы от валютных курсовых разниц"
	П010015005 = Показатели.а150;
	УстановитьЗначениеПоказателя("П000010015005", П010015005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015005", "Строка 150 ""Доходы от валютных курсовых разниц"", графа 5 ""За отчетный период""", "+", "!КО", П010015005, ПланыСчетов.Хозрасчетный.А9540);
	
	// строка 160 "Прочие доходы от финансовой деятельности" 
	//П010016005 = П010016005_95 - П010012005 - П010013005 - П010014005 - П010015005;
	П010016005 = Показатели.а160;
	УстановитьЗначениеПоказателя("П000010016005", П010016005);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016005", "Строка 160 ""Прочие доходы от финансовой деятельности"", графа 5 ""За отчетный период""", "+", "!КО", П010016005, ПланыСчетов.Хозрасчетный.А9500);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016005", "", "-", "!КО", -П010012005, ПланыСчетов.Хозрасчетный.А9520);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016005", "", "-", "!КО", -П010013005, ПланыСчетов.Хозрасчетный.А9530);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016005", "", "-", "!КО", -П010015005, ПланыСчетов.Хозрасчетный.А9540);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016005", "", "-", "!КО", -П010014005, ПланыСчетов.Хозрасчетный.А9550);

	// строка 180 "Расходы в виде процентов"
	П010018006 = Показатели.в180;
	УстановитьЗначениеПоказателя("П000010018006", П010018006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010018006", "Строка 180 ""Расходы в виде процентов"", графа 6 ""За отчетный период""", "+", "!ДО", П010018006, ПланыСчетов.Хозрасчетный.А9610);
	
	// строка 190 "Расходы в виде процентов по долгосрочной аренде"
	П010019006 = 0;
	УстановитьЗначениеПоказателя("П000010019006", П010019006);
	
	// строка 200 "Убытки от валютных курсовых разниц"
	П010020006 = Показатели.в200;
	УстановитьЗначениеПоказателя("П000010020006", П010020006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020006", "Строка 200 ""Убытки от валютных курсовых разниц"", графа 6 ""За отчетный период""", "+", "!ДО", П010020006, ПланыСчетов.Хозрасчетный.А9620);

	// строка 210 "Прочие расходы по финансовой деятельности"
	//П010021006 = П010021006_96 - П010018006 - П010019006 - П010020006;
	П010021006 = Показатели.в210;
	УстановитьЗначениеПоказателя("П000010021006", П010021006);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "Строка 210 ""Прочие расходы по финансовой деятельности"", графа 6 ""За отчетный период""", "+", "!ДО", П010021006, ПланыСчетов.Хозрасчетный.А9600);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "", "-", "!КО", -П010018006, ПланыСчетов.Хозрасчетный.А9610);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "", "-", "!КО", -П010019006, 0);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021006", "", "-", "!КО", -П010020006, ПланыСчетов.Хозрасчетный.А9620);

	// строка 230 "Черезвычайные прибыли и убытки"
	П010023005 = Показатели.а230;
	УстановитьЗначениеПоказателя("П000010023005", П010023005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023005", "Строка 230 ""Черезвычайные прибыли и убытки"", графа 5 ""За отчетный период""", "+", "!КО", П010023005, ПланыСчетов.Хозрасчетный.А9710);
	
	П010023006 = Показатели.в230;
	УстановитьЗначениеПоказателя("П000010023006", П010023006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023006", "Строка 230 ""Черезвычайные прибыли и убытки"", графа 6 ""За отчетный период""", "+", "!ДО", П010023006, ПланыСчетов.Хозрасчетный.А9720);
	
	// строка 020 "Себестоимость"
	
	П010002006 = Показатели.в020;
	УстановитьЗначениеПоказателя("П000010002006", П010002006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002006", "Строка 020 ""Себестоимость"", графа 6 ""За отчетный период""", "+", "!ОБ", П010002006, ПланыСчетов.Хозрасчетный.А9100);
	
	// строка 250 Налог на доходы (прибыль)
	П010025006 = Показатели.в250;
	УстановитьЗначениеПоказателя("П000010025006", П010025006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025006", "Строка 250 ""Налог на доходы (прибыль)"", графа 6 ""За отчетный период""", "+", "!ОБ", П010025006, ПланыСчетов.Хозрасчетный.А9800);
	
	// строка 260 Прочие налоги и сборы от прибыли
	П010026006 = Показатели.в260;
	УстановитьЗначениеПоказателя("П000010026006", П010026006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026006", "Строка 260 ""Прочие налоги и сборы от прибыли"", графа 6 ""За отчетный период""", "+", "!ОБ", П010026006, ПланыСчетов.Хозрасчетный.А9820);
	
	//ПРЕДЫДУЩИЙ ПЕРИОД
	
	ДатаНачалаПредыдущегоПериода = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПредыдущегоПериода = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	
	Показатели=РассчитатьПоказателиЗаПериод(Организация,ДатаНачалаПредыдущегоПериода, ДатаКонцаПредыдущегоПериода);
	
	П010001003 = Показатели.а010;
	УстановитьЗначениеПоказателя("П000010001003", П010001003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010001003", "Строка 010 ""Чистая выручка от реализации"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010001003, ПланыСчетов.Хозрасчетный.А9000);
	
	// строка 050 "Расходы по реализации"
	П010005004 = Показатели.в050;
	УстановитьЗначениеПоказателя("П000010005004", П010005004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010005004", "Строка 050 ""Расходы по реализации"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010005004, ПланыСчетов.Хозрасчетный.А9410);
	
	// строка 060 "Административные расходы"
	П010006004 = Показатели.в060;
	УстановитьЗначениеПоказателя("П000010006004", П010006004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010006004", "Строка 060 ""Административные расходы"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010006004, ПланыСчетов.Хозрасчетный.А9420);

	// строка 070 "Прочие операционные расходы"
	П010007004 = Показатели.в070;
	УстановитьЗначениеПоказателя("П000010007004", П010007004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010007004", "Строка 070 ""Прочие операционные расходы"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010007004, ПланыСчетов.Хозрасчетный.А9430);

	// строка 080 
	
	П010008004 = Показатели.в080;
	УстановитьЗначениеПоказателя("П000010008004", П010008004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010008004", "Строка 080 ""Расходы отч. периода исключ. из НОБ в будущем"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010008004, ПланыСчетов.Хозрасчетный.А9440);
	
	// строка 090 "Прочие доходы от основной деятельности"
	П010009003 = Показатели.а090;
    УстановитьЗначениеПоказателя("П000010009003", П010009003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010009003", "Строка 090 ""Прочие доходы от основной деятельности"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010009003, ПланыСчетов.Хозрасчетный.А9300);

	// строка 120 "Доходы в виде дивидендов"
	П010012003 = Показатели.а120;
	УстановитьЗначениеПоказателя("П000010012003", П010012003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010012003", "Строка 120 ""Доходы в виде дивидендов"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010012003, ПланыСчетов.Хозрасчетный.А9520);
	
	// строка 130 "Доходы в виде процентов"
	П010013003 = Показатели.а130;
	УстановитьЗначениеПоказателя("П000010013003", П010013003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010013003", "Строка 130 ""Доходы в виде процентов"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010013003, ПланыСчетов.Хозрасчетный.А9530);

	// строка 140 "Доходы от долгосрочной аренды"
	П010014003 = Показатели.а140;
	УстановитьЗначениеПоказателя("П000010014003", П010014003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010014003", "Строка 140 ""Доходы в виде процентов"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010014003,  ПланыСчетов.Хозрасчетный.А9550);

	// строка 150 "Доходы от валютных курсовых разниц"
	П010015003 = Показатели.а150;
	УстановитьЗначениеПоказателя("П000010015003", П010015003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010015003", "Строка 150 ""Доходы от валютных курсовых разниц"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010015003, ПланыСчетов.Хозрасчетный.А9540);
	
	// строка 160 "Прочие доходы от финансовой деятельности" 
	//П010016003 = П010016003_95 - П010012003 - П010013003 - П010014003 - П010015003;
	П010016003 = Показатели.а160;
	УстановитьЗначениеПоказателя("П000010016003", П010016003);

	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003", "Строка 160 ""Прочие доходы от финансовой деятельности"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010016003, ПланыСчетов.Хозрасчетный.А9500);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003", "", "-", "!КО", -П010012003, ПланыСчетов.Хозрасчетный.А9520);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003", "", "-", "!КО", -П010013003, ПланыСчетов.Хозрасчетный.А9530);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003", "", "-", "!КО", -П010015003, ПланыСчетов.Хозрасчетный.А9540);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010016003", "", "-", "!КО", -П010014003, ПланыСчетов.Хозрасчетный.А9550);

	// строка 180 "Расходы в виде процентов"
	П010018004 = Показатели.в180;
	УстановитьЗначениеПоказателя("П000010018004", П010018004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010018004", "Строка 180 ""Расходы в виде процентов"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010018004, ПланыСчетов.Хозрасчетный.А9610);
	
	// строка 190 "Расходы в виде процентов по долгосрочной аренде"
	П010019004 = 0;
	УстановитьЗначениеПоказателя("П000010019004", П010019004);
	
	// строка 200 "Убытки от валютных курсовых разниц"
	П010020004 = Показатели.в200;
	УстановитьЗначениеПоказателя("П000010020004", П010020004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010020004", "Строка 200 ""Убытки от валютных курсовых разниц"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010020004, ПланыСчетов.Хозрасчетный.А9620);

	// строка 210 "Прочие расходы по финансовой деятельности"
	//П010021004 = П010021004_96 - П010018004 - П010019004 - П010020004;
	П010021004 = Показатели.в210;
	УстановитьЗначениеПоказателя("П000010021004", П010021004);
	
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "Строка 210 ""Прочие расходы по финансовой деятельности"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010021004, ПланыСчетов.Хозрасчетный.А9600);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "", "-", "!КО", -П010018004, ПланыСчетов.Хозрасчетный.А9610);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "", "-", "!КО", -П010019004, 0);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010021004", "", "-", "!КО", -П010020004, ПланыСчетов.Хозрасчетный.А9620);

	// строка 230 "Черезвычайные прибыли и убытки"
	П010023003 = Показатели.а230;
	УстановитьЗначениеПоказателя("П000010023003", П010023003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023003", "Строка 230 ""Черезвычайные прибыли и убытки"", графа 3 ""За соответствующий период прошлого года""", "+", "!КО", П010023003, ПланыСчетов.Хозрасчетный.А9710);
	
	П010023004 = Показатели.в230;
	УстановитьЗначениеПоказателя("П000010023004", П010023004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010023004", "Строка 230 ""Черезвычайные прибыли и убытки"", графа 4 ""За соответствующий период прошлого года""", "+", "!ДО", П010023004, ПланыСчетов.Хозрасчетный.А9720);
	
	// строка 020 "Себестоимость"
	
	П010002004 = Показатели.в020;
	УстановитьЗначениеПоказателя("П000010002004", П010002004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010002004", "Строка 020 ""Себестоимость"", графа 4 ""За соответствующий период прошлого года""", "+", "!ОБ", П010002004, ПланыСчетов.Хозрасчетный.А9100);
	
	// строка 250 Налог на доходы (прибыль)
	П010025004 = Показатели.в250;
	УстановитьЗначениеПоказателя("П000010025004", П010025004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010025004", "Строка 250 ""Налог на доходы (прибыль)"", графа 4 ""За соответствующий период прошлого года""", "+", "!ОБ", П010025004, ПланыСчетов.Хозрасчетный.А9800);
	
	// строка 260 Прочие налоги и сборы от прибыли
	П010026004 = Показатели.в260;
	УстановитьЗначениеПоказателя("П000010026004", П010026004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П000010026004", "Строка 260 ""Прочие налоги и сборы от прибыли"", графа 4 ""За соответствующий период прошлого года""", "+", "!ОБ", П010026004, ПланыСчетов.Хозрасчетный.А9820);
	
	
	// СПРАВКА О ПЛАТЕЖАХ В БЮДЖЕТ
	//
	// строка 280 с юридических лиц
	П010028003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НП,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010028003", П010028003);
	
	П010028004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НП,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010028004", П010028004);
	
	// строка 290 с физических лиц
	П010029003 = НалоговаяОтчетность.ОборотыМеждуСчетами(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "6700", Справочники.ПлатежиВБюджет.ПодоходныйНалог.СчетУчета.Код);
	УстановитьЗначениеПоказателя("П000010029003", П010029003);
	
	П010029004 = НалоговаяОтчетность.ОборотыМеждуСчетами(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Справочники.ПлатежиВБюджет.ПодоходныйНалог.СчетУчета.Код, "5100")
	            +НалоговаяОтчетность.ОборотыМеждуСчетами(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Справочники.ПлатежиВБюджет.ПодоходныйНалог.СчетУчетаАванса.Код, "5100");
	УстановитьЗначениеПоказателя("П000010029004", П010029004);
	
	
	// строка 291 ИНПС с физических лиц
	П000010029103 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ИНПС,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010029103", П000010029103);
	
	П000010029104 = НалоговаяОтчетность.ОборотыМеждуСчетами(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Справочники.ПлатежиВБюджет.ИНПС.СчетУчета.Код, "5100")
	               +НалоговаяОтчетность.ОборотыМеждуСчетами(Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Справочники.ПлатежиВБюджет.ИНПС.СчетУчетаАванса.Код, "5100");
	УстановитьЗначениеПоказателя("П000010029104", П000010029104);
	
	// строка 300 инфраструктура
	П000010030003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НСИС,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010030003", П000010030003);
	
	П000010030004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НСИС,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010030004", П000010030004);
	
	// строка 310 НДС
	П000010031003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НДС,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010031003", П000010031003);
	
	П000010031004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НДС,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010031004", П000010031004);
	
	// строка 320 Акциз
	П000010032003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.АкцизныйНалог,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010032003", П000010032003);
	
	П000010032004 =НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.АкцизныйНалог,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010032004", П000010032004);
	
	// строка 330 недра
	П000010033003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.Недра,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010033003", П000010033003);
	
	П000010033004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.Недра,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010033004", П000010033004);
	
	// строка 340 вода
	П000010034003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалВода,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010034003", П000010034003);
	
	П000010034004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалВода,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010034004", П000010034004);
	
	// строка 350 имущество
	П000010035003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалИм,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010035003", П000010035003);
	
	П000010035004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалИм,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010035004", П000010035004);
	
	//строка 360 Земельный налог с юридических лиц
	П000010036003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалЗемля,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010036003", П000010036003);
	
	П000010036004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалЗемля,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010036004", П000010036004);
	
	// строка 370 единый налоговый платеж
	П000010037003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ЕНП,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010037003", П000010037003);
	
	П000010037004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ЕНП,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010037004", П000010037004);
	
	// строка 380 единый земельный платеж
	П000010038003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалЗемля,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010038003", П000010038003);
	
	П000010038004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалЗемля,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010038004", П000010038004);
	
	// строка 390 фиксированый
	П000010039003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалФикс,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010039003", П000010039003);
	
	П000010039004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.НалФикс,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010039004", П000010039004);
	
	// строка 410 дорожный
	П000010041003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ДорФонд,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010041003", П000010041003);
	
	П000010041004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ДорФонд,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010041004", П000010041004);
	
	// строка 420 п/ф от товарооборота
	П000010042003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ПФотВД,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010042003", П000010042003);
	
	П000010042004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ПФотВД,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010042004", П000010042004);
	
	// строка 430 школный
	П000010043003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ШН,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010043003", П000010043003);
	
	П000010043004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ШН,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010043004", П000010043004);
	
	// строка 440 Единый социальный платеж
	П000010044003 = НалоговаяОтчетность.НачисленоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ЕСН,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010044003", П000010044003);
	
	П000010044004 = НалоговаяОтчетность.ОплаченоПоНалогу(Организация,Справочники.ПлатежиВБюджет.ЕСН,мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П000010044004", П000010044004);
	
	Расчет();
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

//// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
//// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
//// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
////
//// Параметры:
////  Счет         - значение типа ПланСчетов - счет, для которого требуется
////                 получить итог.
////
//// Возвращаемое значение:
////  Число        - конечный остаток по дебету счета, указанного в параметре.
////
//Функция СКД(Счет)

//	Перем Итог;

//	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

//	Возврат Итог;

//КонецФункции // СКД()

//Функция ДО(Счет)

//	Перем Итог;

//	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

//	Возврат Итог;

//КонецФункции // ДО()

//Функция КО(Счет)

//	Перем Итог;

//	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

//	Возврат Итог;

//КонецФункции // КО()

//// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
//// первого параметра функции, с кредита счета, указанного в качестве второго 
//// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
//// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
////
//// Параметры:
////  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
////                 оборот в дебет счета;
////  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
////                 оборот с кредита счета.
////
//// Возвращаемое значение:
////  Число        - сумма перекрестного оборота.
////
//Функция ОБ(СчетД, СчетК)

//	Перем Итог;

//	Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

//	Возврат Итог;

//КонецФункции // ОБ()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь) Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет() Экспорт

	// строка 030 "Валовая прибыль"
	П030п = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001003.Значение)
		  - ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010002004.Значение);
				
	Если П030п > 0 Тогда
		мФормаОтчета.Области.П000010003003.Значение	= П030п;
		мФормаОтчета.Области.П000010003004.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010003003.Значение	= 0;
		мФормаОтчета.Области.П000010003004.Значение	= -П030п;
	КонецЕсли;
	
	П030т = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010001005.Значение)
		  - ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010002006.Значение);
				
	Если П030т > 0 Тогда
		мФормаОтчета.Области.П000010003005.Значение	= П030т;
		мФормаОтчета.Области.П000010003006.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010003005.Значение	= 0;
		мФормаОтчета.Области.П000010003006.Значение	= -П030т;
	КонецЕсли;

	// строка 040 "Прибыль (убыток) от продаж"
	мФормаОтчета.Области.П000010004004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010005004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010006004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010007004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010008004.Значение);
	
	мФормаОтчета.Области.П000010004006.Значение = мФормаОтчета.Области.П000010005006.Значение
												+ мФормаОтчета.Области.П000010006006.Значение
												+ мФормаОтчета.Области.П000010007006.Значение
												+ мФормаОтчета.Области.П000010008006.Значение;

	// строка 100 "Прибыль (убыток) от основной деятельности"
	П100п = П030п - мФормаОтчета.Области.П000010004004.Значение + мФормаОтчета.Области.П000010009003.Значение;
	
	Если П100п > 0 Тогда
		мФормаОтчета.Области.П000010010003.Значение	= П100п;
		мФормаОтчета.Области.П000010010004.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010010003.Значение	= 0;
		мФормаОтчета.Области.П000010010004.Значение	= -П100п;
	КонецЕсли;
	
	П100т = П030т - мФормаОтчета.Области.П000010004006.Значение + мФормаОтчета.Области.П000010009005.Значение;
	
	Если П100т > 0 Тогда
		мФормаОтчета.Области.П000010010005.Значение	= П100т;
		мФормаОтчета.Области.П000010010006.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010010005.Значение	= 0;
		мФормаОтчета.Области.П000010010006.Значение	= -П100т;
	КонецЕсли;
	
	// строка 110 "Доходы от финансовой деятельности"
	мФормаОтчета.Области.П000010011003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010015003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010016003.Значение);
	
	мФормаОтчета.Области.П000010011005.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010012005.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010013005.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010014005.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010015005.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010016005.Значение);
	
	// строка 170 "Расходы от финансовой деятельности"
	мФормаОтчета.Области.П000010017004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010018004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010019004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010020004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010021004.Значение);
	
	мФормаОтчета.Области.П000010017006.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010018006.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010019006.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010020006.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010021006.Значение);
												
	// строка 220 "Прибыль (убыток) от общехозяйственной деятельности"
	П220п = П100п + мФормаОтчета.Области.П000010011003.Значение - мФормаОтчета.Области.П000010017004.Значение;
	
	Если П220п > 0 Тогда
		мФормаОтчета.Области.П000010022003.Значение	= П220п;
		мФормаОтчета.Области.П000010022004.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010022003.Значение	= 0;
		мФормаОтчета.Области.П000010022004.Значение	= -П220п;
	КонецЕсли;
	
	П220т = П100т + мФормаОтчета.Области.П000010011005.Значение - мФормаОтчета.Области.П000010017006.Значение;
	
	Если П220т > 0 Тогда
		мФормаОтчета.Области.П000010022005.Значение	= П220т;
		мФормаОтчета.Области.П000010022006.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010022005.Значение	= 0;
		мФормаОтчета.Области.П000010022006.Значение	= -П220т;
	КонецЕсли;
	
	// строка 240 "Прибыль (убыток) до уплаты налога на доходы"
	П240п = П220п + мФормаОтчета.Области.П000010023003.Значение - мФормаОтчета.Области.П000010023004.Значение;
	
	Если П240п > 0 Тогда
		мФормаОтчета.Области.П000010024003.Значение	= П240п;
		мФормаОтчета.Области.П000010024004.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010024003.Значение	= 0;
		мФормаОтчета.Области.П000010024004.Значение	= -П240п;
	КонецЕсли;
	
	П240т = П220т + мФормаОтчета.Области.П000010023005.Значение - мФормаОтчета.Области.П000010023006.Значение;
	
	Если П240т > 0 Тогда
		мФормаОтчета.Области.П000010024005.Значение	= П240т;
		мФормаОтчета.Области.П000010024006.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010024005.Значение	= 0;
		мФормаОтчета.Области.П000010024006.Значение	= -П240т;
	КонецЕсли;
	
	// строка 270 "Чистая прибыль (убыток) отчетного периода"
	П270п = П240п - мФормаОтчета.Области.П000010025004.Значение - мФормаОтчета.Области.П000010026004.Значение;
	
	Если П270п > 0 Тогда
		мФормаОтчета.Области.П000010027003.Значение	= П270п;
		мФормаОтчета.Области.П000010027004.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010027003.Значение	= 0;
		мФормаОтчета.Области.П000010027004.Значение	= -П270п;
	КонецЕсли;
	
	П270т = П240т - мФормаОтчета.Области.П000010025006.Значение - мФормаОтчета.Области.П000010026006.Значение;
	
	Если П270т > 0 Тогда
		мФормаОтчета.Области.П000010027005.Значение	= П270т;
		мФормаОтчета.Области.П000010027006.Значение	= 0;
	Иначе
		мФормаОтчета.Области.П000010027005.Значение	= 0;
		мФормаОтчета.Области.П000010027006.Значение	= -П270т;
	КонецЕсли;
	
	// строка 280 "Налог на доходы (прибыль)"
	//мФормаОтчета.Области.П000010028003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010028003.Значение)
	//											+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010029003.Значение);
	//											
	//мФормаОтчета.Области.П000010028004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010028004.Значение)
	//											+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010029004.Значение);
	
	// строка 450 "Всего сумма платежей в бюджет"
	мФормаОтчета.Области.П000010048003.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010028003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010029003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010030003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010031003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010032003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010033003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010034003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010035003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010036003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010037003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010038003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010039003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010040003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010041003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010042003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010043003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010044003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010045003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010046003.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010047003.Значение);
												
	мФормаОтчета.Области.П000010048004.Значение = ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010028004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010029004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010030004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010031004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010032004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010033004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010034004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010035004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010036004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010037004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010038004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010039004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010040004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010041004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010042004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010043004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010044004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010045004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010046004.Значение)
												+ ОкруглитьЧислоПоФормату(мФормаОтчета.Области.П000010047004.Значение);

КонецПроцедуры // Расчет()


Функция ПолучитьОборот(Выборка,КодКорСчета,ВидОборота);
	
	Оборот=0;
	
	КорСчет=ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодКорСчета);
	
	Для каждого строкаВыборка из Выборка цикл
		Если строкаВыборка.КорСчет=КорСчет или строкаВыборка.КорСчет.ПринадлежитЭлементу(КорСчет) тогда
			Если ВидОборота="Д" Тогда
				Оборот=Оборот+строкаВыборка.СуммаОборотДт;
			ИначеЕсли ВидОборота="К" Тогда
				Оборот=Оборот+строкаВыборка.СуммаОборотКт;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Оборот;
КонецФункции


Функция РассчитатьПоказателиЗаПериод(Организация,НачалоПериода, КонецПериода) Экспорт
	
	Перем Выборка;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В ИЕРАРХИИ (Значение(ПланСчетов.Хозрасчетный.А9900)),
	|			,
	|			ВЫБОР
	|				КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Организация = &Организация
	|			КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты";

	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка=Запрос.Выполнить().Выгрузить();
	
	//а010 = ПолучитьОборот("9000","К")-ПолучитьОборот("9038","К")-ПолучитьОборот("9039","К");
	//а010 = ПолучитьОборот("9000","К")+ПолучитьОборот("9300","К")-ПолучитьОборот("9350","К");

	//а010 = НалоговаяОтчетность.РассчитатьОбъемВыполненныхРаботЗаПериод(Организация,НачалоМесяца(НачалоПериода),КонецПериода);
	в020 = ПолучитьОборот(Выборка,"9100","Д");
	а010 = ПолучитьОборот(Выборка,"9020","К");
	п=а010-в020;

	если п>0 тогда
		а030=п;
		в030=0;
	иначе
		а030=0;
		в030=(-1)*п;
	конецесли;

	в050=ПолучитьОборот(Выборка,"9410","Д");
	в060=ПолучитьОборот(Выборка,"9420","Д");
	в070=ПолучитьОборот(Выборка,"9430","Д");
	в080=ПолучитьОборот(Выборка,"9440","Д");

	в040=в050+в060+в070+в080;

	//а090=ПолучитьОборот("9300","К")+ПолучитьОборот("9038","К")+ПолучитьОборот("9039","К");
    //а090=ПолучитьОборот("9350","К");
	а090=ПолучитьОборот(Выборка,"9300","К");
	п=а030-в030-в040+а090;

	если п>0 тогда
		а100=п;
		в100=0;
	иначе
		а100=0;
		в100=(-1)*п;
	конецесли;

	а120=ПолучитьОборот(Выборка,"9520","К");
	а130=ПолучитьОборот(Выборка,"9530","К");
	а140=ПолучитьОборот(Выборка,"9550","К");
	а150=ПолучитьОборот(Выборка,"9540","К");

	а160=ПолучитьОборот(Выборка,"9500","К")-(а120+а130+а140+а150);

	а110=а120+а130+а140+а150+а160;

	в180=ПолучитьОборот(Выборка,"9610","Д");
	в190=0;
	в200=ПолучитьОборот(Выборка,"9620","Д");
	в210=ПолучитьОборот(Выборка,"9600","Д")-(в180+в190+в200);

	в170=в180+в190+в200+в210;

	п=а100-в100+а110-в170;

	если п>0 тогда
		а220=п;
		в220=0;
	иначе
		а220=0;
		в220=(-1)*п;
	конецесли;

	а230=ПолучитьОборот(Выборка,"9710","К");
	в230=ПолучитьОборот(Выборка,"9720","Д");

	п=а220-в220+а230-в230;

	если п>0 тогда
		а240=п;
		в240=0;
	иначе
		а240=0;
		в240=(-1)*п;
	конецесли;

	в250=ПолучитьОборот(Выборка,"9810","Д")+ПолучитьОборот(Выборка,"9830","Д");
	в260=ПолучитьОборот(Выборка,"9820","Д");

	п=а240-в240-в250-в260;

	если п>0 тогда
		а270=п;
		в270=0;
	иначе
		а270=0;
		в270=(-1)*п;
	конецесли;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("а010",  а010);
	Параметры.Вставить("в020",  в020);
	Параметры.Вставить("а030",  а030);
	Параметры.Вставить("в030",  в030);
	Параметры.Вставить("в040",  в040);
	Параметры.Вставить("в050",  в050);
	Параметры.Вставить("в060",  в060);
	Параметры.Вставить("в070",  в070);
	Параметры.Вставить("в080",  в080);
	Параметры.Вставить("а090",  а090);
	Параметры.Вставить("а100",  а100);
	Параметры.Вставить("в100",  в100);
	Параметры.Вставить("а110",  а110);
	Параметры.Вставить("а120",  а120);
	Параметры.Вставить("а130",  а130);
	Параметры.Вставить("а140",  а140);
	Параметры.Вставить("а150",  а150);
	Параметры.Вставить("а160",  а160);
	Параметры.Вставить("в170",  в170);
	Параметры.Вставить("в180",  в180);
	Параметры.Вставить("в190",  в190);
	Параметры.Вставить("в200",  в200);
	Параметры.Вставить("в210",  в210);
	Параметры.Вставить("а220",  а220);
	Параметры.Вставить("в220",  в220);
	Параметры.Вставить("в230",  в230);
	Параметры.Вставить("а230",  а230);
	Параметры.Вставить("а240",  а240);
	Параметры.Вставить("в240",  в240);
	Параметры.Вставить("в250",  в250);
	Параметры.Вставить("в260",  в260);
	Параметры.Вставить("а270",  а270);
	Параметры.Вставить("в270",  в270);

	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);

ОписаниеТиповСтрока254 = ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мТаблицаСоставПоказателей         = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);

мТаблицаСоставПоказателейНалог         = Новый ТаблицаЗначений;
мТаблицаСоставПоказателейНалог.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателейНалог.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
мТаблицаСоставПоказателейНалог.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателейНалог.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателейНалог.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);

мСтруктураВариантыЗаполнения      = Новый Структура;

ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(254);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

мТаблицаФормОтчета = Новый ТаблицаЗначений;
мТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
мТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
мТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
мТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2003Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение №2 к Приказу МинФина Узбекистана от 27 декабря 2002 года. №140";
НоваяФорма.ДатаКонецДействия  = '20071231';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2009Кв3";
НоваяФорма.ОписаниеОтчета     = "(Действует с 2008 года)";
НоваяФорма.ДатаНачалоДействия = '20080101';                                                      
НоваяФорма.ДатаКонецДействия  = ПустоеЗначениеТипа(Тип("Дата"));

