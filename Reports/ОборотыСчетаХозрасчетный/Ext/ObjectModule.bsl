Перем НП Экспорт;

Перем ИмяРегистраБухгалтерии Экспорт;

Перем ШиринаТаблицы;

#Если Клиент Тогда

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	
	Если НЕ СальдоНачДт Тогда
		Макет.УдалитьОбласть(Макет.Область("СальдоНачДт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ СальдоНачКт Тогда
		Макет.УдалитьОбласть(Макет.Область("СальдоНачКт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ СальдоКонДт Тогда
		Макет.УдалитьОбласть(Макет.Область("СальдоКонДт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ СальдоКонКт Тогда
		Макет.УдалитьОбласть(Макет.Область("СальдоКонКт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ОборотДт Тогда
		Макет.УдалитьОбласть(Макет.Область("ОборотДт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ОборотКт Тогда
		Макет.УдалитьОбласть(Макет.Область("ОборотКт"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ОборотДтКорСчета Тогда
		Макет.УдалитьОбласть(Макет.Область("ОборотДтКорСчет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ОборотКтКорСчета Тогда
		Макет.УдалитьОбласть(Макет.Область("ОборотКтКорСчет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субконто: ";
		СтрокаИзмерений = "";
		Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
			СтрокаИзмерений = СтрокаИзмерений + ", " + Измерение.Представление;
		КонецЦикла;
		ТекстПроИтоги = ТекстПроИтоги + Сред(СтрокаИзмерений, 3);
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

Функция ЗаголовокОтчета() Экспорт
	
	ИмяОтчета = "Обороты счета ";
	
	Возврат ИмяОтчета + ?(НЕ ЗначениеНеЗаполнено(Счет), Счет, "(не выбран счет)");
	
КонецФункции // ЗаголовокОтчета()

Функция СформироватьОбластьВалют()
	
	Макет = ПолучитьМакет("Макет");
	
	ТД = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ВалютаШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Валюта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалютСрезПервых.Валюта,
	               |	ЕСТЬNULL(КурсыВалютСрезПервых.Курс, 0) КАК НачКурс,
	               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КонКурс,
	               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) - ЕСТЬNULL(КурсыВалютСрезПервых.Курс, 0) КАК Разница
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&НачалоПериода, ) КАК КурсыВалютСрезПервых
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, ) КАК КурсыВалютСрезПоследних
	               |		ПО КурсыВалютСрезПервых.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("КонецПериода", ДатаКон);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТД.Вывести(ОбластьШапка);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТД.Вывести(ОбластьСтрока);
	КонецЦикла;
	 
	Возврат ТД;
	
КонецФункции // СформироватьОбластьВалют()
 


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Формирование текста запроса
//
// Возвращаемое значение:
//   Строка   – текст сформированного запроса
//
Функция ПолучитьТекстЗапроса(Запрос, МассивСубконто, МассивРесурсов)

	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
	
	ТекстОтбор = "";
	
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		ТипИзмерения = "";
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия Тогда
			ТипИзмерения = "ИЕРАРХИЯ";
		ИначеЕсли Измерение.ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда
			ТипИзмерения = "ТОЛЬКО ИЕРАРХИЯ";
		КонецЕсли;
			
		
		ТекстСубконто = ТекстСубконто + ",
		|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстСубконто = ТекстСубконто + ",
		|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
		|	" + Измерение.ПутьКДанным +" "+ТипИзмерения + " КАК " + Измерение.Имя;
		
		МассивСубконто.Добавить(Измерение.Имя);
		
	КонецЦикла;
	
	
	Сч = 0;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		
		Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОтбор = ТекстОтбор + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Параметр"+Сч, Элемент.ПутьКДанным, "&ПараметрС"+Сч, "&ПараметрПо"+Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
		
		Запрос.УстановитьПараметр("Параметр"+Сч, Элемент.Значение);
		Запрос.УстановитьПараметр("ПараметрС"+Сч, Элемент.ЗначениеС);
		Запрос.УстановитьПараметр("ПараметрПо"+Сч, Элемент.ЗначениеПо);
		
		Сч=Сч+1;
	
	КонецЦикла; 
	
	Если Не ЗначениеНеЗаполнено(Организация) Тогда
		ТекстОтбор = ТекстОтбор + " И Организация = &Организация";
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БухОбороты.Счет КАК Счет, 
	|	БухОбороты.Счет.Вид КАК ВидСчета, 
	|	БухОбороты.Счет.Порядок КАК СчетПорядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОбороты.Счет) КАК СчетПредставление " +ТекстСубконто+",
	|	БухОбороты.КорСчет КАК КорСчет, 
	|	БухОбороты.КорСчет.Порядок КАК КорСчетПорядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОбороты.КорСчет) КАК КорСчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОбороты.Валюта КАК Валюта, ПРЕДСТАВЛЕНИЕ(БухОбороты.Валюта) КАК ВалютаПредставление  ";
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Период) Тогда
		Текст = Текст
				+ ?(ВРЕГ(Период)<>"РЕГИСТРАТОР",
					",
					|	БухОбороты.Период",
					",
					|	БухОбороты.Регистратор КАК Период,
					|	ПРЕДСТАВЛЕНИЕ(БухОбороты.Регистратор) КАК РегистраторПредставление,
					|	БухОбороты.Регистратор.Дата КАК РегистраторДата");
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,
		|	ВЫБОР КОГДА "+ИмяРесурса+"ОборотДт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ИмяРесурса+"ОборотДт,
		|	ВЫБОР КОГДА "+ИмяРесурса+"ОборотКт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть"+ИмяРесурса+"ОборотКт,
		|	0 КАК " +ИмяРесурса+ "НачДт,
		|	0 КАК " +ИмяРесурса+ "НачКт,
		|	0 КАК " +ИмяРесурса+ "КонДт,
		|	0 КАК " +ИмяРесурса+ "КонКт";
		
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3) + ") КАК БухОбороты
	| ";
	
	
	
	//""
	
	Текст = Текст + "
	|ОБЪЕДИНИТЬ ВСЕ ";
	
	Текст = Текст + "
	|ВЫБРАТЬ
	|	БухОстатки.Счет, 
	|	БухОстатки.Счет.Вид, 
	|	БухОстатки.Счет.Порядок, 
	|	ПРЕДСТАВЛЕНИЕ(БухОстатки.Счет) " +ТекстСубконто+",
	|	NULL , NULL, NULL ";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОстатки.Валюта КАК Валюта, ПРЕДСТАВЛЕНИЕ(БухОстатки.Валюта) ";
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Период) Тогда
		Текст = Текст
		+ ?(ВРЕГ(Период)<>"РЕГИСТРАТОР",
			", БухОстатки.Период",
			", БухОстатки.Регистратор КАК Период,
			|	ПРЕДСТАВЛЕНИЕ(БухОстатки.Регистратор) КАК РегистраторПредставление,
			|	БухОстатки.Регистратор.Дата КАК РегистраторДата");
	КонецЕсли;
	
	ТекстИтоги = "";
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	0 КАК " +ИмяРесурса+ "ОборотДт,
		|	0 КАК " +ИмяРесурса+ "ОборотКт,
		|	0 КАК Есть" +ИмяРесурса+ "ОборотДт,
		|	0 КАК Есть" +ИмяРесурса+ "ОборотКт,
		|	" +ИмяРесурса+ "НачальныйОстатокДт КАК " +ИмяРесурса+ "НачДт,
		|	" +ИмяРесурса+ "НачальныйОстатокКт КАК " +ИмяРесурса+ "НачКт,
		|	" +ИмяРесурса+ "КонечныйОстатокДт КАК " +ИмяРесурса+ "КонДт,
		|	" +ИмяРесурса+ "КонечныйОстатокКт КАК " +ИмяРесурса+ "КонКт";
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, "+Периодичность+",, Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3)+ ") КАК БухОстатки ";
	
	// Настройка сортировки
	ТекстПорядок = "";
	ТекстПорядок = ТекстПорядок + ", СчетПорядок";
	
	Если НЕ ЗначениеНеЗаполнено(Период) Тогда
		Если ВРег(Период)<>"РЕГИСТРАТОР" Тогда
			ТекстПорядок = ТекстПорядок + ", Период";
		Иначе
			ТекстПорядок = ТекстПорядок + ", РегистраторДата";
		КонецЕсли;
	КонецЕсли;
	
	ТекстПорядок = ТекстПорядок + ", КорСчетПорядок";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		ТекстПорядок = ТекстПорядок + ", " + Измерение.Имя;
	КонецЦикла;
	
	Текст = Текст + "
	|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок, 2);
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтоги = ТекстИтоги + ",
		|	СУММА(" +ИмяРесурса+ "ОборотДт),
		|	СУММА(" +ИмяРесурса+ "ОборотКт),
		|	СУММА(Есть" +ИмяРесурса+ "ОборотДт),
		|	СУММА(Есть" +ИмяРесурса+ "ОборотКт),
		|	СУММА(" +ИмяРесурса+ "НачДт),
		|	СУММА(" +ИмяРесурса+ "НачКт),
		|	СУММА(" +ИмяРесурса+ "КонДт),
		|	СУММА(" +ИмяРесурса+ "КонКт)";
	
	КонецЦикла; 
	
	
	Текст = Текст + "
	|ИТОГИ " + Сред(ТекстИтоги, 2)+ "
	|	ПО ОБЩИЕ "+ТекстСубконтоИзмерения;
	
	Если НЕ ЗначениеНеЗаполнено(Период) Тогда
		Текст = Текст+", Период "+?(ВсеПериоды и Врег(Период)<>"РЕГИСТРАТОР", " ПЕРИОДАМИ("+Период+",,)", "") + " КАК Период";
	КонецЕсли;
	
	Текст = Текст + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Если ПоВалютам Тогда
		Текст = Текст + ", Валюта КАК Валюта";
	КонецЕсли;
	
	Возврат Текст + "
	|АВТОУПОРЯДОЧИВАНИЕ";

КонецФункции // ()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ШиринаТаблицы = 0;

	МассивСубконто = Новый Массив;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивРесурсов.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивРесурсов.Добавить("Количество");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса(Запрос, МассивСубконто, МассивРесурсов);
	
	ОтборСубконто = Новый Соответствие;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		Если Элемент.Использование Тогда
			ОтборСубконто.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Состояние("Выполнение запроса");
	Результат = Запрос.Выполнить();
	
	Макет       = ПолучитьМакет("Макет");


	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	
	// Вывод сведений о валютах
	Если Счет.Валютный Тогда
		ОбластьВалют = СформироватьОбластьВалют();
		ВысотаЗаголовка  = ВысотаЗаголовка + ОбластьВалют.ВысотаТаблицы;
		ДокументРезультат.Вывести(ОбластьВалют, 1);
	КонецЕсли;
	
	
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	ФорматПериода = "";
	Если НЕ ЗначениеНеЗаполнено(Период) Тогда
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ПОЛУГОДИЕ" Тогда
			ФорматПериода = "ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "ДЕКАДА" Тогда
			ФорматПериода = "ДФ = """"""Декада с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		ИначеЕсли Врег(Период) = "РЕГИСТРАТОР" Тогда
			ФорматПериода = "";
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("МассивСубконто", МассивСубконто);
	
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотКтКорСчет"));
	
	Если ПоВалютам Тогда
		// Валюта
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКтКорСчет"));
	КонецЕсли;
	
	Если МассивСубконто.Количество()>0 Тогда
		// Субконто
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКтКорСчет"));
		
		Если ПоКоличеству Тогда
			// Субконто
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоПериод", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКтКорСчет"));
			
			
			// Период
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоПериод", Макет.ПолучитьОбласть("СтрокаКоличество|Период"));
			СтруктураПараметров.ОбластьСтрокаКоличествоПериод.Область(1, 2).Формат = ФорматПериода;
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКтКорСчет"));
		КонецЕсли;
	КонецЕсли;
	
	
	// Вывод отчета
	ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтог.Следующий();
	
	ИмяСтроки = "ЗаголовокТаблицы";
	
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	НачалоЗаголовка=Макет.ПолучитьОбласть(ИмяСтроки+"|Период");
	
	Если МассивСубконто.Количество()>0 Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Субконто";
	ИначеЕсли НЕ ЗначениеНеЗаполнено(Период) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	ДокументРезультат.Вывести(НачалоЗаголовка,0);
	ШиринаТаблицы = ШиринаТаблицы + НачалоЗаголовка.ШиринаТаблицы;
	// Вывод заголовков нач.сальдо
	
	Если СальдоНачДт Тогда
		ОблСальдоНачДт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
		ДокументРезультат.Присоединить(ОблСальдоНачДт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоНачДт.ШиринаТаблицы;
	КонецЕсли;
	Если СальдоНачКт Тогда
		ОблСальдоНачКт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
		ДокументРезультат.Присоединить(ОблСальдоНачКт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоНачКт.ШиринаТаблицы;
	КонецЕсли;
	
	// Вывод заголовков оборотов
	Если ОборотДт Тогда
		ОблОборотДт = Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
		ДокументРезультат.Присоединить(ОблОборотДт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблОборотДт.ШиринаТаблицы;
	КонецЕсли;
	
	// Вывод кор счетов с дебетовыми оборотами
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
	
	СоотвДт = Новый Соответствие;
	
	Если ОборотДтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			Иначе
				Если ЭтоСчетГруппа(Выборка.КорСчет) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ЕстьСуммаОборотДт<>0 Тогда
				СоотвДт.Вставить(Выборка.КорСчет, 0);
				
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Если ОборотКт Тогда
		ОблОборотКт = Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
		ДокументРезультат.Присоединить(ОблОборотКт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблОборотКт.ШиринаТаблицы;
	КонецЕсли;
	// Вывод кор счетов с кредитовыми оборотами
	
	СоотвКт = Новый Соответствие();
	
	Выборка.Сбросить();
	Если ОборотКтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			Иначе
				Если ЭтоСчетГруппа(Выборка.КорСчет) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ЕстьСуммаОборотКт<>0 Тогда
				СоотвКт.Вставить(Выборка.КорСчет);
				
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СальдоКонДт Тогда
		ОблСальдоКонДт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
		ДокументРезультат.Присоединить(ОблСальдоКонДт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоКонДт.ШиринаТаблицы;
	КонецЕсли;
	Если СальдоКонКт Тогда
		ОблСальдоКонКт = Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
		ДокументРезультат.Присоединить(ОблСальдоКонКт,0);
		ШиринаТаблицы = ШиринаТаблицы + ОблСальдоКонКт.ШиринаТаблицы;
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
	// Соответствия хранят счета, по которым были обороты
	
	СтруктураПараметров.Вставить("СоотвДт", СоотвДт);
	СтруктураПараметров.Вставить("СоотвКт", СоотвКт);
	// Вывод заголовков кон.сальдо

	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Если МассивСубконто.Количество()>0 Тогда
		ВывестиСубконто(Результат, СтруктураПараметров, ПоКоличеству, ОтборСубконто);
	ИначеЕсли НЕ ЗначениеНеЗаполнено(Период) Тогда
		ВывестиПериоды(Результат, СтруктураПараметров, ОтборСубконто);
	КонецЕсли;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итого по отчету
	
	ИмяСтроки = "Итог";
	
	Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|Период");
	ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог);
	ДокументРезультат.Вывести(Обл);
	
	// Вывод заголовков нач.сальдо
	Если Период <> "" Тогда
		ВыборкаПоПериодам = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
		ВыборкаПоПериодам.Следующий();
	КонецЕсли;
	
	Если СальдоНачДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
		Обл.Параметры.Заполнить(?(Период = "", ОбщийИтог, ВыборкаПоПериодам));
		
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаНачДт");
		
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	Если СальдоНачКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
		Обл.Параметры.Заполнить(?(Период = "", ОбщийИтог, ВыборкаПоПериодам));
				                                                                         
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаНачКт");
			
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Вывод заголовков оборотов
	Если ОборотДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
		Обл.Параметры.Заполнить(ОбщийИтог);
				
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаОборотДт");
			
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	//Вывод кор счетов с дебетовыми оборотами
	Выборка.Сбросить();
	
	Если ОборотДтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			Иначе
				Если ЭтоСчетГруппа(Выборка.КорСчет) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ЕстьСуммаОборотДт<>0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				
				ЗаполнитьИтогиПоВалютам(Обл,Выборка,"ВалютнаяСуммаОборотДт");
			
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОборотКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
		Обл.Параметры.Заполнить(ОбщийИтог);
				
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаОборотКт");
			
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Вывод кор счетов с кредитовыми оборотами
	Выборка.Сбросить();
	
	Если ОборотКтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			Иначе
				Если ЭтоСчетГруппа(Выборка.КорСчет) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ЕстьСуммаОборотКт<>0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				
				ЗаполнитьИтогиПоВалютам(Обл,Выборка,"ВалютнаяСуммаОборотКт");
				
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сосчитаем конечное сальдо:
	СуммаКонКт = 0;
	СуммаКонКт = 0;
	
	Если ЕстьИтог Тогда
		Если Период = "" Тогда
			
			СуммаКонДт = ОбщийИтог.СуммаКонДт;
			СуммаКонКт = ОбщийИтог.СуммаКонКт;
			
		Иначе
			
			ВыборкаПоПериодам.Сбросить();
			
			Пока ВыборкаПоПериодам.Следующий() Цикл
				
				СуммаКонДт = ВыборкаПоПериодам.СуммаКонДт;
				СуммаКонКт = ВыборкаПоПериодам.СуммаКонКт;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СальдоКонДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
		Обл.Параметры.СуммаКонДт=СуммаКонДт;
				                                                                         
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаКонДт");
			
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	Если СальдоКонКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
		Обл.Параметры.СуммаКонКт=СуммаКонКт;
				                                                                         
		ЗаполнитьИтогиПоВалютам(Обл,ОбщийИтог,"ВалютнаяСуммаКонКт");
			
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Обведение таблицы отчета линией, как в области границы
	ОбластьИтогПериод = Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	//ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы - ?(ОборотДтКорСчета,1,0) - ?(ОборотКтКорСчета,1,0);
	ШиринаТаблицы = ШиринаТаблицы + СоотвДт.Количество() + СоотвКт.Количество();
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;
	ДокументРезультат.ФиксацияСлева =  2;

	ДокументРезультат.ПовторятьПриПечатиСтроки=ДокументРезультат.Область(ВысотаЗаголовка + 1,,ВысотаЗаголовка + 2); 

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету "+ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глТекущийПользователь));
	
КонецПроцедуры

Функция ЗаполнитьИтогиПоВалютам(Обл,Выборка,ИмяПараметра=Неопределено)
	
	Если ПоВалютам Тогда
		ИтогиВВалюте="";
		ВыборкаПоВалютам=Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Валюта","Все");
		Пока ВыборкаПоВалютам.Следующий() Цикл
			Если ИмяПараметра=Неопределено Тогда
				ИтогиВВалюте=ИтогиВВалюте+Строка(ВыборкаПоВалютам.Валюта)+Символы.ПС;	
			Иначе	
				ИтогиВВалюте=ИтогиВВалюте+Формат(ВыборкаПоВалютам[ИмяПараметра],"ЧДЦ=2")+Символы.ПС;	
			КонецЕсли;
		КонецЦикла;
		
		Обл.Параметры.ИтогиВВалюте=ИтогиВВалюте;
	КонецЕсли;
	
КонецФункции		
			


// Вывод субконто определенного номера
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества)
	
	Если Инд<= СтруктураПараметров.МассивСубконто.Количество()-1 Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		Если ВыводКоличества Тогда
			ИзмерениеПостроителя = ПостроительОтчета.ИзмеренияСтроки.Найти(Измерение);
			Если ИзмерениеПостроителя <> Неопределено Тогда
				
				ИмяПоля = ИзмерениеПостроителя.ПутьКДанным;
				
				поз = Найти(ИмяПоля, ".");
				ИмяПоля = ?(поз=0, ИмяПоля, Лев(ИмяПоля, поз-1));
				
				ИндСубконто = Число(Сред(ИмяПоля, СтрДлина("Субконто")+1));
				ВыводКоличества=Счет.ВидыСубконто[ИндСубконто-1].Количественный;
				
			Иначе
				
				ИндСубконто = Число(Сред(Измерение, СтрДлина("Субконто")+1));
				ВыводКоличества=Счет.ВидыСубконто[ИндСубконто-1].Количественный;
				
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		СуммаНачДт = 0;
		СуммаНачКт = 0;
		КоличествоНачДт = 0;
		КоличествоНачКт = 0;
		
		Пока ВыборкаПоСубконто.Следующий() Цикл
			
			Уровень = ВыборкаПоСубконто.Уровень();
			
			ТипЗаписи = ВыборкаПоСубконто.ТипЗаписи();
			
			Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ВыводитьКоличествоВТекущейСтроке=Ложь;
			Иначе
				ВыводитьКоличествоВТекущейСтроке=ВыводКоличества;
			КонецЕсли;
			
			Если ВыводитьКоличествоВТекущейСтроке Тогда
				ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоПериод;
				ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачДт;
				ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачКт;
				ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДт;
				ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКт;
				ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет;
				ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет;
				ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонДт;
				ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонКт;
			Иначе
				ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоПериод;
				ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачДт;
				ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачКт;
				ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДт;
				ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКт;
				ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДтКорСчет;
				ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКтКорСчет;
				ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонДт;
				ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонКт;
			КонецЕсли;
			
			ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;
			
			// Вывод нач сальдо
			ОблНачало.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение+"Представление"];
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
			
			// В итогах по иерархии шрифт меняется на наклонный
			Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт,,,,Истина);
			КонецЕсли;
			
			Если ТипЗнч(ВыборкаПоСубконто[Измерение])=Тип("СправочникСсылка.Контрагенты") Тогда
				СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(,10,Истина);
			КонецЕсли;
				
			
			// для получения начальных остатков надо взять остатки первого периода
			Если Период = "" Тогда
				
				СуммаНачДт = ВЧисло(ВыборкаПоСубконто.СуммаНачДт);
				СуммаНачКт = ВЧисло(ВыборкаПоСубконто.СуммаНачКт);
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоНачДт = ВЧисло(ВыборкаПоСубконто.КоличествоНачДт);
					КоличествоНачКт = ВЧисло(ВыборкаПоСубконто.КоличествоНачКт);
				КонецЕсли;
				
			Иначе
				
				ВыборкаПоПериодам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
				ВыборкаПоПериодам.Следующий();
				
				СуммаНачДт = ВЧисло(ВыборкаПоПериодам.СуммаНачДт);
				СуммаНачКт = ВЧисло(ВыборкаПоПериодам.СуммаНачКт);
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоНачДт = ВЧисло(ВыборкаПоПериодам.КоличествоНачДт);
					КоличествоНачКт = ВЧисло(ВыборкаПоПериодам.КоличествоНачКт);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СальдоНачДт Тогда
				ОблСальдоНачДт.Параметры.СуммаНачДт=СуммаНачДт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоНачДт.Параметры.КоличествоНачДт=КоличествоНачДт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт, Уровень);
			КонецЕсли;
			
			Если СальдоНачКт Тогда
				ОблСальдоНачКт.Параметры.СуммаНачКт=СуммаНачКт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоНачКт.Параметры.КоличествоНачКт=КоличествоНачКт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт, Уровень);
			КонецЕсли;
			
			// Оборот Дт
			Если ОборотДт Тогда
				ОблОборотДт.Параметры.Заполнить(ВыборкаПоСубконто);
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
			КонецЕсли;
			
			// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
			Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
				ВыборкаОборотыПоКорСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
			КонецЕсли;
			
			Если ОборотДтКорСчета Тогда
				
				// Вывод вложенных итогов по кор счетам
				ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма"+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), ОблОборотДтКорСчет, ОтборДляРасшифровки);
			КонецЕсли;
			
			
			
			// Оборот Кт
			Если ОборотКт Тогда
				ОблОборотКт.Параметры.Заполнить(ВыборкаПоСубконто);
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
			КонецЕсли;
			
			Если ОборотКтКорСчета Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
				
				// Вывод вложенных итогов по кор счетам
				ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма"+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), ОблОборотКтКорСчет, ОтборДляРасшифровки);
			КонецЕсли;
			
			// Вывод вложенных итогов: конец
			
			// Вывод оборота и кон сальдо
			СуммаОборотДт = ВЧисло(ВыборкаПоСубконто.СуммаОборотДт);
			СуммаОборотКт = ВЧисло(ВыборкаПоСубконто.СуммаОборотКт);
			
			Если ВыводитьКоличествоВТекущейСтроке Тогда
				КоличествоОборотДт = ВЧисло(ВыборкаПоСубконто.КоличествоОборотДт);
				КоличествоОборотКт = ВЧисло(ВыборкаПоСубконто.КоличествоОборотКт);
			КонецЕсли;
			
			Если Период = "" Тогда
				
				СуммаКонДт = ВЧисло(ВыборкаПоСубконто.СуммаКонДт);
				СуммаКонКт = ВЧисло(ВыборкаПоСубконто.СуммаКонКт);
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоКонДт = ВЧисло(ВыборкаПоСубконто.КоличествоКонДт);
					КоличествоКонКт = ВЧисло(ВыборкаПоСубконто.КоличествоКонКт);
				КонецЕсли;
				
			Иначе
				
				ВыборкаПоПериодам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
				
				Пока ВыборкаПоПериодам.Следующий() Цикл
					СуммаКонДт = ВЧисло(ВыборкаПоПериодам.СуммаКонДт);
					СуммаКонКт = ВЧисло(ВыборкаПоПериодам.СуммаКонКт);
					Если ВыводитьКоличествоВТекущейСтроке Тогда
						КоличествоКонДт = ВЧисло(ВыборкаПоПериодам.КоличествоКонДт);
						КоличествоКонКт = ВЧисло(ВыборкаПоПериодам.КоличествоКонКт);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Вывод конечного сальдо
			
			Если СальдоКонДт Тогда
				ОблСальдоКонДт.Параметры.СуммаКонДт=СуммаКонДт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоКонДт.Параметры.КоличествоКонДт=КоличествоКонДт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт, Уровень);
			КонецЕсли;
			
			Если СальдоКонКт Тогда
				ОблСальдоКонКт.Параметры.СуммаКонКт=СуммаКонКт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоКонКт.Параметры.КоличествоКонКт=КоличествоКонКт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт, Уровень);
			КонецЕсли;
			
			Если ПоВалютам Тогда
				ВывестиВалюты(ВыборкаПоСубконто, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
			КонецЕсли;
			
			// Вывод вложенных итогов
			Если НЕ ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
				ВыводСубконто(ВыборкаПоСубконто, Инд+1, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки), ВыводКоличества);
			КонецЕсли;
			// Вывод вложенных итогов: конец
		
		КонецЦикла;
		
	Иначе
		
		Если НЕ ЗначениеНеЗаполнено(Период) Тогда
			
			ВывестиПериоды(Выборка, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки), ВыводКоличества);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод субконто: общая процедура
Процедура ВывестиСубконто(Выборка, СтруктураПараметров, ВыводКоличества, ОтборСубконто)

	ВыводСубконто(Выборка, 0, СтруктураПараметров, ОтборСубконто, ВыводКоличества);

КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества=Ложь)
	
	Если ВсеПериоды Тогда
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Иначе
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	КонецЕсли;
	
	СуммаНачДт = 0;
	СуммаНачКт = 0;
	СуммаКонДт = 0;
	СуммаКонКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	
	Если ВыводКоличества Тогда
		ОблНачало = СтруктураПараметров.ОбластьСтрокаКоличествоПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонКт;
	Иначе
		ОблНачало = СтруктураПараметров.ОбластьСтрокаПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСальдоКонКт;
	КонецЕсли;
	
	ПервыйПроход=истина;
	
	
	// Идем по остаткам, т.к. там есть начпериоды без оборотов
	Пока ВыборкаПоПериодам.Следующий() Цикл
		
		// Начальный остаток
		Если ПервыйПроход Тогда
		
			Если ВыборкаПоПериодам.СуммаНачДт <> NULL Тогда
				СуммаНачДт = ВыборкаПоПериодам.СуммаНачДт;
			КонецЕсли;
			Если ВыборкаПоПериодам.СуммаНачКт <> NULL Тогда
				СуммаНачКт = ВыборкаПоПериодам.СуммаНачКт;
			КонецЕсли;
			
			
		Иначе
			
			СуммаНачДт=СуммаКонДт;
			СуммаНачКт=СуммаКонКт;
		
		КонецЕсли; 
		
		Если ВыводКоличества Тогда
			Если ВыборкаПоПериодам.КоличествоНачДт <> NULL Тогда
				КоличествоНачДт = ВыборкаПоПериодам.КоличествоНачДт;
			КонецЕсли;
			Если ВыборкаПоПериодам.КоличествоНачКт <> NULL Тогда
				КоличествоНачКт = ВыборкаПоПериодам.КоличествоНачКт;
			КонецЕсли;
		КонецЕсли;
		
		Уровень = ВыборкаПоПериодам.Уровень();
		
		// Вывод начального сальдо
		
		// Выводим начало строки:
		//ОблНачало.Параметры.Заполнить(ВыборкаПоПериодам);
		ОблНачало.Параметры.Период = ?(Врег(Период)="РЕГИСТРАТОР",
										ВыборкаПоПериодам.РегистраторПредставление,
										ВыборкаПоПериодам.Период);
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоПериодам, ОтборДляРасшифровки);
		ОтборДляРасшифровки.Вставить("Период", ВыборкаПоПериодам.Период);

		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
		
		Если СальдоНачДт Тогда
			
			ОблСальдоНачДт.Параметры.СуммаНачДт=СуммаНачДт;
			Если ВыводКоличества Тогда
				ОблСальдоНачДт.Параметры.КоличествоНачДт=КоличествоНачДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт, Уровень);
		КонецЕсли;
		
		Если СальдоНачКт Тогда
			ОблСальдоНачКт.Параметры.СуммаНачКт=СуммаНачКт;
			Если ВыводКоличества Тогда
				ОблСальдоНачКт.Параметры.КоличествоНачКт=КоличествоНачКт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт, Уровень);
		КонецЕсли;
		
		// Оборот Дт
		Если ОборотДт Тогда
			ОблОборотДт.Параметры.Заполнить(ВыборкаПоПериодам);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
		КонецЕсли;
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма"+?(ВыводКоличества, ",Количество", ""), ОблОборотДтКорСчет, ОтборДляРасшифровки);
		КонецЕсли;
		
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ОблОборотКт.Параметры.Заполнить(ВыборкаПоПериодам);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма", ОблОборотКтКорСчет, ОтборДляРасшифровки);
		КонецЕсли;
		
		// Вывод вложенных итогов: конец
		
		// Вывод оборота и кон сальдо
		СуммаОборотДт = ВЧисло(ВыборкаПоПериодам.СуммаОборотДт);
		СуммаОборотКт = ВЧисло(ВыборкаПоПериодам.СуммаОборотКт);
		Если ВыводКоличества Тогда
			КоличествоОборотДт = ВЧисло(ВыборкаПоПериодам.КоличествоОборотДт);
			КоличествоОборотКт = ВЧисло(ВыборкаПоПериодам.КоличествоОборотКт);
		КонецЕсли;
		
		Если ПервыйПроход Тогда
			Если ВыборкаПоПериодам.СуммаКонДт <> NULL Тогда
				СуммаКонДт = ВыборкаПоПериодам.СуммаКонДт;
			КонецЕсли;
			Если ВыборкаПоПериодам.СуммаКонКт <> NULL Тогда
				СуммаКонКт = ВыборкаПоПериодам.СуммаКонКт;
			КонецЕсли;
			ПервыйПроход=ложь;
		Иначе
			
			Сальдо=СуммаНачДт-СуммаНачКт+?(ВыборкаПоПериодам.СуммаОборотДт=NULL,0,ВыборкаПоПериодам.СуммаОборотДт)-?(ВыборкаПоПериодам.СуммаОборотДт=NULL,0,ВыборкаПоПериодам.СуммаОборотКт);
			
			Если Счет.Вид=ВидСчета.Активный или Счет.Вид=ВидСчета.АктивноПассивный Тогда
				
				СуммаКонДт=Сальдо;
				СуммаКонКт=0;
				
			Иначе	
				
				СуммаКонДт=0;
				СуммаКонКт=-Сальдо;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ВыводКоличества Тогда
			Если ВыборкаПоПериодам.КоличествоКонДт <> NULL Тогда
				КоличествоКонДт = ВыборкаПоПериодам.КоличествоКонДт;
			КонецЕсли;
			Если ВыборкаПоПериодам.КоличествоКонКт <> NULL Тогда
				КоличествоКонКт = ВыборкаПоПериодам.КоличествоКонКт;
			КонецЕсли;
		КонецЕсли;
		
		// Вывод конечного сальдо
		
		Если СальдоКонДт Тогда
			ОблСальдоКонДт.Параметры.СуммаКонДт=СуммаКонДт;
			Если ВыводКоличества Тогда
				ОблСальдоКонДт.Параметры.КоличествоКонДт=КоличествоКонДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт, Уровень);
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ОблСальдоКонКт.Параметры.СуммаКонКт=СуммаКонКт;
			Если ВыводКоличества Тогда
				ОблСальдоКонКт.Параметры.КоличествоКонКт=КоличествоКонКт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт, Уровень);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;
		
		Если ВыводКоличества Тогда
			КоличествоНачДт = КоличествоКонДт;
			КоличествоНачКт = КоличествоКонКт;
		КонецЕсли;
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаПоПериодам, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Выборка, СтруктураПараметров, ОтборДляРасшифровки)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");

	Пока ВыборкаВалют.Следующий() Цикл
		
		Если Период = "" Тогда
			
			СуммаНачДт = ВЧисло(ВыборкаВалют.СуммаНачДт);
			СуммаНачКт = ВЧисло(ВыборкаВалют.СуммаНачКт);
			
			ВалютнаяСуммаНачДт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачДт);
			ВалютнаяСуммаНачКт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачКт);
			
		Иначе
			
			ВыборкаПоПериодам = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
			ВыборкаПоПериодам.Следующий();
			
			СуммаНачДт = ВЧисло(ВыборкаПоПериодам.СуммаНачДт);
			СуммаНачКт = ВЧисло(ВыборкаПоПериодам.СуммаНачКт);
			
			ВалютнаяСуммаНачДт = ВЧисло(ВыборкаПоПериодам.ВалютнаяСуммаНачДт);
			ВалютнаяСуммаНачКт = ВЧисло(ВыборкаПоПериодам.ВалютнаяСуммаНачКт);
			
		КонецЕсли;
		
		ОтборДляРасшифровки.Вставить("ПоВалюте", Истина);
		ОтборДляРасшифровки.Вставить("Валюта", ВыборкаВалют.Валюта);
		
		// Вывод начала строки
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаПериод;
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
		
		Уровень = ВыборкаВалют.Уровень();
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
		Если СальдоНачДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачДт=ВалютнаяСуммаНачДт;
			ВыводимаяОбласть.Параметры.СуммаНачДт        =СуммаНачДт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоНачКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачКт=ВалютнаяСуммаНачКт;
			ВыводимаяОбласть.Параметры.СуммаНачКт        =СуммаНачКт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Оборот Дт
		Если ОборотДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотДт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "Сумма, ВалютнаяСумма", СтруктураПараметров.ОбластьСтрокаВалютаОборотДтКорСчет, ОтборДляРасшифровки);
		КонецЕсли;
		
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотКт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "Сумма, ВалютнаяСумма", СтруктураПараметров.ОбластьСтрокаВалютаОборотКтКорСчет, ОтборДляРасшифровки);
		КонецЕсли;
		
		// Вывод оборота и кон сальдо
		ВалютнаяСуммаОборотДт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаОборотДт);
		ВалютнаяСуммаОборотКт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаОборотКт);
		
		СуммаОборотДт = ВЧисло(ВыборкаВалют.СуммаОборотДт);
		СуммаОборотКт = ВЧисло(ВыборкаВалют.СуммаОборотКт);
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт - ВалютнаяСуммаОборотКт;
			ВалютнаяСуммаКонКт = 0;
			
			СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
			СуммаКонКт = 0;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			ВалютнаяСуммаКонДт = 0;
			ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт - ВалютнаяСуммаОборотДт;
			
			СуммаКонДт = 0;
			СуммаКонКт = СуммаНачКт + СуммаОборотКт - СуммаОборотДт;
		Иначе
			ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт;
			ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт;
			
			СуммаКонДт = СуммаНачДт + СуммаОборотДт;
			СуммаКонКт = СуммаНачКт + СуммаОборотКт;
			
			Если СуммаКонДт>СуммаКонКт Тогда
				СуммаКонДт=СуммаКонДт-СуммаКонКт;
				СуммаКонКт=0;
			Иначе
				СуммаКонКт=СуммаКонКт-СуммаКонДт;
				СуммаКонДт=0;
			КонецЕсли;
			
			
			Если ВалютнаяСуммаКонДт>ВалютнаяСуммаКонКт Тогда
				ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт-ВалютнаяСуммаКонКт;
				ВалютнаяСуммаКонКт=0;
			Иначе
				ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт-ВалютнаяСуммаКонДт;
				ВалютнаяСуммаКонДт=0;
			КонецЕсли;
		КонецЕсли;
		
		
		// Вывод конечного сальдо
		
		Если СальдоКонДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт;
			
			ВыводимаяОбласть.Параметры.СуммаКонДт=СуммаКонДт;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт;
			
			ВыводимаяОбласть.Параметры.СуммаКонКт=СуммаКонКт;
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		ВалютнаяСуммаНачДт = ВалютнаяСуммаКонДт;
		ВалютнаяСуммаНачКт = ВалютнаяСуммаКонКт;
		
		СуммаНачДт = СуммаКонДт;
		СуммаНачКт = СуммаКонКт;
	
	КонецЦикла;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, ОтборДляРасшифровки=Неопределено)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда
		
		ТипПоля = "ОборотДт";
		
		Соотв = СтруктураПараметров.СоотвДт;
	ИначеЕсли ВидОборота = "КТ" Тогда
		
		ТипПоля = "ОборотКт";
		
		Соотв = СтруктураПараметров.СоотвКт;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Очистим значения соответствия счетов
	Для каждого Элемент Из Соотв Цикл
		Соотв[Элемент.Ключ]=Новый Структура(Ресурсы);
	КонецЦикла;
	
	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		
		// В выборке присутствуют счета всех уровней, если не нужно выводить субсчета, пропускаем 
		// группировки следующего уровня
		Если НЕ ПоСубсчетам Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
				
		Иначе
			Если ЭтоСчетГруппа(ВыборкаОборотыПоКорСчетам.КорСчет) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ ВЧисло(ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля])=0 Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	ВыборкаОборотыПоКорСчетам.Сбросить();
	ВыборкаОборотыПоКорСчетам.Следующий();
	
	
	ТаблицаСчетов=новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	
	Для каждого ЭлементСчет Из Соотв Цикл
		
		СтрокаТС=ТаблицаСчетов.Добавить();
		СтрокаТС.Счет=ЭлементСчет.Ключ;
		
	КонецЦикла;
	
	ТаблицаСчетов.Сортировать("Счет");
	
	Для каждого СтрокаТаблицаСчетов Из ТаблицаСчетов Цикл
		Для каждого ЭлементСчет Из Соотв Цикл
			
			Если СтрокаТаблицаСчетов.Счет<>ЭлементСчет.Ключ  Тогда
				
				Продолжить;
			
			КонецЕсли; 
			
			
			Для каждого Элемент Из ЭлементСчет.Значение Цикл
				ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
				
				Расшифровка = Новый Соответствие;
				РасшифровкаОтбор = Новый Соответствие;
				//РасшифровкаОтбор.Вставить("Период", ВыборкаОборотыПоКорСчетам.Период);
				
				Если ОтборДляРасшифровки<>Неопределено Тогда
					Для каждого соот Из ОтборДляРасшифровки Цикл
						ИмяКлюча = ?(ВидОборота = "ДТ", СтрЗаменить(соот.Ключ, "Субконто", "СубконтоДт"), СтрЗаменить(соот.Ключ, "Субконто", "СубконтоКт"));
						РасшифровкаОтбор.Вставить(ИмяКлюча, соот.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Расшифровка.Вставить("Отбор", РасшифровкаОтбор);
				Расшифровка.Вставить("ИмяОбъекта", "ОтчетПоПроводкамХозрасчетный");
				
				Если ВидОборота = "ДТ" Тогда
					Расшифровка.Вставить("СчетДт", Счет);
					Расшифровка.Вставить("СчетКт", ЭлементСчет.Ключ);
					
					ВыводимаяОбласть.Параметры.РасшифровкаДт = Расшифровка;
				Иначе
					Расшифровка.Вставить("СчетДт", ЭлементСчет.Ключ);
					Расшифровка.Вставить("СчетКт", Счет);
					
					ВыводимаяОбласть.Параметры.РасшифровкаКт = Расшифровка;
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
		КонецЦикла;
	КонецЦикла; 
	
	
	
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкамХозрасчетный");

	ПараметрыРасшифровки.Вставить("Счет", Счет);

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Выборка.Группировка());
			Если Измерение <> Неопределено Тогда
				ОтборСубконто.Вставить(Измерение.ПутьКДанным, Выборка[Выборка.Группировка()]);
			Иначе
				ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			КонецЕсли;
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
			СписокРасшифровки = Новый СписокЗначений;
			
			СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
			
		КонецЕсли;
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

// Преобразовать значение из выборки из результата запроса в число
Функция ВЧисло(Значение)
	
	Если Значение=NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ВЧисло()

// Функция создает копию соответствия
//
// Параметры
//  соотИсходное – Соответствие – Исходное соответствие, данные которого надо скопировать
//
// Возвращаемое значение:
//   Соответствие – Копия исходного соответствия
//
Функция СделатьКопиюСоотв(СоотвИсх)
	
	Соотв = Новый(Тип(СоотвИсх));
	
	Для Каждого Элемент Из СоотвИсх Цикл
		Соотв.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Соотв;

КонецФункции // СделатьКопиюСоотв()

// Заполнение настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СальдоНачДт=Истина;
	СальдоНачКт=Истина;
	СальдоКонДт=Истина;
	СальдоКонКт=Истина;

	ОборотДт   =Истина;
	ОборотКт   =Истина;
	ОборотДтКорСчета = Истина;
	ОборотКтКорСчета = Истина;
	
	Период = "";
	
	ВсеПериоды = Истина;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	СтруктураСубконто = Новый Структура;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", Регистр.Субконто" +Сч+" КАК Субконто"+Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
		
		СтруктураСубконто.Вставить("Субконто"+Сч, ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	ТекстПоля = Сред(ТекстПоля, 2);
	ТекстОтбор = Сред(ТекстОтбор, 2);
	ТекстИтоги = Сред(ТекстИтоги, 2);
	
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.СуммаОборот КАК СуммаОборот
	|	" +?(НЕ ПустаяСтрока(ТекстПоля), "{ВЫБРАТЬ " +ТекстПоля+ "}", "") + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(,,,Счет В Иерархии (&Счет),," + ?(НЕ ПустаяСтрока(ТекстОтбор), "{"+ТекстОтбор+"}", "") + ") КАК Регистр
	|
	|ИТОГИ СУММА(СуммаОборот) ПО ОБЩИЕ
	|	" +?(НЕ ПустаяСтрока(ТекстИтоги), "{ИТОГИ ПО "+ТекстИтоги+"}", "");
	
	Сч = 0;
	Для каждого Элемент Из СтруктураСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти(Элемент.Ключ);
		Поле.ТипЗначения = Элемент.Значение.ТипЗначения;
		Поле.Представление = Элемент.Значение.Наименование;
		
		ПостроительОтчета.Отбор.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
	
КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	
	Если Счет.Валютный Тогда
	
		ПоВалютам = Истина;
		
	Иначе
		
		ПоВалютам = Ложь;
	
	КонецЕсли; 
	
	//Если Счет.Количественный Тогда
	//
	//	ПоКоличеству = Истина;
	//
	//Иначе
	//
	//	ПоКоличеству = Ложь;
	//
	//КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	Сч = 0;
	Для каждого СтрокаВидаСубконто Из Счет.ВидыСубконто Цикл
		Сч = Сч + 1;
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Субконто"+Сч);
	КонецЦикла;
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	Период = Параметры["Период"];
	ВсеПериоды = Параметры["ВсеПериоды"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Если ЭлементОтбора = Неопределено Тогда
				Если ПостроительОтчета.ДоступныеПоля.Найти(Строка.Ключ)<>Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
					ЭлементОтбора.Установить(Строка.Значение);
				КонецЕсли;
			Иначе
				ЭлементОтбора.Установить(Строка.Значение);
			КонецЕсли;
			
			
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора);
		
	КонецЕсли;

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	Для Каждого Элемент Из Расшифровка.Отбор Цикл
	
		Если Элемент.Ключ="Период" Тогда
			
			Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
				
				ПериодС = Элемент.Значение;
				
				Если Врег(Период) = "ДЕНЬ" Тогда
					ПериодПо = ПериодС + 24 * 60 * 60 - 1;
				ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
					ПериодПо = ПериодС + 7 * 24 * 60 * 60 - 1;
				ИначеЕсли Врег(Период) = "ДЕКАДА" Тогда
					ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
				ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
					ПериодПо = КонецДня(КонецМесяца(ПериодС));
				ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
					ПериодПо = КонецДня(КонецКвартала(ПериодС));
				ИначеЕсли Врег(Период) = "ПОЛУГОДИЕ" Тогда
					СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
					Если ПериодС<= СерединаГода Тогда
						ПериодПо = СерединаГода;
					Иначе
						ПериодПо = КонецДня(КонецГода(ПериодС));
					КонецЕсли;
					
				ИначеЕсли Врег(Период) = "ГОД" Тогда
					ПериодПо = КонецДня(КонецГода(ПериодС));
				КонецЕсли;
				
			Иначе
				
				ПериодС  = ДатаНач;
				ПериодПо = ДатаКон;
				
			КонецЕсли;
			
			Если Врег(Период) = "РЕГИСТРАТОР" Тогда
				
				Расшифровка.Вставить("Регистратор", Элемент.Значение);
				Расшифровка.Вставить("ПоРегистратору", Истина);
				
			Иначе
				
				Если ДатаКон<>'00010101' Тогда
					ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
				КонецЕсли;
				
				Расшифровка.Вставить("ДатаНач", ПериодС);
				Расшифровка.Вставить("ДатаКон", ПериодПо);
				
			КонецЕсли;
			
		ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
			
		КонецЕсли;
			
	КонецЦикла;
	
	Отчет = Отчеты[Расшифровка["ИмяОбъекта"]].Создать();
	
	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	
	Попытка
		
		Отчет.Настроить(Расшифровка);
		
		ФормаОтчета.ПоказыватьЗаголовок = Расшифровка["ПоказыватьЗаголовок"];
		
		ФормаОтчета.ОбновитьОтчет();
		
	Исключение
	КонецПопытки;
	
	ФормаОтчета.Открыть();

КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()


//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(200);

МассивБулево        = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений        = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивСчет = Новый Массив;
МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));

Период="МЕСЯЦ";

ШиринаТаблицы = 0;

#КонецЕсли