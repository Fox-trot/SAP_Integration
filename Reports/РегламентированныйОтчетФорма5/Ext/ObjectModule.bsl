// #Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит структуру многостраничных разделов.
//Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранит дерево значений - структуру листов отчета.
Перем мДеревоСтраницОтчета Экспорт;

// Хранит признак выбора печатных листов.
Перем мЕстьВыбранные Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

// поле табличного документа
Перем мФормаОтчета Экспорт;
// переменные для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС;
// хранит значение делителя при представлении чисел в назначенной размерности
Перем мДелитель Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");
	ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока100 = ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ПолучитьОписаниеТиповЧисла(1);
	ОписаниеТиповЧисло15   = ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	//ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура выполняет заполнение отчета автоматически по данным.
//
Процедура ЗаполнитьАвто(СпП, ЭтаФорма) Экспорт

	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения  необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Необходимо указать организацию!");
		Возврат;
	КонецЕсли; 

	СпП.Очистить();

	ПС = ПланыСчетов["Хозрасчетный"];
	Счет83			= ПС.А8300;
	Счет84			= ПС.А8400;
	Счет84_10		= ПС.А8410;
	Счет84_20		= ПС.А8420;
	Счет85			= ПС.А8500;
	Счет85_10		= ПС.А8510;
	Счет85_20		= ПС.Сч8520;
	//Счет85_30		= ПС.Сч8530;
	Счет86			= ПС.Сч86;
	Счет87			= ПС.А8700;
	Счет88			= ПС.Сч88;
	
	// Бухгалтерский итоги по счетам
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	// Бухгалтерские итоги по аналитике
	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт, ОборотДт, 
			|НачальныйОстатокКт, ОборотКт,
			|КонечныйОстатокДт,  КорОборотДт, 
			|КонечныйОстатокКт,  КорОборотКт";

	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);

	// строка 010 "Остаток на начало года"
	П001003 = СНКф(Счет83);
	УстановитьЗначениеПоказателя("П10001003", П001003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001003", "Строка 010 ""Остаток на начало года"", графа 3 ", "+", "!СНК", П001003, Счет83);
	
	П001004 = СНКф(Счет84);
	УстановитьЗначениеПоказателя("П10001004", П001004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001004", "Строка 010 ""Остаток на начало года"", графа 4 ", "+", "!СНК", П001004, Счет84);
	
	П001005 = СНКф(Счет85);
	УстановитьЗначениеПоказателя("П10001005", П001005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001005", "Строка 010 ""Остаток на начало года"", графа 5 ", "+", "!СНК", П001005, Счет85);
	
	П001006 = СНКф(Счет87);
	УстановитьЗначениеПоказателя("П10001006", П001006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001006", "Строка 010 ""Остаток на начало года"", графа 6 ", "+", "!СНК", П001006, Счет87);
	
	П001007 = СНКф(Счет86);
	УстановитьЗначениеПоказателя("П10001007", П001007);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001007", "Строка 010 ""Остаток на начало года"", графа 7 ", "+", "!СНК", П001007, Счет86);
	
	П001008 = СНКф(Счет88);
	УстановитьЗначениеПоказателя("П10001008", П001008);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10001008", "Строка 010 ""Остаток на начало года"", графа 8 ", "+", "!СНК", П001008, Счет88);
	
	// строка 020 "Эмиссия ценных бумаг"
	П002003 = КОф(Счет83)-ДОф(Счет83);
	УстановитьЗначениеПоказателя("П10002003", П002003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10002003", "Строка 020 ""Эмиссия ценных бумаг"", графа 3 ", "+", "!КО-ДО", П002003, Счет83);

	П002004 = КОф(Счет84_10)-ДОф(Счет84_10);
	УстановитьЗначениеПоказателя("П10002004", П002004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10002004", "Строка 020 ""Эмиссия ценных бумаг"", графа 4 ", "+", "!КО-ДО", П002004, Счет84_10);
	
	П002009 = П002003+П002004;
	УстановитьЗначениеПоказателя("П10002009", П002009);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10002009", "Строка 020 ""Эмиссия ценных бумаг"", графа 9 ", "+", "!КО-ДО", П002004, Счет84_10);

	
	// строка 030 "Переоценка долгосрочных активов"
	П003005 = КОф(Счет85_10)-ДОф(Счет85_10);
	УстановитьЗначениеПоказателя("П10003005", П003005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10003005", "Строка 030 ""Переоценка долгосрочных активов"", графа 5 ", "+", "!КО-ДО", П003005, Счет85_10);
	
	П003009 = П003005;
	УстановитьЗначениеПоказателя("П10003009", П003009);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10003009", "Строка 030 ""Переоценка долгосрочных активов"", графа 9 ", "+", "!КО-ДО", П003009, Счет85_10);

	
	// строка 040 "Валютная курсовая разница при формировании уставного капитала"
	П004004 = КОф(Счет84_20)-ДОф(Счет84_20);
	УстановитьЗначениеПоказателя("П10004004", П004004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10004004", "Строка 040 ""Валютная курсовая разница"", графа 4 ", "+", "!КО-ДО", П004004, Счет84_20);
	
	П004009 = П004004;
	УстановитьЗначениеПоказателя("П10004009", П004009);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10004009", "Строка 040 ""Валютная курсовая разница"", графа 9 ", "+", "!КО-ДО", П004009, Счет84_20);
	
	//// строка 050 "Отчисления в резервный капитал"
	П005005 = КОф(Счет85_20)-ДОф(Счет85_20);
	УстановитьЗначениеПоказателя("П10005005", П005005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10005005", "Строка 050 ""Отчисления в резервный капитал"", графа 5 ", "+", "!КО-ДО", П005005, Счет85_20);
	
	П005006 = -Обф(Счет87,Счет85);
	УстановитьЗначениеПоказателя("П10005006", П005006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10005006", "Строка 050 ""Отчисления в резервный капитал"", графа 6 ", "+", "!ОБ", П005006, Счет87);
	
	П005009 = П005005+П005006;
	УстановитьЗначениеПоказателя("П10005009", П005009);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10005009", "Строка 050 ""Отчисления в резервный капитал"", графа 9 ", "+", "!ОБ", П005009, Счет87);

	
	// строка 060 "Нераспределенная прибыль (убыток) текущего года"
	П006006 = КОф(Счет87)-ДОф(Счет87)+ОБф(Счет87,Счет86)+ОБф(Счет87,Счет85);
	УстановитьЗначениеПоказателя("П10006006", П006006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10006006", "Строка 060 ""Нераспределенная прибыль (убыток) текущего года"", графа 6 ", "+", "!КО", П006006, Счет87);
	
	//// строка 070 "Безвозмездно полученное имущество"
	//П007005 = ДО(Счет85_30);
	//УстановитьЗначениеПоказателя("П10007005", П007005);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10007005", "Строка 070 ""Безвозмездно полученное имущество"", графа 5 ", "+", "!ДО", П007005, Счет85_30);
	
	//// строка 080 "Полученные средства по целевому назначению"
	//П008008 = КО(Счет88);
	//УстановитьЗначениеПоказателя("П10008008", П008008);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10008008", "Строка 080 ""Полученные средства по целевому назначению"", графа 8 ", "+", "!КО", П008008, Счет88);
	
	// строка 110 "Рабочий скот"
	П011003 = СККф(Счет83);
	УстановитьЗначениеПоказателя("П10011003", П011003);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011003", "Строка 110 ""Остаток на конец года"", графа 3 ", "+", "!СКК", П011003, Счет83);
	
	П011004 = СККф(Счет84);
	УстановитьЗначениеПоказателя("П10011004", П011004);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011004", "Строка 110 ""Остаток на конец года"", графа 4 ", "+", "!СКК", П011004, Счет84);
	
	П011005 = СККф(Счет85);
	УстановитьЗначениеПоказателя("П10011005", П011005);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011005", "Строка 110 ""Остаток на конец года"", графа 5 ", "+", "!СКК", П011005, Счет85);
	
	П011006 = СККф(Счет87);
	УстановитьЗначениеПоказателя("П10011006", П011006);
	РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011006", "Строка 110 ""Остаток на конец года"", графа 6 ", "+", "!СКК", П011006, Счет87);
	
	//П011007 = СКК(Счет86);
	//УстановитьЗначениеПоказателя("П10011007", П011007);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011007", "Строка 110 ""Остаток на конец года"", графа 7 ", "+", "!СКК", П011007, Счет86);
	//
	//П011008 = СКК(Счет88);
	//УстановитьЗначениеПоказателя("П10011008", П011008);
	//РегламентированнаяОтчетность._ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10011008", "Строка 110 ""Остаток на конец года"", графа 8 ", "+", "!СКК", П011008, Счет88);
	
	Расчет();
	Модифицированность = Истина;

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНДф(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДф()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНКф(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКДф(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СККф(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

Функция ДОф(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

Функция КОф(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБф(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("ФормаОтчета");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мФормаОтчета.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь) Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);
			ОписаниеТиповСтрока100 = ПолучитьОписаниеТиповСтроки(100);
			ОписаниеТиповЧисло1    = ПолучитьОписаниеТиповЧисла(1);
			ОписаниеТиповЧисло15   = ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()Экспорт

	мФормаОтчета.Области.П10001009.Значение	= мФормаОтчета.Области.П10001003.Значение
											+ мФормаОтчета.Области.П10001004.Значение
											+ мФормаОтчета.Области.П10001005.Значение
											+ мФормаОтчета.Области.П10001006.Значение
											+ мФормаОтчета.Области.П10001007.Значение
											+ мФормаОтчета.Области.П10001008.Значение;

	мФормаОтчета.Области.П10002009.Значение	= мФормаОтчета.Области.П10002003.Значение
											+ мФормаОтчета.Области.П10002004.Значение;

	мФормаОтчета.Области.П10003009.Значение	= мФормаОтчета.Области.П10003005.Значение;

	мФормаОтчета.Области.П10004009.Значение	= мФормаОтчета.Области.П10004004.Значение;

	мФормаОтчета.Области.П10005009.Значение	= мФормаОтчета.Области.П10005005.Значение
											+ мФормаОтчета.Области.П10005006.Значение;

	мФормаОтчета.Области.П10006009.Значение	= мФормаОтчета.Области.П10006006.Значение;

	мФормаОтчета.Области.П10007009.Значение	= мФормаОтчета.Области.П10007005.Значение;
											
	мФормаОтчета.Области.П10008009.Значение	= мФормаОтчета.Области.П10008008.Значение;

	мФормаОтчета.Области.П10009009.Значение	= мФормаОтчета.Области.П10009006.Значение;

	мФормаОтчета.Области.П10010009.Значение	= мФормаОтчета.Области.П10010003.Значение
											+ мФормаОтчета.Области.П10010004.Значение
											+ мФормаОтчета.Области.П10010005.Значение
											+ мФормаОтчета.Области.П10010006.Значение
											+ мФормаОтчета.Области.П10010007.Значение
											+ мФормаОтчета.Области.П10010008.Значение;

	мФормаОтчета.Области.П10011009.Значение	= мФормаОтчета.Области.П10011003.Значение
											+ мФормаОтчета.Области.П10011004.Значение
											+ мФормаОтчета.Области.П10011005.Значение
											+ мФормаОтчета.Области.П10011006.Значение
											+ мФормаОтчета.Области.П10011007.Значение
											+ мФормаОтчета.Области.П10011008.Значение;

	мФормаОтчета.Области.П10012003.Значение	= мФормаОтчета.Области.П10011003.Значение
											- мФормаОтчета.Области.П10001003.Значение;
	
	мФормаОтчета.Области.П10012004.Значение	= мФормаОтчета.Области.П10011004.Значение
											- мФормаОтчета.Области.П10001004.Значение;

	мФормаОтчета.Области.П10012005.Значение	= мФормаОтчета.Области.П10011005.Значение
											- мФормаОтчета.Области.П10001005.Значение;
	
	мФормаОтчета.Области.П10012006.Значение	= мФормаОтчета.Области.П10011006.Значение
											- мФормаОтчета.Области.П10001006.Значение;

	мФормаОтчета.Области.П10012007.Значение	= мФормаОтчета.Области.П10011007.Значение
											- мФормаОтчета.Области.П10001007.Значение;

	мФормаОтчета.Области.П10012008.Значение	= мФормаОтчета.Области.П10011008.Значение
											- мФормаОтчета.Области.П10001008.Значение;

	мФормаОтчета.Области.П10012009.Значение	= мФормаОтчета.Области.П10011009.Значение
											- мФормаОтчета.Области.П10001009.Значение;

											
КонецПроцедуры // Расчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

ОписаниеТиповСтрока15  = ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ПолучитьОписаниеТиповСтроки(254);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мТаблицаСоставПоказателей         = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);

мСтруктураВариантыЗаполнения      = Новый Структура;

ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(254);

//ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(0);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

мТаблицаФормОтчета = Новый ТаблицаЗначений;
мТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
мТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
мТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
мТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2003Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение №5 к Приказу МинФина Узбекистана от 27 декабря 2002 года. №140";
НоваяФорма.ДатаНачалоДействия = '20031001';
НоваяФорма.ДатаКонецДействия  = ПустоеЗначениеТипа(Тип("Дата"));
// #КонецЕсли
