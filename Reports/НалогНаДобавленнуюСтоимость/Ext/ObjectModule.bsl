
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Создает массив и заполняет элементы массива нулями
//
// Параметры
//  Размерность  - Число - размерность массива
//
// Возвращаемое значение:
//   Массив
//
Функция МассивНулей(Размерность)

	Массив = Новый Массив(Размерность);
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Массив[Индекс] = 0;
	КонецЦикла;
	Возврат Массив;

КонецФункции // МассивНулей()

// Создает структуру строк по шаблону и заполняет элементами массива
//
// Параметры
//  Шаблон  - Строка - шаблон по которому будут сформированы строки
//  Массив  - Массив - массив из которого будут сформированы строки
//
// Возвращаемое значение:
//   Структура   - структура строк
//
Функция СтруктураСтрок10(Шаблон, Массив, Строки = Неопределено, НачальныйИндекс = 0)

	Если Строки = Неопределено Тогда
		Строки = Новый Структура;
	КонецЕсли;
	Для Индекс = 0 По Массив.ВГраница() Цикл
		КодСтроки = Шаблон + Формат((НачальныйИндекс+Индекс)*10+10, "ЧЦ=3; ЧДЦ=0; ЧВН=");
		Строки.Вставить(КодСтроки, Массив[Индекс]);
	КонецЦикла;
	Возврат Строки;

КонецФункции // СтруктураСтрок()

// Создает структуру строк по шаблону и заполняет элементами массива
//
// Параметры
//  Шаблон  - Строка - шаблон по которому будут сформированы строки
//  Массив  - Массив - массив из которого будут сформированы строки
//
// Возвращаемое значение:
//   Структура   - структура строк
//
Функция СтруктураСтрок1(Шаблон, Массив, Строки = Неопределено, НачальныйИндекс = 0)

	Если Строки = Неопределено Тогда
		Строки = Новый Структура;
	КонецЕсли;
	Для Индекс = 0 По Массив.ВГраница() Цикл
		КодСтроки = Шаблон + Формат((НачальныйИндекс+Индекс)+1, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		Строки.Вставить(КодСтроки, Массив[Индекс]);
	КонецЦикла;
	Возврат Строки;

КонецФункции // СтруктураСтрок()

// Создает ТЗ счетов-фактур
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьТаблицуСчетФактур(Счет = Неопределено, ДляРеестра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"                   , Организация);
	Запрос.УстановитьПараметр("НачалоПериода"                 , НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода"                  , КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ТекущийПериод"                 , НачалоМесяца(КонецПериода));
	Запрос.УстановитьПараметр("НДСВЗачет"                     , Перечисления.ЗачетНДС.НДСВЗачет);
	Запрос.УстановитьПараметр("НДСПо_ОС_НМА_НС"               , Перечисления.ЗачетНДС.НДСПо_ОС_НМА_НС);
	Запрос.УстановитьПараметр("НДСУслугамВСтоимость_ОС_НМА_НС", Перечисления.ЗачетНДС.НДСУслугамВСтоимость_ОС_НМА_НС);
	Запрос.УстановитьПараметр("НДСПоБезвозмездноПолученным"   , Перечисления.ЗачетНДС.НДСПоБезвозмездноПолученным);
	Запрос.УстановитьПараметр("НДСПоРазвлечениям"             , Перечисления.ЗачетНДС.НДСПоРазвлечениям);
	Запрос.УстановитьПараметр("ДляРеестра"                    , ДляРеестра);
	ОтборПоСчету = "";
	Если НЕ (Счет = Неопределено ИЛИ Счет.Пустая()) Тогда
		ОтборПоСчету = ОтборПоСчету + " И СчетКт = &Счет ";
		Запрос.УстановитьПараметр("Счет", Счет); 
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Поставщик
	|		ИНАЧЕ УчетЗачетаНДСОбороты.ПериодМесяц
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Поставщик.ИНН
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Договор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.ПриходныйДокумент
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПриходныйДокумент,
	|	СУММА(УчетЗачетаНДСОбороты.СуммаОборот) КАК Сумма,
	|	СУММА(УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот) КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСВЗачет
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВЗачет,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСВЗачет
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВЗачет,
	
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = Значение(Перечисление.ЗачетНДС.НДСНеоблагаемый)
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНеоблагаемый,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = Значение(Перечисление.ЗачетНДС.НДСНеоблагаемый)
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСНеоблагаемый,
	
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПо_ОС_НМА_НС
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОС,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПо_ОС_НМА_НС
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСОС,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСУслугамВСтоимость_ОС_НМА_НС
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСУслугамВСтоимость_ОС_НМА_НС
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПоРазвлечениям
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК суммаДосуг,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПоРазвлечениям
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСДосуг,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПоБезвозмездноПолученным
	|				ТОГДА ВЫБОР
	|						КОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот <> 0
	|							ТОГДА УчетЗачетаНДСОбороты.СуммаОборот
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезвозмездно,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗачетаНДСОбороты.ЗачетНДС = &НДСПоБезвозмездноПолученным
	|				ТОГДА УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСБезвозмездно,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Регистратор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДляСортировки
	|ИЗ
	|	РегистрНакопления.УчетЗачетаНДС.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			ВЫБОР КОГДА &Организация = Значение(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ Организация = &Организация КОНЕЦ 
	|			И ВЫБОР КОГДА &ДляРеестра ТОГДА ИСТИНА ИНАЧЕ ЗачетНДС <> Значение(Перечисление.ЗачетНДС.НДСНеоблагаемый) КОНЕЦ
	|				"+ОтборПоСчету+") КАК УчетЗачетаНДСОбороты
	|ГДЕ
	|	(НЕ УчетЗачетаНДСОбороты.СуммаНДСОборот + УчетЗачетаНДСОбороты.СуммаНДСПоУслугамОборот + УчетЗачетаНДСОбороты.СуммаНДСПоИмпортуОборот = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Поставщик
	|		ИНАЧЕ УчетЗачетаНДСОбороты.ПериодМесяц
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Поставщик.ИНН
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Договор
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.ПриходныйДокумент
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА УчетЗачетаНДСОбороты.Регистратор
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗачетаНДСОбороты.ПериодМесяц = &ТекущийПериод
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДляСортировки,
	|	Поставщик";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// В СЛЕДСТВИИ ТОГО ЧТО ПРОВОДКИ ПО НДС ДАЮТСЯ БЕЗ СУММЫ ОТ КОТОРОЙ ВЗЯТ НДС, СУММА КОРРЕКТИРУЕТСЯ СЛЕДУЮЩИМ БЛОКОМ
	Для каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.СуммаВЗачет = СтрокаТЗ.НДСВЗачет * 5;
	КонецЦикла; 
	//
	Возврат ТЗ;

КонецФункции // СоздатьТаблицуСчетФактур()

// Формирует таблицу значений доходов при реализации по нулевой ставке НДС
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДоходыСНулевойСтавкойНДС(НачалоПериода, КонецПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СуммаОборот КАК Сумма,
	|	ВложенныйЗапрос.СубконтоДт1ВидыДоговоровПриРеализацииПоСтавкеНДС_0Ссылка КАК ВидДоговора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|		ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|		ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|		ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидыДоговоровПриРеализацииПоСтавкеНДС_0.Ссылка КАК СубконтоДт1ВидыДоговоровПриРеализацииПоСтавкеНДС_0Ссылка
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт В ИЕРАРХИИ (&СписокСчетовКонтрагентов), &ВидСубконтоДоговоры, СчетКт В ИЕРАРХИИ (&СписокСчетовУчетаРеализации), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.СубконтоДт1ВидыДоговоровПриРеализацииПоСтавкеНДС_0Ссылка <> &Пусто"
	;
				   
	// Можно дополнять массив счетами			   
	МассивСчетовКонтрагентов = Новый Массив;
	МассивСчетовКонтрагентов.Добавить(ПланыСчетов.Хозрасчетный.А4000);
	
	МассивСчетовУчетаРеализации = Новый Массив;
	МассивСчетовУчетаРеализации.Добавить(ПланыСчетов.Хозрасчетный.А9000);
				   
	Запрос.УстановитьПараметр("Организация"                , Организация);
	Запрос.УстановитьПараметр("НачалоПериода"              , НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"               , КонецПериода);
	Запрос.УстановитьПараметр("Пусто"                      , Справочники.РеализацияПоСтавкеНДС_0.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокСчетовКонтрагентов"   , МассивСчетовКонтрагентов);
	Запрос.УстановитьПараметр("СписокСчетовУчетаРеализации", МассивСчетовУчетаРеализации);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры"        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
	
КонецФункции // ДоходыСНулевойСтавкойНДС()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РасчетНДС_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	Сумма = МассивНулей(5);
	
	// Расчет
	Сумма[0] = Приложение2_Получить(Истина, "в050");
	Сумма[1] = Приложение3_Получить(Истина, "б050");
	Сумма[2] = Сумма[0] + Сумма[1];
	Сумма[3] = Приложение4_Получить(Истина, "б010");
	Сумма[4] = Сумма[3] - Сумма[2];
	
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а", Сумма, Строки);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // РасчетНДС_Получить()
 
Функция Приложение1_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	Стоимость = МассивНулей(5);
	СуммаНДС  = МассивНулей(5);
	// Расчет
	ТЗ = СоздатьТаблицуСчетФактур();
	// Строка 010
	Стоимость[0] = ТЗ.Итог("СуммаВЗачет");
	СуммаНДС[0]  = ТЗ.Итог("НДСвЗачет");
	// Строка 020
	// Строка 030
	// Строка 040
	// Строка 050
	Стоимость[4] = Стоимость[0]+Стоимость[1]-Стоимость[2]-Стоимость[3];
	СуммаНДС[4]  = СуммаНДС[0]+СуммаНДС[1]-СуммаНДС[2]-СуммаНДС[3];
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а", Стоимость, Строки);
	Строки = СтруктураСтрок10("б", СуммаНДС , Строки);
	
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение1_Получить()

Функция Приложение2_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	// основные строки
	УдельныйВес   = МассивНулей(6);
	СуммаОборота  = МассивНулей(6);
	СуммаНДС      = МассивНулей(6);
	// подстроки строки 010
	УдельныйВес010   = МассивНулей(5);
	СуммаОборота010  = МассивНулей(5);
	СуммаНДС010      = МассивНулей(5);
	// подстроки строки 0104
	УдельныйВес0104   = МассивНулей(4);
	СуммаОборота0104  = МассивНулей(4);
	СуммаНДС0104      = МассивНулей(4);
	// подстроки строки 030
	УдельныйВес030   = МассивНулей(4);
	СуммаОборота030  = МассивНулей(4);
	СуммаНДС030      = МассивНулей(4);
	// подстроки строки 040
	УдельныйВес040   = МассивНулей(4);
	СуммаОборота040  = МассивНулей(4);
	СуммаНДС040      = МассивНулей(4);
	// подстроки строки 050
	УдельныйВес050   = МассивНулей(3);
	СуммаОборота050  = МассивНулей(3);
	СуммаНДС050      = МассивНулей(3);
	// подстроки строки 0503
	УдельныйВес0503   = МассивНулей(2);
	СуммаОборота0503  = МассивНулей(2);
	СуммаНДС0503      = МассивНулей(2);
	
	//Расчет
	Обороты = Приложение4_Получить();
	// строка 010
	СуммаОборота[0] = Обороты.а010 - Обороты.а01005 - Обороты.а01006;
	// строка 0101
	СуммаОборота010[0] = СуммаОборота[0] - Обороты.а010203;
	УдельныйВес010[0]  = 100;
	// строка 0102
	СуммаОборота010[1] = Обороты.а01001 + Обороты.а010204 + Обороты.а01003 + Обороты.а01004 + Обороты.а01007 + Обороты.а01008;
	УдельныйВес010[1]  = ?(СуммаОборота010[0]=0, 0, СуммаОборота010[1]*100/СуммаОборота010[0]);
	// строка 0103
	СуммаОборота010[2] = Обороты.а010202;
	УдельныйВес010[2]  = ?(СуммаОборота010[0]=0, 0, СуммаОборота010[2]*100/СуммаОборота010[0]);
	// строка 0104
	// строка 01041
	// строка 01042
	УдельныйВес0104[1] = ?(СуммаОборота010[0]=0, 0, СуммаОборота0104[1]*100/СуммаОборота010[0]);
	// строка 01043
	// строка 01044
	УдельныйВес0104[3] = ?(СуммаОборота0104[0]=0, 0, СуммаОборота0104[2]*100/СуммаОборота0104[0]);
	// строка 0105
	СуммаОборота010[4] = Обороты.а010201 + Обороты.а010802;
	УдельныйВес010[4]  = ?(СуммаОборота010[0]=0, 0, СуммаОборота010[4]*100/СуммаОборота010[0]);
	// строка 020
	СуммаНДС[1] = Приложение1_Получить(Истина, "б050");
	// строка 0301
	// строка 0302
	// строка 0303
	// строка 0304
	// строка 030	раздельный метод учета НДС
	СуммаНДС[2] = СуммаНДС030[0] + СуммаНДС030[1] + СуммаНДС030[2] + СуммаНДС030[3];
	// строка 040	пропорциональный метод учета НДС
	СуммаНДС[3] = СуммаНДС[1] - СуммаНДС[2];
	// строка 0401
	СуммаНДС040[0] = СуммаНДС[3] * УдельныйВес010[1] / 100;
	// строка 0402
	СуммаНДС040[1] = СуммаНДС[3] * УдельныйВес010[2] / 100;
	// строка 0403
	СуммаНДС040[2] = СуммаНДС[3] * УдельныйВес0104[1] / 100;
	// строка 0404
	СуммаНДС040[3] = СуммаНДС[3] * УдельныйВес010[4] / 100;
	// строка 0501
	СуммаНДС050[0] = СуммаНДС030[0] + СуммаНДС040[0];
	// строка 0502
	СуммаНДС050[1] = СуммаНДС030[1] + СуммаНДС040[1];
	// строка 0503
	СуммаНДС050[2] = СуммаНДС030[2] + СуммаНДС040[2];
	// строка 05031
	СуммаНДС0503[0] = СуммаНДС050[2] * УдельныйВес0104[3] / 100;
	// строка 05032
	СуммаНДС0503[1] = СуммаНДС050[2] - СуммаНДС0503[0];
	// строка 050
	СуммаНДС[4] = СуммаНДС050[0] + СуммаНДС050[1] + СуммаНДС0503[0];
	// строка 060
	СуммаНДС[5] = СуммаНДС[1] - СуммаНДС[4];
	
	// Формирование структуры строк
	Строки = Новый Структура;
	// основные строки
	Строки = СтруктураСтрок10("а", УдельныйВес , Строки);
	Строки = СтруктураСтрок10("б", СуммаОборота, Строки);
	Строки = СтруктураСтрок10("в", СуммаНДС    , Строки);
	// подстроки строки 010
	Строки = СтруктураСтрок1("а010", УдельныйВес010 , Строки);
	Строки = СтруктураСтрок1("б010", СуммаОборота010, Строки);
	Строки = СтруктураСтрок1("в010", СуммаНДС010    , Строки);
	// подстроки строки 0104
	Строки = СтруктураСтрок1("а0104", УдельныйВес0104 , Строки);
	Строки = СтруктураСтрок1("б0104", СуммаОборота0104, Строки);
	Строки = СтруктураСтрок1("в0104", СуммаНДС0104    , Строки);
	// подстроки строки 030
	Строки = СтруктураСтрок1("а030", УдельныйВес030 , Строки);
	Строки = СтруктураСтрок1("б030", СуммаОборота030, Строки);
	Строки = СтруктураСтрок1("в030", СуммаНДС030    , Строки);
	// подстроки строки 040
	Строки = СтруктураСтрок1("а040", УдельныйВес040 , Строки);
	Строки = СтруктураСтрок1("б040", СуммаОборота040, Строки);
	Строки = СтруктураСтрок1("в040", СуммаНДС040    , Строки);
	// подстроки строки 050
	Строки = СтруктураСтрок1("а050", УдельныйВес050 , Строки);
	Строки = СтруктураСтрок1("б050", СуммаОборота050, Строки);
	Строки = СтруктураСтрок1("в050", СуммаНДС050    , Строки);
	// подстроки строки 0503
	Строки = СтруктураСтрок1("а0503", УдельныйВес0503 , Строки);
	Строки = СтруктураСтрок1("б0503", СуммаОборота0503, Строки);
	Строки = СтруктураСтрок1("в0503", СуммаНДС0503    , Строки);
	
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение2_Получить()

Функция Приложение3_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	Стоимость = МассивНулей(5);
	СуммаНДС  = МассивНулей(5);
	
	//
	
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а", Стоимость, Строки);
	Строки = СтруктураСтрок10("б", СуммаНДС , Строки);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение5_Получить()

Функция Приложение4_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	а010 = 0;	б010 = 0;
	Стоимость010 = МассивНулей(8);
	СуммаНДС010  = МассивНулей(8);
	Стоимость102 = МассивНулей(4);
	СуммаНДС102  = МассивНулей(4);
	Стоимость108 = МассивНулей(2);
	СуммаНДС108  = МассивНулей(2);
	//
	БИ = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "ОборотКт";
	БИ.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", НачалоПериода, КонецПериода, , , , , , "Организация", Организация);
	// Расчитываем строку 010 также как и в "Отчете о финансовых результатах"
	Строка10ФинРезультата = НалоговаяОтчетность.РассчитатьОбъемВыполненныхРаботЗаПериод(Организация, НачалоПериода, КонецПериода);
	// Расчитываем строку 010 "Отчета о финансовых результатах" самостоятельно для проверки
	РасчетноеЗначениеСтроки10ФинРезультата = КО(ПланыСчетов.Хозрасчетный.А9000, БИ);
	// Строка 0101
	// Строка 01021
	Стоимость102[0] = Приложение5_Получить(Истина, "а010");
	// Строка 01022
	Стоимость102[1] = Приложение6_Получить(Истина, "а010");
	// Строка 01023
	СуммаНДС102[2]  = Стоимость102[2] * 20 / 100;
	// Строка 01024
	Стоимость102[3] = РасчетноеЗначениеСтроки10ФинРезультата - Стоимость102[0] - Стоимость102[1] - Стоимость102[2];
	СуммаНДС102[3]  = Стоимость102[3] * 20 / 100;
	// Строка 0102
	Стоимость010[1] = РасчетноеЗначениеСтроки10ФинРезультата;
	СуммаНДС010[1]  = СуммаНДС102[2] + СуммаНДС102[3];
	// Строка 0103
	// Строка 0104
	// Строка 0105
	Стоимость010[4] = КО(ПланыСчетов.Хозрасчетный.А9310, БИ) + КО(ПланыСчетов.Хозрасчетный.А9320, БИ);
	СуммаНДС010[4]  = Стоимость010[4] * 20 / 100;
	// Строка 0106
	Стоимость010[5] = КО(ПланыСчетов.Хозрасчетный.А9550, БИ);
	СуммаНДС010[5]  = Стоимость010[5] * 20 / 100;
	// Строка 0107
	Стоимость010[6] = КО(ПланыСчетов.Хозрасчетный.А9350, БИ);
	СуммаНДС010[6]  = Стоимость010[6] * 20 / 100;
	// Строка 0108
	Стоимость010[7] = КО(ПланыСчетов.Хозрасчетный.А9300, БИ)
					- КО(ПланыСчетов.Хозрасчетный.А9310, БИ)
					- КО(ПланыСчетов.Хозрасчетный.А9320, БИ)
					- КО(ПланыСчетов.Хозрасчетный.А9350, БИ);
	СуммаНДС010[7]  = Стоимость010[7] * 20 / 100;
	// Строка 010
	Для к=0 По 7 Цикл
		а010 = а010 + Стоимость010[к];
		б010 = б010 + СуммаНДС010[к];
	КонецЦикла;
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки.Вставить("а010", а010);
	Строки.Вставить("б010", б010);
	Строки = СтруктураСтрок1("а010" , Стоимость010, Строки);
	Строки = СтруктураСтрок1("б010" , СуммаНДС010 , Строки);
	Строки = СтруктураСтрок1("а0102", Стоимость102, Строки);
	Строки = СтруктураСтрок1("б0102", СуммаНДС102 , Строки);
	Строки = СтруктураСтрок1("а0108", Стоимость108, Строки);
	Строки = СтруктураСтрок1("б0108", СуммаНДС108 , Строки);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение4_Получить()

Функция Приложение5_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	НОБ  = МассивНулей(3);
	Срок = МассивНулей(3);
	
	//
	
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а", НОБ , Строки);
	Строки = СтруктураСтрок10("б", Срок, Строки);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение5_Получить()

Функция Приложение6_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных массивов нулей
	НОБ = МассивНулей(7);
	а051 = 0;	а052 = 0;
	
	// Расчет
	ТЗДоходов = ДоходыСНулевойСтавкойНДС(НачалоПериода, КонецПериода);
	Для каждого СтрокаТЗ Из ТЗДоходов Цикл
		Если СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.РеализацияНаЭкспорт Тогда
			НОБ[1] = НОБ[1] + СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.РеализацияДипКорпусу Тогда
			НОБ[2] = НОБ[2] + СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.ПереработкаНаТаможеннойТерритории Тогда
			НОБ[3] = НОБ[3] + СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.МеждународныйТранзитГрузов Тогда
			а051 = а051 + СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.МеждународнаяПеревозкаПассажиров Тогда
			а052 = а052 + СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.ВидДоговора = Справочники.РеализацияПоСтавкеНДС_0.КоммунальныеУслуги Тогда
			НОБ[5] = НОБ[1] + СтрокаТЗ.Сумма;
		Иначе
			НОБ[6] = НОБ[6] + СтрокаТЗ.Сумма;
		КонецЕсли;
	КонецЦикла;
	НОБ[4] = а051+а052;
	Для к=1 По 6 Цикл
		НОБ[0] = НОБ[0] + НОБ[к];
	КонецЦикла;
	
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки = СтруктураСтрок10("а", НОБ, Строки);
	Строки.Вставить("а051", а051);
	Строки.Вставить("а052", а052);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение6_Получить()

Функция Приложение7_Получить(ПолучитьСтроку = Ложь, Стр = "") Экспорт
	
	// Формирование начальных данных
	Сумма = 0            ;	НДС = 0;
	СуммаОС = 0          ;	НДСОС = 0;
	СуммаУслуги = 0      ;	НДСУслуги = 0;
	СуммаБезвозмездно = 0;	НДСБезвозмездно = 0;
	СуммаДосуг = 0	     ;	НДСДосуг = 0;
	СуммаВЗачет = 0	     ;	НДСвЗачет = 0;
	//
	ТЗФактур = СоздатьТаблицуСчетФактур(СчетДляРеестра, Истина);
	ТЗФактур.Сортировать("Регистратор");
	ТЗФактур.Свернуть("Регистратор, Поставщик, ИНН, Договор, ПриходныйДокумент, ДляСортировки", "НДС, НДСБезвозмездно, НДСВЗачет, НДСДосуг, НДСОС, НДСУслуги, НДСНеоблагаемый, Сумма, СуммаБезвозмездно, СуммаВЗачет, СуммаДосуг, СуммаОС, СуммаУслуги, СуммаНеоблагаемый");
	Сумма             = ТЗФактур.Итог("Сумма");
	НДС               = ТЗФактур.Итог("НДС");
	СуммаОС           = ТЗФактур.Итог("СуммаОС");
	НДСОС             = ТЗФактур.Итог("НДСОС");
	СуммаУслуги       = ТЗФактур.Итог("СуммаУслуги");
	НДСУслуги         = ТЗФактур.Итог("НДСУслуги");
	СуммаБезвозмездно = ТЗФактур.Итог("СуммаБезвозмездно");
	НДСБезвозмездно   = ТЗФактур.Итог("НДСБезвозмездно");
	СуммаДосуг        = ТЗФактур.Итог("СуммаДосуг");
	НДСДосуг          = ТЗФактур.Итог("НДСДосуг");
	СуммаВЗачет       = ТЗФактур.Итог("СуммаВЗачет");
	НДСвЗачет         = ТЗФактур.Итог("НДСвЗачет");
	// Формирование структуры строк
	Строки = Новый Структура;
	Строки.Вставить("Сумма"            , Сумма);
	Строки.Вставить("НДС"              , НДС);
	Строки.Вставить("СуммаОС"          , СуммаОС);
	Строки.Вставить("НДСОС"            , НДСОС);
	Строки.Вставить("СуммаУслуги"      , СуммаУслуги);
	Строки.Вставить("НДСУслуги"        , НДСУслуги);
	Строки.Вставить("СуммаБезвозмездно", СуммаБезвозмездно);
	Строки.Вставить("НДСБезвозмездно"  , НДСБезвозмездно);
	Строки.Вставить("СуммаДосуг"       , СуммаДосуг);
	Строки.Вставить("НДСДосуг"         , НДСДосуг);
	Строки.Вставить("СуммаВЗачет"      , СуммаВЗачет);
	Строки.Вставить("НДСвЗачет"        , НДСвЗачет);
	Возврат ?(ПолучитьСтроку, Строки[Стр], Строки);
	
КонецФункции // Приложение7_Получить()
