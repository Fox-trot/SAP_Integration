Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент Тогда

Перем ТабИнтервалы;
Перем Запрос;

Процедура УстановитьТекстЗапроса()

	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.ОстатокДолга0
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокКт КАК ОстатокДолга0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В (&СчетаКД)
	|					И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В (&ИсключенныеСчета)),
	|				&ВидыСубконтоКД,
	|				Организация = &Организация) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос";
	//|				ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "И Организация = &Организация", "");
	КонецЕсли;
	
	ТекстЗапросаПоОборотам =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВзаиморасчетыОбороты.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала1,
	|			,
	|			Счет В (&СчетаКД)
	|				И (НЕ Счет.Забалансовый)
	|				И (НЕ Счет В (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			Организация = &Организация,
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	//|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапросаПоОборотам = СтрЗаменить(ТекстЗапросаПоОборотам, "Организация = &Организация", "");
	КонецЕсли;
	
	КолИнтервалов = ТабИнтервалы.Количество();
	
	ТекстЗапросаОстатокИОбороты = 
	"ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Контрагент,
	|	Остатки.Договор,
	|	Остатки.Счет,
	|	Остатки.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + ",
		|	ЕСТЬNULL(Обороты" + Ном + ".УвеличениеДолга" + Ном + ", 0) КАК УвеличениеДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
	|ИЗ
	|	(" + ТекстЗапросаПоОстаткам + ") КАК Остатки";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотам, "УвеличениеДолга1", "УвеличениеДолга" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&КонецИнтервала1", "&КонецИнтервала" + Ном);
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапросаПоОборотамИнтервала + ") КАК " + ОборотыНом + "
		|	ПО
		|		Остатки.Организация = " + ОборотыНом + ".Организация
		|			И Остатки.Контрагент = " + ОборотыНом + ".Контрагент
		|			И Остатки.Договор = " + ОборотыНом + ".Договор
		|			И Остатки.Счет = " + ОборотыНом + ".Счет";
	КонецЦикла;
	
	ТекстЗапросаОстаткиПоПериодам =
	"ВЫБРАТЬ
	|	ОстатокИОбороты.Организация,
	|	ОстатокИОбороты.Контрагент,
	|	ОстатокИОбороты.Договор,
	|	ОстатокИОбороты.Счет,
	|	ОстатокИОбороты.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстатокИОбороты.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ВыражениеОстатка = "ОстатокИОбороты.ОстатокДолга0";
		Для й = 1 По Ном Цикл
			ВыражениеОстатка = ВыражениеОстатка + " - ОстатокИОбороты.УвеличениеДолга" + й;
		КонецЦикла;
		ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + ",
		|	ВЫБОР
		|		КОГДА " + ВыражениеОстатка + " > 0
		|			ТОГДА " + ВыражениеОстатка + "
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + "
	|ИЗ
	|	(" + ТекстЗапросаОстатокИОбороты + ") КАК ОстатокИОбороты";
	
	ТекстПоказателей = "
	|	ОстаткиПоПериодам.ОстатокДолга0 КАК ОстатокДолга";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + (Ном - 1) + " - ОстаткиПоПериодам.ОстатокДолга" + Ном + " КАК ОстатокПериода" + Ном;
	КонецЦикла;
	Если КолИнтервалов > 0 Тогда
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + КолИнтервалов + " КАК ОстатокПериода" + (КолИнтервалов + 1);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоПериодам.Организация КАК Организация,
	|	ОстаткиПоПериодам.Контрагент КАК Контрагент,
	|	ОстаткиПоПериодам.Договор КАК Договор,
	|	ОстаткиПоПериодам.Счет КАК Счет,
	|	ОстаткиПоПериодам.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,"
	+ ТекстПоказателей + "
	|ИЗ
	|	(" + ТекстЗапросаОстаткиПоПериодам + ") КАК ОстаткиПоПериодам";
	
	Запрос.Текст = ТекстЗапроса;

КонецПроцедуры

Процедура УстановитьИнтервалыЗапроса()

	Сутки = 60 * 60 * 24;
	
	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("ИмяИнтервала");
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	ДатаКон = ?(Период = '00010101', РабочаяДата, Период);
	СписокИнтервалов.СортироватьПоЗначению();
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из СписокИнтервалов Цикл
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.ИмяИнтервала    = Интервал.Представление;
		НоваяСтрока.НомерИнтервала  = Индекс;
		Если Первый Тогда  
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон);
			ПредыдущееЗначение = Интервал.Значение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон)  - (ПредыдущееЗначение + 1) * Сутки;
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
		
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаКон) + 1);
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		Запрос.УстановитьПараметр("НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		Запрос.УстановитьПараметр("КонецИнтервала"  + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
КонецПроцедуры
	
Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	КомпоновщикНастроек.Восстановить();
	НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Ложь, НастройкаКомпоновкиДанных);
		
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	// Данные для компоновщика получаем запросом и передаем в СКД таблицу значений
	Запрос = Новый Запрос;
	
	УстановитьИнтервалыЗапроса();
	
	УстановитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсключенныеСчета", СтандартныеОтчеты.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	ЗапросПоСчетам = Новый Запрос;
	ЗапросПоСчетам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ГДЕ
	|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)";
	СчетаКД = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	Запрос.УстановитьПараметр("СчетаКД", СчетаКД);

	ПромежуточныеДанные = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляВыборки=новый ТаблицаЗначений;
	ТаблицаДляВыборки.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДляВыборки.Колонки.Добавить("Договор",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДляВыборки.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДляВыборки.Колонки.Добавить("Счет",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляВыборки.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляВыборки.Колонки.Добавить("Интервал",ПолучитьОписаниеТиповСтроки(100));
	ТаблицаДляВыборки.Колонки.Добавить("ПолеСортировки",ПолучитьОписаниеТиповЧисла(10));
	
	Для Каждого Строка Из ПромежуточныеДанные Цикл
		
		
		Для н=1 по СписокИнтервалов.Количество() Цикл
			
			Если Строка["ОстатокПериода"+Строка(н)]<>0 Тогда
				
				НоваяСтрока=ТаблицаДляВыборки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				НоваяСтрока.Сумма=Строка["ОстатокПериода"+Строка(н)];
				НоваяСтрока.Интервал=СписокИнтервалов[н-1].Представление;
				НоваяСтрока.ПолеСортировки=СписокИнтервалов[н-1].Значение;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если Строка["ОстатокПериода"+Строка(СписокИнтервалов.Количество()+1)]<>0 Тогда
			
			НоваяСтрока=ТаблицаДляВыборки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Сумма=Строка["ОстатокПериода"+Строка(СписокИнтервалов.Количество()+1)];
			НоваяСтрока.Интервал="Свыше "+Строка(СписокИнтервалов[СписокИнтервалов.Количество()-1].Значение)+" дней";
			НоваяСтрока.ПолеСортировки=СписокИнтервалов[СписокИнтервалов.Количество()-1].Значение+1;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Таблица.Контрагент,
	|	Таблица.Счет,
	|	Таблица.Сумма,
	|	Таблица.Интервал,
	|	Таблица.ПолеСортировки,
	|	Таблица.Договор,
	|	Таблица.Организация
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&ТаблицаДляВыборки КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Организация,
	|	Таблица.Контрагент,
	|	Таблица.Счет,
	|	Таблица.Договор,
	|	Таблица.Сумма,
	|	Таблица.Интервал,
	|	Таблица.ПолеСортировки,
	|	Таблица.Счет.Код
	|ИЗ
	|	Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Таблица";
	
	
	Запрос.УстановитьПараметр("ТаблицаДляВыборки",ТаблицаДляВыборки);
	ЗадолженностьПоСрокам=Запрос.Выполнить();
	
	
	
	
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ЗадолженностьПоСрокам", ЗадолженностьПоСрокам);

	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Период);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Организация", Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
		
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();

	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Кредиторская задолженность по срокам долга с расшифровкой по счетам";
	
	Возврат СтандартныеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);

КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период",  Период);
	
	Если Не ЗначениеЗаполнено(СписокИнтервалов) Тогда
		СписокИнтервалов.Добавить(7 , "До 7 дней");
		СписокИнтервалов.Добавить(15, "От 8 до 15 дней");
		СписокИнтервалов.Добавить(30, "От 16 до 30 дней");
		СписокИнтервалов.Добавить(60, "От 31 до 60 дней");
		СписокИнтервалов.Добавить(90, "От 61 до 90 дней");
	КонецЕсли;
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли