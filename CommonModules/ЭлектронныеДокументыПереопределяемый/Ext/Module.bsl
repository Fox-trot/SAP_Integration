////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактураБезАкта);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактураФарм);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если СуществуютТовары(Источник.Ссылка) Тогда
			ПараметрыЭД.ВидЭД = ?(ФорматCML, Перечисления.ВидыЭД.ТОРГ12, Перечисления.ВидыЭД.ТОРГ12Продавец);
		Иначе
			ПараметрыЭД.ВидЭД = ?(ФорматCML, Перечисления.ВидыЭД.ТОРГ12, Перечисления.ВидыЭД.АктИсполнитель);
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	// Электронные документы
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Банки",       "Банки");
	// Конец электронные документы
	
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков", "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты", "Валюты");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	
КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соответствия - имя переменной, используемой в коде библиотеки;
//  Значение соответствия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	
	//СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных", 	    Неопределено);
	//СоответствиеРеквизитовОбъекта.Вставить("НомерСчета", "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	СоответствиеРеквизитовОбъекта.Вставить("ДоговорыКонтрагентов",                 "ДоговорыКонтрагентов");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",   "ОГРН");
	
КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", "ИспользоватьЭлектронныеЦифровыеПодписи");
	// Конец электронные документы
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	//Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	//Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	//Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	//Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьСоответствиеСтавокНДС.
// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактураВыданный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт

	Возврат Ложь;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  СтруктураКлючевыхРеквизитов - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		СтруктураКлючевыхРеквизитов.Вставить("АгентскиеУслуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураПолученный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	//ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
	//	// шапка
	//	СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
	//	СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	//	
	//	// ТЧ
	//	СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
	//	СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
	//	СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
	//	СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	//	
	//ИначеЕсли ИмяОбъекта = "Документ.КорректировкаПоступления" Тогда
	//	// шапка
	//	СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
	//	СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	//	
	//	// ТЧ
	//	СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
	//	СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
	//	СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
	//	СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	//	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

//<Raxx

// Переопределить
Функция ПолучитьСведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЮрФизЛицо, "Наименование, ИНН, НаименованиеПолное, ОсновнойБанковскийСчет, КодПоОКПО, КодОКОНХ, КодОКЭД, КодПлательщикаНДС");//УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы, БанковскийСчет);
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда	
		ЗаписьЭлектроннойПочты = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(ЮрФизЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email организации"));							
		ЗаписьТелефона = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(ЮрФизЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);	
	Иначе
		ЗаписьЭлектроннойПочты = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(ЮрФизЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email контрагента"));							
		ЗаписьТелефона = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(ЮрФизЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);	
	КонецЕсли;
		
	Данные.Вставить("Email", ЗаписьЭлектроннойПочты.Представление);
	Данные.Вставить("Телефон", ЗаписьТелефона.Представление);
	Данные.Вставить("Телефоны", ЗаписьТелефона.Представление);
	Данные.Вставить("ПолноеНаименование", Данные.НаименованиеПолное);
	Данные.Вставить("НомерСчета", Данные.ОсновнойБанковскийСчет.НомерСчета);
	Данные.Вставить("ЛицевойСчет", Данные.НаименованиеПолное);
	Данные.Вставить("Банк", Данные.ОсновнойБанковскийСчет.Банк);
	Данные.Вставить("Представление", Данные.НаименованиеПолное);
	Данные.Вставить("КодОКВЭД", Данные.КодОКЭД);
	
	//Данные.Вставить("Email", "email@mail.ru");
	//Данные.Вставить("Телефон", "1212121");

	Возврат Данные; 
	
КонецФункции

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура venkonЗаполнитьДанныеПоСчетФактуреГост(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ТекстОшибки = "") Экспорт
	
	ДанныеДляФормированияЭД = ПолучитьДанныеДляФормированияЭД(СсылкаНаОбъект);
	
	Если ДанныеДляФормированияЭД = Неопределено Тогда
		ТекстОшибки = "Ошибка при получении данных для ЭД!";
		Возврат;
	КонецЕсли;
	
	ВерсияСоставаЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальнуюВерсиюСоставаЭД(СсылкаНаОбъект.Дата);
	
	// Версия 1.0
	Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия10(ДеревоДанных, ДанныеДляФормированияЭД);
	// Версия 2.0
	ИначеЕсли  ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия20(ДеревоДанных, ДанныеДляФормированияЭД);
	// Версия 3.0
	ИначеЕсли  ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия30(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД);
	// Версия 4.0
	ИначеЕсли  ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40 Тогда
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия40(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД);
	ИначеЕсли  ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 Тогда
	// Версия 5.0 Интеграция
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия50(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД);
	ИначеЕсли  ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
	// Версия 7.0 Доверенность, департаменты
		venkonЗаполнитьДанныеПоСчетФактуреГостВерсия70(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Доверенность.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура venkonЗаполнитьДанныеПоДоверенности(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ТекстОшибки = "") Экспорт
	
	ОбъектДоверенности = СсылкаНаОбъект.ПолучитьОбъект();
	ДанныеДляФормированияЭД = Неопределено;
	ОбъектДоверенности.Печать("M2", , , , Истина, ДанныеДляФормированияЭД);
	
	Если ДанныеДляФормированияЭД = Неопределено Тогда
		ТекстОшибки = "Ошибка при получении данных для ЭД!";
		Возврат;
	КонецЕсли;
	
	ВерсияСоставаЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальнуюВерсиюСоставаЭД(СсылкаНаОбъект.Дата);
	
	// Версия 7.0
	Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
		venkonЗаполнитьДанныеПоДоверенностиВерсия70(ДеревоДанных, ДанныеДляФормированияЭД);
	КонецЕсли;
	
КонецПроцедуры

// Запонения данных для версии 1.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия10(ДеревоДанных, ДанныеДляФормированияЭД)
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); // ?
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	venkonЗаполнитьДанныеУчастника10(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника10(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВалютаКод",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Наименование", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ЭтоУслуга");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И (ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ЭтоУслуга			     = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.ИдТовараУКонтрагента	 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаАкциз    = Строка.СтавкаАкциза;
		НоваяСтрока.СуммаАкциз     = Строка.СуммаАкциза;
		НоваяСтрока.СтавкаНДСТип = "процент";
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			НоваяСтрока.ТаможеннаяДекларация = ТаможеннаяДекларация();
			Декларация = НоваяСтрока.ТаможеннаяДекларация.Добавить();
			Декларация.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
			Декларация.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		КонецЕсли;
		//НоваяСтрока.Акциза      = "без акциза";

		СтруктураАкцизногоНалога                       = ПолучитьСтавкуНалога(Строка.Товар.ВидАкцизнойПродукции, ДанныеДляФормированияЭД.Дата);		
		НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога    = ?(СтруктураАкцизногоНалога.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.Процент, 1, 0);
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			//НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ТолькоУслуги", ТолькоУслуги);
	
	//Платежно-расчетные документы
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		
	Если ДанныеДляФормированияЭД.ТаблицаДатОплат <> Неопределено Тогда
	
		Для Каждого ПлатежныйДокумент Из ДанныеДляФормированияЭД.ТаблицаДатОплат Цикл
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.ДатаПРД  = ПлатежныйДокумент.ДатаПлатежноРасчетногоДокумента;
			НоваяСтрока.НомерПРД = ПлатежныйДокумент.НомерПлатежноРасчетногоДокумента;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ROOT.Expansion.ПлатежноРасчетныеДокументы");
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 2.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия20(ДеревоДанных, ДанныеДляФормированияЭД)
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); 
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	venkonЗаполнитьДанныеУчастника20(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника20(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВалютаКод",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Наименование", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ЭтоУслуга");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И (ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ЭтоУслуга			     = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.ИдТовараУКонтрагента	 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		// Начиная с этой версии в общую сумму по позиции включается также скмма акциза
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС+ Строка.СуммаАкциза; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаАкциз    = Строка.СтавкаАкциза;
		НоваяСтрока.СуммаАкциз     = Строка.СуммаАкциза;
		НоваяСтрока.СтавкаНДСТип = "процент";
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			НоваяСтрока.ТаможеннаяДекларация = ТаможеннаяДекларация();
			Декларация = НоваяСтрока.ТаможеннаяДекларация.Добавить();
			Декларация.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
			Декларация.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		КонецЕсли;

		СтруктураАкцизногоНалога                       = ПолучитьСтавкуНалога(Строка.Товар.ВидАкцизнойПродукции, ДанныеДляФормированияЭД.Дата);		
		НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога    = ?(СтруктураАкцизногоНалога.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.Процент, 1, 0);
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			//НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ТолькоУслуги", ТолькоУслуги);
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВерсияСостава", 2);
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 3.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия30(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД)
	
	
	Если СтруктураЭД.Свойство("ВидЭД") И СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "002"); 
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); 
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	venkonЗаполнитьДанныеУчастника30(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника30(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("GoodID");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И (ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ThisIsService			 = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.GoodID	                 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		// Начиная с этой версии в общую сумму по позиции включается также скмма акциза
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС+ Строка.СуммаАкциза; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаАкциз    = Строка.СтавкаАкциза;
		НоваяСтрока.СуммаАкциз     = Строка.СуммаАкциза;
		НоваяСтрока.СтавкаНДСТип = "процент";
		//Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
		//	НоваяСтрока.ТаможеннаяДекларация = ТаможеннаяДекларация();
		//	Декларация = НоваяСтрока.ТаможеннаяДекларация.Добавить();
		//	Декларация.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
		//	Декларация.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		//КонецЕсли;

		//СтруктураАкцизногоНалога                       = УчетАкцизногоНалога.ПолучитьСтавкуНалога(Строка.Товар.ВидАкцизнойПродукции, ДанныеДляФормированияЭД.Дата);		
		//НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога    = ?(СтруктураАкцизногоНалога.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.Процент, 1, 0);
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			//НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Запоминаем сумму документа
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	СтруктураЭД.Вставить("СуммаДокумента", ?(СуммаДокумента = Неопределено, 0, СуммаДокумента));
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 3);
	
	// Скорее всего надо будет добавить новую версию ЭД
	// Реквизиты доверенности
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьНомер") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityNum", ДанныеДляФормированияЭД.ДоверенностьНомер); // Номер
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьДата") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityDate", ДанныеДляФормированияЭД.ДоверенностьДата); // Дата
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьЧерезКого") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityName", ДанныеДляФормированияЭД.ДоверенностьЧерезКого); // ФИО получателя
	КонецЕсли;
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 4.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия40(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД)
	
	Если СтруктураЭД.Свойство("ВидЭД") И СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "002"); 
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); 
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	venkonЗаполнитьДанныеУчастника40(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника40(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode",   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("GoodID");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ThisIsService			 = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.GoodID	                 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма) + Строка.СуммаАкциза;
		// Начиная с этой версии в общую сумму по позиции включается также скмма акциза
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		//НоваяСтрока.СтавкаАкциз    = Строка.СтавкаАкциза;
		//НоваяСтрока.СуммаАкциз     = Строка.СуммаАкциза;
		НоваяСтрока.СтавкаНДСТип = "процент";
		//Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
		//	НоваяСтрока.ТаможеннаяДекларация = ТаможеннаяДекларация();
		//	Декларация = НоваяСтрока.ТаможеннаяДекларация.Добавить();
		//	Декларация.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
		//	Декларация.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		//КонецЕсли;

		//СтруктураАкцизногоНалога                       = УчетАкцизногоНалога.ПолучитьСтавкуНалога(Строка.Товар.ВидАкцизнойПродукции, ДанныеДляФормированияЭД.Дата);		
		//НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога    = ?(СтруктураАкцизногоНалога.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.Процент, 1, 0);
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			//НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	//ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Запоминаем сумму документа
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	СтруктураЭД.Вставить("СуммаДокумента", ?(СуммаДокумента = Неопределено, 0, СуммаДокумента));
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 4);
	
	// Скорее всего надо будет добавить новую версию ЭД
	// Реквизиты доверенности
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьНомер") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityNum", ДанныеДляФормированияЭД.ДоверенностьНомер); // Номер
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьДата") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityDate", ДанныеДляФормированияЭД.ДоверенностьДата); // Дата
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьЧерезКого") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityName", ДанныеДляФормированияЭД.ДоверенностьЧерезКого); // ФИО получателя
	КонецЕсли;
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 5.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия50(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД)
	
	Если СтруктураЭД.Свойство("ВидЭД") И СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "002"); 
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); 
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	// Вставляем код местонахождения
	СведенияОПоставщике.Вставить("КодМестонахождения",  СтруктураЭД.ПрофильНастроекЭДО.КодМестонахожденияОрганизации);
	СведенияОПокупателе.Вставить("КодМестонахождения",  ДанныеДляФормированияЭД.Покупатель.КодМестонахождения);
	
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode",   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияГНК");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("GoodID");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ThisIsService			 = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.GoodID	                 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		
		// Код ед.изм. по ГНК
		КодЕдИзмГНК = "";
		Если ТипЗнч(Строка.ЕдиницаИзмеренияСсылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
			И Строка.ЕдиницаИзмеренияСсылка <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ПолноеНаименованиеЕдИзм = Строка.ЕдиницаИзмеренияСсылка.НаименованиеПолное;
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(ПолноеНаименованиеЕдИзм);
		Иначе
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(Строка.ЕдиницаИзмерения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(КодЕдИзмГНК) Тогда
			НоваяСтрока.ЕдиницаИзмеренияГНК = КодЕдИзмГНК; 
		Иначе
			// Если не нашли код
			// отправляем код "шт"
			НоваяСтрока.ЕдиницаИзмеренияГНК = "1"; 
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма) + Строка.СуммаАкциза;
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДСТип = "процент";
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Запоминаем сумму документа
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	СтруктураЭД.Вставить("СуммаДокумента", ?(СуммаДокумента = Неопределено, 0, СуммаДокумента));
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 5);
	
	// Скорее всего надо будет добавить новую версию ЭД
	// Реквизиты доверенности
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьНомер") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityNum", ДанныеДляФормированияЭД.ДоверенностьНомер); // Номер
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьДата") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityDate", ДанныеДляФормированияЭД.ДоверенностьДата); // Дата
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьЧерезКого") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityName", ДанныеДляФормированияЭД.ДоверенностьЧерезКого); // ФИО получателя
	КонецЕсли;
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 7.0
Процедура venkonЗаполнитьДанныеПоСчетФактуреГостВерсия70(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД)
	
	Если СтруктураЭД.Свойство("ВидЭД") И СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "002"); 
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "001"); 
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	// Вставляем код местонахождения
	СведенияОПоставщике.Вставить("КодМестонахождения",  СтруктураЭД.ПрофильНастроекЭДО.КодМестонахожденияОрганизации);
	СведенияОПокупателе.Вставить("КодМестонахождения",  ДанныеДляФормированияЭД.Покупатель.КодМестонахождения);
	
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode",   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДляФормированияЭД.Валюта, "Код"));
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияГНК");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("GoodID");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ThisIsService			 = ?(Строка.Товар.Услуга, 1, 0);
		НоваяСтрока.GoodID	                 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		
		// Код ед.изм. по ГНК
		КодЕдИзмГНК = "";
		Если ТипЗнч(Строка.ЕдиницаИзмеренияСсылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
			И Строка.ЕдиницаИзмеренияСсылка <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ПолноеНаименованиеЕдИзм = Строка.ЕдиницаИзмеренияСсылка.НаименованиеПолное;
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(ПолноеНаименованиеЕдИзм);
		Иначе
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(Строка.ЕдиницаИзмерения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(КодЕдИзмГНК) Тогда
			НоваяСтрока.ЕдиницаИзмеренияГНК = КодЕдИзмГНК; 
		Иначе
			// Если не нашли код
			// отправляем код "шт"
			НоваяСтрока.ЕдиницаИзмеренияГНК = "1"; 
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма) + Строка.СуммаАкциза;
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДСТип = "процент";
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Запоминаем сумму документа
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	СтруктураЭД.Вставить("СуммаДокумента", ?(СуммаДокумента = Неопределено, 0, СуммаДокумента));
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 5);
	
	// Скорее всего надо будет добавить новую версию ЭД
	// Реквизиты доверенности
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьНомер") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityNum", ДанныеДляФормированияЭД.ДоверенностьНомер); // Номер
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьДата") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityDate", ДанныеДляФормированияЭД.ДоверенностьДата); // Дата
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьЧерезКого") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityName", ДанныеДляФормированияЭД.ДоверенностьЧерезКого); // ФИО получателя
	КонецЕсли;
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));

КонецПроцедуры

// Запонения данных для версии 7.0
Процедура venkonЗаполнитьДанныеПоДоверенностиВерсия70(ДеревоДанных, ДанныеДляФормированияЭД)
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "006"); // Доверенность 
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum",  ДанныеДляФормированияЭД.НомерДоверенности);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate", ДанныеДляФормированияЭД.Дата);
	
	//СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	//СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	//
	// Вставляем код местонахождения
	//СведенияОПоставщике.Вставить("КодМестонахождения",  СтруктураЭД.ПрофильНастроекЭДО.КодМестонахожденияОрганизации);
	//СведенияОПокупателе.Вставить("КодМестонахождения",  ДанныеДляФормированияЭД.Покупатель.КодМестонахождения);
	
	venkonЗаполнитьДанныеПоУчастникамДоверенности(ДеревоДанных, ДанныеДляФормированияЭД);
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum",  ДанныеДляФормированияЭД.ДоговорКонтрагента.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ДоговорКонтрагента.Дата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title",       ДанныеДляФормированияЭД.НаименованиеДоговора);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияГНК");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = Строка.НомерПП;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеТовара;
		НоваяСтрока.ThisIsService			 = 0;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдИзм;
		
		// Код ед.изм. по ГНК
		КодЕдИзмГНК = "";
		Если ТипЗнч(Строка.ЕдиницаИзмеренияСсылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
			И Строка.ЕдиницаИзмеренияСсылка <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ПолноеНаименованиеЕдИзм = Строка.ЕдиницаИзмеренияСсылка.НаименованиеПолное;
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(ПолноеНаименованиеЕдИзм);
		Иначе
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(Строка.ЕдиницаИзмерения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(КодЕдИзмГНК) Тогда
			НоваяСтрока.ЕдиницаИзмеренияГНК = КодЕдИзмГНК; 
		Иначе
			// Если не нашли код
			// отправляем код "шт"
			НоваяСтрока.ЕдиницаИзмеренияГНК = "1"; 
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Данные доверенного лица
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.dateFrom",       ДанныеДляФормированияЭД.ДатаОт);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.dateTo",         ДанныеДляФормированияЭД.ДатаДо);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.inn",            "");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.position",       ДанныеДляФормированияЭД.Должность);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.passportNumber", ДанныеДляФормированияЭД.СерияИНомерПаспорта);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.fullName",       ДанныеДляФормированияЭД.ФИО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.dateOfIssue",    ДанныеДляФормированияЭД.ДатаВыдачи);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.PowerOfAttorney.authority",      ДанныеДляФормированияЭД.КемВыдан);
	//
	
	// Руководители
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.BuyerDirector",   ДанныеДляФормированияЭД.РуководительФИО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.BuyerAccountant", ДанныеДляФормированияЭД.ГлавБухФИО);
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 7);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура venkonЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	//ДанныеДляПечати = СсылкаНаОбъект.ПолучитьОбъект().ПодготовитьДанныеДляПечатиТОРГ12();
	
	ДанныеДляПечати = ПолучитьДанныеДляФормированияЭД(СсылкаНаОбъект);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "002"); // ?
	
	РеквизитыШапки = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	
	ВключатьУслЯги = Истина;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.БанковскийСчет);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДокумента);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДокумента);
	
	venkonЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр");
	
	venkonЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "buyer",      "Юр");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВалютаКод",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.ВалютаДокумента, "Код"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВидОперации", ВидОперации);
	
	Если ТипЗнч(РеквизитыШапки) = Тип("Структура") И РеквизитыШапки.Свойство("ДокументРеализации") Тогда
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументРеализации) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ДокументыОснования",РеквизитыШапки.ДокументРеализации);
		КонецЕсли;
	КонецЕсли;
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", РеквизитыШапки.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", РеквизитыШапки.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Наименование", НСтр("ru = 'Договор'"));
	
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		СтрокаТаблицыДокумента.Номенклатура             = ДанныеСтроки.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыДокумента.КодТовара                = ДанныеСтроки.ТоварКод;
		СтрокаТаблицыДокумента.ЕдиницаИзмерения			= ДанныеСтроки.БазоваяЕдиницаНаименование;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод		= СокрЛП(ДанныеСтроки.БазоваяЕдиницаКодПоОКЕИ);	
		СтрокаТаблицыДокумента.МассаНетто               = ДанныеСтроки.Количество;
		
		СтрокаТаблицыДокумента.СуммаСНДС       = ?(РеквизитыШапки.СуммаВключаетНДС, ДанныеСтроки.Сумма, ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС);
		СтрокаТаблицыДокумента.СуммаНДС        = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС     = ?(РеквизитыШапки.СуммаВключаетНДС, ДанныеСтроки.Сумма - ДанныеСтроки.СуммаНДС, ДанныеСтроки.Сумма);
		СтрокаТаблицыДокумента.СтавкаНДС       = ДанныеСтроки.СтавкаНДС;
		
		Если РеквизитыШапки.СуммаВключаетНДС Тогда
			СтрокаТаблицыДокумента.Цена = ?(ДанныеСтроки.Количество = 0, 0, Окр(СтрокаТаблицыДокумента.СуммаБезНДС / ДанныеСтроки.Количество, 2));
		Иначе
			СтрокаТаблицыДокумента.Цена = ДанныеСтроки.Цена;
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		
		СтруктураДопДанных.Вставить("НомерТД", ДанныеСтроки.НомерТД);
		СтруктураДопДанных.Вставить("КодСтраныПроисхождения", ДанныеСтроки.КодСтраныПроисхождения);
		//Если ЭтоКорректировка Тогда
		//	
		//	СтруктураДопДанных.Вставить("НомерТДДоИзменения", ДанныеСтроки.НомерТДДоИзменения);
		//	СтруктураДопДанных.Вставить("КодСтраныПроисхожденияДоИзменения", ДанныеСтроки.КодСтраныПроисхожденияДоИзменения);
		//	
		//КонецЕсли;
		
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);

	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ОтпущеноНаСумму", ИтоговыеСуммы.ИтогоСуммаСНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ДатаОтпуска", РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.ВсегоМест", ИтоговыеСуммы.ИтогоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", ИтоговыеСуммы.ИтогоМассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", ИтоговыеСуммы.ИтогоМассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.КоличествоМест", ИтоговыеСуммы.ИтогоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.МассаБрутто", ИтоговыеСуммы.ИтогоМассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.МассаНетто", ИтоговыеСуммы.ИтогоМассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ИтоговыеСуммы.ИтогоСуммаБезНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal", ИтоговыеСуммы.ИтогоНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT", ИтоговыеСуммы.ИтогоСуммаСНДС);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД  - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - Дерево значений, дерево данных заполнения электронного документа.
//
Процедура venkonЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	venkonЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// ПЕРЕОПРЕДЕЛИТЬ!
// Если процедуры и функции ниже не подходят под конкретную конфигурацию,
// их необходимо переопределить.
// Главная функция механизма получения данных из учетных документов 1С - "ПолучитьДанныеДляФормированияЭД".
// В начале этой функции описана структура возврата. Если типовой механизм не подходит, при переопределении обратите внимание
// заполняет ли новый алгоритм все поля переменной СтруктураВозврата

// Функция формирует структуру данных для ЭД
Функция ПолучитьДанныеДляФормированияЭД(СсылкаНаОбъект) Экспорт
	
	СтруктураВозврата = Новый Структура("Валюта, Дата, Номер, ОснованиеДата, ОснованиеНомер, 
											| Покупатель, Поставщик, СуммаВключаетНДС, ТабличнаяЧасть, ТоварныйДокумент, Скидка, СуммаБезСкидки");
	
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ТекущееОснование = СсылкаНаОбъект.ДокументОснование;
		ОбщиеДанныеДляПечати = Неопределено;
		Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ТипОснования = ТипЗнч(ТекущееОснование);
		ДанныеДляПечати = Неопределено;
		
		Если ТипОснования = Тип("ДокументСсылка.РеализацияМедикаментов") Тогда
			ДанныеДляПечати    = СобратьДанныеПоРеализацииМедикаментов(СсылкаНаОбъект, ТекущееОснование);
		КонецЕсли;
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			ОбщиеДанныеДляПечати = ДанныеДляПечати;
		Иначе
			Для Каждого СтрДанных Из ДанныеДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
					ТекущаяТабЧасть = СтрДанных.Значение;
					
					Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
						СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
					КонецЦикла;
				Иначе
					Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
						// Если данный параметр для печати шапки документа еще не  определен - то определяем его
						ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщиеДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщиеДанныеДляПечати);	
		
	Возврат СтруктураВозврата;									   
										   
КонецФункции

Функция СобратьДанныеПоОказаниюУслуг(СсылкаНаСФ, ТекущееОснование, ИмяТабличнойЧасти) Экспорт
	Перем ПодразделениеОтветственныхЛиц;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИмяДокументаОснования = ТекущееОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("СчетФактура", СсылкаНаСФ);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка.Организация,
	|	ОказаниеУслуг.Ссылка.Организация КАК Поставщик,
	|	"""" КАК Грузоотправитель,
	|	ОказаниеУслуг.Контрагент КАК Покупатель,
	|	"""" КАК Грузополучатель,
	|	ОказаниеУслуг.Сумма,
	|	ОказаниеУслуг.Ссылка.ВалютаДокумента КАК Валюта,
	|	ОказаниеУслуг.Ссылка.УчитыватьНДС,
	|	ОказаниеУслуг.Ссылка.СуммаВключаетНДС,
	|	"""" КАК АдресДоставки,
	|	ОказаниеУслуг.ДоговорКонтрагента
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ДокументОснование
	|	И ОказаниеУслуг.СчетФактура = &СчетФактура";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Шапка = Результат.Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("СчетФактура", СсылкаНаСФ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка.Номенклатура КАК Товар,
	|	ВЫБОР
	|		КОГДА (НЕ ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА ВЫРАЗИТЬ(ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ ОказаниеУслуг.Ссылка.Номенклатура.Наименование
	|	КОНЕЦ КАК ТоварНаименование,
	|	NULL КАК СтранаПроисхождения,
	|	"""" КАК ПредставлениеСтраны,
	|	ОказаниеУслуг.Ссылка.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	NULL КАК НомерГТД,
	|	"""" КАК ПредставлениеГТД,
	|	0 КАК Количество,
	|	0 КАК Цена,
	|	ОказаниеУслуг.Ссылка.СтавкаНДС,
	|	ОказаниеУслуг.СуммаНДС КАК СуммаНДС,
	|	ОказаниеУслуг.Сумма КАК Сумма,
	|	ОказаниеУслуг.НомерСтроки КАК НомерСтроки,
	|	2 КАК ID
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ДокументОснование
	|	И ОказаниеУслуг.СчетФактура = &СчетФактура";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаСФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаСФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
  	ДанныеДляПечати.Вставить("ТоварныйДокумент", Шапка.ДоговорКонтрагента.Наименование);
	ДанныеДляПечати.Вставить("ОснованиеНомер", Шапка.ДоговорКонтрагента.Номер);
	ДанныеДляПечати.Вставить("ОснованиеДата", Шапка.ДоговорКонтрагента.Дата);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ?(ВыборкаСтрокТовары.ID=2 И ВыборкаСтрокТовары.ЕдиницаИзмерения <> Константы.ВалютаРегламентированногоУчета.Получить(), ВыборкаСтрокТовары.ЕдиницаИзмерения.НаименованиеПолное,ВыборкаСтрокТовары.ЕдиницаИзмерения);
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ЕдиницаИзмеренияСсылка = Строчка.ЕдиницаИзмерения;
		
		//Счет-фактура 2014
		Строчка.СтавкаНПТ			 = 0;
		Строчка.СуммаНПТ			 = 0;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОказаниюУслуг()

Функция СобратьДанныеПоРеализацияТоваровУслуг(СсылкаНаСФ, ТекущееОснование) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПериодСреза", ТекущееОснование.Дата);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РеализацияТоваровУслуг.Организация,
	               |	РеализацияТоваровУслуг.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА РеализацияТоваровУслуг.Контрагент
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	               |	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	               |	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	               |	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	               |	РеализацияТоваровУслуг.ДоговорКонтрагента,
	               |	РеализацияТоваровУслуг.ДоверенностьНомер,
	               |	РеализацияТоваровУслуг.ДоверенностьДата,
	               |	РеализацияТоваровУслуг.ДоверенностьЧерезКого,
	               |	РеализацияТоваровУслуг.БанковскийСчетОрганизации,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."", ОтветственныеЛицаСрезПоследних.ФизическоеЛицо) КАК МОЛПредставление
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ПериодСреза, ) КАК ОтветственныеЛицаСрезПоследних
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПериодСреза, ) КАК ФИОФизЛицСрезПоследних
	               |			ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	               |		ПО РеализацияТоваровУслуг.Склад = ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
				   |";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	               |	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
	               |	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	               |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	               |	РеализацияТоваровУслугТовары.Цена КАК Цена,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровУслугТовары.СтавкаАкциза КАК СтавкаАкциза,
	               |	РеализацияТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	               |	1 КАК ID,
	               |	РеализацияТоваровУслугТовары.СубконтоБУ КАК НоменклатурнаяГруппа
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
				   |";
	Если Не (ТекущееОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		Запрос.Текст = Запрос.Текст + "ОБЪЕДИНИТЬ ВСЕ
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугУслуги.Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
	               |	NULL,
	               |	"""",
	               |	0,
	               |	0,
	               |	РеализацияТоваровУслугУслуги.СтавкаНДС,
	               |	РеализацияТоваровУслугУслуги.СуммаНДС,
	               |	0,
	               |	0,
	               |	РеализацияТоваровУслугУслуги.Сумма,
	               |	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
	               |	2,
	               |	РеализацияТоваровУслугУслуги.СубконтоБУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
				   |";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "ОБЪЕДИНИТЬ ВСЕ"+ "
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугАгентскиеУслуги.Содержание КАК СТРОКА(1000)),
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугАгентскиеУслуги.Ссылка.ВалютаДокумента,
	               |	NULL,
	               |	"""",
	               |	0,
	               |	0,
	               |	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	               |	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	               |	0,
	               |	0,
	               |	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
	               |	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	               |	3,
				   |	NULL
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ID,
	               |	НомерСтроки
				   |";
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаСФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаСФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ТоварныйДокумент", Шапка.ДоговорКонтрагента.Наименование);
	ДанныеДляПечати.Вставить("ОснованиеНомер", Шапка.ДоговорКонтрагента.Номер);
	ДанныеДляПечати.Вставить("ОснованиеДата", Шапка.ДоговорКонтрагента.Дата);
	ДанныеДляПечати.Вставить("МОЛПредставление", Шапка.МОЛПредставление);
	ДанныеДляПечати.Вставить("БанковскийСчетОрганизации", Шапка.БанковскийСчетОрганизации);
	Если ЗначениеЗаполнено(Шапка.ДоверенностьНомер) и ЗначениеЗаполнено(Шапка.ДоверенностьДата) Тогда
		ДанныеДляПечати.Вставить("ДоверенностьДатаНомер", "№ "+Шапка.ДоверенностьНомер + " от " + Формат(Шапка.ДоверенностьДата, "ДФ=dd.MM.yyyy"));
		ДанныеДляПечати.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЧерезКого);
	КонецЕсли;
	
	Товары = ИнициализацияТаблицыСтрок();
	
	ЕстьТовары = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();
		Строчка.Товар                = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование    = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения  = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны  = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД             = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД     = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество           = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения     = ?(НЕ ВыборкаСтрокТовары.ID=1 И ВыборкаСтрокТовары.ЕдиницаИзмерения <> Константы.ВалютаРегламентированногоУчета.Получить(), ВыборкаСтрокТовары.ЕдиницаИзмерения.НаименованиеПолное,ВыборкаСтрокТовары.ЕдиницаИзмерения);
		Строчка.Цена                 = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС            = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС             = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаАкциза         = ВыборкаСтрокТовары.СтавкаАкциза;
		Строчка.ВидАкцизнойПродукции = ВыборкаСтрокТовары.Товар.ВидАкцизнойПродукции;
		Строчка.СуммаАкциза          = ВыборкаСтрокТовары.СуммаАкциза;
		Строчка.Сумма                = ВыборкаСтрокТовары.Сумма;
		Строчка.ЕдиницаИзмеренияСсылка = Строчка.ЕдиницаИзмерения;
		
		//Счет-фактура 2014
		Строчка.СтавкаНПТ			 = 0;
		Строчка.СуммаНПТ			 = 0;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,5));
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(15,2));
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("СтавкаАкциза", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("СуммаАкциза", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("ВидАкцизнойПродукции", новый ОписаниеТипов("ПеречислениеСсылка.ВидыАкцизнойПродукции"));
	Товары.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("СтавкаНПТ", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("СуммаНПТ", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(18,2));
	Товары.Колонки.Добавить("ЕдиницаИзмеренияСсылка");
	
	// Счет-фактура фарм
	Товары.Колонки.Добавить("Производитель");
	Товары.Колонки.Добавить("Серия");
	Товары.Колонки.Добавить("БазоваяЦена");
	Товары.Колонки.Добавить("БазоваяСтоимость");
	Товары.Колонки.Добавить("НаценкаПоставщика");
	Товары.Колонки.Добавить("ЦенаПоставщика");
	Товары.Колонки.Добавить("Наценка");
	Товары.Колонки.Добавить("ЭтоУслуга");

	Возврат Товары;

КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	НайденныйОбъект = ЭлектронныеДокументыБП.НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.ИНН) Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = venkonСсылкаНаОбъектПоИНН(ТипОбъекта, ИНН); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // есть Идентификатор
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		//Попытка 
		//	Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		//Исключение
			Результат = Неопределено;
		//КонецПопытки;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторСтранМира", "Код", ИдОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//<Raxx

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция venkonНайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = ИдОбъекта;
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = venkonСсылкаНаОбъектПоИНН(ТипОбъекта, ИНН); 
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // есть Идентификатор
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		//Попытка 
		//	Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		//Исключение
			Результат = Неопределено;
		//КонецПопытки;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторСтранМира", "Код", ИдОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьДокументРасчетовКакСчетФактуру", МетаданныеОснования) 
			и ОбщегоНазначения.ЕстьРеквизитДокумента("РасчетныйДокумент", МетаданныеОснования) 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
				МетаданныеОснования = ДокументСсылка.Метаданные();
			КонецЕсли; 
		КонецЕсли;
		Если ВидДокумента = "СчетФактураПолученный" 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", МетаданныеОснования)
			И ДокументСсылка.ПредъявленСчетФактура 
			И не ДокументСсылка = ИсключитьИзВыборкиСФ
			Тогда
			Возврат ДокументСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Запрос.Текст = Запрос.Текст + "
			|	И не Ссылка  = &ИсключитьИзВыборкиСФ
			|";
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" Ссылка."+ЭлементОтбора.Ключ;
			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

//Raxx>

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//<Raxx

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция venkonСсылкаНаОбъектПоИНН(ТипОбъекта, ИНН, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник." + ТипОбъекта + " КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|   И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Raxx>

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
	|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
	|	ТаблицаИнформацияОТоваре.Описание КАК Описание
	|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
	|ИЗ
	|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Идентификатор,
	|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Описание,
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
	|ИЗ
	|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
	|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
	|			И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
	|ГДЕ
	|	(НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL )";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			СпрСсылка = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Контрагент, "НоменклатураПоставщика");
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Наименование  = Запись.НаименованиеНоменклатурыКонтрагента;
				СпрОбъект.Владелец      = Контрагент;
				СпрОбъект.Артикул       = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
			КонецЕсли;
			СпрОбъект.Номенклатура = Запись.Номенклатура;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,,Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "СтавкиНДС" Тогда
		НайденноеЗначение = ЭлектронныеДокументыБП.ПолучитьСтавкуНДСПеречислением(ПредставлениеПеречисления);
	ИначеЕсли ИмяПеречисления = "ЮрФизЛицо" Тогда
		НайденноеЗначение = Перечисления.ЮрФизЛицо[ПредставлениеПеречисления];
	КонецЕсли;
	
КонецПроцедуры

// ПЕРЕОПРЕДЕЛИТЬ!
// Функция для получения сведений юр/физ-лица
// Если типовой механизм не подходит, необходимо его переопределить.
// При этом все поля структуры 	"ДанныеЮрФизЛица" должны быть заполнены
 
// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	Дата = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	ДанныеЮрФизЛица = Новый Структура("ОфициальноеНаименование, ЮрФизЛицоСсылка, ИНН, ТипЮрФизЛица, ПолноеНаименование, 
								| Телефоны, НомерСчета, Банк, БИК, Представление, КодПоОКПО, КодОКОНХ, КодОКВЭД,
								| НомерСчета, ЛицевойСчет, БанкКазначейства, БИККазначейства, ИННКазначейства,
								| Казначейство, ОплатаЧерезКазначейство, РегистрационныйКодПлательщикаНДС", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	 								"", "", "", Ложь, "");

								
	ЗаполнитьЗначенияСвойств(ДанныеЮрФизЛица, ЭлектронныеДокументыПереопределяемый.ПолучитьСведенияОЮрФизЛице(ЮрФизЛицо, Дата, , БанковскийСчет)); 
	
	ТипЮрФизЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ЮрФизЛицо");
		
	ДанныеЮрФизЛица.Вставить("ОфициальноеНаименование", ДанныеЮрФизЛица.ПолноеНаименование);
	ДанныеЮрФизЛица.Вставить("ТипЮрФизЛица", ТипЮрФизЛица);
	ДанныеЮрФизЛица.Вставить("ЮрФизЛицоСсылка", ЮрФизЛицо.Ссылка);
	ДанныеЮрФизЛица.Вставить("РегистрационныйКодПлательщикаНДС", ЮрФизЛицо.КодПлательщикаНДС);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

Процедура ЗаполнитьФИОИДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено)
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	СтруктураПриемник.Вставить("Фамилия", Фамилия);
	СтруктураПриемник.Вставить("Имя", Имя);
	СтруктураПриемник.Вставить("Отчество", Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат("");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодРегиона", Число(КодРегиона)*100000000000000000000000);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Сокращение
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |ГДЕ
	               |	АдресныйКлассификатор.Код = &КодРегиона";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат(СокрЛП(Выборка.Наименование+" "+Выборка.Сокращение));
	КонецЕсли;
	
	Возврат "Регион с кодом "+КодРегиона+" не найден в классификаторе";
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРУз", Истина);
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("Регион", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("АбонентскийЯщик", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("Кварт", "");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизацииЭД(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
		
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,КодОКОНХ,КодОКВЭД,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" МФО ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодОКОНХ",          		" ОКОНХ ");
	СоответствиеПараметров.Вставить("КодОКВЭД",          		" ОКЭД ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");
	
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СведенияОКонтрагенте.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
				
			Исключение
				
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСуммЭД(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Возврат ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописьюЭД(СуммаЧислом, КодВалюты) Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Если Валюта = Неопределено Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Возврат ПроцедурыСервера.СформироватьСуммуПрописью_Сервер(СуммаЧислом, Валюта);
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивПроводимыхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроводимыхДокументов(ДокументыМассив);
	МассивСчетовФактур				 = Новый Массив;
	МассивДокументовРеализации		 = Новый Массив;
	Для каждого Элемент из МассивПроводимыхДокументов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			МассивСчетовФактур.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			МассивДокументовРеализации.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивПроводимыхДокументов);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа,
			|его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов,
			|их необходимо предварительно провести.'");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен.'");
		Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка)),
					НепроведенныйДокумент.Ссылка);
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	// +aldo
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ФлагПодписанПолностью = Истина;
		Возврат;
	КонецЕсли;
	// -aldo
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = (ТЗ.Количество() > 1);
	Иначе
		// Массив отпечатков всех установленных ЭЦП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭЦП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|ГДЕ
		|	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		|	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если НЕ РезультатЗапроса.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		Иначе
			ФлагПодписанПолностью = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

	
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	ЧтениеПакетаВозможно = Истина;	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = РольДоступна("ВыполнениеОбменаЭД") ИЛИ РольДоступна("ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = РольДоступна("ВыполнениеОбменаЭД") ИЛИ РольДоступна("ЧтениеЭД") ИЛИ РольДоступна("ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	//Результат = ЭтоПолноправныйПользователь();
	Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на настройку параметров электронных документов.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	//Результат = РолиДоступны("НастройкаПараметровЭД") ИЛИ ЭтоПолноправныйПользователь();
	Результат = РольДоступна("НастройкаПараметровЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав подписания электронных документов электронной подписью.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоПодписанияЭД() Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0 
				ИЛИ Найти(СтруктураПараметров.ТекстСостоянияЭД, "Нет действующего соглашения") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
				Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			Иначе // для обычной формы
				Если НЕ Форма.ЭлементыФормы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.ЭлементыФормы.ТекстСостоянияЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И ТипЗнч(НайденныйЭлементФормы) = Тип("Надпись") Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
		Если НЕ ЕстьПравоЧтенияЭД() Тогда
			Если НЕ Форма.Элементы.Найти("ГруппаСостояниеЭД") = Неопределено Тогда
				Форма.Элементы.ГруппаСостояниеЭД.Видимость = Ложь;
			ИначеЕсли НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				Форма.Элементы.СостояниеЭД.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Переопределяет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена.'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Заполняет соответствие кодов реквизитов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие, исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПрикладноеПредставлениеРеквизитов");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
	Возврат Таблица;
	
КонецФункции

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Параметры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Если Не ЗначениеЗаполнено(ПолноеНаименование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначения.ФамилияИнициалыФизЛица(ПолноеНаименование,Фамилия,Имя,Отчество);
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДСЭД(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;

	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         НСтр("ru = 'Реализация товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	
КонецПроцедуры

//<Raxx

Процедура venkonЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okpo",
		СведенияОбУчастнике.КодПоОКПО);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okonh",
		СведенияОбУчастнике.КодОКОНХ);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".oked",
		СведенияОбУчастнике.КодОКВЭД);
		
		// Реквизиты банка
		НомерСчета = "";
		Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			Банк = "";
			БИК = "";
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankAccount",
					НомерСчета);
			Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankName",
						Банк.Наименование);
			КонецЕсли;
			Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankCode",
						БИК);
			КонецЕсли;
		КонецЕсли;
		
		// Реквизиты счета казначейства
		ОплатаЧерезКазначейство = Ложь;
		Если СведенияОбУчастнике.Свойство("ОплатаЧерезКазначейство", ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					1);
					
			НомерСчетаКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчетаКазначейства) И ЗначениеЗаполнено(НомерСчетаКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasuryAccount",
						НомерСчетаКазначейства);
			КонецЕсли;
			
			БанкКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БанкКазначейства", БанкКазначейства) И ЗначениеЗаполнено(БанкКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БанкКазначейства",
						БанкКазначейства);
			КонецЕсли;
					
			БИККазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БИККазначейства", БИККазначейства) И ЗначениеЗаполнено(БИККазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БИККазначейства",
						БИККазначейства);
			КонецЕсли;
			
			ИННКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("ИННКазначейства", ИННКазначейства) И ЗначениеЗаполнено(ИННКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ИННКазначейства",
						ИННКазначейства);
			КонецЕсли;
					
			КазначействоНаименование = "";						
			Если СведенияОбУчастнике.Свойство("Казначейство", КазначействоНаименование) И ЗначениеЗаполнено(КазначействоНаименование) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".Казначейство",
						КазначействоНаименование);
			КонецЕсли;
					
					
					
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		КонецЕсли;
		
		// КоррСчет
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет",
					КоррСчет);
		КонецЕсли;
		
		// Адрес банка
		АдресБанка = "";
		Банк = Неопределено;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			АдресБанка = Банк.Город;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка",
					АдресБанка);
		КонецЕсли;
				
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.Телефоны",
								СведенияОбУчастнике.Телефоны);
	
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия", Значение.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя", Значение.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество", Значение.Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Комментарий", Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеУчастника10(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okpo",
		СведенияОбУчастнике.КодПоОКПО);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okonh",
		СведенияОбУчастнике.КодОКОНХ);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".oked",
		СведенияОбУчастнике.КодОКВЭД);
		
		// Реквизиты банка
		НомерСчета = "";
		Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			Банк = "";
			БИК = "";
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankAccount",
					НомерСчета);
			Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankName",
						Банк.Наименование);
			КонецЕсли;
			Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankCode",
						БИК);
			КонецЕсли;
		КонецЕсли;
		
		// Реквизиты счета казначейства
		ОплатаЧерезКазначейство = Ложь;
		Если СведенияОбУчастнике.Свойство("ОплатаЧерезКазначейство", ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					1);
					
			НомерСчетаКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчетаКазначейства) И ЗначениеЗаполнено(НомерСчетаКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasuryAccount",
						НомерСчетаКазначейства);
			КонецЕсли;
			
			БанкКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БанкКазначейства", БанкКазначейства) И ЗначениеЗаполнено(БанкКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БанкКазначейства",
						БанкКазначейства);
			КонецЕсли;
					
			БИККазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БИККазначейства", БИККазначейства) И ЗначениеЗаполнено(БИККазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БИККазначейства",
						БИККазначейства);
			КонецЕсли;
			
			ИННКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("ИННКазначейства", ИННКазначейства) И ЗначениеЗаполнено(ИННКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ИННКазначейства",
						ИННКазначейства);
			КонецЕсли;
					
			КазначействоНаименование = "";						
			Если СведенияОбУчастнике.Свойство("Казначейство", КазначействоНаименование) И ЗначениеЗаполнено(КазначействоНаименование) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".Казначейство",
						КазначействоНаименование);
			КонецЕсли;
					
					
					
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		КонецЕсли;
		
		// КоррСчет
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет",
					КоррСчет);
		КонецЕсли;
		
		// Адрес банка
		АдресБанка = "";
		Банк = Неопределено;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			АдресБанка = Банк.Город;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка",
					АдресБанка);
		КонецЕсли;
				
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.Телефоны",
								СведенияОбУчастнике.Телефоны);
	
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия", Значение.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя", Значение.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество", Значение.Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Комментарий", Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеУчастника20(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okpo",
		СведенияОбУчастнике.КодПоОКПО);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okonh",
		СведенияОбУчастнике.КодОКОНХ);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".oked",
		СведенияОбУчастнике.КодОКВЭД);
		
		// Реквизиты банка
		НомерСчета = "";
		Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			Банк = "";
			БИК = "";
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankAccount",
					НомерСчета);
			Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankName",
						Банк.Наименование);
			КонецЕсли;
			Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankCode",
						БИК);
			КонецЕсли;
		КонецЕсли;
		
		// Реквизиты счета казначейства
		ОплатаЧерезКазначейство = Ложь;
		Если СведенияОбУчастнике.Свойство("ОплатаЧерезКазначейство", ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					1);
					
			НомерСчетаКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчетаКазначейства) И ЗначениеЗаполнено(НомерСчетаКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasuryAccount",
						НомерСчетаКазначейства);
			КонецЕсли;
			
			БанкКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БанкКазначейства", БанкКазначейства) И ЗначениеЗаполнено(БанкКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БанкКазначейства",
						Строка(БанкКазначейства));
			КонецЕсли;
					
			БИККазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БИККазначейства", БИККазначейства) И ЗначениеЗаполнено(БИККазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".БИККазначейства",
						БИККазначейства);
			КонецЕсли;
			
			ИННКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("ИННКазначейства", ИННКазначейства) И ЗначениеЗаполнено(ИННКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ИННКазначейства",
						ИННКазначейства);
			КонецЕсли;
					
			КазначействоНаименование = "";						
			Если СведенияОбУчастнике.Свойство("Казначейство", КазначействоНаименование) И ЗначениеЗаполнено(КазначействоНаименование) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".Казначейство",
						КазначействоНаименование);
			КонецЕсли;
			
			// Начиная с версии 2.0
			ЛицевойСчет = "";						
			Если СведенияОбУчастнике.Свойство("ЛицевойСчет", ЛицевойСчет) И ЗначениеЗаполнено(ЛицевойСчет) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ЛицевойСчет",
						ЛицевойСчет);
			КонецЕсли;
					
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		КонецЕсли;
		
		// КоррСчет
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет",
					КоррСчет);
		КонецЕсли;
		
		// Адрес банка
		АдресБанка = "";
		Банк = Неопределено;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			АдресБанка = Банк.Город;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка",
					АдресБанка);
		КонецЕсли;
				
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.Телефоны",
								СведенияОбУчастнике.Телефоны);
	
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия", Значение.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя", Значение.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество", Значение.Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Комментарий", Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеУчастника30(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okpo",
		СведенияОбУчастнике.КодПоОКПО);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".okonh",
		СведенияОбУчастнике.КодОКОНХ);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".oked",
		СведенияОбУчастнике.КодОКВЭД);
		
		// Реквизиты банка
		НомерСчета = "";
		Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			Банк = "";
			БИК = "";
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankAccount",
					НомерСчета);
			Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankName",
						Банк.Наименование);
			КонецЕсли;
			Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankCode",
						БИК);
			КонецЕсли;
		КонецЕсли;
		
		// Реквизиты счета казначейства
		ОплатаЧерезКазначейство = Ложь;
		Если СведенияОбУчастнике.Свойство("ОплатаЧерезКазначейство", ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					1);
					
			НомерСчетаКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчетаКазначейства) И ЗначениеЗаполнено(НомерСчетаКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasuryAccount",
						НомерСчетаКазначейства);
			КонецЕсли;
			
			БанкКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БанкКазначейства", БанкКазначейства) И ЗначениеЗаполнено(БанкКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".TreasuryBank",
						Строка(БанкКазначейства));
			КонецЕсли;
					
			БИККазначейства = "";						
			Если СведенияОбУчастнике.Свойство("БИККазначейства", БИККазначейства) И ЗначениеЗаполнено(БИККазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".TreasuryCode",
						БИККазначейства);
			КонецЕсли;
			
			ИННКазначейства = "";						
			Если СведенияОбУчастнике.Свойство("ИННКазначейства", ИННКазначейства) И ЗначениеЗаполнено(ИННКазначейства) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".TreasuryTIN",
						ИННКазначейства);
			КонецЕсли;
					
			КазначействоНаименование = "";						
			Если СведенияОбУчастнике.Свойство("Казначейство", КазначействоНаименование) И ЗначениеЗаполнено(КазначействоНаименование) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".TreasuryTitle",
						КазначействоНаименование);
			КонецЕсли;
			
			// Начиная с версии 2.0
			ЛицевойСчет = "";						
			Если СведенияОбУчастнике.Свойство("ЛицевойСчет", ЛицевойСчет) И ЗначениеЗаполнено(ЛицевойСчет) Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных,
						"ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".TreasyruPersonalAccount",
						ЛицевойСчет);
			КонецЕсли;
					
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		КонецЕсли;
		
		// КоррСчет
		//КоррСчет = "";
		//Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
		//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		//			ДеревоДанных,
		//			"ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет",
		//			КоррСчет);
		//КонецЕсли;
		
		// Адрес банка
		АдресБанка = "";
		Банк = Неопределено;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			АдресБанка = Банк.Город;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Expansion." + ВидУчастника + ".organization.BankAddress",
					АдресБанка);
		КонецЕсли;
				
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".FullTitle", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber",
								СведенияОбУчастнике.Телефоны);
	
	
	//ПолныйПуть = ВидУчастника + ".Руководитель";
	//Значение = "";
	//Если СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия", Значение.Фамилия);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя", Значение.Имя);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество", Значение.Отчество);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность", Значение.Должность);
	//КонецЕсли;
	
	//ПолныйПуть = ВидУчастника + ".Комментарий";
	//Значение = "";
	//Если СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + ".Комментарий", Значение);
	//КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеУчастника40(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".vatCode",
		СведенияОбУчастнике.РегистрационныйКодПлательщикаНДС);
		
		// Не указываем реквизиты казначейства
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".FullTitle", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber",
								СведенияОбУчастнике.Телефоны);
	
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
		ИмяРеквизитаВДереве = "organization";
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
		СокрЛП(СведенияОбУчастнике.ИНН));
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",
		СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".shortname",
		СведенияОбУчастнике.Представление);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных,
		"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".vatCode",
		СведенияОбУчастнике.РегистрационныйКодПлательщикаНДС);
		
		// Не указываем реквизиты казначейства
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных,
					"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".treasury",
					0);
		
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Ложь);
		ИмяРеквизитаВДереве = "privatePerson";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".FullTitle", СведенияОбУчастнике.ПолноеНаименование);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",
									СокрЛП(СведенияОбУчастнике.ИНН));
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".surname",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".name",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".middleName",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, ""); //
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		АдресУчастника.Вставить("КодМестонахождения", СведенияОбУчастнике.КодМестонахождения);
		venkonЗаполнитьАдресВДереве50(ДеревоДанных, АдресУчастника, ВидУчастника);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber",
								СведенияОбУчастнике.Телефоны);
								
	Если ТипЗнч(СведенияОбУчастнике.ЮрФизЛицоСсылка) = Тип("СправочникСсылка.Организации") Тогда	
		АдресТекст = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(СведенияОбУчастнике.ЮрФизЛицоСсылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);	
	Иначе
		АдресТекст = ПолучитьКонтактнуюИнформациюЗаписьюРегистра(СведенияОбУчастнике.ЮрФизЛицоСсылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);	
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ROOT.Document." + ВидУчастника + ".address.nontypical",
								АдресТекст.Представление);
	
	
КонецПроцедуры

//Raxx>

Процедура venkonЗаполнитьДанныеПоУчастникамДоверенности(ДеревоДанных, ДанныеДляФормированияЭД)
	
	// Покупатель (Мы)
	ВидУчастника = "buyer";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
	ИмяРеквизитаВДереве = "organization";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",         ДанныеДляФормированияЭД.ИННОрганизации);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname",    ДанныеДляФормированияЭД.НаименованиеПотребителя);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".bankAccount", ДанныеДляФормированияЭД.НомерСчета);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical",                      ДанныеДляФормированияЭД.Адрес);
	
	// Поставщик (Контрагент)
	ВидУчастника = "supplier";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + ".legalEntity", Истина);
	ИмяРеквизитаВДереве = "organization";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".inn",      ДанныеДляФормированияЭД.ИННКонтрагента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document." + ВидУчастника + "." + ИмяРеквизитаВДереве + ".fullname", ДанныеДляФормированияЭД.НаПолучениеОт);
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура venkonЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидУчастника)
	
	
	Если АдресУчастника.Свойство("Улица") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.street",
												АдресУчастника.Улица);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Дом") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.house",
												АдресУчастника.Дом);
	КонецЕсли;
									
	Если АдресУчастника.Свойство("Корпус") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.building",
												АдресУчастника.Корпус);
	КонецЕсли;
									
	Если АдресУчастника.Свойство("Квартира") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.flat",
												АдресУчастника.Квартира);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("НаселенныйПункт") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.settlement",
												АдресУчастника.НаселенныйПункт);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Район") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.district",
												АдресУчастника.Район);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Индекс") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.postcode",
												АдресУчастника.Индекс);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Регион") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.region",
												АдресУчастника.Регион);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("КодСтраны") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.country",
												АдресУчастника.КодСтраны);
	КонецЕсли;
											
											
	Если АдресУчастника.Свойство("АбонентскийЯщик") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.postbox",
												АдресУчастника.АбонентскийЯщик);
	КонецЕсли;
	
	
	Если АдресУчастника.Свойство("АдресТекст") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.nontypical",
												АдресУчастника.АдресТекст);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура venkonЗаполнитьАдресВДереве50(ДеревоДанных, АдресУчастника, ВидУчастника)
	
	
	Если АдресУчастника.Свойство("Улица") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.street",
												АдресУчастника.Улица);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Дом") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.house",
												АдресУчастника.Дом);
	КонецЕсли;
									
	Если АдресУчастника.Свойство("Корпус") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.building",
												АдресУчастника.Корпус);
	КонецЕсли;
									
	Если АдресУчастника.Свойство("Квартира") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.flat",
												АдресУчастника.Квартира);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("НаселенныйПункт") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.settlement",
												АдресУчастника.НаселенныйПункт);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Район") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.district",
												АдресУчастника.Район);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Индекс") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.postcode",
												АдресУчастника.Индекс);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("Регион") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.region",
												АдресУчастника.Регион);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("КодСтраны") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.country",
												АдресУчастника.КодСтраны);
	КонецЕсли;
											
											
	Если АдресУчастника.Свойство("АбонентскийЯщик") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.postbox",
												АдресУчастника.АбонентскийЯщик);
	КонецЕсли;
	
	
	Если АдресУчастника.Свойство("АдресТекст") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.nontypical",
												АдресУчастника.АдресТекст);
	КонецЕсли;
	
	Если АдресУчастника.Свойство("КодМестонахождения") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
												ДеревоДанных,
												"ROOT.Document." + ВидУчастника + ".address.districtId",
												АдресУчастника.КодМестонахождения);
	КонецЕсли;
	
	
КонецПроцедуры

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"), "Номенклатура поставщиков"); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция МассивПодстрок(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ИтоговыеСуммыДокумента()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура")
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Номенклатура,
	               |	СпрНоменклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор
	               |	И СпрНоменклатура.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
			Результат = Выборка.Номенклатура;
		Иначе
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Функция ПолучитьСтавкуНалога(ВидАкцизнойпродукции, ПериодСреза) Экспорт
	
	СтруктураВозврата = новый Структура("ЕдиницаИзмерения, Ставка", Справочники.КлассификаторЕдиницИзмерения.Процент, 0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЭД(ТабличнаяЧасть)
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,");
	
	КолонкиЕдиницИзмерения = Новый Структура;
	Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		Если Найти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			КолонкиЕдиницИзмерения.Вставить(Колонка.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		// Проверим длину кода единицы измерения  
		Для Каждого КлючЗначение Из КолонкиЕдиницИзмерения Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Если СтрДлина(Строка[ИмяКолонки]) = 4 Тогда
				ВызватьИсключение "Документ содержит 4-х значные коды ОКЕИ, отправка таких документов не поддерживается.";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуществуютТовары(Документ)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Документ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТаможеннаяДекларация()
	
	ТаможеннаяДекларация = Новый ТаблицаЗначений;
	ТаможеннаяДекларация.Колонки.Добавить("КодСтраныПроисхождения");
	ТаможеннаяДекларация.Колонки.Добавить("НомерТаможеннойДекларации");
	Возврат ТаможеннаяДекларация;
	
КонецФункции

Функция ПолучитьКорректныйКодСтраны(КодСтраны)
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если Найти("0123456789", СимволКода)=0 Тогда
			//Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции



// +aldo

Процедура venkonЗаполнитьДанныеПоПроизвольномуЭД(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ДопПараметры, ТекстОшибки = "") Экспорт
	
	// Дата и номер документа
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, 
		"Дата, Номер, ПутьКФайлу");
		
	СтруктураЭД.Вставить("Дата", ?(РеквизитыСФ.Свойство("Дата"), РеквизитыСФ.Дата, ТекущаяДата()));
	СтруктураЭД.Вставить("Номер", ?(РеквизитыСФ.Свойство("Номер"), РеквизитыСФ.Номер, ""));
	СтруктураЭД.Вставить("ПутьКФайлу", ?(РеквизитыСФ.Свойство("ПутьКФайлу"), РеквизитыСФ.ПутьКФайлу, ""));
	
		
	ВерсияСоставаЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальнуюВерсиюСоставаПроизвольногоЭД();
	
	// Версия 4.0
	Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40 Тогда
		venkonЗаполнитьДанныеПоПроизвольномуЭДВерсия40(ДеревоДанных, СтруктураЭД, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеПоПроизвольномуЭДВерсия40(ДеревоДанных, СтруктураЭД, ДопПараметры)
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "000"); // Произвольный документ - 000 
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", СтруктураЭД.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  СтруктураЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СтруктураЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СтруктураЭД.Дата);
	
	venkonЗаполнитьДанныеУчастника40(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника40(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 1);
	
	// ХэшДокумента
	Если СтруктураЭД.Свойство("ПутьКФайлу") Тогда
		
		Адрес = КаталогВременныхФайлов();
		ДД = Новый ДвоичныеДанные(Адрес + "doc.pdf");
		ХэшСоответствие = ОбработчикиDidoxEImzoСервер.DidoxEImzo_ПолучитьХэшСтроки(Строка(ДД));  // Отказ от VenkonEImzo
		Если  ХэшСоответствие.Получить("success") <> Неопределено 
			И ХэшСоответствие.Получить("success") Тогда
			
			ХэшСтрока = ХэшСоответствие.Получить("digest_hex");
			
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.HashFile", ХэшСтрока);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКонтактнуюИнформациюЗаписьюРегистра(Объект, ТипКонтактнойИнформации, ВидКонтактнойИнформации) Экспорт
	Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Запись.Объект = Объект;
	Запись.Тип = ТипКонтактнойИнформации;
	Запись.Вид = ВидКонтактнойИнформации;
	Запись.Прочитать();
	Возврат Запись;
КонецФункции

Процедура venkonЗаполнитьДанныеПоСчетФактуреФарм(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ТекстОшибки = "") Экспорт
	
	ДанныеДляФормированияЭД = ПолучитьДанныеДляФормированияЭД(СсылкаНаОбъект);
	
	Если ДанныеДляФормированияЭД = Неопределено Тогда
		ТекстОшибки = "Ошибка при получении данных для ЭД!";
		Возврат;
	КонецЕсли;
	
	ВерсияСоставаЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальнуюВерсиюСоставаЭД(СсылкаНаОбъект.Дата, "СФ-ФАРМ");
	
	// Версия 7.0
	Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
		venkonЗаполнитьДанныеПоСчетФактуреФармВерсия80(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonЗаполнитьДанныеПоСчетФактуреФармВерсия80(ДеревоДанных, ДанныеДляФормированияЭД, СтруктураЭД)
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.docType", "008"); 
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum", ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ДанныеДляФормированияЭД));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate",  ДанныеДляФормированияЭД.Дата);
	
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик, ДанныеДляФормированияЭД.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель, ДанныеДляФормированияЭД.Дата);
	
	// Вставляем код местонахождения
	СведенияОПоставщике.Вставить("КодМестонахождения",  СтруктураЭД.ПрофильНастроекЭДО.КодМестонахожденияОрганизации);
	СведенияОПокупателе.Вставить("КодМестонахождения",  ДанныеДляФормированияЭД.Покупатель.КодМестонахождения);
	
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПоставщике, "supplier", "Юр"); //
	venkonЗаполнитьДанныеУчастника50(ДеревоДанных, СведенияОПокупателе, "buyer", "Юр"); //
	
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode",   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДляФормированияЭД.Валюта, "Код"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.CurrencyCode", "860");
	
	// Данные договора
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum", ДанныеДляФормированияЭД.ОснованиеНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate", ДанныеДляФормированияЭД.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title", ДанныеДляФормированияЭД.ТоварныйДокумент);
	
	// ТЧ
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияГНК");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаАкциз");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциз");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("GoodID");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ThisIsService");
	ТаблицаТоваров.Колонки.Добавить("Производитель");
	ТаблицаТоваров.Колонки.Добавить("Серия");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЦена");
	ТаблицаТоваров.Колонки.Добавить("БазоваяСтоимость");
	ТаблицаТоваров.Колонки.Добавить("НаценкаПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ЦенаПоставщика");
	ТаблицаТоваров.Колонки.Добавить("Наценка");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.Номенклатура			 = Строка.Товар;
		НоваяСтрока.ThisIsService			 = Строка.ЭтоУслуга;
		НоваяСтрока.GoodID	                 = Строка.Товар.Код;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.ЕдиницаИзмерения         = Строка.ЕдиницаИзмерения;
		
		// Код ед.изм. по ГНК
		КодЕдИзмГНК = "";
		Если ТипЗнч(Строка.ЕдиницаИзмеренияСсылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
			И Строка.ЕдиницаИзмеренияСсылка <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ПолноеНаименованиеЕдИзм = Строка.ЕдиницаИзмеренияСсылка.НаименованиеПолное;
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(ПолноеНаименованиеЕдИзм);
		Иначе
			КодЕдИзмГНК = РегистрыСведений.КлассификаторЕдиницИзмеренияПоГНК.НайтиКодЕдиницыИзмеренияПоКлассификаторуГНК(Строка.ЕдиницаИзмерения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(КодЕдИзмГНК) Тогда
			НоваяСтрока.ЕдиницаИзмеренияГНК = КодЕдИзмГНК; 
		Иначе
			// Если не нашли код
			// отправляем код "шт"
			НоваяСтрока.ЕдиницаИзмеренияГНК = "1"; 
		КонецЕсли;
		
		НоваяСтрока.СуммаБезНДС  = ?(ДанныеДляФормированияЭД.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма) + Строка.СуммаАкциза;
		НоваяСтрока.СуммаСНДС    = НоваяСтрока.СуммаБезНДС + Строка.СуммаНДС; // 
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СтавкаНДСТип = "процент";
		Если Строка.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		Иначе
			Если ДанныеДляФормированияЭД.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / Строка.Количество, 2);
			Иначе
				НоваяСтрока.Цена = Строка.Цена;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Производитель = Строка.Производитель;
		НоваяСтрока.Серия = Строка.Серия;
		НоваяСтрока.БазоваяЦена = Строка.БазоваяЦена;
		НоваяСтрока.БазоваяСтоимость = Строка.БазоваяСтоимость;
		НоваяСтрока.НаценкаПоставщика = Строка.НаценкаПоставщика;
		НоваяСтрока.ЦенаПоставщика = Строка.ЦенаПоставщика;
		НоваяСтрока.Наценка = Строка.Наценка;
				
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("Строка") Тогда
			НоваяСтрока.ИдТовараУКонтрагента = НоваяСтрока.Номенклатура;
		КонецЕсли;

		// Дополнительные данные
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Неопределено;
			Если ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "БазоваяЕдиницаИзмерения");
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			Иначе // если ед. измерения не заполнено, устанавливаем ед. измерения по умолчанию "Штука"
				
				НоваяСтрока.ЕдиницаИзмеренияКод = "796";
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование","шт");
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", СокрЛП(Строка.ЕдиницаИзмерения));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧастиЭД(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.venkonЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ROOT.Document.productList");
	
	// Запоминаем сумму документа
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	СтруктураЭД.Вставить("СуммаДокумента", ?(СуммаДокумента = Неопределено, 0, СуммаДокумента));
	
	// Версия состава ЭД
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Version", 8);
	
	// Скорее всего надо будет добавить новую версию ЭД
	// Реквизиты доверенности
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьНомер") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityNum", ДанныеДляФормированияЭД.ДоверенностьНомер); // Номер
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьДата") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityDate", ДанныеДляФормированияЭД.ДоверенностьДата); // Дата
	КонецЕсли;
	Если ДанныеДляФормированияЭД.Свойство("ДоверенностьЧерезКого") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.AuthorityName", ДанныеДляФормированияЭД.ДоверенностьЧерезКого); // ФИО получателя
	КонецЕсли;
	
	// Скидка
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Discount", ДанныеДляФормированияЭД.Скидка);
	
	// Итоги
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT",	(ТаблицаТоваров.Итог("СуммаСНДС") * (100-ДанныеДляФормированияЭД.Скидка)/100));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal",	ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPriceWithoutDiscount", ДанныеДляФормированияЭД.СуммаБезСкидки);

КонецПроцедуры

Функция СобратьДанныеПоРеализацииМедикаментов(СсылкаНаСФ, ТекущееОснование) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК ЭтоУслуга,
	|	РеализацияМедикаментовНоменклатура.Номенклатура,
	|	РеализацияМедикаментовНоменклатура.Количество,
	|	РеализацияМедикаментовНоменклатура.Сумма КАК Сумма,
	|	РеализацияМедикаментовНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияМедикаментовНоменклатура.Цена КАК Цена,
	|	РеализацияМедикаментовНоменклатура.СуммаНДС КАК СуммаНДС,
	|	РеализацияМедикаментовНоменклатура.СтавкаНДС,
	|	РеализацияМедикаментовНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияМедикаментовНоменклатура.СуммаНДС = 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияМедикаментовНоменклатура.Сумма + РеализацияМедикаментовНоменклатура.СуммаНДС
	|	КОНЕЦ КАК Всего,
	|	РеализацияМедикаментовНоменклатура.Сумма + РеализацияМедикаментовНоменклатура.СуммаНДС КАК СуммаСУчетомАкцизаИНДС,
	|	РеализацияМедикаментовНоменклатура.Серия,
	|	РеализацияМедикаментовНоменклатура.Себестоимость,
	|	РеализацияМедикаментовНоменклатура.Наценка,
	|	РеализацияМедикаментовНоменклатура.Номенклатура.ПроисхождениеТовара КАК Происхождение,
	|	РеализацияМедикаментовНоменклатура.Номенклатура.Производитель.Наименование КАК Производитель
	|ИЗ
	|	Документ.РеализацияМедикаментов.Номенклатура КАК РеализацияМедикаментовНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияМедикаментов КАК РеализацияМедикаментов
	|		ПО РеализацияМедикаментовНоменклатура.Ссылка = РеализацияМедикаментов.Ссылка
	|ГДЕ
	|	РеализацияМедикаментов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК ЭтоУслуга,
	|	РеализацияМедикаментовУслуги.Услуга,
	|	NULL,
	|	РеализацияМедикаментовУслуги.Сумма,
	|	РеализацияМедикаментовУслуги.Услуга.БазоваяЕдиницаИзмерения,
	|	NULL,
	|	РеализацияМедикаментовУслуги.СуммаНДС,
	|	РеализацияМедикаментовУслуги.СтавкаНДС,
	|	РеализацияМедикаментовУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияМедикаментовУслуги.СуммаНДС = 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияМедикаментовУслуги.Сумма + РеализацияМедикаментовУслуги.СуммаНДС
	|	КОНЕЦ,
	|	РеализацияМедикаментовУслуги.Сумма + РеализацияМедикаментовУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияМедикаментовУслуги.Услуга.ПроисхождениеТовара,
	|	РеализацияМедикаментовУслуги.Услуга.Производитель.Наименование КАК Производитель
	|ИЗ
	|	Документ.РеализацияМедикаментов.Услуги КАК РеализацияМедикаментовУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияМедикаментов КАК РеализацияМедикаментов
	|		ПО РеализацияМедикаментовУслуги.Ссылка = РеализацияМедикаментов.Ссылка
	|ГДЕ
	|	РеализацияМедикаментов.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущееОснование);	
	Результат = Запрос.Выполнить();
	ВыборкаСтрокТовары = Результат.Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      ТекущееОснование.Организация);
	ДанныеДляПечати.Вставить("Номер",            ТекущееОснование.Номер);
	ДанныеДляПечати.Вставить("Дата",             ТекущееОснование.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        ТекущееОснование.Организация);
	ДанныеДляПечати.Вставить("Грузоотправитель", ТекущееОснование.Организация);
	ДанныеДляПечати.Вставить("Покупатель",       ТекущееОснование.Контрагент);
	ДанныеДляПечати.Вставить("Грузополучатель",  ТекущееОснование.Контрагент);
	ДанныеДляПечати.Вставить("АдресДоставки",    "");
	ДанныеДляПечати.Вставить("Сумма",            ТекущееОснование.СуммаПоДокументу);
	ДанныеДляПечати.Вставить("Валюта",           ТекущееОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеДляПечати.Вставить("ТоварныйДокумент", ТекущееОснование.ДоговорКонтрагента.Наименование);
	ДанныеДляПечати.Вставить("ОснованиеНомер", ТекущееОснование.ДоговорКонтрагента.НомерДоговора);
	ДанныеДляПечати.Вставить("ОснованиеДата", ТекущееОснование.ДоговорКонтрагента.ДатаДоговора);
	ДанныеДляПечати.Вставить("МОЛПредставление", "");
	ДанныеДляПечати.Вставить("БанковскийСчетОрганизации", ТекущееОснование.БанковскийСчет);
	//Если ЗначениеЗаполнено(Шапка.ДоверенностьНомер) и ЗначениеЗаполнено(Шапка.ДоверенностьДата) Тогда
	//	ДанныеДляПечати.Вставить("ДоверенностьДатаНомер", "№ "+Шапка.ДоверенностьНомер + " от " + Формат(Шапка.ДоверенностьДата, "ДФ=dd.MM.yyyy"));
	//	ДанныеДляПечати.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЧерезКого);
	//КонецЕсли;
	
	ДанныеДляПечати.Вставить("СуммаБезСкидки", ТекущееОснование.СуммаПоДокументу);
	ДанныеДляПечати.Вставить("Скидка", ТекущееОснование.ФинансоваяСкидкаПроцент);
	
	Товары = ИнициализацияТаблицыСтрок();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар                = ВыборкаСтрокТовары.Номенклатура;
		Строчка.ТоварНаименование    = СокрЛП(ВыборкаСтрокТовары.Номенклатура.Наименование);
		Строчка.СтранаПроисхождения  = "";
		Строчка.ПредставлениеСтраны  = "";
		Строчка.НомерГТД             = "";
		Строчка.ПредставлениеГТД     = "";
		Строчка.Количество           = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения     = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                 = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС            = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС             = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаАкциза         = 0;
		Строчка.ВидАкцизнойПродукции = Неопределено;
		Строчка.СуммаАкциза          = 0;
		Строчка.Сумма                = ВыборкаСтрокТовары.Сумма;
		Строчка.ЕдиницаИзмеренияСсылка = Строчка.ЕдиницаИзмерения;
		Строчка.ЭтоУслуга = ВыборкаСтрокТовары.ЭтоУслуга;
		
		Строчка.Производитель            = ВыборкаСтрокТовары.Производитель;
		Строчка.Серия             = ВыборкаСтрокТовары.Серия;
		Строчка.БазоваяЦена         = ВыборкаСтрокТовары.Себестоимость;
		Строчка.БазоваяСтоимость = ВыборкаСтрокТовары.Себестоимость * ВыборкаСтрокТовары.Количество;
		Строчка.НаценкаПоставщика          = 0;
		Строчка.ЦенаПоставщика                = 0;
		Строчка.Наценка = ВыборкаСтрокТовары.Наценка;
		
		//Счет-фактура 2014
		Строчка.СтавкаНПТ			 = 0;
		Строчка.СуммаНПТ			 = 0;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// -aldo
