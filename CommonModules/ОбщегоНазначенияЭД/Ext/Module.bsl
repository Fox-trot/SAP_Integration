
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует дерево данных для заполнения прикладным решением.
//
// Параметры:
//  НазваниеМакета - Строка - название макета, по которому формируется дерево
//
// Возвращаемое значение:
//  ДеревоЗначений.
//
Функция ДеревоДокумента(НазваниеМакета) Экспорт
	
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет(НазваниеМакета);
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	ШиринаТаблицы = Макет.ШиринаТаблицы;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		ОбластьШапки = Макет.Область(1,НомерКолонки);
		НазваниеКолонки = ОбластьШапки.Текст;
		ТаблицаЗначений.Колонки.Добавить(НазваниеКолонки);
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для НомерКолонки = 0 По ШиринаТаблицы-1 Цикл
			НоваяСтрока.Установить(НомерКолонки, Макет.Область(НомерСтроки, НомерКолонки + 1).Текст);
		КонецЦикла
	КонецЦикла;
	ТаблицаЗначений.Колонки.Добавить("ПолныйПуть");
	ТаблицаЗначений.Колонки.Сдвинуть("Значение",   -6);
	ТаблицаЗначений.Колонки.Сдвинуть("ПолныйПуть", -ШиринаТаблицы);
	КолУровней = 0;
	
	ДеревоЗначений = Новый ДеревоЗначений;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ДеревоЗначений.Колонки.Добавить(Колонка.Имя);
		Если Найти(Колонка.Имя, "Уровень") > 0 Тогда
			НомерУровня = Число(Сред(Колонка.Имя, 8, 2));
			Если НомерУровня > КолУровней Тогда
				КолУровней = НомерУровня;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПолныйПуть = "";
	РекурсивноЗаполнитьСтрокиДерева(ДеревоЗначений, 1, КолУровней, ПолныйПуть, ТаблицаЗначений, 0);
	
	Возврат ДеревоЗначений;
	
КонецФункции

// Сохраняет значение в дереве данных
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  Реквизит - Строка - содержит полный путь к реквизиту
//  Значение - любой тип - сохраняемое значение
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, КорневойЭлементДерева = "") Экспорт
	
	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	СтрокаДерева.Значение = Значение;
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Реквизит);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		Если Найти(КорневойЭлементДерева, Путь) > 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева.Признак = "Группа" Тогда
			СтрокаДерева.Значение = Истина;
		ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
			ТекИндекс = МассивРеквизитов.Найти(Элемент);
			СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Произвольный - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = Нстр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Записывает данные из таблицы значений в дерево значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные
//  НазваниеТаблицы - Строка - название таблицы в дереве
//
Процедура ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	СтрокаТаблицы = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки = 1 Тогда
			ТекСтрока = СтрокаТаблицы.Строки[0];
		Иначе
			ПерваяСтрока = СтрокаТаблицы.Строки[0];
			ТекСтрока = СтрокаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, ПерваяСтрока);
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекСтрока, ПерваяСтрока);
		КонецЕсли;
		ТекСтрока.Значение = НомерСтроки;
		Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
			Если Колонка.Имя = "ДопДанныеПодписанные" ИЛИ Колонка.Имя = "ДопДанныеНеПодписанные" Тогда
				
				СтрокаДопДанных = ТекСтрока.Строки.Найти(ТекСтрока.ПолныйПуть + "." + Колонка.Имя, "ПолныйПуть");
				СтруктураДопДанных = СтрокаДанных[Колонка.Имя];
				
				Если ЗначениеЗаполнено(СтруктураДопДанных) Тогда
					ДобавитьДопДанныеВДерево(
							СтрокаДопДанных,
							СтруктураДопДанных,
							?(Колонка.Имя = "ДопДанныеПодписанные", Истина, Ложь));
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "НомерСтроки", ".", ".НомерСтроки.") + Колонка.Имя;
			СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
			Если СтрокаРеквизита <> Неопределено Тогда
				Если СтрокаРеквизита.Признак = "Таблица" И НЕ СтрокаДанных[Колонка.Имя] = Неопределено Тогда
					ЗагрузитьТаблицуВДерево(ТекСтрока, СтрокаДанных[Колонка.Имя], ПолныйПуть);
				Иначе
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли
			КонецЕсли;
		КонецЦикла
		
	КонецЦикла;
	СтрокаТаблицы.Значение = ТаблицаДанных.Количество();
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицы);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитов.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Записывает данные из таблицы значений в дерево значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные
//  НазваниеТаблицы - Строка - название таблицы в дереве
//
Процедура venkonЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	НазваниеТаблицыExpansion = СтрЗаменить(НазваниеТаблицы, "Document", "Expansion");
	
	СтрокаТаблицы = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	СтрокаТаблицыExpansion = Дерево.Строки.Найти(НазваниеТаблицыExpansion, "ПолныйПуть", Истина);
	
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки = 1 Тогда
			ТекСтрока = СтрокаТаблицы.Строки[0];
			ТекСтрокаExpansion = СтрокаТаблицыExpansion.Строки[0];
		Иначе
			ПерваяСтрока = СтрокаТаблицы.Строки[0];
			ТекСтрока = СтрокаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, ПерваяСтрока);
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекСтрока, ПерваяСтрока);
			
			ПерваяСтрокаExpansion = СтрокаТаблицыExpansion.Строки[0];
			ТекСтрокаExpansion = СтрокаТаблицыExpansion.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрокаExpansion, ПерваяСтрокаExpansion);
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекСтрокаExpansion, ПерваяСтрокаExpansion);
		КонецЕсли;
		ТекСтрока.Значение = НомерСтроки;
		ТекСтрокаExpansion.Значение = НомерСтроки;
		
		Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
			
			Если Колонка.Имя = "НомерСтроки" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "productId";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "НаименованиеНоменклатуры" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "productName";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "ЕдиницаИзмерения" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "measurment";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "МассаНетто" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "quantity";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "Количество" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "quantity";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "Цена" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "price";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СуммаБезНДС" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "totalPrice";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СтавкаНДС" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "VAT";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					// Начиная с версии 2.0 есть разделение ставок "БезНДС" и "0%".
					Значение = СтрокаДанных[Колонка.Имя];
					Если Значение = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаРеквизита.Значение = 0;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС4 Тогда
						СтрокаРеквизита.Значение = 4;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС6 Тогда
						СтрокаРеквизита.Значение = 6;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС7 Тогда
						СтрокаРеквизита.Значение = 7;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС8 Тогда
						СтрокаРеквизита.Значение = 8;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10 Тогда
						СтрокаРеквизита.Значение = 10;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС15 Тогда
						СтрокаРеквизита.Значение = 15;
					ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС20 Тогда
						СтрокаРеквизита.Значение = 20;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СуммаНДС" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "VATSum";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СуммаСНДС" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "priceWithVAT";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СтавкаАкциз" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "exciseTax";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "СуммаАкциз" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "exciseTaxSum";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "ЕдиницаИзмеренияГНК" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "measurmentId";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "Производитель" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "manufacturer";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "Серия" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "series";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "БазоваяЦена" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "basePrice";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "БазоваяСтоимость" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "baseCost";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "НаценкаПоставщика" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "supplierMargin";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "ЦенаПоставщика" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "supplierPrice";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "Наценка" Тогда
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "product", ".", ".product.") + "margin";
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			Иначе
				ПолныйПуть = НазваниеТаблицыExpansion + ?(Колонка.Имя = "product", ".", ".product.") + Колонка.Имя;
				СтрокаРеквизита = ТекСтрокаExpansion.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Значение = СтрокаДанных[Колонка.Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла
	КонецЦикла;
	СтрокаТаблицы.Значение = ТаблицаДанных.Количество();
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицы);
	
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитов.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТаблицыExpansion.Значение = ТаблицаДанных.Количество();
	
	МассивРеквизитовExpansion = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицыExpansion);
	
	Если МассивРеквизитовExpansion.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитовExpansion Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитовExpansion.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитовExpansion[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Возвращает строку дерева значений для заполнения в прикладном решении
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеПоля - Строка - название поля в дереве, содержащее полный путь к реквизиту
//  НайтиРекурсивно - Булево, Истина - если требуется рекурсивный поиск
//
// Возвращаемое значение:
//  Строка таблицы значений - содержит строку дерева
//
Функция СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно = Ложь) Экспорт
	
	СтрокаВозврата = ДеревоДанных.Строки.Найти(НазваниеПоля, "ПолныйПуть", НайтиРекурсивно);
	Если СтрокаВозврата.Признак = "Группа" Тогда
		СтрокаВозврата.Значение = Истина;
	КонецЕсли;
	Возврат СтрокаВозврата;

КонецФункции

// В процедуре происходит добавление данных из СтруктурыДанных в ДеревоЗначений.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений или строка дерева значений, содержащее данные.
//  СтруктураДанных - Структура, данные, которые необходимо поместить в дерево.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//
Процедура ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый = Ложь) Экспорт
	
	Если СтруктураДопДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Родитель = Неопределено Тогда
		СтрокаДереваЗначений = СтрокаДерева(СтрокаДерева, "ДопДанные");
		Если ЮридическиЗначимый Тогда
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
		Иначе
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть");
		КонецЕсли;
	ИначеЕсли НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеПодписанные"
			ИЛИ НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеНеПодписанные" Тогда
		СтрокаДопДанные = СтрокаДерева;
	Иначе
		СтрокаДерева.Значение = Истина;
		СтрокаДопДанные = СтрокаДерева.Строки[?(ЮридическиЗначимый, 0 ,1)];
	КонецЕсли;
	СтрокаДопДанные.Значение = Истина;
	
	Для Каждого Элемент Из СтруктураДопДанных Цикл
		НовСтрока = СтрокаДопДанные.Строки.Найти(СтрокаДопДанные.ПолныйПуть + "." + Элемент.Ключ, "ПолныйПуть");
		Если НовСтрока = Неопределено Тогда
			НовСтрока = СтрокаДопДанные.Строки.Добавить();
			НовСтрока.ПолныйПуть = СтрокаДопДанные.ПолныйПуть + "." + Элемент.Ключ;
			НомерУровня = СтрЧислоВхождений(НовСтрока.ПолныйПуть, ".") + 1;
			НовСтрока["Уровень" + НомерУровня] = НазваниеКолонки(НовСтрока.ПолныйПуть);
		КонецЕсли;
		НовСтрока.Значение = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает название реквизита из полного пути
//
// Параметры:
//  ПолныйПуть - Строка - Полный путь до реквизита в дереве
//
// Возвращаемое значение:
//  Строка - Название реквизита
//
Функция НазваниеКолонки(ПолныйПуть) Экспорт
	
	МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПолныйПуть);
	Возврат МассивСтрок[МассивСтрок.Количество()-1];
	
КонецФункции

// Проверяет существование реквизита в дереве, по указанному пути.
Функция СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Экспорт
	
	Существует = Ложь;
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Существует = Истина;
	КонецЕсли;
	
	Возврат Существует;
	
КонецФункции

// Функция определяет элемент справочника "ЭДПрисоединенныеФайлы"
// по ИДДокумента
Функция ПолучитьЭДПоИДДокумента(ИДДокумента) Экспорт
	
	ЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВнешнийУИД = &ИДДокумента
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИДДокумента", ИДДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЭД = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СкопироватьСтрокиДереваДляТаблицыРекурсивно(СтрокаПолучатель, СтрокаИсточник)
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		Если НазваниеКолонки(Реквизит.ПолныйПуть) = "НомерСтроки" И ТипЗнч(Реквизит.Значение) = Тип("Число")
				И Реквизит.Значение > 1 Тогда
			Прервать;
		КонецЕсли;
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит);
		НовСтрока.Значение = "";
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура РекурсивноЗаполнитьСтрокиДерева(ДеревоЗначений, Знач НомерУровня, КолУровней, Знач ПолныйПутьВДереве, ТЗ, НомерСтрокиТЗ)
	
	ЛокПолныйПуть = ПолныйПутьВДереве;
	СтрокаТекУровня = Неопределено;
	Пока НомерСтрокиТЗ < ТЗ.Количество() Цикл
		СтрокаТЗ = ТЗ[НомерСтрокиТЗ];
		Для Сч = НомерУровня По КолУровней Цикл
			ИдТекУровня = "Уровень" + Сч;
			Если ТЗ.Колонки.Найти(ИдТекУровня) <> Неопределено И ЗначениеЗаполнено(СтрокаТЗ[ИдТекУровня]) Тогда
				Если НомерУровня < Сч Тогда
					РекурсивноЗаполнитьСтрокиДерева(СтрокаТекУровня, Сч, КолУровней, ЛокПолныйПуть, ТЗ, НомерСтрокиТЗ);
				ИначеЕсли НомерУровня = Сч Тогда
					СтрокаТекУровня = ДеревоЗначений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТекУровня, СтрокаТЗ);
					ЛокПолныйПуть = ?(ПолныйПутьВДереве = "", "", ПолныйПутьВДереве + ".") + СтрокаТекУровня["Уровень" + Сч];
					СтрокаТекУровня.ПолныйПуть = ЛокПолныйПуть;
				КонецЕсли;
				НомерСтрокиТЗ = НомерСтрокиТЗ + 1;
				Прервать;
			КонецЕсли;
			Если Сч >= КолУровней Тогда
				НомерСтрокиТЗ = НомерСтрокиТЗ - 1;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры



