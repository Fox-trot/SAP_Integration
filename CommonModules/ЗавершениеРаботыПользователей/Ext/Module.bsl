
Процедура ПроверитьВозможностьРаботыПользователяВРежимеЗавершенияРаботыПользователей(Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РежимЗавершения = Константы.РежимЗавершенияРаботыПользователей.Получить();
	
	// если роль не доступна "ПравоЗавершенияРаботыПользователей" и
	// константа не позволяет работать - то в программу входить нельзя
	Если НЕ РольДоступна("ПравоЗавершенияРаботыПользователей")
		И  (РежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно
		ИЛИ РежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // () 

// процедура контроля завершения работы программы
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = Константы.РежимЗавершенияРаботыПользователей.Получить();
	
	Если ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы Тогда
		Предупреждение("Работа системы будет завершена через несколько минут!", 10, "Завершение работы системы");
	ИначеЕсли ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей Тогда
		Предупреждение("Работа системы будет завершена!", 10, "Завершение работы системы");
		ЗавершитьРаботуСистемы(Истина);
	ИначеЕсли ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли; 
	
КонецПроцедуры


Процедура УстановитьКонтрольРежимаЗавершенияРаботыПользователей() Экспорт
	
	ТекущийРежим = Константы.РежимЗавершенияРаботыПользователей.Получить();
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
		
		Если ТекущийРежим <> Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу Тогда
			Если ЗначениеНеЗаполнено(ТекущийРежим) Тогда
				Сообщить("Режим завершения работы пользователей не установлен.", СтатусСообщения.Внимание);
			Иначе
				Сообщить("Установлен режим завершения работы пользователей """ + ТекущийРежим + """.", СтатусСообщения.Внимание);
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе
		
		КонтрольРежимаЗавершенияРаботыПользователей();
		ПодключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей", 60);
		
	КонецЕсли; 
	
	
КонецПроцедуры // () 

// обработка параметров запуска программы
Функция ОбработатьПараметрЗапуска() Экспорт
	
	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// различия в больших и маленьких буквах в параметрах нет
	ЗначениеПараметраЗапуска = Врег(РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";")[0]);
	
	Если ЗначениеПараметраЗапуска = Врег("РазрешитьРаботуПользователей") Тогда
		
		Если НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
			Сообщить("Параметр запуска не отработан. Нет прав на изменение состояния завершения работы пользователей.", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли; 
		
		РазрешитьРаботу = Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу;
		
		Если Константы.РежимЗавершенияРаботыПользователей.Получить() <> РазрешитьРаботу Тогда
			Константы.РежимЗавершенияРаботыПользователей.Установить(РазрешитьРаботу);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		ЗавершитьРаботуСистемы(Ложь);
		Возврат Истина;
		
	ИначеЕсли ЗначениеПараметраЗапуска = Врег("ЗавершитьРаботуПользователей") Тогда
		
		Если НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
			Сообщить("Параметр запуска не отработан. Нет прав на изменение состояния завершения работы пользователей.", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли; 
		
		ЗаписьЖурналаРегистрации("ОбработкаПараметраЗапуска", УровеньЖурналаРегистрации.Информация, , , ПараметрЗапуска);
		
		ЗавершитьРаботуПользователей();
		ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 180);
		Возврат Истина;
	Иначе
		Сообщить("Указан неверный параметр запуска: " + ПараметрЗапуска, СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура инициирует начало операции по завершению работы пользователей
//
Процедура НачатьЗавершениеРаботыПользователей() Экспорт

	ОтветНаВопрос = Вопрос("Начать процедуру завершения работы пользователей системы?
	                       |Пользователи завершат свою работу через 10 минут.", РежимДиалогаВопрос.ДаНет);
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗавершитьРаботуПользователей();
	ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 180);

КонецПроцедуры

// завершение работы только при условии удачной установки монопольного режима работы
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		Сообщить("Установлен режим завершения работы пользователей """ + Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно + """.", СтатусСообщения.Внимание);
		ЗавершитьРаботуСистемы(Ложь);
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно);
		Возврат;
	КонецЕсли; 
	
	ТекущийРежимЗавершения = Константы.РежимЗавершенияРаботыПользователей.Получить();
	
	Если ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу Тогда
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы Тогда
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей Тогда
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно Тогда
		
		
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		ПодстрокиСтрокиСоединения  = РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
		
		Если ПодстрокиСтрокиСоединения.Количество()> 1 и Лев(ПодстрокиСтрокиСоединения[0], 5) = "Srvr=" и Лев(ПодстрокиСтрокиСоединения[1], 4) = "Ref=" Тогда
			
			ИмяСервера = Сред(ПодстрокиСтрокиСоединения[0],7, СтрДлина(ПодстрокиСтрокиСоединения[0]) - 7);
			ИмяИБ      = Сред(ПодстрокиСтрокиСоединения[1],6, СтрДлина(ПодстрокиСтрокиСоединения[1]) - 6);
			
			Попытка
				connector = Новый COMОбъект("V8.ComConnector");
				server = connector.ConnectServer(ИмяСервера);
				
				ПодстрокиПараметровЗапуска = РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
				Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
					server.AddAuthentication(ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
				КонецЕсли;
				
				ibDesc = server.CreateInfoBaseInfo();
				ibDesc.Name = ИмяИБ;
				connections = server.GetIBConnections(ibDesc);
				
				Для каждого connection Из connections Цикл
					
					Если Не ПользователиИнформационнойБазы.НайтиПоИмени(connection.userName).Роли.Содержит(Метаданные.Роли.ПравоЗавершенияРаботыПользователей) Тогда
						server.Disconnect(connection);
					КонецЕсли; 
					
				КонецЦикла;
			Исключение
				СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки; 
			
		КонецЕсли;
		
		Соединения = ПолучитьСоединенияИнформационнойБазы();
		Если Соединения.Количество() > 1 Тогда
			
			Сообщение = "Не удалось завершить работу пользователей:";
			
			Для каждого Соединение Из Соединения Цикл
				Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
					Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
				КонецЕсли;
			КонецЦикла; 
			
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Иначе
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
		
	Иначе
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы);
		
	КонецЕсли;
	
	ТекущийРежимЗавершения = Константы.РежимЗавершенияРаботыПользователей.Получить();
	Сообщить("Установлен режим завершения работы пользователей """ + ТекущийРежимЗавершения + """.", СтатусСообщения.Внимание);
	
	
КонецПроцедуры

