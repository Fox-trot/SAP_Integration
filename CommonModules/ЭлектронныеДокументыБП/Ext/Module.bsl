
Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
		
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, Данные, ЭтоКорректировка = Ложь) Экспорт
	
	Если Данные.Свойство("НомерТД") Тогда
		
		СтрокаТаблицы.НомерГТД = НомерТДПолучитьСсылку(Данные.НомерТД);
		
	КонецЕсли;
	
	Если Данные.Свойство("КодСтраныПроисхождения") Тогда
		
		СтрокаТаблицы.СтранаПроисхождения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхождения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("НомерТДДоИзменения") Тогда
		
		СтрокаТаблицы.НомерГТДДоИзменения = НомерТДПолучитьСсылку(Данные.НомерТДДоИзменения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("КодСтраныПроисхожденияДоИзменения") Тогда
		
		СтрокаТаблицы.СтранаПроисхожденияДоИзменения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхожденияДоИзменения);
		
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаНДС;
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаНДС);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Найти("20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка электронных документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора, ЦенаВключаетНДС = Ложь)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ТекСтрока.Реквизит = "Номенклатура" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Услуга", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденноеЗначение, "Услуга"));
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизита(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", НайденноеЗначение);
			
		ИначеЕсли ТекСтрока.Реквизит = "ЭтоУслуга" Тогда
			
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Услуга", Булево(Число(НайденноеЗначение)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("СуммаСНДС") И ЦенаВключаетНДС Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС; 	
	КонецЕсли;
	
	ЗаполняемСтавкуНДС = 0;
	ДанныеДляРасчетаСтавки = Новый Структура("СтавкаНДС, СуммаНДС, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаСтавки, ДанныеДляЗаполненияСтрокиТЧ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СуммаНДС) 
			И ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.Сумма) Тогда
			//Определим ставку НДС расчетным путем
			ЗначениеСтавки = ОКР(ДанныеДляРасчетаСтавки.СуммаНДС / ДанныеДляРасчетаСтавки.Сумма,2);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("СтавкаНДС", ПолучитьСтавкуНДСПеречислением(ЗначениеСтавки));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание") И ДанныеДляЗаполненияСтрокиТЧ.Свойство("Наименование") Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ДанныеДляЗаполненияСтрокиТЧ.Наименование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Процедура СкопироватьЗначениеСтруктуры(Структура, ПолеИсточник, НовоеПоле)
	
	Если Структура.Свойство(ПолеИсточник) И Не Структура.Свойство(НовоеПоле) Тогда
		Структура.Вставить(НовоеПоле, Структура[ПолеИсточник]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ДанныеДокумента.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДокумента.Шапка;
	КонецЕсли;
	
	Текст = "";
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможно только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		//ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекущийПользователь(), ВалютаРегламентированногоУчета, "Покупка");
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		//УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
		//				ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);

		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);

	ДокументОбъект.СуммаВключаетНДС = Ложь;
		
	ВидДоговора = ДокументОбъект.ДоговорКонтрагента.ВидДоговора;
	ВидСклада = ДокументОбъект.Склад.ВидСклада;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();
	
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		СтрокаТЧ.Сумма = СтрокаНакладной.СуммаБезНДС; 
		
		ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", Истина);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
		СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		СтрокаТЧ.Сумма = СтрокаНакладной.СуммаБезНДС; 
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Если СокрЛП(СтрокаТЧ.Содержание) = "" Тогда
				Если ПустаяСтрока(СтрокаТЧ.Номенклатура.НаименованиеПолное) Тогда
					СтрокаТЧ.Содержание = СтрокаТЧ.Номенклатура.Наименование;
				Иначе
					СтрокаТЧ.Содержание = СтрокаТЧ.Номенклатура.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Услуги", Истина);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Документ = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(15, 2, ДопустимыйЗнак.Неотрицательный));
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	Услуги.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧислаЭД(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				Иначе
					СтрокаТаблицы = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					ЭлектронныеДокументыБП.ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Удалить("ВидОперации");
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтранаПроисхожденияПолучитьСсылку(КодСтраныПроисхождения)

	Если Не ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КодСтраныПроисхождения = СокрЛП(КодСтраныПроисхождения);
	СтранаПроисхожденияСсылка = Справочники.КлассификаторСтранМира.НайтиПоКоду(КодСтраныПроисхождения);
	Если Не ЗначениеЗаполнено(СтранаПроисхожденияСсылка) Тогда
		
		Макет = Справочники.КлассификаторСтранМира.ПолучитьМакет("КлассификаторСтранМира");
		ОбластьКодСтраны = Макет.ПолучитьОбласть("КодЧисловой");
		РезультатПоиска = ОбластьКодСтраны.НайтиТекст(КодСтраныПроисхождения,,,, Истина);
		Если РезультатПоиска = Неопределено Тогда
			
			Сообщить("Не удалось найти страну происхождения в классификаторе стран мира.");
			
			Возврат Неопределено;
			
		КонецЕсли;
			
		НомерСтроки = РезультатПоиска.Верх;
		ОбластьНаименованиеКраткое = Макет.Области.НаименованиеКраткое;
		ОбластьНаименованиеПолное  = Макет.Области.НаименованиеПолное;
		ОбластьКодАльфа2           = Макет.Области.КодАльфа2;
		
		СтранаПроисхожденияОбъект = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
		
		СтранаПроисхожденияОбъект.Код = КодСтраныПроисхождения;
		СтранаПроисхожденияОбъект.Наименование =
			СокрЛП(Макет.Область(НомерСтроки, ОбластьНаименованиеКраткое.Лево).Текст);
		СтранаПроисхожденияОбъект.НаименованиеПолное =
			СокрЛП(Макет.Область(НомерСтроки, ОбластьНаименованиеПолное.Лево).Текст);
		СтранаПроисхожденияОбъект.КодАльфа2 =
			СокрЛП(Макет.Область(НомерСтроки, ОбластьКодАльфа2.Лево).Текст);
			
		СтранаПроисхожденияОбъект.Записать();
		
		СтранаПроисхожденияСсылка = СтранаПроисхожденияОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат СтранаПроисхожденияСсылка;
	
КонецФункции

Функция НомерТДПолучитьСсылку(НомерТД)
	
	Если Не ЗначениеЗаполнено(НомерТД) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	НомерТД = СокрЛП(НомерТД);
	НомерТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
	Если Не ЗначениеЗаполнено(НомерТДСсылка) Тогда
		
		НомерТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерТДОбъект.Код = НомерТД;
		НомерТДОбъект.Записать();
		НомерТДСсылка = НомерТДОбъект.Ссылка;
		
	КонецЕсли; 
	
	Возврат НомерТДСсылка;
	
КонецФункции
