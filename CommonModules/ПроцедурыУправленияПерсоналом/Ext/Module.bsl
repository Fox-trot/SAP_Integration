///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(Знач Текст, Организация = "") Экспорт

	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;

	ТекстУсловияОрганизации = "";
	
	Если Не ЗначениеНеЗаполнено(Организация) Тогда
		ТекстУсловияОрганизации = " И Организация = &парамГоловнаяОрганизация";
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	РаботникиОрганизаций.Физлицо.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"" " + ТекстУсловияОрганизации +") КАК РаботникиОрганизаций";
	
	Запрос.Текст = ТекстЗапроса;

	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

	Возврат ТекстАвтоПодбора

КонецФункции // ПодобратьФИОРаботникаКандидата()

#Если Клиент Тогда

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Текст 		- строка - начало ФИО
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(Знач Текст, НачальноеЗначение, Организация = "") Экспорт

	Запрос = Новый Запрос;

	ТекстУсловияОрганизации = "";
	
	Если Не ЗначениеНеЗаполнено(Организация) Тогда
		ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	РаботникиОрганизаций.Физлицо КАК Ссылка,
	|	РаботникиОрганизаций.Физлицо.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"" " + ТекстУсловияОрганизации + ") КАК РаботникиОрганизаций";
	
	Запрос.Текст = ТекстЗапроса;

	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Количество = Выборка.Количество();

	Если Количество = 0 Тогда

		СообщитьОбОшибке("В поле ввода неверно задано наименование работника!");

		Возврат НачальноеЗначение;

	ИначеЕсли Количество < 51 Тогда

		Значение = Новый СписокЗначений;

		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;

		Возврат Значение;

	Иначе
		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина) Экспорт
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ДатаАктуальности = ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных = НачалоГода(ДатаАктуальности);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос = ИсполнятьЗапрос;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
	Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
	КонецЕсли;
	ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
	СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация(Организация));
	Если Не ЗначениеНеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Установить(Подразделение,);
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация ведости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, СпособыВыплатыЗарплаты) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.СпособВыплаты.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.СпособВыплаты.Значение		= СпособыВыплатыЗарплаты;
	ФормаВыбора.Отбор.СпособВыплаты.Использование	= Истина;
	
	ФормаВыбора.Открыть();
	

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

#КонецЕсли

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

	МассивСтрок = Новый Массив();

	Если Разделитель = " " Тогда

		Стр = СокрЛП(Стр);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);

			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));

		КонецЦикла;

	Иначе

		ДлинаРазделителя = СтрДлина(Разделитель);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));

			Стр = Сред(Стр,Поз + ДлинаРазделителя);

		КонецЦикла;

	КонецЕсли;

КонецФункции // глРазложить

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);

	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе

		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")

	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия  = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя      = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции 

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции 

// Определяет размер часовой тарифной ставки на основании месячного оклада и других необходимых параметров
//
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеМесячнойСтавки(Оклад, ПродолжительностьРабочейНедели, ЧислоРабочихДнейВГоду, ЧислоПредпраздничныхДнейВГоду) Экспорт

	Если ПродолжительностьРабочейНедели = 40 Тогда
		СреднемесячноеКоличествоЧасов = (ЧислоРабочихДнейВГоду * 8 + ЧислоПредпраздничныхДнейВГоду * 7) / 12;

	Иначе
		СреднемесячноеКоличествоЧасов = ПродолжительностьРабочейНедели / 5 * (ЧислоРабочихДнейВГоду + ЧислоПредпраздничныхДнейВГоду) / 12;

	КонецЕсли;

	// расчет часовой ставки
	Возврат ?(СреднемесячноеКоличествоЧасов = 0, 0, Оклад / СреднемесячноеКоличествоЧасов);

КонецФункции

// Возвращает подразделение работника на дату начала события 
//
Функция ПодразделениеРаботникаНаДату(ФизЛицо, Приказ, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Приказ",  Приказ);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Физлицо = &ФизЛицо И Приказ = &Приказ) КАК РаботникиОрганизацийСрезПоследних
	|
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.Физлицо = &Физлицо";
	ПрежниеДанные = Запрос.Выполнить().Выбрать();

	Если ПрежниеДанные.Следующий() тогда
		Возврат ПрежниеДанные.ПодразделениеОрганизации; 
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Возвращает значение ставки НДФЛ с доходов нерезидентов 
//
Функция ЗначениеСтавкиНДФЛСНерезидента() Экспорт

	Возврат 30;

КонецФункции 

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРУзИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 

	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);

	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Обеспечивает подблор данных по физлицу и организации
// подбираются приказ о приеме, подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//	Организация
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		Приказ
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ОбязательныйПодбор = Ложь, УчетнаяПолитикаПоПерсоналу) Экспорт

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ГоловнаяОрганизация(Организация);
	СписокСтруктурныхПодразделений = ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",СписокСтруктурныхПодразделений);

	// Выбор приказов о приеме на работу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Приказ КАК Приказ,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	РаботникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
	|	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизаций.Должность.Наименование КАК ДолжностьНаименование,
	|	РаботникиОрганизаций.ТабельныйНомер
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо = &Физлицо И Организация В (&СписокСтруктурныхПодразделений)) КАК РаботникиОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизаций.Период";

	Запрос.Текст = ТекстЗапроса;

	НаборыДанных = Запрос.Выполнить().Выгрузить(); 

	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() = 0 Тогда
		
		Если УчетнаяПолитикаПоПерсоналу[Организация].ПоддержкаВнутреннегоСовместительства Тогда
			Если ОбязательныйПодбор Тогда
				СписокНаборовДанных = Новый СписокЗначений;
				СписокНаборовДанных.Добавить(Неопределено, "Нет приказов о приеме");
				Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
			КонецЕсли;
		КонецЕсли;

		Возврат НеОпределено; 

	ИначеЕсли НаборыДанных.Количество() = 1 И НЕ ОбязательныйПодбор Тогда  // Если нашли один набор данных то используем его
		Возврат НаборыДанных[0]; 

	Иначе  // Если набоов данных несколько - предложим выбрать из списка.

		СписокНаборовДанных = Новый СписокЗначений;

		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.ФизлицоНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;

		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);

		Если ВыбранныйНаборДанных = НеОпределено Тогда
			Возврат НеОпределено;

		Иначе
			Возврат ВыбранныйНаборДанных.Значение;

		КонецЕсли;

	КонецЕсли;

КонецФункции  // ПодборДанныхПоФизлицу

// Открывает форму выбора работника для подбора его в табличную часть
//
// Владелец - табличное поле или форма, в зависимости от того откуда подбирается работник:
//			  - табличное поле с табличной частью документа
//            в такой табличной части документа подбирается физлицо из числа работников организации;
//            - форма с реквизитом ФизЛицо
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// Ключ - ключ уникальности открываемой формы
//
// Организация - ссылка на организацию, если передана пустая ссылка список выбора будет пуст
//
// ПодразделениеОрганизации - ссылка на подразделение, если передана пустая ссылка, выбираются 
//								РаботникиОрганизаций всех подразделений
//
// Уникальность - булево, если Истина, то подбирается работник с точностью до приказа о приеме
//                если Ложь, то подбирается первый попавшийся работник (для подбора в табличные 
//				  части удержаний)
// 
Процедура ОткрытьФормуВыбораРаботникаОрганизации(Владелец, СтандартнаяОбработка, Ключ, Организация, ПодразделениеОрганизации, Уникальность = Ложь) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаВыбораРаботникаОрганизации", Владелец, Ключ);

	Форма.РежимВыбора = Истина;
	Форма.Организация = Организация;
	Форма.ПодразделениеОрганизации = ПодразделениеОрганизации;

	Если ТипЗнч(Владелец) = Тип("ТабличноеПоле") Тогда // Выбор работника организации из ТЧ документа

		Форма.ПараметрФизлицо = Владелец.ТекущаяСтрока.Физлицо;

		Если НЕ Уникальность Тогда

			// Если в ТЧ есть колонка Приказ.
			Если Владелец.Колонки.Найти("Приказ") <> НеОпределено Тогда
				Форма.ПараметрПриказ = Владелец.ТекущаяСтрока.Приказ;
			КонецЕсли; 

		КонецЕсли;

	ИначеЕсли ТипЗнч(Владелец) = Тип("ПолеВвода") Тогда                                            

		Форма.ПараметрФизлицо = Владелец.Значение;

	ИначеЕсли ТипЗнч(Владелец) = Тип("Форма") Тогда   // Выбор работника организации из формы документа; физлицо и приказ - реквизиты документа

		Форма.ПараметрФизлицо = Владелец.Физлицо;

		Если НЕ Уникальность Тогда

			ДокМетаданные = Владелец.Метаданные();

			Если ЕстьРеквизитДокумента("Приказ", ДокМетаданные) Тогда
				Форма.ПараметрПриказ  = Владелец.Приказ;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Форма.ПараметрУникальность = Уникальность;
	СтандартнаяОбработка = Ложь;

	Форма.Открыть();


КонецПроцедуры  // ОткрытьФормуВыбораФизлица

// Открывает форму выбора работника для подбора его в табличную часть
//
// Владелец - табличное поле с табличной частью документа
//            в такой табличной части документа подбирается физлицо из числа работников компании
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// Ключ - ключ уникальности открываемой формы
//
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуВыбораРаботника(Владелец, СтандартнаяОбработка, Ключ, Подразделение) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаВыбораРаботника", Владелец, Ключ);

	Форма.РежимВыбора   = Истина;
	Форма.Подразделение = Подразделение;

	Если ТипЗнч(Владелец) = Тип("ТабличноеПоле") Тогда // Выбор работника организации из ТЧ документа
		
		Форма.ПараметрФизлицо = Владелец.ТекущаяСтрока.Физлицо;
		
	ИначеЕсли ТипЗнч(Владелец) = Тип("ПолеВвода") Тогда                                            
		
		Форма.ПараметрФизлицо = Владелец.Значение;
		
	ИначеЕсли ТипЗнч(Владелец) = Тип("Форма") Тогда   // Выбор работника организации из формы документа; физлицо и приказ - реквизиты документа
		Форма.ПараметрФизлицо = Владелец.Физлицо;

	КонецЕсли;

	Форма.Открыть();

	СтандартнаяОбработка = Ложь;

КонецПроцедуры  // ОткрытьФормуВыбораФизлица

// проставляет в строку табличной части или реквизит формы полученные данные по физлицу
Процедура ПроставитьДанныеСтроки(НаборДанных, ЭлементФормы) Экспорт

	Если НаборДанных = НеОпределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда

		// поле Приказ есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Приказ") <> НеОпределено Тогда
			Если ЭлементФормы.ТекущаяСтрока <> НеОпределено Тогда
				ЭлементФормы.ТекущаяСтрока.Приказ = НаборДанных.Приказ;
			Иначе
				
			КонецЕсли;
		КонецЕсли;
		
		//ЭлементФормы.ТекущаяСтрока.Приказ = НаборДанных.Приказ;
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> НеОпределено Тогда
			Если ЭлементФормы.ТекущаяСтрока <> НеОпределено Тогда
				ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборДанных.ПодразделениеОрганизации;
			Иначе
				
			КонецЕсли;
		КонецЕсли;

	Иначе

		ЭлементФормы = НаборДанных.Приказ;

	КонецЕсли; 

КонецПроцедуры // ПроставитьДанныеСтроки

// Открывает форму выбора работника для подбора его в табличную часть
//
// Владелец - табличное поле с табличной частью документа
//            в такой табличной части документа подбирается физлицо из числа работников компании
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// Ключ - ключ уникальности открываемой формы
//
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуВыбораКандидата(Владелец, СтандартнаяОбработка, Ключ, Статус) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаВыбораКандидата", Владелец, Ключ);

	Форма.РежимВыбора      = Истина;
	Форма.СтатусКандидатов = Статус;
	Форма.ПараметрФизлицо  = Владелец.ТекущаяСтрока.Физлицо;

	Форма.Открыть();
	СтандартнаяОбработка   = Ложь;

КонецПроцедуры  // ОткрытьФормуВыбораФизлица

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемнт формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;

		Если СтрокаТЧ <> Неопределено Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ]    = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  //  СинхронизироватьСтроки

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ВКЛЮЧЕНИЕ (ВЫКЛЮЧЕНИЕ) ПОДДЕРЖКИ ВНУТРЕННОГО СОВМЕСТИТЕЛЬСТВА

// Функция проверяет можно ли отключать поддержку внутренних совместителей
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - существуют внутренние совместители =>
//	отключение невозможно
//
// Описание:
//  Проверяет, есть ли внутренние совместители 
//
Функция МожноОтключатьВнутреннееСовместительство(Организация)
	
	#Если Клиент Тогда
	Состояние("Выполняется поиск внутренних совместителей");
	#КонецЕсли
				
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Физлицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &Организация
	|	И РаботникиОрганизации.Приказ.ВидЗанятости = &ВнутреннееСовместительство");
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции	//МожноОтключатьВнутреннееСовместительство()

// Функция выполняет запрос по документам у которых головная организация = организация и приказ либо,
//	пустой либо заполненный в зависимости от параметров
//
// Параметры: 
//	ПустойПриказ - пустая ссылка на док. ПриемНаРаботуВОрганизацию
//	ИмяТаблицы - строковая переменная, вид документа (возможно, вместе с табличной частью)
//  Организация - организация по которой строим запрос
//	ПустаяОрганизация - пустая ссылка на справочник "Организации"
//  ЭтоЗапросПоТЧ - булево, если истина, то запрос строится по табличной части
//	Заполнить - булево, если истина, запрос строится по пустому приказу, иначе по заполненному
//
// Возвращаемое значение:
//  Возвращает запрос
// 
Функция СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, ПустаяОрганизация, ЭтоЗапросПоТЧ = Ложь, Заполнить = Истина)
	
	ЗапросПоДокументам = Новый Запрос();
	
	Если Заполнить Тогда
		
		Если ЭтоЗапросПоТЧ Тогда
			
			ЗапросПоТЧДокументовТекст = "";
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				ИмяПоля = Элемент.Значение;
				
			    Если ЗапросПоТЧДокументовТекст <> "" Тогда
					
					ЗапросПоТЧДокументовТекст = ЗапросПоТЧДокументовТекст + "
					|
					|Объединить
					|";
					
				КонецЕсли;
				
				ЗапросПоТЧДокументовТекст = ЗапросПоТЧДокументовТекст +
				"ВЫБРАТЬ
				|   """ + ИмяТаблицы + """ КАК ИмяТЧ,
				|   Документ.Ссылка КАК Ссылка,
				|	Документ.НомерСтроки КАК НомерСтроки,
				|	Документ.ФизЛицо КАК ФизЛицо,
				|	Документ." + ИмяПоля + " КАК ДатаНачала
				|ИЗ
				|	Документ." + ИмяТаблицы + " КАК Документ
				|ГДЕ
				|	ВЫБОР КОГДА Документ.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Ссылка.Организация ИНАЧЕ Документ.Ссылка.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
				|	И Документ.Приказ = &парамПустойПриказ
				|";
			
			КонецЦикла;
		
			ЗапросПоДокументамТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|   ДатыПоследнихДвиженийРаботников.ИмяТЧ КАК ИмяТЧ,
			|   ДатыПоследнихДвиженийРаботников.Ссылка КАК Ссылка,
			|	ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
			|   ДанныеПоРаботникуПриНазначении.Приказ КАК Приказ
			|ИЗ
			|	(ВЫБРАТЬ
			|  		Документ.ИмяТЧ КАК ИмяТЧ,
			| 		Документ.Ссылка КАК Ссылка,
			|		Документ.ФизЛицо КАК ФизЛицо,
			|		Документ.НомерСтроки КАК НомерСтроки,
			|		МАКСИМУМ(Работники.Период) КАК Период
			|	ИЗ
			|		(" + ЗапросПоТЧДокументовТекст + ") КАК Документ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|			ПО Документ.ФизЛицо = Работники.Физлицо  
			|		        И Работники.Период <= Документ.ДатаНачала 
			|		        И (Работники.Организация = &Организация)
			|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
			|				
			|	СГРУППИРОВАТЬ ПО
			|  		Документ.ИмяТЧ,
			|		Документ.Ссылка,
			|		Документ.ФизЛицо,
			|		Документ.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
			|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
			|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
			|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)	
			|				
			|УПОРЯДОЧИТЬ ПО
			|	ДатыПоследнихДвиженийРаботников.Ссылка,
			|	ДатыПоследнихДвиженийРаботников.ИмяТЧ,
			|	ДатыПоследнихДвиженийРаботников.НомерСтроки";
			
		Иначе
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				ИмяПоля = Элемент.Значение;
			
			КонецЦикла;
			
			ЗапросПоДокументамТекст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
			|	ДатыПоследнихДвиженийРаботников.Ссылка КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			| 		Документ.Ссылка КАК Ссылка,
			|		Документ.ФизЛицо КАК ФизЛицо,
			|		МАКСИМУМ(Работники.Период) КАК Период
			|	ИЗ
			|		Документ." + ИмяТаблицы + " КАК Документ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|			ПО Документ.ФизЛицо = Работники.Физлицо  
			|		        И Работники.Период <= Документ." + ИмяПоля + " 
			|		        И (Работники.Организация = &Организация)
			|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
			|				
			|	ГДЕ
			|		ВЫБОР КОГДА Документ.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Организация ИНАЧЕ Документ.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
			|		И Документ.Приказ = &парамПустойПриказ
			|				
			|	СГРУППИРОВАТЬ ПО
			|		Документ.Ссылка,
			|		Документ.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
			|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
			|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
			|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
			|				
			|УПОРЯДОЧИТЬ ПО
			|	ДатыПоследнихДвиженийРаботников.Ссылка";
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоЗапросПоТЧ Тогда
			
			ЗапросПоДокументамТекст = "";
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				
			    Если ЗапросПоДокументамТекст <> "" Тогда
					
					ЗапросПоДокументамТекст = ЗапросПоДокументамТекст + "
					|
					|Объединить
					|";
					
				КонецЕсли;
				
				ЗапросПоДокументамТекст = ЗапросПоДокументамТекст +
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|   """ + ИмяТаблицы + """ КАК ИмяТЧ,
				|   Документ.Ссылка КАК Ссылка
				|ИЗ
				|	Документ." + ИмяТаблицы + " КАК Документ
				|ГДЕ
				|	ВЫБОР КОГДА Документ.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Ссылка.Организация ИНАЧЕ Документ.Ссылка.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
				|	И Документ.Приказ <> &парамПустойПриказ
				|";
			
			КонецЦикла;
		
			ЗапросПоДокументамТекст = ЗапросПоДокументамТекст + "
			|				
			|УПОРЯДОЧИТЬ ПО
			|	Документ.Ссылка";
			
		Иначе
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
				ИмяТаблицы = Элемент.Ключ;
			КонецЦикла;
			
			ЗапросПоДокументамТекст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|   Документ.Ссылка КАК Ссылка
			|ИЗ
			|	Документ."+ ИмяТаблицы + " КАК Документ
			|ГДЕ
			|	ВЫБОР КОГДА Документ.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Организация ИНАЧЕ Документ.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
			|	И Документ.Приказ <> &парамПустойПриказ";
		КонецЕсли;
		
	
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ЗапросПоДокументамТекст;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПоДокументам.УстановитьПараметр("парамПустаяОрганизация", ПустаяОрганизация);
	ЗапросПоДокументам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	
	Возврат ЗапросПоДокументам.Выполнить();
	
	
КонецФункции //СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства

Функция ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(НаборЗаписей, СоответствиеИменТаблиц, Организация, ВычислятьГоловнуюОрганизацию, ПустаяОрганизация, ПустойПриказ, ТекстСообщенияОбОшибке)
	
	ЗапросПоРегистраторам = Новый Запрос();
	
	Для каждого Элемент Из СоответствиеИменТаблиц Цикл
		
		ИмяТаблицы = Элемент.Ключ;
		ИмяПоля = Элемент.Значение;
		
	КонецЦикла;
	
	ЗапросПоРегистраторамТекст =
	"ВЫБРАТЬ 
	|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
	|	ДатыПоследнихДвиженийРаботников.ФизЛицо КАК ФизЛицо,
	|	ДатыПоследнихДвиженийРаботников.ДатаВРегистре КАК ДатаВРегистре,
	|	ДатыПоследнихДвиженийРаботников.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Регистр.Регистратор КАК Регистратор,
	|		Регистр.ФизЛицо КАК ФизЛицо,
	|		Регистр." + ИмяПоля + " КАК ДатаВРегистре,
	|		МАКСИМУМ(Работники.Период) КАК Период
	|	ИЗ
	|	" + ИмяТаблицы + " КАК Регистр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ПО Регистр.ФизЛицо = Работники.Физлицо  
	|		        И Работники.Период <= Регистр." + ИмяПоля + " 
	|		        И (Работники.Организация = &Организация)
	|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
	|				
	|	ГДЕ";
	Если ВычислятьГоловнуюОрганизацию Тогда
		ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		ВЫБОР КОГДА Регистр.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Регистр.Организация ИНАЧЕ Регистр.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация"
	Иначе
		ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		Регистр.Организация = &Организация"
	КонецЕсли;
	ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		И Регистр.Приказ = &парамПустойПриказ
	|				
	|	СГРУППИРОВАТЬ ПО
	|		Регистр.Регистратор,
	|		Регистр." + ИмяПоля + ",
	|		Регистр.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
	|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
	|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
	|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
	|				
	|УПОРЯДОЧИТЬ ПО
	|	ДатыПоследнихДвиженийРаботников.Регистратор";
	

	ЗапросПоРегистраторам.Текст = ЗапросПоРегистраторамТекст;
	ЗапросПоРегистраторам.УстановитьПараметр("Организация", Организация);
	ЗапросПоРегистраторам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация", ПустаяОрганизация);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	
	Выборка = ЗапросПоРегистраторам.Выполнить().Выбрать();
	СтруктураОтбора = Новый Структура("ФизЛицо," + ИмяПоля);
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);				
		НаборЗаписей.Прочитать();
		ВременнаяТаблица = НаборЗаписей.Выгрузить();
		Пока Выборка.Следующий() Цикл						
			СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо;
			СтруктураОтбора[ИмяПоля] = Выборка.ДатаВРегистре;
			СтрокиИзНабора = ВременнаяТаблица.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНабора Из СтрокиИзНабора Цикл
				СтрокаНабора.Приказ = Выборка.Приказ
			КонецЦикла;
		КонецЦикла;
		НаборЗаписей.Загрузить(ВременнаяТаблица);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ТекстСообщенияОбОшибке);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;								
	
КонецФункции //СформироватьЗапросКРегиструДляПодключенияПоддержкиВнутреннегоСовместительства

// Процедура выполняет запрос по регистрам для "заполнения" "очищения" приказа
//
// Параметры: 
//	Регистр - имя регистра по которому строим запрос
//	Организация	- организация по которой строим запрос
//	парамПустаяОрганизация - пустая ссылка на спр. организации
//	Имя - наименование регистра
//  ТаблицаФизЛицИПриказов - таблица из физ. лиц и приказов
//  Действие - действие над регистром, 1 - заполнить приказ, 2 - очистить приказ
//	ПустойПриказ - пустая ссылка на документ "Приказ о приеме в организацию
//
Функция СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства(Регистр, Организация, парамПустаяОрганизация, ПустойПриказ = Неопределено)
	
	ЗапросПоРегистраторам = Новый Запрос();
	ЗапросПоРегистраторам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Регистр.Регистратор
	|ИЗ 
	|	" + Регистр + " КАК Регистр
	|
	|ГДЕ
	|	ВЫБОР КОГДА Регистр.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Регистр.Организация ИНАЧЕ Регистр.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
	|	И Регистр.Приказ <> &парамПустойПриказ";
	
	ЗапросПоРегистраторам.УстановитьПараметр("Организация",Организация);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация",парамПустаяОрганизация);
			
    Возврат ЗапросПоРегистраторам.Выполнить();
	
КонецФункции  //СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства

// Производит очистку реквизита "Приказ" и запись данных набора записей регистра
//
// Параметры:
//  НаборЗаписей	- набор записей регистра,
//  Выборка			- выборка по регистру,
//	ИмяРегистра		- Имя регистра
//
Процедура ОчиститьПриказВНабореЗаписей(НаборЗаписей,Регистратор,ПустойПриказ)

	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);				
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.Приказ	= ПустойПриказ;
	КонецЦикла; 
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщитьОбОшибке(НаборЗаписей.Метаданные().Имя + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Включение режима поддержки внутреннего совместительства
// Производит заполнение реквизита "Приказ" и запись данных набора записей регистра
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВключениеПоддержкиСовместителей(Организация) Экспорт
	
	ПустойПриказ = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
	парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	ТипДата = Тип("Дата");
	
	// заполним измерение "Приказ" в регистрах сведений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыСведений Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре сведений: " + Имя);
			#КонецЕсли			
			
			ИмяРеквизита = "Период";
			ВычислятьГоловнуюОрганизацию = Ложь;
			Если Имя = "НамеченныеСобытияПоПерсоналуОрганизаций" Тогда
				ИмяРеквизита = "ДатаИзменения";
				ВычислятьГоловнуюОрганизацию = Истина;
			КонецЕсли;
			СоответствиеИменТаблиц = Новый Соответствие;
			СоответствиеИменТаблиц.Вставить("РегистрСведений."+Имя, ИмяРеквизита);
			
			ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыСведений[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, ВычислятьГоловнуюОрганизацию, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр сведений: " + Имя);
		КонецЕсли;
	КонецЦикла;	
	
	// заполним измерение "Приказ" в регистрах накопления
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыНакопления Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре накоплений: " + Имя);
			#КонецЕсли			
			
			СоответствиеИменТаблиц = Новый Соответствие;
			СоответствиеИменТаблиц.Вставить("РегистрНакопления."+Имя, "Период");
			
			ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыНакопления[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр накоплений: " + Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// заполним измерение "Приказ" в регистрах расчета
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыРасчета Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;						
			СоответствиеИменТаблиц = Новый Соответствие;
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре расчета: " + Имя);
			#КонецЕсли			
		
			Если МетаданныеРегистра.ПериодДействия Тогда
			
				Если Имя = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
					ИмяРеквизита = "ДатаНачалаСобытия"
				Иначе 
					ИмяРеквизита = "ПериодДействияНачало";
				КонецЕсли;
				
				СоответствиеИменТаблиц.Вставить("РегистрРасчета."+Имя, ИмяРеквизита);
				
				ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыРасчета[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр расчета: " + Имя);
				
			ИначеЕсли Имя = "РасчетСреднегоЗаработка" Тогда
				
				ИмяРеквизита = "ДатаОкончанияРасчетногоПериода";
				
				СоответствиеИменТаблиц.Вставить("РегистрРасчета."+Имя, ИмяРеквизита);
				
				ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыРасчета[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр расчета: " + Имя);
				
			Иначе
				
				ЗапросПоРегистраторам = Новый Запрос();
				ЗапросПоРегистраторамТекст =
				"ВЫБРАТЬ
				|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
				|	ДатыПоследнихДвиженийРаботников.ФизЛицо КАК ФизЛицо,
				|	ДатыПоследнихДвиженийРаботников.ПериодРегистрации КАК ПериодРегистрации,
				|	ДатыПоследнихДвиженийРаботников.Регистратор КАК Регистратор
				|ИЗ
				|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Регистр.Регистратор КАК Регистратор,
				|		Регистр.ФизЛицо КАК ФизЛицо,
				|		Регистр.ПериодРегистрации КАК ПериодРегистрации,
				|		МАКСИМУМ(Работники.Период) КАК Период,
				|		1 КАК Вариант
				|	ИЗ
				|		РегистрРасчета." + Имя + " КАК Регистр
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ПО Регистр.ФизЛицо = Работники.Физлицо
				|				И (Работники.Организация = &Организация)
				|				И (Работники.ПричинаИзмененияСостояния = &Прием)
				|				И (Работники.Период <= КОНЕЦПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ))
				|	ГДЕ
				|		Регистр.Организация = &Организация
				|		И Регистр.Приказ = &парамПустойПриказ
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Регистр.Регистратор,
				|		Регистр.ПериодРегистрации,
				|		Регистр.ФизЛицо
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Регистр.Регистратор,
				|		Регистр.ФизЛицо,
				|		Регистр.ПериодРегистрации,
				|		МАКСИМУМ(Работники.Период),
				|		2
				|	ИЗ
				|		РегистрРасчета." + Имя + " КАК Регистр
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ПО Регистр.ФизЛицо = Работники.Физлицо
				|				И (Работники.Организация = &Организация)
				|				И (Работники.ПричинаИзмененияСостояния = &Прием)
				|				И Работники.Период <= Регистр.ПериодРегистрации
				|	ГДЕ
				|		Регистр.Организация = &Организация
				|		И Регистр.Приказ = &парамПустойПриказ
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Регистр.Регистратор,
				|		Регистр.ПериодРегистрации,
				|		Регистр.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
				|		ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период
				|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо
				|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
				|ГДЕ
				|	ДатыПоследнихДвиженийРаботников.Период ЕСТЬ НЕ NULL 
				|
				|УПОРЯДОЧИТЬ ПО
				|	Регистратор,
				|	ПериодРегистрации,
				|	ФизЛицо,
				|	ДатыПоследнихДвиженийРаботников.Вариант";
				

				ЗапросПоРегистраторам.Текст = ЗапросПоРегистраторамТекст;
				ЗапросПоРегистраторам.УстановитьПараметр("Организация", Организация);
				ЗапросПоРегистраторам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
				ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация", парамПустаяОрганизация);
				ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
				
				Выборка = ЗапросПоРегистраторам.Выполнить().Выбрать();
				СтруктураОтбора = Новый Структура("ФизЛицо,ПериодРегистрации");
				
				НаборЗаписей = РегистрыРасчета[Имя].СоздатьНаборЗаписей();
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);				
					НаборЗаписей.Прочитать();
					ВременнаяТаблица = НаборЗаписей.Выгрузить();
					Пока Выборка.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
							Пока Выборка.Следующий() Цикл						
								Если СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо И СтруктураОтбора.ПериодРегистрации = Выборка.ПериодРегистрации Тогда
									Продолжить;
								КонецЕсли;
								СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо;
								СтруктураОтбора.ПериодРегистрации = Выборка.ПериодРегистрации;
								СтрокиИзНабора = ВременнаяТаблица.НайтиСтроки(СтруктураОтбора);
								Для каждого СтрокаНабора Из СтрокиИзНабора Цикл
									СтрокаНабора.Приказ = Выборка.Приказ
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					НаборЗаписей.Загрузить(ВременнаяТаблица);
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Сообщить("Не удалось обработать регистр расчета: " + Имя);
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;								
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	// заполним реквизит "Приказ" в документах
	Для Каждого МетаданныеДокумента из Метаданные.Документы Цикл				
		
		СоответствиеИменТаблиц = Новый Соответствие;
		
		// заполним реквизит "Приказ" в шапке докуметов
		Если ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента) 
			И ЕстьРеквизитДокумента("Приказ", МетаданныеДокумента) 
			И ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда			
			
			#Если Клиент Тогда
				Состояние("Заполняется реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
		
			Если ЕстьРеквизитДокумента("ДатаНачала", МетаданныеДокумента) Тогда
				ИмяРеквизита = "ДатаНачала"
			ИначеЕсли ЕстьРеквизитДокумента("ДатаНачалаОсновногоОтпуска", МетаданныеДокумента) Тогда	
				ИмяРеквизита = "ДатаНачалаОсновногоОтпуска"
			Иначе
				ИмяРеквизита = "Дата";
				Если ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента) Тогда
					ИмяРеквизита = "ПериодРегистрации"
				КонецЕсли;
				Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
					Если РеквизитДокумента.Имя = "ПериодРегистрации" Тогда
						Продолжить;
					КонецЕсли;
					Если РеквизитДокумента.Тип.СодержитТип(ТипДата) Тогда
						ИмяРеквизита = РеквизитДокумента.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
			СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя, ИмяРеквизита);
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация).Выбрать();
			
			Пока ДокВыборка.Следующий() Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();				
				Документ.Приказ	= ДокВыборка.Приказ;					
				Документ.Записать();					
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// заполним реквизит "Приказ" в таблицах докуметов
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			Если (ЕстьРеквизитТабЧастиДокумента("ФизЛицо", МетаданныеДокумента, ТабличнаяЧасть.Имя)) и (ЕстьРеквизитТабЧастиДокумента("Приказ", МетаданныеДокумента, ТабличнаяЧасть.Имя))  Тогда
				
				Если ЕстьРеквизитДокумента("ДатаНачала", ТабличнаяЧасть) Тогда
					ИмяРеквизита = "ДатаНачала"
				ИначеЕсли ЕстьРеквизитДокумента("ДатаДействия", ТабличнаяЧасть) Тогда	
					ИмяРеквизита = "ДатаДействия"
				ИначеЕсли ЕстьРеквизитДокумента("ПериодДействияНачало", ТабличнаяЧасть) Тогда	
					ИмяРеквизита = "ПериодДействияНачало"
				Иначе
					ИмяРеквизита = "Ссылка.Дата";
					Если ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента) Тогда
						ИмяРеквизита = "Ссылка.ПериодРегистрации"
					КонецЕсли;
					Для каждого РеквизитДокумента Из ТабличнаяЧасть.Реквизиты Цикл
					    Если РеквизитДокумента.Тип.СодержитТип(ТипДата) Тогда
							ИмяРеквизита = РеквизитДокумента.Имя;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя + "." + ТабличнаяЧасть.Имя, ИмяРеквизита);

			КонецЕсли;
			
		КонецЦикла;
		
		Если СоответствиеИменТаблиц.Количество() > 0 Тогда
			
			#Если Клиент Тогда
				Состояние("Заполняется реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
			
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация,Истина).Выбрать();
			
			Пока ДокВыборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();					
				Пока ДокВыборка.СледующийПоЗначениюПоля("ИмяТЧ") Цикл
					ИмяТЧ = СтрЗаменить(ДокВыборка.ИмяТЧ,МетаданныеДокумента.Имя + ".","");
					Пока ДокВыборка.Следующий() Цикл						
						СтрокаТЧ = Документ[ИмяТЧ].Найти(ДокВыборка.НомерСтроки,"НомерСтроки");
						Если СтрокаТЧ <> Неопределено Тогда
							СтрокаТЧ.Приказ = ДокВыборка.Приказ; 					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;								
				Документ.Записать();
			КонецЦикла;								
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат Истина;
			
КонецФункции //ВключениеПоддержкиСовместителей

// Отключение режима поддержки внутреннего совместительства
// Функция производит очистку реквизита "Приказ" в регистрах и документах
//
// Параметры: 
//	Организация - ссылка на организацию
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВыключениеПоддержкиСовместителей(Организация) Экспорт
	
	Если НЕ(МожноОтключатьВнутреннееСовместительство(Организация)) Тогда
		СообщитьОбОшибке("Отключить поддержку внутреннего совместительства невозможно, т.к. некоторые работники заняты на нескольких местах работы!");
		Возврат Ложь;
	КонецЕсли;
		
	ПустойПриказ = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
	парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	// очистим измерение "Приказ" в регистрах сведений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыСведений Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;
			НаборЗаписей = РегистрыСведений[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре сведений: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрСведений."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;	
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим измерение "Приказ" в регистрах накоплений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыНакопления Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;						
			НаборЗаписей = РегистрыНакопления[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре накоплений: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрНакопления."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим измерение "Приказ" в регистрах расчета
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыРасчета Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			НаборЗаписей = РегистрыРасчета[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре расчета: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрРасчета."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();			
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим реквизит "Приказ" в документах
	Для Каждого МетаданныеДокумента из Метаданные.Документы Цикл				
				
		СоответствиеИменТаблиц = Новый Соответствие;
		
		// очистим реквизит "Приказ" в шапке докуметов
		Если (ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента)) и (ЕстьРеквизитДокумента("Приказ", МетаданныеДокумента)) Тогда			
			
			#Если Клиент Тогда
				Состояние("Очищается реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли

			СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя, "");
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация, Ложь, Ложь).Выбрать();
			
			Пока ДокВыборка.Следующий() Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();				
				Документ.Приказ		= ПустойПриказ;					
				Документ.Записать();					
			КонецЦикла;
			
		КонецЕсли;
		
        // очистим реквизит "Приказ" в таблицах докуметов
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			Если (ЕстьРеквизитТабЧастиДокумента("ФизЛицо", МетаданныеДокумента, ТабличнаяЧасть.Имя)) и (ЕстьРеквизитТабЧастиДокумента("Приказ", МетаданныеДокумента, ТабличнаяЧасть.Имя))  Тогда
				
				СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя + "." + ТабличнаяЧасть.Имя, "");

			КонецЕсли;
			
		КонецЦикла;
		
		Если СоответствиеИменТаблиц.Количество() > 0 Тогда
			
			#Если Клиент Тогда
				Состояние("Очищается реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
			
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация, Истина, Ложь).Выбрать();
			
			Пока ДокВыборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();					
				Пока ДокВыборка.СледующийПоЗначениюПоля("ИмяТЧ") Цикл
					ИмяТЧ = СтрЗаменить(ДокВыборка.ИмяТЧ,МетаданныеДокумента.Имя + ".","");
					Для каждого СтрокаТЧ Из Документ[ИмяТЧ] Цикл
						СтрокаТЧ.Приказ = ПустойПриказ;
					КонецЦикла;
				КонецЦикла;
				Документ.Записать();
			КонецЦикла;
				
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции	//ВыключениеПоддержкиСовместителей()

//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация, КогоВыбирать = 0, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.Сотрудники.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	//Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",				ТекущееЗначение);
			//Запрос.УстановитьПараметр("ВидЗанятости",			Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.ВидЗанятости <> &ВидЗанятости
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		Иначе
       СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
	Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
		
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()
