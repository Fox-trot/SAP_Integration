

// Функция возвращает список вышестоящих групп указанного элемента справочника.
// 
// Параметры:
//  СписокГрупп  - Коллекция значений, куда передаются группы
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Список вышестояших групп
//
Процедура ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент)
	
	Если ЗначениеНеЗаполнено(Элемент) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Элемент.Родитель) тогда
		Возврат;
	Иначе
		СписокГрупп.Добавить(Элемент.Родитель);
		ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент.Родитель);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокВышестоящихГрупп()

 
#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  СпособЗаполненияЦен          - значение перечисления "Способы заполнения цен", определяет по какому из 
//								   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов   - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                 до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента - структура, задает список обрабатываемых реквизитов документа;
// 								   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                  - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                 если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	         - имя табличной части
//  СтарыйДоговорКонтрагента  - старый договор контрагента, который был до изменения
//  СтруктураЗначений			 - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Процедура ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
								 СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
								 СтарыйДоговорКонтрагента = Неопределено,
								 СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Договор = ДокументОбъект.ДоговорКонтрагента;

	Если ЗначениеНеЗаполнено(Договор) Тогда
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДокументОбъект.Дата);

		Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;

		Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;

		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя

		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		 Или (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда

			ТекстПредупреждения = "В документе можно выбирать только договора с "
								+ ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами")+"!"+Символы.ПС;
			Если Не ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) 
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			Предупреждение(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;

	КонецЕсли;

	Если ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли Не ЗначениеНеЗаполнено(Договор)
			И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.

			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
						   |Будет восстановлен старый договор.");
			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
	КонецЕсли; 

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если Не ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				   И ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
			|отличные от установленных в документе:";
				
		// Валюта документа
		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
		   И (Не ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
								 "Валюта документа: """ +
								?(ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
								  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		Если ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если Не ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
								 "Тип цен документа: """ +
								 ?(ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
								   """, договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

			Иначе

				ЕстьКурсВзаиморасчетов      = ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов И ДокументОбъект.КурсВзаиморасчетов = 0
				   И ЕстьКратностьВзаиморасчетов И ДокументОбъект.КратностьВзаиморасчетов = 0 Тогда

					СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			   И (Не ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
				СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
		   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

			ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"+Символы.ПС;
			Если Не ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) 
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			Предупреждение(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()

#КонецЕсли
