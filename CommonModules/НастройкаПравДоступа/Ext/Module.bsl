
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

Функция ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Для каждого ЭлементОтбора Из ПраваДоступаПользователей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

Процедура ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ЗначениеНеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
	КонецЕсли; 
	ПраваДоступаПользователей.Прочитать();
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ) Экспорт

	Если НЕ Отказ Тогда
	
		// Сравним наборы записей
		ЭталонныйНабор = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ЭталонныйНабор.Отбор.Пользователь.Значение = Ссылка;
			ЭталонныйНабор.Отбор.Пользователь.Использование = Истина;
		Иначе
			ЭталонныйНабор.Отбор.ОбъектДоступа.Значение = Ссылка;
			ЭталонныйНабор.Отбор.ОбъектДоступа.Использование = Истина;
		КонецЕсли; 
		ЭталонныйНабор.Прочитать();
		
		Для каждого ЗаписьНабора Из ПраваДоступаПользователей Цикл
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ЗаписьНабора.Пользователь = Ссылка;
			Иначе
				ЗаписьНабора.ОбъектДоступа = Ссылка;
			КонецЕсли; 
		КонецЦикла; 
			
		Если НЕ СравнитьТаблицыНаборовЗаписей(ЭталонныйНабор.Выгрузить(), ПраваДоступаПользователей.Выгрузить()) Тогда
		
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ПраваДоступаПользователей.Отбор.Пользователь.Значение      = Ссылка;
				ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
			Иначе
				ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение      = Ссылка;
				ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
			КонецЕсли; 
			
			ЗаписатьПраваДоступа(ПраваДоступаПользователей.Выгрузить(), ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей), Отказ, ("Элемент """ + СокрЛП(Ссылка) + """ не записан"));
			
			Если НЕ Отказ Тогда
				ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);
			КонецЕсли; 

		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока, ЭтоГруппа = Ложь) Экспорт

	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(Элемент.ОтборСтрок.ОбластьДанных.Значение) Тогда
		Элемент.ТекущиеДанные.ОбластьДанных = Элемент.ОтборСтрок.ОбластьДанных.Значение;
		Если ЭтоГруппа Тогда
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
		Иначе
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Проверка доступности роли менеджера по набору персонала 
// это или МенеджерПоНаборуПерсонала или полные права
// Применяется для проверки прав на доступ к соотв. даннам
// Возвращаемое значение:
//	булево - истина если есть доступ
Функция ДоступнаРольМенеджераПоНабору() Экспорт
	Возврат РольДоступна("МенеджерПоНаборуПерсонала") или РольДоступна("ПолныеПрава");
	
КонецФункции // ДоступнаРольМенеджераПоНабору

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
&НаСервере
Функция ПроверкаПериодаЗаписей(ИмяРегистра,НаборЗаписей,Регистратор,Отказ) Экспорт
	
	// *Запрет
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	//МетаданныеНабора = НаборЗаписей.Метаданные();		
	//ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация")<>Неопределено);
	
	ЕстьОрганизация = (НаборЗаписей.Колонки.Найти("Организация")<>Неопределено);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СоответствиеГраницЗапрета", СоответствиеГраницЗапрета);
	//СтруктураПараметров.Вставить("МетаданныеНабора", МетаданныеНабора);
	СтруктураПараметров.Вставить("ЕстьОрганизация", ЕстьОрганизация);
	
	// *Запрет
	ТекстОшибки = ПроверкаСуществующихЗаписейРегистра(ИмяРегистра, НаборЗаписей, Регистратор, СтруктураПараметров, Отказ);
	Если Отказ Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда				
		Отказ = Ложь;
		Если ЕстьОрганизация Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.Организация];
				Если ГраницаПоОрганизации <> Неопределено И Запись.Период <= ГраницаПоОрганизации Тогда
					Отказ = Истина;
					Возврат "Доступ на изменение закрыт по "+ГраницаПоОрганизации;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
			Если ГраницаПериода <> Неопределено Тогда
				Для Каждого Запись ИЗ НаборЗаписей Цикл
					Если Запись.Период <= ГраницаПериода Тогда
						Отказ = Истина;
						Возврат "Доступ на изменение закрыт по "+ГраницаПериода;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

Функция ПроверкаСуществующихЗаписейРегистра(ИмяРегистра,НаборЗаписей, Регистратор,СтруктураПараметров, Отказ)
	
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	Если СтруктураПараметров.ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода+1));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода+1));
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ НаборЗаписей.Организация, НаборЗаписей.Период, ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период < ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", Регистратор);				
	
	Результат = Запрос.Выполнить();
	Отказ = Не Результат.Пустой();
	ТекстОшибки = "";
	Если Отказ Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.ДатаЗапрета) Тогда
				ТекстОшибки = ТекстОшибки + "Не установлена дата запрета у "+Выборка.Организация+Символы.ПС;
			Иначе
				ТекстОшибки = ТекстОшибки + "Доступ на изменение у "+Выборка.Организация+" закрыт по "+Выборка.ДатаЗапрета+Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТекстОшибки;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ОформлениеСтроки.Ячейки.Чтение.УстановитьФлажок(Истина);
	ОформлениеСтроки.Ячейки.Запись.ОтображатьТекст = Ложь;

КонецПроцедуры

Процедура УстановитьОтборНаОбластьДанных(Элемент, ЭлементФормыПраваДоступаПользователей) Экспорт

	Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные) Тогда
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	Иначе
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Элемент.ТекущиеДанные;
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение
			   И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 

КонецПроцедуры

Функция ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, МодифицированностьФормы) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				ПараметрыПеретаскивания.Значение.ОбластьДанных = Строка;
			ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				НоваяЗапись = ПраваДоступаПользователей.Добавить();
				НоваяЗапись.Пользователь                                        = ПараметрыПеретаскивания.Значение.Пользователь;
				НоваяЗапись.ОбластьДанных                                       = Строка;
				НоваяЗапись.ОбъектДоступа                                       = ПараметрыПеретаскивания.Значение.ОбъектДоступа;
				НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников;
				НоваяЗапись.Запись                                              = ПараметрыПеретаскивания.Значение.Запись;
			Иначе
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена Тогда
		МодифицированностьФормы = Истина;
	КонецЕсли; 

КонецФункции

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ИЕРАРХИЧЕСКИХ СПРАВОЧНИКОВ

Функция ПроверитьНеобходимостьПереписыватьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ПраваДоступаПользователей) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа = &Ссылка
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	
	ТаблицаНаборИзБД = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПравДоступаПользователей = ПраваДоступаПользователей.Выгрузить();
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступаПользователей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступаПользователей[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава Тогда
			ТаблицаПравДоступаПользователей.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	Возврат НЕ СравнитьТаблицыНаборовЗаписей(ТаблицаНаборИзБД, ТаблицаПравДоступаПользователей);
	
КонецФункции

Процедура УстановитьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ИмяСправочника, Отказ) Экспорт

	// Теперь перепишем все записи у подчиненных элементов
	ШапкаОшибки = "Объект " + Ссылка + " не записан!";
	
	ВыборкаПодчиненных = Справочники[ИмяСправочника].Выбрать(Ссылка);
	Пока ВыборкаПодчиненных.Следующий() Цикл
	
		НаборПодчиненногоОбъекта = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Значение = ВыборкаПодчиненных.Ссылка;
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Использование = Истина;
		НаборПодчиненногоОбъекта.Прочитать();
		
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(НаборПодчиненногоОбъекта, ВыборкаПодчиненных.Родитель, ВыборкаПодчиненных.Ссылка);
		
		Попытка
			НаборПодчиненногоОбъекта.Записать();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	
		УстановитьПраваДоступаДляПодчиненныхЭлементов(ВыборкаПодчиненных.Ссылка, ИмяСправочника, Отказ);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, ОбъектДоступа, ТаблицаНаборДляЗаполнения = Неопределено) Экспорт

	Если ТипЗнч(ТаблицаНаборДляЗаполнения) <> Тип("ТаблицаЗначений") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
		|
		|ГДЕ
		|	ПраваДоступаПользователей.ОбъектДоступа = &Родитель
		|	И
		|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
		|";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		
		ТаблицаНаборЗаписейРодителяДляПотомков = Запрос.Выполнить().Выгрузить();
	
	Иначе
		
		ТаблицаНаборЗаписейРодителяДляПотомков = ТаблицаНаборДляЗаполнения;
		
	КонецЕсли;
	
	ТаблицаПравДоступа = ПраваДоступаПользователей.Выгрузить();
	
	// Удалим старые унаследованные записи
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступа.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступа[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	// Теперь найдем строки с такими же измерениями и заменим их, а при необходимости добавим новые
	Для каждого Запись Из ТаблицаНаборЗаписейРодителяДляПотомков Цикл
		ДублиСтрок = ТаблицаПравДоступа.НайтиСтроки(Новый Структура("Пользователь, ОбластьДанных", Запись.Пользователь, Запись.ОбластьДанных));
		Если ДублиСтрок.Количество() > 0 Тогда
			Для каждого СтрокаТаблицы Из ДублиСтрок Цикл
				ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПравДоступа.Добавить();
		НоваяСтрока.Пользователь                                        = Запись.Пользователь;
		НоваяСтрока.ОбластьДанных                                       = Запись.ОбластьДанных;
		НоваяСтрока.ОбъектДоступа                                       = ОбъектДоступа;
		НоваяСтрока.Запись                                              = Запись.Запись;
		НоваяСтрока.НастройкаДоступа                                    = Запись.НастройкаДоступа;
		НоваяСтрока.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
	ПраваДоступаПользователей.Загрузить(ТаблицаПравДоступа);
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступа() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаЭлемента() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаГруппы() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Процедура ОткрытьФормуРодителяПравообладателя(ЗаписьНабора, Родитель, ФормаВладелец) Экспорт

	НайденныйРодитель = ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель);
	
	Если НЕ ЗначениеНеЗаполнено(НайденныйРодитель) Тогда
		НайденныйРодитель.ПолучитьФорму(, ФормаВладелец).Открыть();
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель)

	Если ТипЗнч(ЗаписьНабора) <> Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим список родителей
	
	СписокРодителей = Новый СписокЗначений;
	СписокРодителей.Добавить(Родитель);
	Потомок = Родитель;
	Пока НЕ ЗначениеНеЗаполнено(Потомок.Родитель) Цикл
		СписокРодителей.Добавить(Потомок.Родитель);
		Потомок = Потомок.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПраваДоступаПользователей.ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных
	|	И
	|	ПраваДоступаПользователей.Пользователь = &Пользователь
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &ВидНаследованияПравДоступаИерархическихСправочников
	|	И
	|	ПраваДоступаПользователей.ОбъектДоступа В(&СписокРодителей)
	|";
	
	Запрос.УстановитьПараметр("ОбластьДанных"                                      , ЗаписьНабора.ОбластьДанных);
	Запрос.УстановитьПараметр("Пользователь"                                       , ЗаписьНабора.Пользователь);
	Запрос.УстановитьПараметр("ВидНаследованияПравДоступаИерархическихСправочников", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Запрос.УстановитьПараметр("СписокРодителей"                                    , СписокРодителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОбъектДоступа;
	КонецЕсли; 

КонецФункции
