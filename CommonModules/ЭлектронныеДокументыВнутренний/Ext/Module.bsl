////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыВнутренний: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

//<Raxx

// Формирует электронный документ счет фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция venkonСформироватьСчетФактуруГост(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;

	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = venkonСтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
	Если НастройкиОбменаЭД.Свойство("ВидЭД") Тогда
		СтруктураЭД.Вставить("ВидЭД",     НастройкиОбменаЭД.ВидЭД);
	Иначе
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.СчетФактура);
	КонецЕсли;
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(НастройкиОбменаЭД.Организация);
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	ДеревоДанных = ОбщегоНазначенияЭД.ДеревоДокумента("ДеревоЭДПоГосту");
	ЭлектронныеДокументыПереопределяемый.venkonЗаполнитьДанныеПоСчетФактуреГост(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураЭД.Вставить("КНД", "1115101");
	СтруктураЭД.Вставить("ПрефиксИдФайла", "SFAKT");
	
	ТекстОшибки = "";
	venkonПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate"));
		
		venkonДобавитьСлужебныеПоля(ДеревоДанных, СтруктураЭД);

		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
   		РезультатФормирования = venkonСформироватьФайлЭДГост(СсылкаНаОбъект, ДеревоДанных); //СформироватьСчетФактуруФНСCML(ДеревоДанных);
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураЭД.Вставить("СуммаДокумента", 0);
		//Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
		//	СтруктураЭД.Вставить("ДополнительнаяИнформация", ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
		//КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор", ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ Передача товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//
Функция venkonСформироватьПередачаТоваровПродавец(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = venkonСтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_TOVTORGPR");
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("КНД", "1175010");
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
	
	
	ДеревоДанных = ОбщегоНазначенияЭД.ДеревоДокумента("ТОРГ12_Продавец_UZ");
	ЭлектронныеДокументыПереопределяемый.venkonЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
	ТекстОшибки = "";
	venkonПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		venkonДобавитьСлужебныеПоля(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate"));
		
		Если venkonСформироватьПередачаТоваровПродавецCML(ДеревоДанных) И ПризнакЭД Тогда
			СтруктураПараметров = Новый Структура;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT"));
			Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Comments")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.Comments"));
			КонецЕсли;
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			СтруктураПараметров.Вставить("УникальныйИдентификатор", ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
			Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
				СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
				СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
			КонецЕсли;
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   – объект заполнения,
//  ИмяСвойства  - свойство объекта,
//  Значение     - устанавливаемое значение,
//  Обязательное - булево - признак обязательности заполнения свойства,
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251", ИмяКорневогоТега = Неопределено) Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;                                                     
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	Если ИмяКорневогоТега = Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	Иначе
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, "ROOT", , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	КонецЕсли;
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
//  ИДОтправителя - строка, идентификационный номер отправителя электронного документа, 
//  НомерВерсии - число, номер версии электронного документа.
//
// Возвращаемое значение:
//  строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии"
//
Функция ВернутьИдЭД(СсылкаНаОбъект) Экспорт
	
	ИдЭД = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	
	Возврат ИдЭД;
	
КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
		|Ошибка установки значения свойства ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
		+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 2);
	КонецПопытки
	
КонецПроцедуры

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция МассивПодстрок(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

// Функция получает тип значения CML
//
// Параметры
//  Тип - Тип   - исходный тип
//  ВерсияСхемы - версия схемы CML
//
// Возвращаемое значение:
//  ТипЗначения - Тип значения
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров) Экспорт
	
	ДеревоРазбора = ИнициализироватьДеревоРазбора();
	
	Если НЕ СтруктураПараметров.Свойство("ФайлДанныхСсылка") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВладелецЭД") Тогда
		СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;
	Иначе
		СсылкаНаВладельца = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НЕ (СтруктураПараметров.Свойство("НаправлениеЭД", НовыйЭД.НаправлениеЭД)
			И ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД)) Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	
	ОшибкаЗаписи = Ложь;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	Ошибка = Ложь;
	Результат = venkonПрочитатьФайлCMLпоXDTO(ВремФайл, ДеревоРазбора, НовыйЭД, Ошибка);
	УдалитьФайлы(ВремФайл);
	
	Если Не Ошибка Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		
		Если Не ЗначениеЗаполнено(СсылкаНаВладельца) ИЛИ СтруктураПараметров.Свойство("ЗаполнитьДокумент") Тогда
			
			Попытка
				
				СсылкиНаВладельцев = Новый Структура;
					
				ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
				СсылкаНаВладельца = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
					СсылкаНаВладельца);
				
			Исключение
				ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
				ОшибкаЗаписи = Истина;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать документ базы данных
											|(подробности см. в Журнале регистрации).'");
				АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
				Если АктуальныеВидыЭД.Найти(НовыйЭД.ВидЭД) = Неопределено Тогда
					ШаблонСообщения = Нстр("ru = 'Электронный документ вида ""%1"" в текущей конфигурации не поддерживается'");
					ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НовыйЭД.ВидЭД);
				Иначе
					ТекстЖурналаРегистрации = Нстр("ru = 'Необходимо проверить работу функции
														|ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД'");
				КонецЕсли;
				ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД.'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
										ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
				ОшибкаЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Дозаполняем структуру параметров из файла данных.
		ДополнительныеРеквизиты = Новый Структура;
		Если (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
			ИЛИ (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)
				И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				
			ИЛИ (НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НовыйЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
				
			ДеревоДанных = НовыйЭД.ЗначениеРеквизита;
			
			НомерДокументаОтправителя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "НомерДокумента");
			НомерИсправления = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Ложь);
			Если ЗначениеЗаполнено(НомерИсправления) Тогда
				ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
				НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			КонецЕсли;
			ДатаДокументаОтправителя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДатаДокумента");
				
			СуммаДокумента = 0;
			СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
			Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
				СуммаДокумента = СуммаДокумента + ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(
					Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СсылкиНаВладельцев) Тогда
				ДополнительныеРеквизиты.Вставить("ПервичныйДокумент", СсылкиНаВладельцев.ПервичныйДокумент);
			КонецЕсли;
				
		Иначе
			НомерДокументаОтправителя = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер");
			НомерИсправления = ПолучитьРеквизитШапкиЭД(НовыйЭД, "НомерИсправления");
			Если ЗначениеЗаполнено(НомерИсправления) Тогда
				ШаблонНомера = НСтр("ru = '%1 (испр. %2)'");
				НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			КонецЕсли;
			ДатаДокументаОтправителя = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата");
			
			СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "СуммаДокумента");
			Если Не ЗначениеЗаполнено(СуммаДокумента) Тогда
				СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Сумма");
			КонецЕсли;
			
			ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
			Контрагент = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора);
			
			Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ИдентификаторДокументаОснования = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ИдентификаторДокументаОснования", ДеревоРазбора);
			КонецЕсли;
			
			ПространствоИмен = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ПространствоИмен", ДеревоРазбора);
			Если ЗначениеЗаполнено(ПространствоИмен) Тогда
				ДополнительныеРеквизиты.Вставить("ПространствоИмен", ПространствоИмен);
			КонецЕсли;
		КонецЕсли;
	
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаВладельца);
		СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);
		НомерЭД = НовыйЭД.ИД;
		Если Не ЗначениеЗаполнено(НомерЭД) Тогда
			УИД = Новый УникальныйИдентификатор;
			НомерЭД = Строка(УИД) + "##1";
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", НомерЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("НомерВерсииЭД", НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("Загружен",      НЕ ОшибкаЗаписи);
		
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент",                      Контрагент);
		СтруктураПараметров.Вставить("СуммаДокумента",                  СуммаДокумента);
		СтруктураПараметров.Вставить("ИдентификаторДокументаОснования", ИдентификаторДокументаОснования);
		СтруктураПараметров.Вставить("ДополнительныеРеквизиты",         ДополнительныеРеквизиты);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция > 0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции

//<Raxx

// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
//  ИмяФайла - строка, путь к файлу, данные которого надо получить.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами электронного документа
//
Процедура venkonПрочитатьШапкуФайлаCMLпоXDTO(ПакетЭД, ДанныеФайлаЭД, СтруктураПараметров, ОписаниеОшибки) Экспорт
	
	ВидЭД                          = Неопределено;
	
	Отправитель                    = Неопределено;
	ДатаФормированияЭДОтправителем = Неопределено;
	ИдЭДВладельца                  = Неопределено;
	ТипЭлементаВерсииЭД            = Неопределено;

	Document = ДанныеФайлаЭД.Document;
	Header = ДанныеФайлаЭД.Header;
	Если НЕ Document.Свойства().Получить("regNum") = Неопределено Тогда
		ИдЭД = Document.regNum;
	КонецЕсли;
	
	// Блок для форматов ФНС
	Если Document.Свойства().Получить("docType") <> Неопределено Тогда
		
		docType = Document.docType;
		Если docType = "001" Тогда
			
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
			ИдЭДВладельца = Header.senderInn;
			ПризнакПродавца = Истина;
			ДатаДок = Document.regDate;
			ДатаФормированияЭДОтправителем = ДатаДок;
			
		ИначеЕсли docType = "002" Тогда
			
			ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
			ИдЭДВладельца = Header.senderInn;
			ПризнакПродавца = Истина;
			ДатаДок = Document.regDate;
			ДатаФормированияЭДОтправителем = ДатаДок;
			
		ИначеЕсли docType = "008" Тогда
			
			ВидЭД = Перечисления.ВидыЭД.СчетФактураФарм;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
			ИдЭДВладельца = Header.senderInn;
			ПризнакПродавца = Истина;
			ДатаДок = Document.regDate;
			ДатаФормированияЭДОтправителем = ДатаДок;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЭД) Тогда
		ОписаниеОшибки = НСтр("ru = 'Неизвестный тип ЭД при чтении данных!'");
		Возврат;
	Иначе
		АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
		Если АктуальныеВидыЭД.Найти(ВидЭД) = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Документы вида ""%1"" не поддерживаются в текущей конфигурации!'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ВидЭД);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
	СтруктураПараметров.Вставить("ВидЭД",   ВидЭД);
	СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
	СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
	СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);
	Если ПакетЭД.Организация.ИНН = ИдЭДВладельца Тогда
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	Иначе
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, СтруктураПараметров = Неопределено, ОписаниеОшибки = "", НовыйСтатусЭД = "", СтатусПоДидоксу = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ПакетЭД";
	
	Запрос.УстановитьПараметр("ПакетЭД", ПакетЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЭД = ВыборкаДетальныеЗаписи.Ссылка;
		Если СтруктураПараметров <> Неопределено Тогда
			ЭДОбъект = ЭД.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЭДОбъект, СтруктураПараметров);
			ЭДОбъект.Записать();
		КонецЕсли;
		
		// Устанваливаем статус
		Если НовыйСтатусЭД = "" И СтатусПоДидоксу <> Неопределено Тогда
			Если СтатусПоДидоксу = 1 Тогда 
				НовыйСтатусЭД = Перечисления.СтатусыЭД.Отправлен;
			ИначеЕсли СтатусПоДидоксу = 2 Тогда
				НовыйСтатусЭД = Перечисления.СтатусыЭД.Получен;
			ИначеЕсли СтатусПоДидоксу = 3 Тогда
				НовыйСтатусЭД = Перечисления.СтатусыЭД.Подписан;
			ИначеЕсли СтатусПоДидоксу = 4 Тогда
				НовыйСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЭД = Новый Структура("СтатусЭД", НовыйСтатусЭД);
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД, Ложь); 
	КонецЕсли;
	
КонецПроцедуры

//Raxx>

// Только для внутреннего использования
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен, ТипКодировки = "windows-1251") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла, ТипКодировки);
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	Текст.Записать(ИмяФайла, ТипКодировки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных = Неопределено,
	ЕстьСвойствоИдФайл = Ложь, ИмяТЧ = Неопределено, НомерСтроки = Неопределено, ИменаДопКолонок = "")
	
	КС80 = Новый КвалификаторыСтроки(110);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	МассивТипЭД.Добавить(Тип("Структура"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("НаименованиеХарактеристики", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("КодТовара", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКод", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Описание", ОписаниеТиповС3000);
	ТЗ.Колонки.Добавить("ЭД", ОписаниеТиповЭД);
	
	СвойстваНоменклатуры = Новый Структура;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		СвойстваНоменклатуры.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		
		Элемент = ТекЭлемент;
		НаименованиеРаботыДопДанные = "";
		Если ЕстьСвойствоИдФайл
			И ЕстьСвойствоXDTO(ТекЭлемент, "ИнфПолСтр")
			И (ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) ИЛИ Не ДеревоДопДанных = Неопределено) Тогда
			
			Если Найти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				СвойстваТекЭлемента = ТекЭлемент.Свойства();
				Если СвойстваТекЭлемента.Получить("НомТов") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомТов);
				ИначеЕсли СвойстваТекЭлемента.Получить("НомСтр") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомСтр);
				ИначеЕсли СвойстваТекЭлемента.Получить("Номер") <> Неопределено Тогда
					НомСтр = Строка(НомерСтроки) + "." + ТекЭлемент.Номер;
				Иначе
					Продолжить;
				КонецЕсли;
				
			Иначе
				ОбъектXML.УстановитьСтроку(ТекЭлемент.ИнфПолСтр);
				Элемент = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			СвойстваНоменклатуры.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование) Тогда
			СвойстваНоменклатуры.Наименование = НаименованиеРаботыДопДанные;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвойстваНоменклатуры.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НовЗапись = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СвойстваНоменклатуры);
		НовЗапись.ЭД = ЭД;
		
		Если ЕстьСвойствоXDTO(Элемент, "ИнфПолФХЖ2") Тогда
			НовЗапись.ИД = ЗначениеДопРеквизита(Элемент.ИнфПолФХЖ2, "ИД");
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ИнфПолеОписРабот") Тогда
			НовЗапись.ИД = ЗначениеДопРеквизита(Элемент.ИнфПолеОписРабот, "ИД");
		КонецЕсли;
		
		
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			НовЗапись.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовЗапись.Наименование) Тогда
			НовЗапись.Наименование = НаименованиеРаботыДопДанные;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("КодТов") = Неопределено Тогда
			НовЗапись.КодТовара = ТекЭлемент.КодТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ХарактерТов") = Неопределено Тогда
			НовЗапись.НаименованиеХарактеристики = ТекЭлемент.ХарактерТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты") = Неопределено Тогда
			Для Каждого ЭлементДанных из Элемент.ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОписаниеТиповС255);
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Если пришел пустой ИД, используем вмето него наименование товара.
		// Актуально для входящих ЭД из учетных систем отличных от 1С.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			НовЗапись.ИД = ВРег(СтрЗаменить(НовЗапись.Наименование, " ", ""))
			+ "#" + ВРег(СтрЗаменить(НовЗапись.НаименованиеХарактеристики, " ", ""))
			+ "#" + ВРег(СтрЗаменить(НовЗапись.КодТовара, " ", ""))
			+ "#" + ВРег(СтрЗаменить(НовЗапись.Артикул, " ", ""));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию о товаре в массиве ЭД
//
// Параметры:
//  МассивЭД - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	ТаблицаВозврата = Неопределено;
	ИменаДопКолонок = "";
	
	Для Каждого ТекЭД ИЗ МассивЭД Цикл
		Если ТекЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ ТекЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТекЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			
			ЭД = ТекЭД.ЭлектронныйДокументВладелец;
		Иначе
			ЭД = ТекЭД;
		КонецЕсли;
		ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
				|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДеревоДопДанных = Неопределено;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 ИЛИ Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, ЭД.УникальныйИдентификатор());
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
					|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
					УдалитьФайлы(ИмяФайла);
					Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					Попытка
						ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если Не ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
							ТекстОшибки, ТекстСообщения);
						ЗипЧтение.Закрыть();
						УдалитьФайлы(ПапкаДляРаспаковки);
						УдалитьФайлы(ИмяФайла);
						Продолжить;
					КонецПопытки;
				Иначе
					ФайлПриемник = ПапкаДляРаспаковки + "\" + Новый УникальныйИдентификатор + ".xml";
					ЭлектронныеДокументыСлужебный.УдалитьЛишнийСлэшВПути(ФайлПриемник);
					КопироватьФайл(ИмяФайла, ФайлПриемник);
				КонецЕсли;
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
						Продолжить;
					КонецЕсли;
					ИнформацияОТовареИзФайлаXML(ИмяФайлаДанных, ТаблицаВозврата, ЭД, ДеревоДопДанных, ИменаДопКолонок);
				КонецЦикла;
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаВозврата) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
			|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД, НаименованиеХарактеристики"
			+ ИменаДопКолонок);
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

// Только для внутреннего использования
Процедура ИнформацияОТовареИзФайлаXML(ПолноеИмяФайла,
									  ТаблицаВозврата,
									  СсылкаНаЭД,
									  ДеревоДопДанных = Неопределено,
									  ИменаДопКолонок = "") Экспорт
	
	ОписаниеОшибки = "";
	ДанныеФайлаЭД = ДанныеФайлаЭД(ПолноеИмяФайла, ОписаниеОшибки);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		НаборДанных = Неопределено;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			НаборДанных = ДанныеФайлаЭД["Предложения"].Предложение;
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ,,,,, ИменаДопКолонок);
		ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			Если ДанныеФайлаЭД["Товары"] <> Неопределено Тогда
				НаборДанных = ДанныеФайлаЭД["Товары"].Товар;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , , , , , ИменаДопКолонок);
			КонецЕсли;
		КонецЕсли;
			
		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			
			Если Найти(ДанныеФайлаЭД.ИдФайл, "SFAKT") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблСчФакт.СведТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары");
					
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары");
					
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаВозврата = Неопределено Тогда
			Если ЭтоПолноправныйПользователь(, , Ложь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1.'"), СсылкаНаЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Если ЭтоПолноправныйПользователь(, , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из ЭД %1: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СсылкаНаЭД, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД) Экспорт
	
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		Иначе
			ВозвращаемыйТип = Неопределено;
		КонецЕсли;
	Иначе
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ВозвращаемыйТип = Неопределено;
		Иначе
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

Функция ФайлДанныхЭД(СсылкаНаЭД = Неопределено, ПараметрыПросмотра) Экспорт
	
	// Структура содержащая поля "ИмяФайла", "Наименование", "Расширение".
	ПараметрыФайла = СвойстваФайла();
	
	СохранитьЭДВФайл(СсылкаНаЭД, ПараметрыФайла);
	
	ИмяФайла = ПараметрыФайла.ИмяФайла;
	
	Если ИмяФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПросмотра.Вставить("ИмяФайла", ИмяФайла);
	
	ИмяФайлаДопДанных = Неопределено;
	СохранитьДопДанныеВФайл(СсылкаНаЭД, ИмяФайлаДопДанных);
	ПараметрыПросмотра.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);

	УникальныйИдентификатор = ЗначениеПараметра(ПараметрыПросмотра, "УникальныйИдентификатор");
	Идентификатор = ЗначениеПараметра(ПараметрыПросмотра, "Идентификатор");
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПросмотра, "СтруктураПодписей");
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПросмотра, "ИмяФайлаПодчиненногоЭД");
	
	ПечатьЭД = ЗначениеПараметра(ПараметрыПросмотра, "ПечатьЭД");
	Если ПечатьЭД = Неопределено Тогда
		ПечатьЭД = Ложь;
	КонецЕсли;
	
	ИмяФайлаВторогоТитула = ИмяФайлаПодчиненногоЭД;
	Если ИмяФайлаПодчиненногоЭД = Неопределено Тогда
		Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(СсылкаНаЭД) Тогда
			
			ФайлВторогоТитула = ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(СсылкаНаЭД);
				
			Если НЕ ФайлВторогоТитула = Неопределено Тогда
				ПараметрыФайла = СвойстваФайла();
				СохранитьЭДВФайл(ФайлВторогоТитула, ПараметрыФайла);
				ИмяФайлаВторогоТитула = ПараметрыФайла.ИмяФайла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
		
	Если Найти(ПараметрыФайла.Расширение, "zip") > 0 Тогда
			
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(,СсылкаНаЭД.УникальныйИдентификатор());
		
		Если ПапкаДляРаспаковки = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
				ТекстОшибки, ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
		КонецПопытки;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЕсли;
			
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("ИД",СсылкаНаЭД.УникальныйИдентификатор());
			ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
			ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
			ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);

			ВладелецФайла = СсылкаНаЭД.ВладелецФайла;
			ИДВладельца = "";
			Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ПакетЭД") Тогда
				ИДВладельца = Строка(ВладелецФайла.ВнешнийУИД);
			КонецЕсли;
			
			ТабличныйДокумент = СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
				СсылкаНаЭД.НаправлениеЭД,
				ПараметрыПечати, ИДВладельца);
				
			Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
		КонецЦикла;
		
		ФайлыАрхиваMXL = НайтиФайлы(ПапкаДляРаспаковки, "*.mxl");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваMXL Цикл
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Прочитать(ИмяФайлаДанных);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат ТабличныйДокумент;
		КонецЦикла;
		
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав И Не ПечатьЭД Тогда
			ФайлыАрхиваPDF = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваPDF Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЦикла;
		КонецЕсли;
		
		ФайлыАрхиваHTML = НайтиФайлы(ПапкаДляРаспаковки, "*.html");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваHTML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваDOCX = НайтиФайлы(ПапкаДляРаспаковки, "*.docx");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваDOCX Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXLS = НайтиФайлы(ПапкаДляРаспаковки, "*.xls");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXLS Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
			
	ИначеЕсли Найти(ПараметрыФайла.Расширение, "xml") > 0 Тогда
		
		ИмяФайлаДанных = ИмяФайла;
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ИД", СсылкаНаЭД.УникальныйИдентификатор());
		ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);
		ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
		
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				И СсылкаНаЭД.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				И СсылкаНаЭД.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД) Тогда
			
			ПараметрыПечати.Вставить("Идентификатор", Идентификатор);
			
		ИначеЕсли ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
			
			// Для ответных титулов передадем номер и дату документа ИБ первого титула
			ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
			СвойстваДокументаПервогоТитула = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПервыйТитул, "НомерДокументаОтправителя, ДатаДокументаОтправителя");
			ПараметрыПечати.Вставить("СвойстваДокументаПервогоТитула", СвойстваДокументаПервогоТитула);
			
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
			
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", СсылкаНаЭД.УникальныйИдентификатор());
				ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаПодчиненногоЭД);
			
		КонецЕсли;
		
		ВладелецФайла = СсылкаНаЭД.ВладелецФайла;
		ИДВладельца = "";
		Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ПакетЭД") Тогда
			ИДВладельца = Строка(ВладелецФайла.ВнешнийУИД);
		КонецЕсли;
			
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭД(ИмяФайла,
				СсылкаНаЭД.НаправлениеЭД,
				ПараметрыПечати, ИДВладельца);

		
		Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
			Возврат ТабличныйДокумент;
		КонецЕсли;

	Иначе
	
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		Возврат СсылкаНаФайл;
		
	КонецЕсли;
		
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
//  НаправлениеЭД - перечисление НаправлениеЭД.
//  ИД - уникальный идентификатор объекта ЭД.
//  ИмяФайлаДопДанных - строка, путь к файлу доп.данных.
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//  ИдентификаторДокумента - Строка - возвращает идентификатор,если он присутствует в электронном документе.
//  СтруктураПодписей - Структура - установленные подписи
//    - КомуВыданСертификат - Строка - представление сертификата
//    - Отпечаток - Строка - отпечаток сертификата.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла,
									НаправлениеЭД,
									ПараметрыПечати,
									ИДВладельца = "") Экспорт
	
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ,ИДВладельца);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПечатнаяФормаЭД(Результат, НаправлениеЭД, ПараметрыПечати);
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  СтруктураРазбораФайла - структура, содержит дерево разбора ЭД.
//  НаправлениеЭД - Перечисление.НаправлениеЭД - направление.
//  ИД - УникальныйИдентификатор - уникальный идентификатор объекта ЭД.
//  ИмяФайлаПодчиненногоЭД - строка, путь к файлу доп.данных.
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//  ИдентификаторДокумента - Строка - идентификатор.
//  СтруктураПодписей - Структура - установленные электронные подписи.
//    * Подписи - Структура
//        * КомуВыданСертификат - представление сертификата.
//        * НомерСтроки - Число - Номер строки формы просмотра.
//
// Возвращаемое значение:
//  Табличный документ с данными электронного документа.
//
Функция ПечатнаяФормаЭД(СтруктураРазбораФайла, НаправлениеЭД, ПараметрыПечати, ПечатьСАктом = Ложь) Экспорт
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	
	ИдентификаторДокумента = ЗначениеПараметра(ПараметрыПечати, "ИдентификаторДокумента");
	
	Если ИдентификаторДокумента = Неопределено Тогда
		ИдентификаторДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
			"ИдентификаторДокумента");
	КонецЕсли;
		
	ВерсияСостава = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
	"ВерсияСостава");
	
	ВидЭД = СтрокаОбъекта.ВидЭД;
	docType = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "docType");
	Если docType = "001" Тогда
		ПечатьСАктом = Истина;	
	КонецЕсли;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// Отображение идентификатора документа
	Если docType = "006" Тогда
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокументаДоверенность");
	ИначеЕсли ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия40 
		ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия50 
		ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия60 
		ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия70
		ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента2019");
	Иначе
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента");
	КонецЕсли;
	ОбластьФорматСтроки = Неопределено;
	ОбластьИдентификаторДокумента = Неопределено;
	ОбластьПодпись = Неопределено;
	ОбластьЗаголовокПодписи = Неопределено;
		
	Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		//ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	// Отображение подписей
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПечати, "СтруктураПодписей");
	ТекстЭлектроннаяПодпись = "";
	Подписан = Ложь;
	Если ЗначениеЗаполнено(СтруктураПодписей) И СтруктураПодписей.Подписи.Количество() Тогда
		Подписан = Истина;
		ТекстЭлектроннаяПодпись = НСтр("ru='электронная подпись'");
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПечати, "ИмяФайлаПодчиненногоЭД");
	ИД = ЗначениеПараметра(ПараметрыПечати, "ИД");
	
	Попытка
		
		// Счет-фактура
		Если docType = "001" ИЛИ docType = "002" Тогда 
			
			Если ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеСчетаФактурыДляПечати10(СтрокаОбъекта, ДеревоРазбора);
			ИначеЕсли ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеСчетаФактурыДляПечати20(СтрокаОбъекта, ДеревоРазбора);
			ИначеЕсли ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеСчетаФактурыДляПечати30(СтрокаОбъекта, ДеревоРазбора);
			ИначеЕсли ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия50 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеСчетаФактурыДляПечати40(СтрокаОбъекта, ДеревоРазбора);
			КонецЕсли;
			
			Если Подписан Тогда
				Если ДанныеЭДДляПечати.Шапка.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Шапка.ФИОПБОЮЛ) Тогда
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
				Иначе
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
				КонецЕсли;
			КонецЕсли;
			
			Если ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия50
				ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия60
				ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonЗаполнитьТабличныйДокументСчетФактура_ЭДВерсия40(ТабличныйДокумент, ДанныеЭДДляПечати, ОбластьФорматСтроки);
			Иначе
				venkonЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ОбластьФорматСтроки);
			КонецЕсли;
			
			Если ПечатьСАктом Тогда
				venkonЗаполнитьТабличныйДокументАктВыполненныхРабот(ТабличныйДокумент, ДанныеЭДДляПечати, ОбластьФорматСтроки);
			КонецЕсли;
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли docType = "008" Тогда 
			
			Если ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеСчетаФактурыФармДляПечати80(СтрокаОбъекта, ДеревоРазбора);
			КонецЕсли;
			
			Если Подписан Тогда
				Если ДанныеЭДДляПечати.Шапка.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Шапка.ФИОПБОЮЛ) Тогда
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
				Иначе
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
				КонецЕсли;
			КонецЕсли;
			
			Если ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
				venkonЗаполнитьТабличныйДокументСчетФактураФарм_ЭДВерсия80(ТабличныйДокумент, ДанныеЭДДляПечати, ОбластьФорматСтроки);
			КонецЕсли;
						
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли docType = "006" Тогда
			
			Если ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСостава = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				ДанныеЭДДляПечати = venkonПолучитьДанныеДверенностиДляПечати70(СтрокаОбъекта, ДеревоРазбора); //
			КонецЕсли;
			
			Если Подписан Тогда
				Если ДанныеЭДДляПечати.Шапка.Свойство("ФИОПБОЮЛ") И ЗначениеЗаполнено(ДанныеЭДДляПечати.Шапка.ФИОПБОЮЛ) Тогда
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодписьИП", ТекстЭлектроннаяПодпись);
				Иначе
					ДанныеЭДДляПечати.Шапка.Вставить("ЭлектроннаяПодпись", ТекстЭлектроннаяПодпись);
				КонецЕсли;
			КонецЕсли;
			
			venkonЗаполнитьТабличныйДокументДоверенность_ЭДВерсия70(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		КонецЕсли;
		//
		
		//ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		//ОбластьЯчеек.СоздатьФорматСтрок();
		
		Если ОбластьФорматСтроки <> Неопределено Тогда
			ОбщийТабДок.Вывести(ОбластьФорматСтроки);
		КонецЕсли;
		
		Если ОбластьИдентификаторДокумента <> Неопределено Тогда
			ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
		КонецЕсли;
		
		// Отображение подписей
		Если ЗначениеЗаполнено(СтруктураПодписей) И СтруктураПодписей.Подписи.Количество() Тогда
			ОбластьЗаголовокПодписи = МакетИдентификатораДокумента.ПолучитьОбласть("ЗаголовокПодписей");
			Для каждого СтрокаПодписи Из СтруктураПодписей.Подписи Цикл
				ОбластьПодпись = МакетИдентификатораДокумента.ПолучитьОбласть("Подпись");
				ОбластьПодпись.Параметры.Значение = СтрокаПодписи.КомуВыданСертификат;
				ОбластьПодпись.Параметры.НомерСтрокиПодписи = СтрокаПодписи.НомерСтроки;
				ОбщийТабДок.Вывести(ОбластьПодпись);
			КонецЦикла; 
			ОбщийТабДок.Вывести(ОбластьЗаголовокПодписи);
		КонецЕсли;
		
		Если ОбластьЗаголовокПодписи <> Неопределено Тогда
			ОбластьЗаголовокПодписи.Вывести(ОбластьЗаголовокПодписи);
		КонецЕсли;
		
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Возврат ОбщийТабДок;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
		|%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'формирования табличного документа'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения, 5);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
//  СтрокаДерева - строка дерева значений, параметры разбора электронного документа,
//  ИмяРеквизита - строка, имя реквизита, значение которого надо получить,
//  ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//  Значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет файл на диск по переданной ссылке.
//
// Параметры:
//  ЭДСсылка		 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на файл.
//  ПараметрыФайла	 - Структура - см. функцию ОбменСКонтрагентамиВнутренний.СвойстваФайла().
//
Процедура СохранитьЭДВФайл(ЭДСсылка, ПараметрыФайла = Неопределено) Экспорт
	
	Если ПараметрыФайла = Неопределено Тогда
		ПараметрыФайла = СвойстваФайла();
	КонецЕсли;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка, ЭДСсылка.УникальныйИдентификатор(), Истина);
	
	Расширение = ДопИнформацияПоЭД.Расширение;
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		Если ЗначениеЗаполнено(Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат ;
		КонецЕсли;
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		ДанныеЭД.Записать(ИмяФайла);
		
	КонецЕсли;
	
	ПараметрыФайла.ИмяФайла = ИмяФайла;
	ПараметрыФайла.Расширение = Расширение;
	ПараметрыФайла.Наименование = ДопИнформацияПоЭД.Наименование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразования значений

//Функция раскладывает строку с данными об адресе (в формате 8 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Индекс = "";
	КодРегион = "";
	Район = "";
	Город = "";
	НаселПункт = "";
	Улица = "";
	Дом = "";
	Корпус = "";
	Кварт = "";

	МассивАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрокЭД(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 тогда
		Индекс = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 тогда
		КодРегион = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 тогда
		Район = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 тогда
		Город = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 тогда
		НаселПункт = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 тогда
		Улица = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 тогда
		Дом = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 тогда
		Корпус = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 тогда
		Кварт = СокрЛП(МассивАдрес[8]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Индекс", Индекс);
	СтруктураВозврата.Вставить("КодРегион", КодРегион);
	СтруктураВозврата.Вставить("Район", Район);
	СтруктураВозврата.Вставить("Город", Город);
	СтруктураВозврата.Вставить("НаселПункт", НаселПункт);
	СтруктураВозврата.Вставить("Улица", Улица);
	СтруктураВозврата.Вставить("Дом", Дом);
	СтруктураВозврата.Вставить("Корпус", Корпус);
	СтруктураВозврата.Вставить("Кварт", Кварт);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Преобразует строковое представление даты в формате DD.MM.YYYY в дату
//
// Параметры:
//  Строка	 - Строка - представление даты
// 
// Возвращаемое значение:
//  Дата - преобразованное значение
//
Функция ДатаИзСтроки(Строка) Экспорт
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

//<Raxx

// Возвращает результат успеха формирования файла ЭД Передача товаров.
//
// Параметры:
//  ДеревоДокумента - дерево значений - данные для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция venkonСформироватьПередачаТоваровПродавецCML(ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	
	ПространствоИменСхемы = venkonПространствоИменПередачаТоваровПродавец();
	
	ТекстОшибки = "";
	Попытка
		ROOT = ПолучитьОбъектТипаCML("ROOT", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		Document = ПолучитьОбъектТипаCML("ROOT.Document", ПространствоИменСхемы);
		Expansion = ПолучитьОбъектТипаCML("ROOT.Expansion", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Document, "docType",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Document, "regNum",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regNum"),   Истина, ТекстОшибки);
		regDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate")));
		ЗаполнитьСвойствоXDTO(Document, "regDate", regDate,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "ВалютаКод",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.ВалютаКод"),   Истина, ТекстОшибки);
		//ЗаполнитьСвойствоXDTO(Expansion, "ВидОперации",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.ВидОперации"),   Истина, ТекстОшибки);
		
		contract = ПолучитьОбъектТипаCML("ROOT.Document.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contract, "contractNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum"), Истина, ТекстОшибки);
		contractDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate")));
		ЗаполнитьСвойствоXDTO(contract, "contractDate", contractDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(contract, "contractDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "contract", contract, Истина, ТекстОшибки);
		
		contractExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contractExpansion, "Наименование", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Наименование"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "contract", contractExpansion, Истина, ТекстОшибки);
		
		amendment = ПолучитьОбъектТипаCML("ROOT.Document.amendment", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentNum"), Истина, ТекстОшибки);
		amendmentDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate")));
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDate", amendmentDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "amendment", amendment, Истина, ТекстОшибки);
		
		amendmentExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.amendment", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(amendmentExpansion, "Наименование", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.amendment.Наименование"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "amendment", amendmentExpansion, Истина, ТекстОшибки);
		
		supplier = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		supplierExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.supplier", ПространствоИменСхемы);
		
		ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаФНС(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "supplier", supplier, Истина, ТекстОшибки);
		КонецЕсли;
		
		comissioner = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		comissionerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.comissioner", ПространствоИменСхемы);
		
		ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаФНС(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "comissioner", comissioner, Истина, ТекстОшибки);
		КонецЕсли;
		
		buyer = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		buyerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.buyer", ПространствоИменСхемы);
		
		ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаФНС(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "buyer", buyer, Истина, ТекстОшибки);
		КонецЕсли;
		
		productList = ПолучитьОбъектТипаCML("ROOT.Document.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Document.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Document.productList.product", ПространствоИменСхемы);
			
			productId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productId"); //
			ЗаполнитьСвойствоXDTO(productInfo, "productId", productId, Истина, ТекстОшибки);
			
			productName = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productName"));
			ЗаполнитьСвойствоXDTO(productInfo, "productName", productName, Истина, ТекстОшибки);
			
			measurment = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.measurment"));
			ЗаполнитьСвойствоXDTO(productInfo, "measurment", measurment, Истина, ТекстОшибки);
			
			quantity = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.quantity");
			ЗаполнитьСвойствоXDTO(productInfo, "quantity", quantity, Истина, ТекстОшибки);
			
			price = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.price");
			ЗаполнитьСвойствоXDTO(productInfo, "price", price, Истина, ТекстОшибки);
			
			currencyId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.currencyId");
			ЗаполнитьСвойствоXDTO(productInfo, "currencyId", currencyId, Истина, ТекстОшибки);
			
			totalPrice = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.totalPrice");
			ЗаполнитьСвойствоXDTO(productInfo, "totalPrice", totalPrice, Истина, ТекстОшибки);
			
			//exciseTax = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTax");
			//ЗаполнитьСвойствоXDTO(productInfo, "exciseTax", exciseTax, Истина, ТекстОшибки);
			
			exciseTaxSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTaxSum");
			ЗаполнитьСвойствоXDTO(productInfo, "exciseTaxSum", exciseTaxSum, Истина, ТекстОшибки);
			
			VAT = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VAT");
			ЗаполнитьСвойствоXDTO(productInfo, "VAT", VAT, Истина, ТекстОшибки);
			
			VATSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VATSum");
			ЗаполнитьСвойствоXDTO(productInfo, "VATSum", VATSum, Истина, ТекстОшибки);
			
			priceWithVAT = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.priceWithVAT");
			ЗаполнитьСвойствоXDTO(productInfo, "priceWithVAT", priceWithVAT, Истина, ТекстОшибки);
			
			productList.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		productListExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Expansion.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Expansion.productList.product", ПространствоИменСхемы);
			
			ИдТовараУКонтрагента = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ИдТовараУКонтрагента"); //
			ЗаполнитьСвойствоXDTO(productInfo, "ИдТовараУКонтрагента", ?(ИдТовараУКонтрагента = Неопределено, "", ИдТовараУКонтрагента), Истина, ТекстОшибки);
			
			НаименованиеХарактеристики = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.НаименованиеХарактеристики"); //
			ЗаполнитьСвойствоXDTO(productInfo, "НаименованиеХарактеристики", ?(НаименованиеХарактеристики = Неопределено, "", НаименованиеХарактеристики), Истина, ТекстОшибки);
			
			Сорт = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.Сорт"); //
			ЗаполнитьСвойствоXDTO(productInfo, "Сорт", ?(Сорт = Неопределено, "", Сорт), Истина, ТекстОшибки);
			
			Артикул = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.Артикул"); //
			ЗаполнитьСвойствоXDTO(productInfo, "Артикул", ?(Артикул = Неопределено, "", Артикул), Истина, ТекстОшибки);
			
			КодТовара = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.КодТовара"); //
			ЗаполнитьСвойствоXDTO(productInfo, "КодТовара", ?(КодТовара = Неопределено, "", КодТовара), Истина, ТекстОшибки);
			
			БазоваяЕдиницаКод = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.БазоваяЕдиницаКод"); //
			ЗаполнитьСвойствоXDTO(productInfo, "БазоваяЕдиницаКод", ?(БазоваяЕдиницаКод = Неопределено, "", БазоваяЕдиницаКод), Истина, ТекстОшибки);
			
			ВидУпаковки = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ВидУпаковки"); //
			ЗаполнитьСвойствоXDTO(productInfo, "ВидУпаковки", ?(ВидУпаковки = Неопределено, "", ВидУпаковки), Истина, ТекстОшибки);
			
			КоличествоВОдномМесте = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.КоличествоВОдномМесте"); //
			ЗаполнитьСвойствоXDTO(productInfo, "КоличествоВОдномМесте", ?(КоличествоВОдномМесте = Неопределено, 0, КоличествоВОдномМесте), Истина, ТекстОшибки);
			
			КоличествоМест = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.КоличествоМест"); //
			ЗаполнитьСвойствоXDTO(productInfo, "КоличествоМест", ?(КоличествоМест = Неопределено, 0, КоличествоМест), Истина, ТекстОшибки);
			
			МассаБрутто = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.МассаБрутто"); //
			ЗаполнитьСвойствоXDTO(productInfo, "МассаБрутто", ?(МассаБрутто = Неопределено, 0, МассаБрутто), Истина, ТекстОшибки);
			
			НомерСерии = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.НомерСерии"); //
			ЗаполнитьСвойствоXDTO(productInfo, "НомерСерии", ?(НомерСерии = Неопределено, "", НомерСерии), Истина, ТекстОшибки);
			
			СрокГодностиСерии = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.СрокГодностиСерии"); //
			ЗаполнитьСвойствоXDTO(productInfo, "СрокГодностиСерии", ?(СрокГодностиСерии = Неопределено, "", СрокГодностиСерии), Истина, ТекстОшибки);
			
			//Номенклатура = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.Номенклатура"); //
			//ЗаполнитьСвойствоXDTO(productInfo, "Номенклатура", Номенклатура, Истина, ТекстОшибки);
			//
			//Характеристика = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.Характеристика"); //
			//ЗаполнитьСвойствоXDTO(productInfo, "Характеристика", Характеристика, Истина, ТекстОшибки);
			//
			//Упаковка = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.Упаковка"); //
			//ЗаполнитьСвойствоXDTO(productInfo, "Упаковка", Упаковка, Истина, ТекстОшибки);
			//
			//ДопДанныеПодписанные = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ДопДанныеПодписанные"); //
			//ЗаполнитьСвойствоXDTO(productInfo, "ДопДанныеПодписанные", ДопДанныеПодписанные, Истина, ТекстОшибки);
			//
			//ДопДанныеНеПодписанные = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ДопДанныеНеПодписанные"); //
			//ЗаполнитьСвойствоXDTO(productInfo, "ДопДанныеНеПодписанные", ДопДанныеНеПодписанные, Истина, ТекстОшибки);
			
			productListExpansion.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Expansion, "productList", productListExpansion, Истина, ТекстОшибки);
		
		// Заполняем Итоги табличной части
		totalPrice = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice");
		exciseTaxSum = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.exciseTaxSum");
		VATTotal = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal");
		priceWithVAT = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT");
		
		Если ЗначениеЗаполнено(totalPrice) 
			Или ЗначениеЗаполнено(exciseTaxSum)
			Или ЗначениеЗаполнено(VATTotal)
			Или ЗначениеЗаполнено(priceWithVAT) Тогда
			
			forPay = ПолучитьОбъектТипаCML("ROOT.Document.productList.forPay", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(forPay, "totalPrice", totalPrice, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "exciseTaxSum", exciseTaxSum, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "VATTotal", VATTotal, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "priceWithVAT", priceWithVAT, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(productList, "forPay", forPay, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		СведенияПоОтпускуГруза = ПолучитьОбъектТипаCML("ROOT.Expansion.СведенияПоОтпускуГруза", ПространствоИменСхемы);
		
		ПриложениеКоличествоЛистов = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ПриложениеКоличествоЛистов");
		ЗаполнитьСвойствоXDTO(СведенияПоОтпускуГруза, "ПриложениеКоличествоЛистов", ?(ПриложениеКоличествоЛистов = Неопределено, 0, ПриложениеКоличествоЛистов), Истина, ТекстОшибки);
		
		ПриложениеКоличествоЛистовПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью");
		ЗаполнитьСвойствоXDTO(СведенияПоОтпускуГруза, "ПриложениеКоличествоЛистовПрописью", ?(ПриложениеКоличествоЛистовПрописью = Неопределено, "", ПриложениеКоличествоЛистовПрописью), Истина, ТекстОшибки);
		
		ОтпущеноНаСумму = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ОтпущеноНаСумму");
		ЗаполнитьСвойствоXDTO(СведенияПоОтпускуГруза, "ОтпущеноНаСумму", ?(ОтпущеноНаСумму = Неопределено, 0, ОтпущеноНаСумму), Истина, ТекстОшибки);
		
		ОтпущеноНаСуммуПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью");
		ЗаполнитьСвойствоXDTO(СведенияПоОтпускуГруза, "ОтпущеноНаСуммуПрописью", ?(ОтпущеноНаСуммуПрописью = Неопределено, "", ОтпущеноНаСуммуПрописью), Истина, ТекстОшибки);
		
		ДатаОтпуска = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.СведенияПоОтпускуГруза.ДатаОтпуска");
		ЗаполнитьСвойствоXDTO(СведенияПоОтпускуГруза, "ДатаОтпуска", ?(ДатаОтпуска = Неопределено, "", Формат(ДатаОтпуска, "ДФ=dd.MM.yyyy")), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "СведенияПоОтпускуГруза", СведенияПоОтпускуГруза, Истина, ТекстОшибки);
		
		
		ОбщиеСведенияОТоварнойНакладной = ПолучитьОбъектТипаCML("ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной", ПространствоИменСхемы);
		
		КоличествоПорядковыхНомеровЗаписей = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "КоличествоПорядковыхНомеровЗаписей", ?(КоличествоПорядковыхНомеровЗаписей = Неопределено, 0, КоличествоПорядковыхНомеровЗаписей), Истина, ТекстОшибки);
		
		КоличествоПорядковыхНомеровЗаписейПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "КоличествоПорядковыхНомеровЗаписейПрописью", ?(КоличествоПорядковыхНомеровЗаписейПрописью = Неопределено, "", КоличествоПорядковыхНомеровЗаписейПрописью), Истина, ТекстОшибки);
		
		ВсегоМест = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.ВсегоМест");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "ВсегоМест", ?(ВсегоМест = Неопределено, 0, ВсегоМест), Истина, ТекстОшибки);
		
		ВсегоМестПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "ВсегоМестПрописью", ?(ВсегоМестПрописью = Неопределено, "", ВсегоМестПрописью), Истина, ТекстОшибки);
		
		МассаГрузаНетто = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "МассаГрузаНетто", ?(МассаГрузаНетто = Неопределено, 0, МассаГрузаНетто), Истина, ТекстОшибки);
		
		МассаГрузаНеттоПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "МассаГрузаНеттоПрописью", ?(МассаГрузаНеттоПрописью = Неопределено, "", МассаГрузаНеттоПрописью), Истина, ТекстОшибки);
		
		МассаГрузаБрутто = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "МассаГрузаБрутто", ?(МассаГрузаБрутто = Неопределено, 0, МассаГрузаБрутто), Истина, ТекстОшибки);
		
		МассаГрузаБруттоПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью");
		ЗаполнитьСвойствоXDTO(ОбщиеСведенияОТоварнойНакладной, "МассаГрузаБруттоПрописью", ?(МассаГрузаБруттоПрописью = Неопределено, "", МассаГрузаБруттоПрописью), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "ОбщиеСведенияОТоварнойНакладной", ОбщиеСведенияОТоварнойНакладной, Истина, ТекстОшибки);
		
		
		ВсегоПоНакладной = ПолучитьОбъектТипаCML("ROOT.Expansion.ВсегоПоНакладной", ПространствоИменСхемы);
		
		КоличествоМест = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.КоличествоМест");
		ЗаполнитьСвойствоXDTO(ВсегоПоНакладной, "КоличествоМест", ?(КоличествоМест = Неопределено, 0, КоличествоМест), Истина, ТекстОшибки);
		
		МассаБрутто = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.МассаБрутто");
		ЗаполнитьСвойствоXDTO(ВсегоПоНакладной, "МассаБрутто", ?(МассаБрутто = Неопределено, 0, МассаБрутто), Истина, ТекстОшибки);
		
		МассаНетто = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.ВсегоПоНакладной.МассаНетто");
		ЗаполнитьСвойствоXDTO(ВсегоПоНакладной, "МассаНетто", ?(МассаНетто = Неопределено, 0, МассаНетто), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "ВсегоПоНакладной", ВсегоПоНакладной, Истина, ТекстОшибки);
		
		
		ЗаполнитьСвойствоXDTO(ROOT, "Document", Document, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ROOT, "Expansion", Expansion, Истина, ТекстОшибки);
		
		
		//Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(ROOT, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "windows-1251");
		УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы);
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция venkonСформироватьФайлЭДГост(СсылкаНаОбъект, ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	
	//ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец();
	
	ПространствоИменСхемы = venkonПространствоИменЭлектронногоДокументаПоГосту();
	
	ТекстОшибки = "";
	Попытка
		ROOT = ПолучитьОбъектТипаCML("ROOT", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		Header    = ПолучитьОбъектТипаCML("ROOT.Header", ПространствоИменСхемы);
		Document  = ПолучитьОбъектТипаCML("ROOT.Document", ПространствоИменСхемы);
		Expansion = ПолучитьОбъектТипаCML("ROOT.Expansion", ПространствоИменСхемы);
		
		ВерсияСостава = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.Version");
		
		// Заполняем Header
		ЗаполнитьСвойствоXDTO(Header, "msgType",   1,   Истина, ТекстОшибки);
		senderInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.legalEntity");
		Если legalEntity Тогда 
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.organization.inn");
		Иначе	
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "senderInn",   senderInn,   Истина, ТекстОшибки);
		
		
		reciverInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.legalEntity");
		Если legalEntity Тогда 
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.organization.inn");
		Иначе	
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "reciverInn",   reciverInn,   Истина, ТекстОшибки);
		
		// Получаем ИД-Документа.
		ТипДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType");
		Соединение  = ПолучитьСоединение();
		СтруктураИД = ЭлектронноеВзаимодействиеССерверомDidox.СоздатьДокументНаСервере(СсылкаНаОбъект, Соединение, ТипДокумента);
		Если НЕ СтруктураИД.Успешно Тогда 
			ВызватьИсключение "Произошли ошибки при создании документа на сервере. Поробности смотреть в журнале регистрации.";
		КонецЕсли;
		ИДДокумента = СтруктураИД.ИДДокумента;
		ЗаполнитьСвойствоXDTO(Header, "docId",   ИДДокумента,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ROOT, "Header", Header, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "docType",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Document, "regNum",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regNum"),   Истина, ТекстОшибки);
		regDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate")));
		ЗаполнитьСвойствоXDTO(Document, "regDate", regDate,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "CurrencyCode",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.CurrencyCode"),   Истина, ТекстОшибки);
		//ЗаполнитьСвойствоXDTO(Expansion, "ВидОперации",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.ВидОперации"),   Истина, ТекстОшибки);
		
		contract = ПолучитьОбъектТипаCML("ROOT.Document.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contract, "contractNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum"), Истина, ТекстОшибки);
		contractDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate")));
		ЗаполнитьСвойствоXDTO(contract, "contractDate", contractDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(contract, "contractDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "contract", contract, Истина, ТекстОшибки);
		
		contractExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contractExpansion, "Title", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "contract", contractExpansion, Истина, ТекстОшибки);
		
		amendment = ПолучитьОбъектТипаCML("ROOT.Document.amendment", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentNum"), Истина, ТекстОшибки);
		amendmentDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate")));
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDate", amendmentDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "amendment", amendment, Истина, ТекстОшибки);
		
		//amendmentExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.amendment", ПространствоИменСхемы);
		//ЗаполнитьСвойствоXDTO(amendmentExpansion, "Наименование", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.amendment.Наименование"), Истина, ТекстОшибки);
		//
		//ЗаполнитьСвойствоXDTO(Expansion, "amendment", amendmentExpansion, Истина, ТекстОшибки);
		
		supplier = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		supplierExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.supplier", ПространствоИменСхемы);
		
		ПродавецЗаполнен = Ложь;
		Если ВерсияСостава = 1 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 2 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 3 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 4 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");	
		ИначеЕсли ВерсияСостава = 5 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 7 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия70(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		КонецЕсли;
		
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "supplier", supplier, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "supplier", supplierExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		//comissioner = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		//comissionerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.comissioner", ПространствоИменСхемы);
		//
		//КомиссионерЗаполнен = Ложь;
		//Если ВерсияСостава = 1 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 2 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 3 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 4 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 5 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//КонецЕсли;
		//
		//Если КомиссионерЗаполнен Тогда
		//	ЗаполнитьСвойствоXDTO(Document, "comissioner", comissioner, Истина, ТекстОшибки);
		//	ЗаполнитьСвойствоXDTO(Expansion, "comissioner", comissionerExpansion, Истина, ТекстОшибки);
		//КонецЕсли;
		
		buyer = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		buyerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.buyer", ПространствоИменСхемы);
		
		ПокупательЗаполнен = Ложь;
		Если ВерсияСостава = 1 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 2 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 3 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 4 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 5 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 7 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия70(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		КонецЕсли;
		
		Если ПокупательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "buyer", buyer, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "buyer", buyerExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		productList = ПолучитьОбъектТипаCML("ROOT.Document.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Document.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Document.productList.product", ПространствоИменСхемы);
			
			productId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productId"); //
			ЗаполнитьСвойствоXDTO(productInfo, "productId", productId, Истина, ТекстОшибки);
			
			productName = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productName"));
			ЗаполнитьСвойствоXDTO(productInfo, "productName", productName, Истина, ТекстОшибки);
			
			measurment = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.measurment"));
			ЗаполнитьСвойствоXDTO(productInfo, "measurment", measurment, Истина, ТекстОшибки);
			
			Если ВерсияСостава >= 5 Тогда
				
				measurmentId = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.measurmentId"));
				ЗаполнитьСвойствоXDTO(productInfo, "measurmentId", measurmentId, Истина, ТекстОшибки);
				
			КонецЕсли;
			
			quantity = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.quantity");
			ЗаполнитьСвойствоXDTO(productInfo, "quantity", quantity, Истина, ТекстОшибки);
			
			price = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.price");
			ЗаполнитьСвойствоXDTO(productInfo, "price", price, Истина, ТекстОшибки);
			
			currencyId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.currencyId");
			ЗаполнитьСвойствоXDTO(productInfo, "currencyId", currencyId, Истина, ТекстОшибки);
			
			totalPrice = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.totalPrice");
			ЗаполнитьСвойствоXDTO(productInfo, "totalPrice", totalPrice, Истина, ТекстОшибки);
			
			Если ВерсияСостава < 4 Тогда
				
				exciseTax = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTax");
				ЗаполнитьСвойствоXDTO(productInfo, "exciseTax", exciseTax, Истина, ТекстОшибки);
				
				exciseTaxSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTaxSum");
				ЗаполнитьСвойствоXDTO(productInfo, "exciseTaxSum", exciseTaxSum, Истина, ТекстОшибки);
				
			КонецЕсли;
			
			// Начиная с версии 2.0 есть разделение ставок "БезНДС" и "0%"
			// НДС ОБНОВЛЕНИЯ
			СтавкаНДС = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VAT");
			Если СтавкаНДС = 0 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 0, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 20 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 20, Истина, ТекстОшибки);
			// новые ставки
			ИначеЕсли СтавкаНДС = 4 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 4, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 6 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 6, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 7 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 7, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 8 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 8, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 10 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 10, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 15 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 15, Истина, ТекстОшибки);
			КонецЕсли;
			//
			
			VATSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VATSum");
			ЗаполнитьСвойствоXDTO(productInfo, "VATSum", VATSum, Истина, ТекстОшибки);
			
			priceWithVAT = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.priceWithVAT");
			ЗаполнитьСвойствоXDTO(productInfo, "priceWithVAT", priceWithVAT, Истина, ТекстОшибки);
			
			productList.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		productListExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Expansion.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Expansion.productList.product", ПространствоИменСхемы);
			
			// Начиная с 3 версии все теги названы латинскими буквами
			
			ИдТовараУКонтрагента = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.GoodID"); //
			ЗаполнитьСвойствоXDTO(productInfo, "GoodID", ИдТовараУКонтрагента, Истина, ТекстОшибки);
			
			ЭтоУслуга = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ThisIsService"); //
			ЗаполнитьСвойствоXDTO(productInfo, "ThisIsService", ЭтоУслуга, Истина, ТекстОшибки);
			
			productListExpansion.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Expansion, "productList", productListExpansion, Истина, ТекстОшибки);
		
		// Заполняем Итоги табличной части
		totalPrice = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice");
		exciseTaxSum = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.exciseTaxSum");
		VATTotal = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal");
		priceWithVAT = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT");
		
		Если ЗначениеЗаполнено(totalPrice) 
			Или ЗначениеЗаполнено(exciseTaxSum)
			Или ЗначениеЗаполнено(VATTotal)
			Или ЗначениеЗаполнено(priceWithVAT) Тогда
			
			forPay = ПолучитьОбъектТипаCML("ROOT.Document.productList.forPay", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(forPay, "totalPrice", totalPrice, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "exciseTaxSum", exciseTaxSum, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "VATTotal", VATTotal, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "priceWithVAT", priceWithVAT, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(productList, "forPay", forPay, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		// РеквизитыДоверенности
		НомерДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityNum");
		Если ЗначениеЗаполнено(НомерДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityNum",   НомерДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		ДатаДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityDate");
		Если ЗначениеЗаполнено(ДатаДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityDate",   ДатаДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		ФИОДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityName");
		Если ЗначениеЗаполнено(ФИОДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityName",   ФИОДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		// Версия состава ЭД
		ЗаполнитьСвойствоXDTO(Expansion, "Version",   ВерсияСостава,   Истина, ТекстОшибки);
		
		// Начиная с версии 2.0
		// Base64-строка файла-превью добавиться после формирования ЭД.
		//ЗаполнитьСвойствоXDTO(Expansion, "preview",   "preview",   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ROOT, "Document", Document, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ROOT, "Expansion", Expansion, Истина, ТекстОшибки);
		
		//Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(ROOT, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "UTF-8", "ROOT");
		УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы, "UTF-8");
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
		ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//Raxx>


//<Raxx
// Код очищен от конструкций Попытка-Исключение
Процедура venkonПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИДВладельца = "")
	
	// Получим версию состава ЭД
	ВерсияСоставаЭД = ЭлектронныеДокументыСлужебный.ПолучитьВерсиюДокумента(ЭД);
	НовыйЭД.ВерсияСостава = ВерсияСоставаЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСоставаЭД", ВерсияСоставаЭД);
	// docType
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "docType", ЭД.Document.docType);
	
	НомерИДатаРегистрацииЭД = ЭлектронныеДокументыСлужебный.ПолучитьНомерИДатуРегистрацииЭД(ЭД);
	
	// Уникальный номер ЭД в разрезе участников обмена
	ИДДокумента = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(, ЭД);
	Если ПустаяСтрока(ИДДокумента) ИЛИ ИДДокумента = "docId" Тогда
		Если НЕ ПустаяСтрока(ИДВладельца) Тогда
			ИДДокумента = ИДВладельца; 
		Иначе
			ИДДокумента = НомерИДатаРегистрацииЭД.regNum; 
		КонецЕсли;
	КонецЕсли;
	ЭДПрисоединенныйФайл = ОбщегоНазначенияЭД.ПолучитьЭДПоИДДокумента(ИДДокумента);
	ИННОрганизации = ЭДПрисоединенныйФайл.Организация.ИНН;
	
	НовыйЭД.ИД = ИДДокумента;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСостава", ВерсияСоставаЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИДДокумента);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерИДатаРегистрацииЭД.regNum);  //
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", НомерИДатаРегистрацииЭД.regDate);
	
	Если ЕстьСвойствоXDTO(ЭД, "Expansion") Тогда
		
		Expanison = ЭД.Expansion;
		Если ЕстьСвойствоXDTO(Expanison, "СуммаВключаетНДС") Тогда
			СуммаВключаетНДС = Expanison.СуммаВключаетНДС;
			Если ТипЗнч(СуммаВключаетНДС) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(СуммаВключаетНДС) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВключаетНДС", СуммаВключаетНДС);
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСвойствоXDTO(Expanison, "CurrencyCode") Тогда
			CurrencyCode = Expanison.CurrencyCode;
			Если ТипЗнч(CurrencyCode) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(CurrencyCode) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалютаКод", CurrencyCode);
			КонецЕсли;
		ИначеЕсли ЕстьСвойствоXDTO(Expanison, "ВалютаКод") Тогда
			ВалютаКод = Expanison.ВалютаКод;
			Если ТипЗнч(ВалютаКод) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ВалютаКод) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалютаКод", ВалютаКод);
			КонецЕсли;
		КонецЕсли;
		
		// РеквизитыДоверенности
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityNum") Тогда
			НомерДоверенности = Expanison.AuthorityNum;
			Если ТипЗнч(НомерДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(НомерДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДоверенности", НомерДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityDate") Тогда
			ДатаДоверенности = Expanison.AuthorityDate;
			Если ТипЗнч(ДатаДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ДатаДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДоверенности", ДатаДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityName") Тогда
			ФИОДоверенности = Expanison.AuthorityName;
			Если ТипЗнч(ФИОДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ФИОДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФИОДоверенности", ФИОДоверенности);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойствоXDTO(ЭД, "Document") Тогда
		Document = ЭД.Document;
		
		// Договор
		Если ЕстьСвойствоXDTO(Document, "contract") Тогда
			Договор = Document.contract;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеДоговора(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеДоговора30(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
			КонецЕсли;
		КонецЕсли;
		
		// Поставщик
		Если ЕстьСвойствоXDTO(Document, "supplier") Тогда
			Поставщик = Document.supplier;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия10(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия20(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия30(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия40(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		// Покупатель
		Если ЕстьСвойствоXDTO(Document, "buyer") Тогда
			Покупатель = Document.buyer;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия10(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия20(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия30(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия40(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Document, "productList") Тогда
			productList = Document.productList;
			
			// Таб.часть
			Если ЕстьСвойствоXDTO(productList, "product") Тогда
				НаборДанных = productList.product;
				venkonПрочитатьДанныеПоТЧСчетФактуры(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
			
			// Итоги
			Если ЕстьСвойствоXDTO(productList, "forPay") Тогда
				Итоги = productList.forPay;
				venkonПрочитатьИтоги(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Итоги");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Код очищен от конструкций Попытка-Исключение
Процедура venkonПрочитатьДоверенностьXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИДВладельца = "")
	
	// Получим версию состава ЭД
	ВерсияСоставаЭД = ЭлектронныеДокументыСлужебный.ПолучитьВерсиюДокумента(ЭД);
	НовыйЭД.ВерсияСостава = ВерсияСоставаЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСоставаЭД", ВерсияСоставаЭД);
	// docType
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "docType", ЭД.Document.docType);
	
	НомерИДатаРегистрацииЭД = ЭлектронныеДокументыСлужебный.ПолучитьНомерИДатуРегистрацииЭД(ЭД);
	
	// Уникальный номер ЭД в разрезе участников обмена
	ИДДокумента = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(, ЭД);
	Если ПустаяСтрока(ИДДокумента) ИЛИ ИДДокумента = "docId" Тогда
		Если НЕ ПустаяСтрока(ИДВладельца) Тогда
			ИДДокумента = ИДВладельца; 
		Иначе
			ИДДокумента = НомерИДатаРегистрацииЭД.regNum; 
		КонецЕсли;
	КонецЕсли;
	ЭДПрисоединенныйФайл = ОбщегоНазначенияЭД.ПолучитьЭДПоИДДокумента(ИДДокумента);
	ИННОрганизации = ЭДПрисоединенныйФайл.Организация.ИНН;
	
	НовыйЭД.ИД = ИДДокумента;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Доверенность;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСостава", ВерсияСоставаЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИДДокумента);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерИДатаРегистрацииЭД.regNum);  //
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", НомерИДатаРегистрацииЭД.regDate);
	
	Если ЕстьСвойствоXDTO(ЭД, "Expansion") Тогда
		
		Expanison = ЭД.Expansion;
		PowerOfAttorney = Expanison.PowerOfAttorney;
		
		// РеквизитыДоверенности
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "dateFrom") Тогда
			ДатаДоверенности = PowerOfAttorney.dateFrom;
			Если ТипЗнч(ДатаДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ДатаДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДоверенности", ДатаДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "dateTo") Тогда
			ДатаДо = PowerOfAttorney.dateTo;
			Если ТипЗнч(ДатаДо) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ДатаДо) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДо", ДатаДо);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "inn") Тогда
			ИННДоверенногоЛица = PowerOfAttorney.inn;
			Если ТипЗнч(ИННДоверенногоЛица) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ИННДоверенногоЛица) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИННДоверенногоЛица", ИННДоверенногоЛица);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "position") Тогда
			Должность = PowerOfAttorney.position;
			Если ТипЗнч(Должность) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(Должность) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Должность", Должность);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "passportNumber") Тогда
			СерияИНомерПаспорта = PowerOfAttorney.passportNumber;
			Если ТипЗнч(СерияИНомерПаспорта) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(СерияИНомерПаспорта) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СерияИНомерПаспорта", СерияИНомерПаспорта);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "fullName") Тогда
			ФИОДоверенногоЛица = PowerOfAttorney.fullName;
			Если ТипЗнч(ФИОДоверенногоЛица) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ФИОДоверенногоЛица) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФИОДоверенногоЛица", ФИОДоверенногоЛица);
			КонецЕсли;
		КонецЕсли;

		Если ЕстьСвойствоXDTO(PowerOfAttorney, "dateOfIssue") Тогда
			ДатаВыдачи = PowerOfAttorney.dateOfIssue;
			Если ТипЗнч(ДатаВыдачи) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ДатаВыдачи) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаВыдачи", ДатаВыдачи);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(PowerOfAttorney, "authority") Тогда
			КемВыдан = PowerOfAttorney.authority;
			Если ТипЗнч(КемВыдан) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(КемВыдан) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КемВыдан", КемВыдан);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОтображатьДеталиУслуги", "1");
		
	КонецЕсли;
	
	Если ЕстьСвойствоXDTO(ЭД, "Document") Тогда
		Document = ЭД.Document;
		
		// Договор
		Если ЕстьСвойствоXDTO(Document, "contract") Тогда
			Договор = Document.contract;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеДоговора30(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
			КонецЕсли;
		КонецЕсли;
		
		// Поставщик
		Если ЕстьСвойствоXDTO(Document, "supplier") Тогда
			Поставщик = Document.supplier;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеКонтрагентаДоверенность70(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		// Покупатель
		Если ЕстьСвойствоXDTO(Document, "buyer") Тогда
			Покупатель = Document.buyer;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 Тогда
				venkonПрочитатьДанныеКонтрагентаДоверенность70(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		
		Если ЕстьСвойствоXDTO(Document, "productList") Тогда
			productList = Document.productList;
			
			// Таб.часть
			Если ЕстьСвойствоXDTO(productList, "product") Тогда
				НаборДанных = productList.product;
				venkonПрочитатьДанныеПоТЧДоверенность(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИДВладельца = "")
	
	// Получим версию состава ЭД
	ВерсияСоставаЭД = ЭлектронныеДокументыСлужебный.ПолучитьВерсиюДокумента(ЭД);
	
	// docType
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "docType", "002");
	
	// Уникальный номер ЭД в разрезе участников обмена
	ИДДокумента = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(, ЭД);
	Если ПустаяСтрока(ИДДокумента) ИЛИ ИДДокумента = "docId" Тогда
		Если НЕ ПустаяСтрока(ИДВладельца) Тогда
			ИДДокумента = ИДВладельца; 
		Иначе
			ИДДокумента = ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, ""); 
		КонецЕсли;
	КонецЕсли;
	ЭДПрисоединенныйФайл = ОбщегоНазначенияЭД.ПолучитьЭДПоИДДокумента(ИДДокумента);
	ИННОрганизации = ЭДПрисоединенныйФайл.Организация.ИНН;
	
	НовыйЭД.ИД = ИДДокумента;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, ""));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, ""));  //
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Document.regDate);
	
	Попытка 
		Expanison = ЭД.Expansion;
		Если ЕстьСвойствоXDTO(Expanison, "СуммаВключаетНДС") Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВключаетНДС", Expanison.СуммаВключаетНДС);
		КонецЕсли;
		Если ЕстьСвойствоXDTO(Expanison, "ВалютаКод") Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалютаКод", Expanison.ВалютаКод);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Договор
	Попытка 
		Договор = ЭД.Получить("Document/contract");
		venkonПрочитатьДанныеДоговора(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
	Исключение
	КонецПопытки;
	
	// Поставщик
	Попытка 
		Поставщик = ЭД.Получить("Document/supplier");
		Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
			venkonПрочитатьДанныеКонтрагентаВерсия10(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
		ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
			venkonПрочитатьДанныеКонтрагентаВерсия20(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Покупатель
	Попытка 
		Плательщик = ЭД.Получить("Document/buyer");
		Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
			venkonПрочитатьДанныеКонтрагентаВерсия10(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
		ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
			venkonПрочитатьДанныеКонтрагентаВерсия20(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	// Итоги
	Попытка 
		Итоги = ЭД.Получить("Document/productList/forPay");
		venkonПрочитатьИтоги(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Итоги");
	Исключение
	КонецПопытки;
	
	Попытка 
		Итоги = ЭД.Получить("Expansion/СведенияПоОтпускуГруза/");
		venkonПрочитатьСведенияПоОтпускуГруза(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "СведенияПоОтпускуГруза");
	Исключение
	КонецПопытки;
	
	Попытка 
		Итоги = ЭД.Получить("Expansion/ОбщиеСведенияОТоварнойНакладной/");
		venkonПрочитатьОбщиеСведенияОТоварнойНакладной(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "СведенияОТоварнойНакладной");
	Исключение
	КонецПопытки;
	
	Попытка 
		Итоги = ЭД.Получить("Expansion/ВсегоПоНакладной/");
		venkonПрочитатьВсегоПоНакладной(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "ВсегоПоНакладной");
	Исключение
	КонецПопытки;
	
	
	// Таб.часть
	Попытка
		Document = ЭД.Получить("Document");
		НаборДанных = Document["productList"].product;
		venkonУдалитьПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//Raxx>

// Функция преобразует строку в дату и время
//
// Параметры:
//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС"
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя"
//
Функция ПолучитьДатуВремяИзСтроки(Зн)
	
	Результат = Неопределено;
	Зн = СтрЗаменить(Зн, "-", "");
	Зн = СтрЗаменить(Зн, ":", "");
	Если СтрДлина(Зн) - Найти(Зн, " ") = 5 Тогда // время в формате Ч:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "0");
	ИначеЕсли Найти(Зн, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		Зн = СтрЗаменить(Зн, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(Зн); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(Зн, 8)); // только дата "ГГГГММДД"
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//<Raxx

Функция venkonПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаРазбора, ИДВладельца = "")
	
	ОписаниеОшибки = "";
	ПространствоИменФНС = Неопределено;
	ДанныеФайлаЭД = ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки, ПространствоИменФНС);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОшибкаРазбора = Истина;
		Если ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеФайлаЭД.Document.docType = "001" ИЛИ ДанныеФайлаЭД.Document.docType = "002" Тогда
		venkonПрочитатьСчетФактуруXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора, ИДВладельца);
	ИначеЕсли ДанныеФайлаЭД.Document.docType = "008" Тогда
		venkonПрочитатьСчетФактуруФармXDTO(ДанныеФайлаЭД, ДеревоРазбора, НовыйЭД, ОшибкаРазбора, ИДВладельца);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭД.ВидЭД) Тогда
		
		Если ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОшибкаРазбора = Истина;
	Иначе
		Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтавкаНДС"), Истина);
		Для Каждого СтрокаДерева Из Строки Цикл
			СтавкаНДС = ЭлектронныеДокументыПовтИсп.СтавкаНДСИзПредставления(СтрокаДерева.ЗначениеРеквизита);
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтрокаДерева.ЗначениеРеквизита = СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

//Raxx>

Функция ИнициализироватьДеревоРазбора()
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	ДеревоРазбора.Колонки.Добавить("ВерсияСостава");
	
	ДеревоРазбора.Колонки.Добавить("ТипЭлементаВерсииЭД");
	
	Возврат ДеревоРазбора;
	
КонецФункции

Процедура venkonПрочитатьДанныеКонтрагентаВерсия10(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ВидПоГосту = "", ИННОрганизации = "")
	
	// Контрагент
	legalEntity = Ложь;
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	Иначе // TORGPR
		ИдУчастника = "";
		Если ЕстьСвойствоXDTO(Элемент, "legalEntity") Тогда
			legalEntity = Элемент.legalEntity;
			
			//<Временно
			Если legalEntity = "1" Тогда
				legalEntity = Истина;
			ИначеЕсли legalEntity = "0" Тогда
				legalEntity = Ложь;
			КонецЕсли;
			//Временно>
			
			РеквизитыКонтрагента.Вставить("legalEntity", legalEntity);
			Если legalEntity Тогда
				РеквизитыOrganization = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "organization") Тогда
					organization = Элемент.organization;
					Если ЕстьСвойствоXDTO(organization, "ownership") Тогда
						РеквизитыКонтрагента.Вставить("ownership", organization.ownership);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "fullname") Тогда
						РеквизитыКонтрагента.Вставить("fullname", organization.fullname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "shortname") Тогда
						РеквизитыКонтрагента.Вставить("shortname", organization.shortname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankAccount") Тогда
						РеквизитыКонтрагента.Вставить("bankAccount", organization.bankAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankName") Тогда
						РеквизитыКонтрагента.Вставить("bankName", organization.bankName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCode") Тогда
						РеквизитыКонтрагента.Вставить("bankCode", organization.bankCode);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCodeType") Тогда
						РеквизитыКонтрагента.Вставить("bankCodeType", organization.bankCodeType);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasury") Тогда
						treasury = organization.treasury;
						Если treasury = "true" Тогда
							РеквизитыКонтрагента.Вставить("treasury", 1);
						ИначеЕсли treasury = "false" Тогда
							РеквизитыКонтрагента.Вставить("treasury", 0);
						Иначе
							РеквизитыКонтрагента.Вставить("treasury", Число(organization.treasury));
						КонецЕсли;
					Иначе
						РеквизитыКонтрагента.Вставить("treasury", 0);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasuryAccount") Тогда
						РеквизитыКонтрагента.Вставить("treasuryAccount", organization.treasuryAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", organization.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okpo") Тогда
						РеквизитыКонтрагента.Вставить("okpo", organization.okpo);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okonh") Тогда
						РеквизитыКонтрагента.Вставить("okonh", organization.okonh);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "oked") Тогда
						РеквизитыКонтрагента.Вставить("oked", organization.oked);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("organization", РеквизитыOrganization);
			Иначе
				РеквизитыPrivatePerson = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "privatePerson") Тогда
					privatePerson = Элемент.privatePerson;
					Если ЕстьСвойствоXDTO(privatePerson, "surName") Тогда
						РеквизитыКонтрагента.Вставить("surName", privatePerson.surName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "firstName") Тогда
						РеквизитыКонтрагента.Вставить("firstName", privatePerson.firstName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "middleName") Тогда
						РеквизитыКонтрагента.Вставить("middleName", privatePerson.middleName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", privatePerson.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pinfl") Тогда
						РеквизитыКонтрагента.Вставить("pinfl", privatePerson.pinfl);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_ser") Тогда
						РеквизитыКонтрагента.Вставить("pas_ser", privatePerson.pas_ser);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_num") Тогда
						РеквизитыКонтрагента.Вставить("pas_num", privatePerson.pas_num);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_org") Тогда
						РеквизитыКонтрагента.Вставить("pas_org", privatePerson.pas_org);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_date") Тогда
						РеквизитыКонтрагента.Вставить("pas_date", privatePerson.pas_date);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("privatePerson", РеквизитыPrivatePerson);
			КонецЕсли;
			
			РеквизитыAddress = Новый Структура();
			Если ЕстьСвойствоXDTO(Элемент, "address") Тогда
				address = Элемент.address;
				Если ЕстьСвойствоXDTO(address, "street") Тогда
					РеквизитыКонтрагента.Вставить("street", address.street);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "house") Тогда
					РеквизитыКонтрагента.Вставить("house", address.house);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "building") Тогда
					РеквизитыКонтрагента.Вставить("building", address.building);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "flat") Тогда
					РеквизитыКонтрагента.Вставить("flat", address.flat);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "settlement") Тогда
					РеквизитыКонтрагента.Вставить("settlement", address.settlement);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "district") Тогда
					РеквизитыКонтрагента.Вставить("district", address.district);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "region") Тогда
					РеквизитыКонтрагента.Вставить("region", address.region);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "country") Тогда
					РеквизитыКонтрагента.Вставить("country", address.country);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postcode") Тогда
					РеквизитыКонтрагента.Вставить("postcode", address.postcode);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postbox") Тогда
					РеквизитыКонтрагента.Вставить("postbox", address.postbox);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "nontypical") Тогда
					РеквизитыКонтрагента.Вставить("nontypical", address.nontypical);
				КонецЕсли;
			КонецЕсли;
			//РеквизитыКонтрагента.Вставить("address", РеквизитыAddress);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем кто есть кто
	ВидКонтрагента  = "";
	ЗаполнитьВидПоГосту = ПустаяСтрока(ВидПоГосту); 
	
	// Для более старых документов,
	// где не заполнен реквизит "Организация"
	// у справочника "ЭДПрисоединенныеФайлы"
	Если ПустаяСтрока(ИННОрганизации) Тогда
		Организация = НайтиОрганизациюПоИНН(ИдУчастника);
		Если Организация <> Неопределено Тогда
			ИННОрганизации = ИдУчастника;
		КонецЕсли;
	КонецЕсли;
	
	Если ИННОрганизации = ИдУчастника Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "supplier", ВидПоГосту); 
	Иначе
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "buyer", ВидПоГосту);
	КонецЕсли;
	
	Попытка
		УчастникExpansion = ЭД.Получить("Expansion/" + ВидПоГосту);
		Если legalEntity Тогда
			СвойстваУчастникаOrganization = УчастникExpansion.organization.Свойства();
			РеквизитыКонтрагента.Вставить("КоррСчет", ?(СвойстваУчастникаOrganization.Получить("КоррСчет") <> Неопределено, УчастникExpansion.organization.КоррСчет, ""));
			РеквизитыКонтрагента.Вставить("АдресБанка", ?(СвойстваУчастникаOrganization.Получить("АдресБанка") <> Неопределено, УчастникExpansion.organization.АдресБанка, ""));
			РеквизитыКонтрагента.Вставить("БанкКазначейства", ?(СвойстваУчастникаOrganization.Получить("БанкКазначейства") <> Неопределено, УчастникExpansion.organization.БанкКазначейства, ""));
			РеквизитыКонтрагента.Вставить("БИККазначейства", ?(СвойстваУчастникаOrganization.Получить("БИККазначейства") <> Неопределено, УчастникExpansion.organization.БИККазначейства, ""));
			РеквизитыКонтрагента.Вставить("ИННКазначейства", ?(СвойстваУчастникаOrganization.Получить("ИННКазначейства") <> Неопределено, УчастникExpansion.organization.ИННКазначейства, ""));
			РеквизитыКонтрагента.Вставить("Казначейство", ?(СвойстваУчастникаOrganization.Получить("Казначейство") <> Неопределено, УчастникExpansion.organization.Казначейство, ""));
		Иначе	
			СвойстваУчастникаPrivatePerson = УчастникExpansion.privatePerson.Свойства();
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ?(СвойстваУчастникаPrivatePerson.Получить("ПолноеНаименование") <> Неопределено, УчастникExpansion.privatePerson.ПолноеНаименование, ""));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("Телефоны", ?(УчастникExpansion.address.Свойства().Получить("Телефоны") <> Неопределено, УчастникExpansion.address.Телефоны, ""));
		
	Исключение
	КонецПопытки;
	
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдУчастника, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдУчастника, "ИНН: "+ИдУчастника,
	Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеКонтрагентаВерсия20(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ВидПоГосту = "", ИННОрганизации = "")
	
	// Контрагент
	legalEntity = Ложь;
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	Иначе // TORGPR
		ИдУчастника = "";
		Если ЕстьСвойствоXDTO(Элемент, "legalEntity") Тогда
			legalEntity = Элемент.legalEntity;
			
			//<Временно
			Если legalEntity = "1" Тогда
				legalEntity = Истина;
			ИначеЕсли legalEntity = "0" Тогда
				legalEntity = Ложь;
			КонецЕсли;
			//Временно>
			
			РеквизитыКонтрагента.Вставить("legalEntity", legalEntity);
			Если legalEntity Тогда
				РеквизитыOrganization = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "organization") Тогда
					organization = Элемент.organization;
					Если ЕстьСвойствоXDTO(organization, "ownership") Тогда
						РеквизитыКонтрагента.Вставить("ownership", organization.ownership);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "fullname") Тогда
						РеквизитыКонтрагента.Вставить("fullname", organization.fullname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "shortname") Тогда
						РеквизитыКонтрагента.Вставить("shortname", organization.shortname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankAccount") Тогда
						РеквизитыКонтрагента.Вставить("bankAccount", organization.bankAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankName") Тогда
						РеквизитыКонтрагента.Вставить("bankName", organization.bankName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCode") Тогда
						РеквизитыКонтрагента.Вставить("bankCode", organization.bankCode);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCodeType") Тогда
						РеквизитыКонтрагента.Вставить("bankCodeType", organization.bankCodeType);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasury") Тогда
						РеквизитыКонтрагента.Вставить("treasury", Число(organization.treasury));
					Иначе
						РеквизитыКонтрагента.Вставить("treasury", 0);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasuryAccount") Тогда
						РеквизитыКонтрагента.Вставить("treasuryAccount", organization.treasuryAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", organization.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okpo") Тогда
						РеквизитыКонтрагента.Вставить("okpo", organization.okpo);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okonh") Тогда
						РеквизитыКонтрагента.Вставить("okonh", organization.okonh);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "oked") Тогда
						РеквизитыКонтрагента.Вставить("oked", organization.oked);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("organization", РеквизитыOrganization);
			Иначе
				РеквизитыPrivatePerson = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "privatePerson") Тогда
					privatePerson = Элемент.privatePerson;
					Если ЕстьСвойствоXDTO(privatePerson, "surName") Тогда
						РеквизитыКонтрагента.Вставить("surName", privatePerson.surName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "firstName") Тогда
						РеквизитыКонтрагента.Вставить("firstName", privatePerson.firstName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "middleName") Тогда
						РеквизитыКонтрагента.Вставить("middleName", privatePerson.middleName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", privatePerson.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pinfl") Тогда
						РеквизитыКонтрагента.Вставить("pinfl", privatePerson.pinfl);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_ser") Тогда
						РеквизитыКонтрагента.Вставить("pas_ser", privatePerson.pas_ser);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_num") Тогда
						РеквизитыКонтрагента.Вставить("pas_num", privatePerson.pas_num);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_org") Тогда
						РеквизитыКонтрагента.Вставить("pas_org", privatePerson.pas_org);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_date") Тогда
						РеквизитыКонтрагента.Вставить("pas_date", privatePerson.pas_date);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("privatePerson", РеквизитыPrivatePerson);
			КонецЕсли;
			
			РеквизитыAddress = Новый Структура();
			Если ЕстьСвойствоXDTO(Элемент, "address") Тогда
				address = Элемент.address;
				Если ЕстьСвойствоXDTO(address, "street") Тогда
					РеквизитыКонтрагента.Вставить("street", address.street);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "house") Тогда
					РеквизитыКонтрагента.Вставить("house", address.house);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "building") Тогда
					РеквизитыКонтрагента.Вставить("building", address.building);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "flat") Тогда
					РеквизитыКонтрагента.Вставить("flat", address.flat);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "settlement") Тогда
					РеквизитыКонтрагента.Вставить("settlement", address.settlement);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "district") Тогда
					РеквизитыКонтрагента.Вставить("district", address.district);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "region") Тогда
					РеквизитыКонтрагента.Вставить("region", address.region);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "country") Тогда
					РеквизитыКонтрагента.Вставить("country", address.country);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postcode") Тогда
					РеквизитыКонтрагента.Вставить("postcode", address.postcode);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postbox") Тогда
					РеквизитыКонтрагента.Вставить("postbox", address.postbox);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "nontypical") Тогда
					РеквизитыКонтрагента.Вставить("nontypical", address.nontypical);
				КонецЕсли;
			КонецЕсли;
			//РеквизитыКонтрагента.Вставить("address", РеквизитыAddress);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем кто есть кто
	ВидКонтрагента  = "";
	ЗаполнитьВидПоГосту = ПустаяСтрока(ВидПоГосту); 
	
	// Для более старых документов,
	// где не заполнен реквизит "Организация"
	// у справочника "ЭДПрисоединенныеФайлы"
	Если ПустаяСтрока(ИННОрганизации) Тогда
		Организация = НайтиОрганизациюПоИНН(ИдУчастника);
		Если Организация <> Неопределено Тогда
			ИННОрганизации = ИдУчастника;
		КонецЕсли;
	КонецЕсли;
	
	Если ИННОрганизации = ИдУчастника Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "supplier", ВидПоГосту); 
	Иначе
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "buyer", ВидПоГосту);
	КонецЕсли;
	
	Попытка
		УчастникExpansion = ЭД.Получить("Expansion/" + ВидПоГосту);
		Если legalEntity Тогда
			СвойстваУчастникаOrganization = УчастникExpansion.organization.Свойства();
			РеквизитыКонтрагента.Вставить("КоррСчет", ?(СвойстваУчастникаOrganization.Получить("КоррСчет") <> Неопределено, УчастникExpansion.organization.КоррСчет, ""));
			РеквизитыКонтрагента.Вставить("АдресБанка", ?(СвойстваУчастникаOrganization.Получить("АдресБанка") <> Неопределено, УчастникExpansion.organization.АдресБанка, ""));
			РеквизитыКонтрагента.Вставить("БанкКазначейства", ?(СвойстваУчастникаOrganization.Получить("БанкКазначейства") <> Неопределено, УчастникExpansion.organization.БанкКазначейства, ""));
			РеквизитыКонтрагента.Вставить("БИККазначейства", ?(СвойстваУчастникаOrganization.Получить("БИККазначейства") <> Неопределено, УчастникExpansion.organization.БИККазначейства, ""));
			РеквизитыКонтрагента.Вставить("ИННКазначейства", ?(СвойстваУчастникаOrganization.Получить("ИННКазначейства") <> Неопределено, УчастникExpansion.organization.ИННКазначейства, ""));
			РеквизитыКонтрагента.Вставить("Казначейство", ?(СвойстваУчастникаOrganization.Получить("Казначейство") <> Неопределено, УчастникExpansion.organization.Казначейство, ""));
			// Начиная с версии 2.0
			РеквизитыКонтрагента.Вставить("ЛицевойСчет", ?(СвойстваУчастникаOrganization.Получить("ЛицевойСчет") <> Неопределено, УчастникExpansion.organization.ЛицевойСчет, ""));
		Иначе	
			СвойстваУчастникаPrivatePerson = УчастникExpansion.privatePerson.Свойства();
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ?(СвойстваУчастникаPrivatePerson.Получить("ПолноеНаименование") <> Неопределено, УчастникExpansion.privatePerson.ПолноеНаименование, ""));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("Телефоны", ?(УчастникExpansion.address.Свойства().Получить("Телефоны") <> Неопределено, УчастникExpansion.address.Телефоны, ""));
		
	Исключение
	КонецПопытки;
	
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдУчастника, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдУчастника, "ИНН: "+ИдУчастника,
	Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеКонтрагентаВерсия30(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ВидПоГосту = "", ИННОрганизации = "")
	
	// Контрагент
	legalEntity = Ложь;
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	Иначе // TORGPR
		ИдУчастника = "";
		Если ЕстьСвойствоXDTO(Элемент, "legalEntity") Тогда
			legalEntity = Элемент.legalEntity;
			
			//<Временно
			Если legalEntity = "1" Тогда
				legalEntity = Истина;
			ИначеЕсли legalEntity = "0" Тогда
				legalEntity = Ложь;
			КонецЕсли;
			//Временно>
			
			
			РеквизитыКонтрагента.Вставить("legalEntity", legalEntity);
			Если legalEntity Тогда
				РеквизитыOrganization = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "organization") Тогда
					organization = Элемент.organization;
					Если ЕстьСвойствоXDTO(organization, "ownership") Тогда
						РеквизитыКонтрагента.Вставить("ownership", organization.ownership);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "fullname") Тогда
						РеквизитыКонтрагента.Вставить("fullname", organization.fullname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "shortname") Тогда
						РеквизитыКонтрагента.Вставить("shortname", organization.shortname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankAccount") Тогда
						РеквизитыКонтрагента.Вставить("bankAccount", organization.bankAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankName") Тогда
						РеквизитыКонтрагента.Вставить("bankName", organization.bankName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCode") Тогда
						РеквизитыКонтрагента.Вставить("bankCode", organization.bankCode);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "bankCodeType") Тогда
						РеквизитыКонтрагента.Вставить("bankCodeType", organization.bankCodeType);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasury") Тогда
						РеквизитыКонтрагента.Вставить("treasury", Число(organization.treasury));
					Иначе
						РеквизитыКонтрагента.Вставить("treasury", 0);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasuryAccount") Тогда
						РеквизитыКонтрагента.Вставить("treasuryAccount", organization.treasuryAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", organization.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okpo") Тогда
						РеквизитыКонтрагента.Вставить("okpo", organization.okpo);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "okonh") Тогда
						РеквизитыКонтрагента.Вставить("okonh", organization.okonh);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "oked") Тогда
						РеквизитыКонтрагента.Вставить("oked", organization.oked);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("organization", РеквизитыOrganization);
			Иначе
				РеквизитыPrivatePerson = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "privatePerson") Тогда
					privatePerson = Элемент.privatePerson;
					Если ЕстьСвойствоXDTO(privatePerson, "surName") Тогда
						РеквизитыКонтрагента.Вставить("surName", privatePerson.surName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "firstName") Тогда
						РеквизитыКонтрагента.Вставить("firstName", privatePerson.firstName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "middleName") Тогда
						РеквизитыКонтрагента.Вставить("middleName", privatePerson.middleName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", privatePerson.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pinfl") Тогда
						РеквизитыКонтрагента.Вставить("pinfl", privatePerson.pinfl);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_ser") Тогда
						РеквизитыКонтрагента.Вставить("pas_ser", privatePerson.pas_ser);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_num") Тогда
						РеквизитыКонтрагента.Вставить("pas_num", privatePerson.pas_num);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_org") Тогда
						РеквизитыКонтрагента.Вставить("pas_org", privatePerson.pas_org);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_date") Тогда
						РеквизитыКонтрагента.Вставить("pas_date", privatePerson.pas_date);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("privatePerson", РеквизитыPrivatePerson);
			КонецЕсли;
			
			РеквизитыAddress = Новый Структура();
			Если ЕстьСвойствоXDTO(Элемент, "address") Тогда
				address = Элемент.address;
				Если ЕстьСвойствоXDTO(address, "street") Тогда
					РеквизитыКонтрагента.Вставить("street", address.street);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "house") Тогда
					РеквизитыКонтрагента.Вставить("house", address.house);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "building") Тогда
					РеквизитыКонтрагента.Вставить("building", address.building);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "flat") Тогда
					РеквизитыКонтрагента.Вставить("flat", address.flat);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "settlement") Тогда
					РеквизитыКонтрагента.Вставить("settlement", address.settlement);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "district") Тогда
					РеквизитыКонтрагента.Вставить("district", address.district);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "region") Тогда
					РеквизитыКонтрагента.Вставить("region", address.region);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "country") Тогда
					РеквизитыКонтрагента.Вставить("country", address.country);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postcode") Тогда
					РеквизитыКонтрагента.Вставить("postcode", address.postcode);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postbox") Тогда
					РеквизитыКонтрагента.Вставить("postbox", address.postbox);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "nontypical") Тогда
					РеквизитыКонтрагента.Вставить("nontypical", address.nontypical);
				КонецЕсли;
			КонецЕсли;
			//РеквизитыКонтрагента.Вставить("address", РеквизитыAddress);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем кто есть кто
	ВидКонтрагента  = "";
	ЗаполнитьВидПоГосту = ПустаяСтрока(ВидПоГосту); 
	
	// Для более старых документов,
	// где не заполнен реквизит "Организация"
	// у справочника "ЭДПрисоединенныеФайлы"
	Если ПустаяСтрока(ИННОрганизации) Тогда
		Организация = НайтиОрганизациюПоИНН(ИдУчастника);
		Если Организация <> Неопределено Тогда
			ИННОрганизации = ИдУчастника;
		КонецЕсли;
	КонецЕсли;
	
	Если ИННОрганизации = ИдУчастника Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "supplier", ВидПоГосту); 
	Иначе
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "buyer", ВидПоГосту);
	КонецЕсли;
	
	Попытка
		УчастникExpansion = ЭД.Получить("Expansion/" + ВидПоГосту);
		Если legalEntity Тогда
			СвойстваУчастникаOrganization = УчастникExpansion.organization.Свойства();
			//РеквизитыКонтрагента.Вставить("КоррСчет", ?(СвойстваУчастникаOrganization.Получить("КоррСчет") <> Неопределено, УчастникExpansion.organization.КоррСчет, ""));
			РеквизитыКонтрагента.Вставить("АдресБанка", ?(СвойстваУчастникаOrganization.Получить("BankAddress") <> Неопределено, УчастникExpansion.organization.BankAddress, ""));
			РеквизитыКонтрагента.Вставить("БанкКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryBank") <> Неопределено, УчастникExpansion.organization.TreasuryBank, ""));
			РеквизитыКонтрагента.Вставить("БИККазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryCode") <> Неопределено, УчастникExpansion.organization.TreasuryCode, ""));
			РеквизитыКонтрагента.Вставить("ИННКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryTIN") <> Неопределено, УчастникExpansion.organization.TreasuryTIN, ""));
			РеквизитыКонтрагента.Вставить("Казначейство", ?(СвойстваУчастникаOrganization.Получить("TreasuryTitle") <> Неопределено, УчастникExpansion.organization.TreasuryTitle, ""));
			// Начиная с версии 2.0
			РеквизитыКонтрагента.Вставить("ЛицевойСчет", ?(СвойстваУчастникаOrganization.Получить("TreasyruPersonalAccount") <> Неопределено, УчастникExpansion.organization.TreasyruPersonalAccount, ""));
		Иначе	
			СвойстваУчастникаPrivatePerson = УчастникExpansion.privatePerson.Свойства();
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ?(СвойстваУчастникаPrivatePerson.Получить("FullTitle") <> Неопределено, УчастникExpansion.privatePerson.FullTitle, ""));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("Телефоны", ?(УчастникExpansion.address.Свойства().Получить("PhoneNumber") <> Неопределено, УчастникExpansion.address.PhoneNumber, ""));
		
	Исключение
	КонецПопытки;
	
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдУчастника, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдУчастника, "ИНН: "+ИдУчастника,
	Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеКонтрагентаВерсия40(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ВидПоГосту = "", ИННОрганизации = "")
	
	// Контрагент
	legalEntity = Ложь;
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	Иначе // TORGPR
		ИдУчастника = "";
		Если ЕстьСвойствоXDTO(Элемент, "legalEntity") Тогда
			legalEntity = Элемент.legalEntity;
			
			//<Временно
			Если legalEntity = "1" Тогда
				legalEntity = Истина;
			ИначеЕсли legalEntity = "0" Тогда
				legalEntity = Ложь;
			КонецЕсли;
			//Временно>
			
			РеквизитыКонтрагента.Вставить("legalEntity", legalEntity);
			Если legalEntity Тогда
				РеквизитыOrganization = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "organization") Тогда
					organization = Элемент.organization;
					Если ЕстьСвойствоXDTO(organization, "ownership") Тогда
						РеквизитыКонтрагента.Вставить("ownership", organization.ownership);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "fullname") Тогда
						РеквизитыКонтрагента.Вставить("fullname", organization.fullname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "shortname") Тогда
						РеквизитыКонтрагента.Вставить("shortname", organization.shortname);
					КонецЕсли;
					
					Если ЕстьСвойствоXDTO(organization, "treasury") Тогда
						РеквизитыКонтрагента.Вставить("treasury", Число(organization.treasury));
					Иначе
						РеквизитыКонтрагента.Вставить("treasury", 0);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasuryAccount") Тогда
						РеквизитыКонтрагента.Вставить("treasuryAccount", organization.treasuryAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", organization.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "vatCode") Тогда
						РеквизитыКонтрагента.Вставить("vatCode", organization.vatCode);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("organization", РеквизитыOrganization);
			Иначе
				РеквизитыPrivatePerson = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "privatePerson") Тогда
					privatePerson = Элемент.privatePerson;
					Если ЕстьСвойствоXDTO(privatePerson, "surName") Тогда
						РеквизитыКонтрагента.Вставить("surName", privatePerson.surName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "firstName") Тогда
						РеквизитыКонтрагента.Вставить("firstName", privatePerson.firstName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "middleName") Тогда
						РеквизитыКонтрагента.Вставить("middleName", privatePerson.middleName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", privatePerson.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pinfl") Тогда
						РеквизитыКонтрагента.Вставить("pinfl", privatePerson.pinfl);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_ser") Тогда
						РеквизитыКонтрагента.Вставить("pas_ser", privatePerson.pas_ser);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_num") Тогда
						РеквизитыКонтрагента.Вставить("pas_num", privatePerson.pas_num);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_org") Тогда
						РеквизитыКонтрагента.Вставить("pas_org", privatePerson.pas_org);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_date") Тогда
						РеквизитыКонтрагента.Вставить("pas_date", privatePerson.pas_date);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("privatePerson", РеквизитыPrivatePerson);
			КонецЕсли;
			
			РеквизитыAddress = Новый Структура();
			Если ЕстьСвойствоXDTO(Элемент, "address") Тогда
				address = Элемент.address;
				Если ЕстьСвойствоXDTO(address, "street") Тогда
					РеквизитыКонтрагента.Вставить("street", address.street);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "house") Тогда
					РеквизитыКонтрагента.Вставить("house", address.house);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "building") Тогда
					РеквизитыКонтрагента.Вставить("building", address.building);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "flat") Тогда
					РеквизитыКонтрагента.Вставить("flat", address.flat);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "settlement") Тогда
					РеквизитыКонтрагента.Вставить("settlement", address.settlement);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "district") Тогда
					РеквизитыКонтрагента.Вставить("district", address.district);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "region") Тогда
					РеквизитыКонтрагента.Вставить("region", address.region);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "country") Тогда
					РеквизитыКонтрагента.Вставить("country", address.country);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postcode") Тогда
					РеквизитыКонтрагента.Вставить("postcode", address.postcode);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postbox") Тогда
					РеквизитыКонтрагента.Вставить("postbox", address.postbox);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "nontypical") Тогда
					РеквизитыКонтрагента.Вставить("nontypical", address.nontypical);
				КонецЕсли;
			КонецЕсли;
			//РеквизитыКонтрагента.Вставить("address", РеквизитыAddress);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем кто есть кто
	ВидКонтрагента  = "";
	ЗаполнитьВидПоГосту = ПустаяСтрока(ВидПоГосту); 
	
	// Для более старых документов,
	// где не заполнен реквизит "Организация"
	// у справочника "ЭДПрисоединенныеФайлы"
	Если ПустаяСтрока(ИННОрганизации) Тогда
		Организация = НайтиОрганизациюПоИНН(ИдУчастника);
		Если Организация <> Неопределено Тогда
			ИННОрганизации = ИдУчастника;
		КонецЕсли;
	КонецЕсли;
	
	Если ИННОрганизации = ИдУчастника Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "supplier", ВидПоГосту); 
	Иначе
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "buyer", ВидПоГосту);
	КонецЕсли;
	
	Попытка
		УчастникExpansion = ЭД.Получить("Expansion/" + ВидПоГосту);
		Если legalEntity Тогда
			СвойстваУчастникаOrganization = УчастникExpansion.organization.Свойства();
			//РеквизитыКонтрагента.Вставить("КоррСчет", ?(СвойстваУчастникаOrganization.Получить("КоррСчет") <> Неопределено, УчастникExpansion.organization.КоррСчет, ""));
			РеквизитыКонтрагента.Вставить("АдресБанка", ?(СвойстваУчастникаOrganization.Получить("BankAddress") <> Неопределено, УчастникExpansion.organization.BankAddress, ""));
			РеквизитыКонтрагента.Вставить("БанкКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryBank") <> Неопределено, УчастникExpansion.organization.TreasuryBank, ""));
			РеквизитыКонтрагента.Вставить("БИККазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryCode") <> Неопределено, УчастникExpansion.organization.TreasuryCode, ""));
			РеквизитыКонтрагента.Вставить("ИННКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryTIN") <> Неопределено, УчастникExpansion.organization.TreasuryTIN, ""));
			РеквизитыКонтрагента.Вставить("Казначейство", ?(СвойстваУчастникаOrganization.Получить("TreasuryTitle") <> Неопределено, УчастникExpansion.organization.TreasuryTitle, ""));
			// Начиная с версии 2.0
			РеквизитыКонтрагента.Вставить("ЛицевойСчет", ?(СвойстваУчастникаOrganization.Получить("TreasyruPersonalAccount") <> Неопределено, УчастникExpansion.organization.TreasyruPersonalAccount, ""));
		Иначе	
			СвойстваУчастникаPrivatePerson = УчастникExpansion.privatePerson.Свойства();
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ?(СвойстваУчастникаPrivatePerson.Получить("FullTitle") <> Неопределено, УчастникExpansion.privatePerson.FullTitle, ""));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("Телефоны", ?(УчастникExpansion.address.Свойства().Получить("PhoneNumber") <> Неопределено, УчастникExpansion.address.PhoneNumber, ""));
		
	Исключение
	КонецПопытки;
	
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдУчастника, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдУчастника, "ИНН: "+ИдУчастника,
	Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

//<Raxx

Процедура venkonПрочитатьДанныеКонтрагентаДоверенность70(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ВидПоГосту = "", ИННОрганизации = "")
	
	// Контрагент
	legalEntity = Ложь;
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	Иначе // TORGPR
		ИдУчастника = "";
		Если ЕстьСвойствоXDTO(Элемент, "legalEntity") Тогда
			legalEntity = Элемент.legalEntity;
			
			//<Временно
			Если legalEntity = "1" Тогда
				legalEntity = Истина;
			ИначеЕсли legalEntity = "0" Тогда
				legalEntity = Ложь;
			КонецЕсли;
			//Временно>
			
			РеквизитыКонтрагента.Вставить("legalEntity", legalEntity);
			Если legalEntity Тогда
				РеквизитыOrganization = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "organization") Тогда
					organization = Элемент.organization;
					Если ЕстьСвойствоXDTO(organization, "ownership") Тогда
						РеквизитыКонтрагента.Вставить("ownership", organization.ownership);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "fullname") Тогда
						РеквизитыКонтрагента.Вставить("fullname", organization.fullname);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "shortname") Тогда
						РеквизитыКонтрагента.Вставить("shortname", organization.shortname);
					КонецЕсли;
					
					Если ЕстьСвойствоXDTO(organization, "treasury") Тогда
						РеквизитыКонтрагента.Вставить("treasury", Число(organization.treasury));
					Иначе
						РеквизитыКонтрагента.Вставить("treasury", 0);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "treasuryAccount") Тогда
						РеквизитыКонтрагента.Вставить("treasuryAccount", organization.treasuryAccount);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", organization.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(organization, "vatCode") Тогда
						РеквизитыКонтрагента.Вставить("vatCode", organization.vatCode);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("organization", РеквизитыOrganization);
			Иначе
				РеквизитыPrivatePerson = Новый Структура();
				Если ЕстьСвойствоXDTO(Элемент, "privatePerson") Тогда
					privatePerson = Элемент.privatePerson;
					Если ЕстьСвойствоXDTO(privatePerson, "surName") Тогда
						РеквизитыКонтрагента.Вставить("surName", privatePerson.surName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "firstName") Тогда
						РеквизитыКонтрагента.Вставить("firstName", privatePerson.firstName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "middleName") Тогда
						РеквизитыКонтрагента.Вставить("middleName", privatePerson.middleName);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "inn") Тогда
						РеквизитыКонтрагента.Вставить("inn", privatePerson.inn);
						ИдУчастника = organization.inn;
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pinfl") Тогда
						РеквизитыКонтрагента.Вставить("pinfl", privatePerson.pinfl);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_ser") Тогда
						РеквизитыКонтрагента.Вставить("pas_ser", privatePerson.pas_ser);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_num") Тогда
						РеквизитыКонтрагента.Вставить("pas_num", privatePerson.pas_num);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_org") Тогда
						РеквизитыКонтрагента.Вставить("pas_org", privatePerson.pas_org);
					КонецЕсли;
					Если ЕстьСвойствоXDTO(privatePerson, "pas_date") Тогда
						РеквизитыКонтрагента.Вставить("pas_date", privatePerson.pas_date);
					КонецЕсли;
				КонецЕсли;
				//РеквизитыКонтрагента.Вставить("privatePerson", РеквизитыPrivatePerson);
			КонецЕсли;
			
			РеквизитыAddress = Новый Структура();
			Если ЕстьСвойствоXDTO(Элемент, "address") Тогда
				address = Элемент.address;
				Если ЕстьСвойствоXDTO(address, "street") Тогда
					РеквизитыКонтрагента.Вставить("street", address.street);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "house") Тогда
					РеквизитыКонтрагента.Вставить("house", address.house);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "building") Тогда
					РеквизитыКонтрагента.Вставить("building", address.building);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "flat") Тогда
					РеквизитыКонтрагента.Вставить("flat", address.flat);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "settlement") Тогда
					РеквизитыКонтрагента.Вставить("settlement", address.settlement);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "district") Тогда
					РеквизитыКонтрагента.Вставить("district", address.district);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "region") Тогда
					РеквизитыКонтрагента.Вставить("region", address.region);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "country") Тогда
					РеквизитыКонтрагента.Вставить("country", address.country);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postcode") Тогда
					РеквизитыКонтрагента.Вставить("postcode", address.postcode);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "postbox") Тогда
					РеквизитыКонтрагента.Вставить("postbox", address.postbox);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(address, "nontypical") Тогда
					РеквизитыКонтрагента.Вставить("nontypical", address.nontypical);
				КонецЕсли;
			КонецЕсли;
			//РеквизитыКонтрагента.Вставить("address", РеквизитыAddress);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем кто есть кто
	ВидКонтрагента  = "";
	ЗаполнитьВидПоГосту = ПустаяСтрока(ВидПоГосту); 
	
	// Для более старых документов,
	// где не заполнен реквизит "Организация"
	// у справочника "ЭДПрисоединенныеФайлы"
	Если ПустаяСтрока(ИННОрганизации) Тогда
		Организация = НайтиОрганизациюПоИНН(ИдУчастника);
		Если Организация <> Неопределено Тогда
			ИННОрганизации = ИдУчастника;
		КонецЕсли;
	КонецЕсли;
	
	Если ИННОрганизации = ИдУчастника Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "buyer", ВидПоГосту); 
	Иначе
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидПоГосту = ?(ЗаполнитьВидПоГосту, "supplier", ВидПоГосту);
	КонецЕсли;
	
	Попытка
		УчастникExpansion = ЭД.Получить("Expansion/" + ВидПоГосту);
		Если legalEntity Тогда
			СвойстваУчастникаOrganization = УчастникExpansion.organization.Свойства();
			//РеквизитыКонтрагента.Вставить("КоррСчет", ?(СвойстваУчастникаOrganization.Получить("КоррСчет") <> Неопределено, УчастникExpansion.organization.КоррСчет, ""));
			РеквизитыКонтрагента.Вставить("АдресБанка", ?(СвойстваУчастникаOrganization.Получить("BankAddress") <> Неопределено, УчастникExpansion.organization.BankAddress, ""));
			РеквизитыКонтрагента.Вставить("БанкКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryBank") <> Неопределено, УчастникExpansion.organization.TreasuryBank, ""));
			РеквизитыКонтрагента.Вставить("БИККазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryCode") <> Неопределено, УчастникExpansion.organization.TreasuryCode, ""));
			РеквизитыКонтрагента.Вставить("ИННКазначейства", ?(СвойстваУчастникаOrganization.Получить("TreasuryTIN") <> Неопределено, УчастникExpansion.organization.TreasuryTIN, ""));
			РеквизитыКонтрагента.Вставить("Казначейство", ?(СвойстваУчастникаOrganization.Получить("TreasuryTitle") <> Неопределено, УчастникExpansion.organization.TreasuryTitle, ""));
			// Начиная с версии 2.0
			РеквизитыКонтрагента.Вставить("ЛицевойСчет", ?(СвойстваУчастникаOrganization.Получить("TreasyruPersonalAccount") <> Неопределено, УчастникExpansion.organization.TreasyruPersonalAccount, ""));
		Иначе	
			СвойстваУчастникаPrivatePerson = УчастникExpansion.privatePerson.Свойства();
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ?(СвойстваУчастникаPrivatePerson.Получить("FullTitle") <> Неопределено, УчастникExpansion.privatePerson.FullTitle, ""));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("Телефоны", ?(УчастникExpansion.address.Свойства().Получить("PhoneNumber") <> Неопределено, УчастникExpansion.address.PhoneNumber, ""));
		
	Исключение
	КонецПопытки;
	
	
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдУчастника, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдУчастника, "ИНН: "+ИдУчастника,
	Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

// Находим организацию по ИНН
// Если уже есть такая функция необходимо удалить эту
Функция НайтиОрганизациюПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Raxx>

Процедура venkonПрочитатьДанныеДоговора(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыДоговора = Новый Структура;
	ИдДоговора = "";
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыДоговора = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "Num") Тогда
			ЗначениеЭлемента = Элемент[Вид + "Num"]; 
			РеквизитыДоговора.Вставить(Вид + "Num", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
			ИдДоговора = ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента); 
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "Date") Тогда
			ЗначениеЭлемента = Элемент[Вид + "Date"]; 
			РеквизитыДоговора.Вставить(Вид + "Date", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "DetailsURL") Тогда
			ЗначениеЭлемента = Элемент[Вид + "DetailsURL"]; 
			РеквизитыДоговора.Вставить(Вид + "DetailsURL", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
		КонецЕсли;
		
	КонецЕсли;
	
	ДоговорExpansion = ЭД.Получить("Expansion/" + Вид);
	
	Если ЕстьСвойствоXDTO(ДоговорExpansion, "Наименование") Тогда
		ЗначениеЭлемента = ДоговорExpansion["Наименование"]; 
		РеквизитыДоговора.Вставить("Наименование", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Договор");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдДоговора, "НомерДоговора: "+ИдДоговора,
	Неопределено, РеквизитыДоговора, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Договор", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеДоговора30(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыДоговора = Новый Структура;
	ИдДоговора = "";
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыДоговора = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "Num") Тогда
			ЗначениеЭлемента = Элемент[Вид + "Num"]; 
			РеквизитыДоговора.Вставить(Вид + "Num", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
			ИдДоговора = ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента); 
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "Date") Тогда
			ЗначениеЭлемента = Элемент[Вид + "Date"]; 
			РеквизитыДоговора.Вставить(Вид + "Date", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, Вид + "DetailsURL") Тогда
			ЗначениеЭлемента = Элемент[Вид + "DetailsURL"]; 
			РеквизитыДоговора.Вставить(Вид + "DetailsURL", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
		КонецЕсли;
		
	КонецЕсли;
	
	ДоговорExpansion = ЭД.Получить("Expansion/" + Вид);
	
	Если ЕстьСвойствоXDTO(ДоговорExpansion, "Title") Тогда
		ЗначениеЭлемента = ДоговорExpansion["Title"]; 
		РеквизитыДоговора.Вставить("Наименование", ?(ТипЗнч(ЗначениеЭлемента) = Тип("ОбъектXDTO"), "", ЗначениеЭлемента));
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Договор");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдДоговора, "НомерДоговора: "+ИдДоговора,
	Неопределено, РеквизитыДоговора, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Договор", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьИтоги(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыИтогов = Новый Структура;
	
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыИтогов = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, "totalPrice") Тогда
			РеквизитыИтогов.Вставить("totalPrice", Элемент["totalPrice"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "exciseTaxSum") Тогда
			РеквизитыИтогов.Вставить("exciseTaxSum", Элемент["exciseTaxSum"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "VATTotal") Тогда
			РеквизитыИтогов.Вставить("VATTotal", Элемент["VATTotal"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "priceWithVAT") Тогда
			РеквизитыИтогов.Вставить("priceWithVAT", Элемент["priceWithVAT"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "totalPriceWithoutDiscount") Тогда
			РеквизитыИтогов.Вставить("totalPriceWithoutDiscount", Элемент["totalPriceWithoutDiscount"]);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Итоги");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Вид, Вид,
	Неопределено, РеквизитыИтогов, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Итоги", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьСведенияПоОтпускуГруза(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыИтогов = Новый Структура;
	
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыИтогов = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, "ПриложениеКоличествоЛистов") Тогда
			РеквизитыИтогов.Вставить("ПриложениеКоличествоЛистов", Элемент["ПриложениеКоличествоЛистов"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ПриложениеКоличествоЛистовПрописью") Тогда
			РеквизитыИтогов.Вставить("ПриложениеКоличествоЛистовПрописью", Элемент["ПриложениеКоличествоЛистовПрописью"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ОтпущеноНаСумму") Тогда
			РеквизитыИтогов.Вставить("ОтпущеноНаСумму", Элемент["ОтпущеноНаСумму"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ОтпущеноНаСуммуПрописью") Тогда
			РеквизитыИтогов.Вставить("ОтпущеноНаСуммуПрописью", Элемент["ОтпущеноНаСуммуПрописью"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ДатаОтпуска") Тогда
			РеквизитыИтогов.Вставить("ДатаОтпуска", Элемент["ДатаОтпуска"]);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "СведенияПоОтпускуГруза");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Вид, Вид,
	Неопределено, РеквизитыИтогов, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СведенияПоОтпускуГруза", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьОбщиеСведенияОТоварнойНакладной(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыИтогов = Новый Структура;
	
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыИтогов = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, "КоличествоПорядковыхНомеровЗаписей") Тогда
			РеквизитыИтогов.Вставить("КоличествоПорядковыхНомеровЗаписей", Элемент["КоличествоПорядковыхНомеровЗаписей"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "КоличествоПорядковыхНомеровЗаписейПрописью") Тогда
			РеквизитыИтогов.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", Элемент["КоличествоПорядковыхНомеровЗаписейПрописью"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ВсегоМест") Тогда
			РеквизитыИтогов.Вставить("ВсегоМест", Элемент["ВсегоМест"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ВсегоМестПрописью") Тогда
			РеквизитыИтогов.Вставить("ВсегоМестПрописью", Элемент["ВсегоМестПрописью"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаГрузаНетто") Тогда
			РеквизитыИтогов.Вставить("МассаГрузаНетто", Элемент["МассаГрузаНетто"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаГрузаНеттоПрописью") Тогда
			РеквизитыИтогов.Вставить("МассаГрузаНеттоПрописью", Элемент["МассаГрузаНеттоПрописью"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаГрузаБрутто") Тогда
			РеквизитыИтогов.Вставить("МассаГрузаБрутто", Элемент["МассаГрузаБрутто"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаГрузаБруттоПрописью") Тогда
			РеквизитыИтогов.Вставить("МассаГрузаБруттоПрописью", Элемент["МассаГрузаБруттоПрописью"]);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбщиеСведенияОТоварнойНакладной");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Вид, Вид,
	Неопределено, РеквизитыИтогов, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОбщиеСведенияОТоварнойНакладной", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonПрочитатьВсегоПоНакладной(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Вид = "")
	
	// Контрагент
	РеквизитыИтогов = Новый Структура;
	
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыИтогов = Элемент;
	Иначе // TORGPR
		
		Если ЕстьСвойствоXDTO(Элемент, "КоличествоМест") Тогда
			РеквизитыИтогов.Вставить("КоличествоМест", Элемент["КоличествоМест"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаБрутто") Тогда
			РеквизитыИтогов.Вставить("МассаБрутто", Элемент["МассаБрутто"]);
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "МассаНетто") Тогда
			РеквизитыИтогов.Вставить("МассаНетто", Элемент["МассаНетто"]);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ВсегоПоНакладной");
	//Контрагент = ЭлектронныеДокументыПереопределяемый.venkonНайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Вид, Вид,
	Неопределено, РеквизитыИтогов, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоПоНакладной", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура venkonРазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, "");
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	СтруктураДопРеквизитов = Новый Структура;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("productId") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("productName") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("measurment") Тогда
			РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("quantity") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Количество");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("price") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Цена");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("currencyId") Тогда
			СписокТЧ.Добавить(ЗнДанных, "КодВалюты");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("totalPrice") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаБезНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("exciseTax") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СтавкаАкциза");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("exciseTaxSum") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаАкциза");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("VAT") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = "";
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СтавкаНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("VATSum") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("priceWithVAT") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаСУчетомНДС");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Expansion = ЭД.Получить("Expansion");
		НаборДанныхExpansion = Expansion["productList"].product;
		Если НомерСтроки = Неопределено Тогда 
			ЭлементExpansion = НаборДанныхExpansion;
		Иначе
			ЭлементExpansion = НаборДанныхExpansion[НомерСтроки - 1];
		КонецЕсли;
		Для Каждого ТекСвойство Из ЭлементExpansion.Свойства() Цикл
			ЗнДанных = ЭлементExpansion[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			Иначе
				Если ВРег(ТекСвойство.Имя) = ВРег("GoodID") Тогда
					РеквизитыНоменклатуры.Вставить("ИдТовараУКонтрагента", ЗнДанных);
					СписокТЧ.Добавить(ЗнДанных, "ИдТовараУКонтрагента");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ThisIsService") Тогда
					РеквизитыНоменклатуры.Вставить("ЭтоУслуга", ЗнДанных);
					
					Если ЗнДанных = "true" Тогда
						ЗнДанных = "1";
					ИначеЕсли ЗнДанных = "false" Тогда
						ЗнДанных = "0";
					КонецЕсли;
					
					СписокТЧ.Добавить(ЗнДанных, "ЭтоУслуга");
				Иначе
					РеквизитыНоменклатуры.Вставить(ТекСвойство.Имя, ЗнДанных);
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", РеквизитыНоменклатуры.ИдТовараУКонтрагента);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
		РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, НоменклатураПоставщика,
		РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
	Исключение
	КонецПопытки;
	//КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, Номенклатура,
	РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	
КонецПроцедуры

Процедура venkonУдалитьПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		НомерСтроки = 1;
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			venkonРазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки);
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("ОбъектXDTO") Тогда
		СписокТЧ = Новый СписокЗначений;
		venkonРазобратьСтрокуТЧCML(НаборДанных, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеПоТЧСчетФактуры(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		НомерСтроки = 1;
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			venkonРазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки);
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("ОбъектXDTO") Тогда
		СписокТЧ = Новый СписокЗначений;
		venkonРазобратьСтрокуТЧCML(НаборДанных, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЕсли;
	
КонецПроцедуры

//Raxx>

Процедура venkonПрочитатьДанныеПоТЧДоверенность(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		НомерСтроки = 1;
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			venkonРазобратьСтрокуТЧДоверенностиCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки);
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("ОбъектXDTO") Тогда
		СписокТЧ = Новый СписокЗначений;
		venkonРазобратьСтрокуТЧДоверенностиCML(НаборДанных, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonРазобратьСтрокуТЧДоверенностиCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, "");
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	СтруктураДопРеквизитов = Новый Структура;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("productId") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("productName") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("measurment") Тогда
			РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("quantity") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Количество");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Expansion = ЭД.Получить("Expansion");
		НаборДанныхExpansion = Expansion["productList"].product;
		Если НомерСтроки = Неопределено Тогда 
			ЭлементExpansion = НаборДанныхExpansion;
		Иначе
			ЭлементExpansion = НаборДанныхExpansion[НомерСтроки - 1];
		КонецЕсли;
		Для Каждого ТекСвойство Из ЭлементExpansion.Свойства() Цикл
			ЗнДанных = ЭлементExpansion[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			Иначе
				Если ВРег(ТекСвойство.Имя) = ВРег("ThisIsService") Тогда
					РеквизитыНоменклатуры.Вставить("ЭтоУслуга", ЗнДанных);
					
					Если ЗнДанных = "true" Тогда
						ЗнДанных = "1";
					ИначеЕсли ЗнДанных = "false" Тогда
						ЗнДанных = "0";
					КонецЕсли;
					
					СписокТЧ.Добавить(ЗнДанных, "ЭтоУслуга");
				Иначе
					РеквизитыНоменклатуры.Вставить(ТекСвойство.Имя, ЗнДанных);
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", "");
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
		РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		РеквизитыНоменклатуры.Вставить("ИдТовараУКонтрагента", "");
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, НоменклатураПоставщика,
		РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		Конецесли;
	Исключение
	КонецПопытки;
	//КонецЕсли;
	
	Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, Номенклатура,
	РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	//Если ТипЗНЧ(НомерСтроки) = Тип("Число") Тогда
	//	НомерСтроки = НомерСтроки + 1;
	//КонецЕсли;
	ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка) Экспорт
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ЭлектронныеДокументыПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	// Добавить в реквизиты шапки ЭлектронныеДокументы
	НовСтрока                   = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит          = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов)
	
	// Добавить в реквизиты ТЧ ЭлектронныеДокументы
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта)
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = "_" + Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ОпределитьТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Если НЕ ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь)
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если НЕ ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
					
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") И НЕ ТекЭл.Ключ = "ЗначенияСвойств" И НЕ ТекЭл.Ключ = "Картинки" Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура");
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом разбора

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//<Raxx

// Только для внутреннего использования
Функция venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПредставлениеАдреса = "";
	
	Индекс        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".postcode");
	Регион        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".region");
	Район         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".district");
	Город         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".country");
	НасПункт      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".settlement");
	Улица         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".street");
	Дом           = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".house");
	Корпус        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".building");
	Квартира      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".flat");
	Представление = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту + ".nontypical");
	
	ПредставлениеАдреса = ?(Индекс = Неопределено, "",  Индекс + ", ") + ?(Регион = Неопределено, "",  Регион + ", ") 
						+ ?(Район = Неопределено, "",  Район + ", ") + ?(Город = Неопределено, "",  Город + ", ") 
						+ ?(НасПункт = Неопределено, "",  НасПункт + ", ") + ?(Улица = Неопределено, "",  Улица + ", ") 
						+ ?(Дом = Неопределено, "",  "дом № " + Дом) + ?(Корпус = Неопределено, "",  ", корпус " + Корпус) 
						+ ?(Квартира = Неопределено, "",  ", кв." + Квартира);
						
	Если Не ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
		ПредставлениеАдреса = Представление;
	КонецЕсли;
	
	Возврат  ПредставлениеАдреса;
	
КонецФункции

//Raxx>

// Возвращает дерево с данными файла
//
// Параметры:
//  ПолноеИмяФайла - Строка, путь к файлу
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа
//  ФайлДопДанных - Строка, путь к файлу с дополнительными данными
//  ФайлКартинок - Строка,  пусть к файлу - архиву, содержащему картинки
//
// Возвращаемое значение:
//  Структура - данные дерева
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлКартинок = Неопределено, ИДВладельца = "") Экспорт
	
	ДеревоРазбора = ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
		
	Если ФайлКартинок <> Неопределено Тогда
		ДеревоКартинок = ДеревоКартинок(ФайлКартинок);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоКартинок", ДеревоКартинок);
	КонецЕсли;
	
	ОшибкаЧтенияЭД = Ложь;
	Результат = venkonПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД, ИДВладельца);
	
	Если ОшибкаЧтенияЭД Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, НовыйЭД);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ТОРГ-12

//<Raxx

Функция venkonПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	//СведенияОКонтрагенте.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	//СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	//СведенияООрганизации.Вставить("КПП", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	//СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
		ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
		ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",        ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
		ДанныеЗаполненияШапки.Вставить("ГрузополучательПоОКПО",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
		
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
		
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
		ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
		ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
		ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",        ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
		ДанныеЗаполненияШапки.Вставить("ГрузополучательПоОКПО",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));

		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
		
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	//СведенияОГрузоотправителе.Вставить("КПП", 			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".КПП"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".okpo"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	//СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	//СведенияОГрузополучателе.Вставить("КПП", 			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".КПП"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".okpo"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	//СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	//ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	
	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.contractNum"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.contractDate"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	ДанныеЗаполненияШапки.Вставить("НомерДокумента",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс")); //
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВалютаКод"));   //
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СуммаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	
	// ?
	ДатаИсправления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления",	Дата(ДатаИсправления));
		ДанныеЗаполненияШапки.Вставить("НомерИсправления",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления"));
	КонецЕсли;
	// ?
	
	ДанныеЗаполненияПодвала = Новый Структура;
	
	ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СведенияПоОтпускуГруза.ПриложениеКоличествоЛистовПрописью"));
	ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаНеттоПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью"));

	ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
	
	ДолжностьРуководителя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя");
	Если Не ДолжностьРуководителя = "---" Тогда
		ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	КонецЕсли;
	ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Ид");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НаименованиеХарактеристики = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.НаименованиеХарактеристики");
		
		Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		
			
		Сорт = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Сорт");
		Если ЗначениеЗаполнено(Сорт) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.ТоварНаименование + ", " + Сорт;
		КонецЕсли;
		
		Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		Если ЗначениеЗаполнено(Артикул) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.ТоварНаименование + ", " + Артикул;
		КонецЕсли;

		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоВОдномМесте = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.КоличествоМест");
		
		НоваяСтрока.МассаБрутто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.МассаБрутто");
		НоваяСтрока.МассаНетто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС),НоваяСтрока.СуммаНДС,0);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ-ФАКТУРА

//<Raxx

Функция venkonПолучитьДанныеСчетаФактурыДляПечати10(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", НСтр(" ru = 'Счет-фактура №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДанныеЗаполненияШапки.Вставить("НомерАкт", НСтр(" ru = 'АКТ ВЫПОЛНЕННЫХ РАБОТ №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	Дата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ТекстОшибки = "";
	ДатаДокумента = ПолучитьДатуИзСтроки(Дата, ТекстОшибки);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ДатаДокумента);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	Дата);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	СведенияОКонтрагенте.Вставить("ОКОНХ", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okonh"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	СведенияОКонтрагенте.Вставить("КодПоОКЭД",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.oked"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	СведенияОКонтрагенте.Вставить("Банк",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	СведенияОКонтрагенте.Вставить("БИК",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОКонтрагенте.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasuryAccount"));
		СведенияОКонтрагенте.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БанкКазначейства"));
		СведенияОКонтрагенте.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БИККазначейства"));
		СведенияОКонтрагенте.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИННКазначейства"));
		СведенияОКонтрагенте.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Казначейство"));
		//СведенияОКонтрагенте.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЛицевойСчет"));
	Иначе
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	СведенияОКонтрагенте.Вставить("Телефоны",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	СведенияОКонтрагенте.Вставить("АдресБанка",			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.АдресБанка"));
	
	ИмяРеквОрганизации = "Организация";
	ИмяБанкСчета = "БанковскийСчетОрганизации";
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	СведенияООрганизации.Вставить("ОКОНХ", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okonh"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	СведенияООрганизации.Вставить("КодПоОКЭД",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.oked"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияООрганизации.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasuryAccount"));
		СведенияООрганизации.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БанкКазначейства"));
		СведенияООрганизации.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БИККазначейства"));
		СведенияООрганизации.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИННКазначейства"));
		СведенияООрганизации.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Казначейство"));
		//СведенияООрганизации.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЛицевойСчет"));
	Иначе
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	СведенияООрганизации.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.АдресБанка"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".okpo"));
	СведенияОГрузоотправителе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".oked"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузоотправителе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasuryAccount"));
		СведенияОГрузоотправителе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".БанкКазначейства"));
		СведенияОГрузоотправителе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".БИККазначейства"));
		СведенияОГрузоотправителе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ИННКазначейства"));
		СведенияОГрузоотправителе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Казначейство"));
	Иначе
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	СведенияОГрузоотправителе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".okpo"));
	СведенияОГрузополучателе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".oked"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузополучателе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasuryAccount"));
		СведенияОГрузополучателе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".БанкКазначейства"));
		СведенияОГрузополучателе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".БИККазначейства"));
		СведенияОГрузополучателе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ИННКазначейства"));
		СведенияОГрузополучателе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Казначейство"));
	Иначе
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	СведенияОГрузополучателе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".АдресБанка"));
	
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru = 'ИНН/КПП продавца:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес:'")+ " "
		+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
		+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес:'")+ " "
		+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
		+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес: --'"));
	КонецЕсли;
	
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru = 'ИНН/КПП покупателя:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалютаКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("ВалютаТекст", ТекстВалюта);
	ДанныеЗаполненияШапки.Вставить("Валюта", ОпределитьВалютуПоКоду(КодВалюты));
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPrice"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.VATTotal"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.priceWithVAT"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЭтоУслуга");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СтавкаАкциза");
	ТЗ.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		ЭтоУслуга = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоУслуга");
		Если ЗначениеЗаполнено(ЭтоУслуга) Тогда
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
		Иначе
			НоваяСтрока.ЭтоУслуга = "";
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.СтавкаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаАкциза");
		НоваяСтрока.СуммаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаАкциза");
		
		ЕдиницаИзмеренияАкцизногоНалога = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияАкцизногоНалога");
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияАкцизногоНалога) Тогда
			НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = ЕдиницаИзмеренияАкцизногоНалога;
		Иначе
			НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = "";
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(СуммаНДС),СуммаНДС,0);
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция venkonПолучитьДанныеСчетаФактурыДляПечати20(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", НСтр(" ru = 'Счет-фактура №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДанныеЗаполненияШапки.Вставить("НомерАкт", НСтр(" ru = 'АКТ ВЫПОЛНЕННЫХ РАБОТ №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	Дата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ТекстОшибки = "";
	ДатаДокумента = ПолучитьДатуИзСтроки(Дата, ТекстОшибки);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ДатаДокумента);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	Дата);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	СведенияОКонтрагенте.Вставить("ОКОНХ", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okonh"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	СведенияОКонтрагенте.Вставить("КодПоОКЭД",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.oked"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	СведенияОКонтрагенте.Вставить("Банк",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	СведенияОКонтрагенте.Вставить("БИК",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОКонтрагенте.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasuryAccount"));
		СведенияОКонтрагенте.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БанкКазначейства"));
		СведенияОКонтрагенте.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БИККазначейства"));
		СведенияОКонтрагенте.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИННКазначейства"));
		СведенияОКонтрагенте.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Казначейство"));
		// Начиная с версии 2.0
		СведенияОКонтрагенте.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЛицевойСчет"));
	Иначе
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	СведенияОКонтрагенте.Вставить("Телефоны",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	СведенияОКонтрагенте.Вставить("АдресБанка",			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.АдресБанка"));
	
	ИмяРеквОрганизации = "Организация";
	ИмяБанкСчета = "БанковскийСчетОрганизации";
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	СведенияООрганизации.Вставить("ОКОНХ", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okonh"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	СведенияООрганизации.Вставить("КодПоОКЭД",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.oked"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияООрганизации.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasuryAccount"));
		СведенияООрганизации.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БанкКазначейства"));
		СведенияООрганизации.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БИККазначейства"));
		СведенияООрганизации.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИННКазначейства"));
		СведенияООрганизации.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Казначейство"));
		// Начиная с версии 2.0
		СведенияООрганизации.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЛицевойСчет"));
	Иначе
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	СведенияООрганизации.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.АдресБанка"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".okpo"));
	СведенияОГрузоотправителе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".oked"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузоотправителе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasuryAccount"));
		СведенияОГрузоотправителе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".БанкКазначейства"));
		СведенияОГрузоотправителе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".БИККазначейства"));
		СведенияОГрузоотправителе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ИННКазначейства"));
		СведенияОГрузоотправителе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузоотправителе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	СведенияОГрузоотправителе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".okpo"));
	СведенияОГрузополучателе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".oked"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузополучателе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasuryAccount"));
		СведенияОГрузополучателе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".БанкКазначейства"));
		СведенияОГрузополучателе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".БИККазначейства"));
		СведенияОГрузополучателе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ИННКазначейства"));
		СведенияОГрузополучателе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузополучателе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	СведенияОГрузополучателе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".АдресБанка"));
	
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru = 'ИНН/КПП продавца:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес:'")+ " "
		+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
		+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес:'")+ " "
		+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
		+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес: --'"));
	КонецЕсли;
	
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru = 'ИНН/КПП покупателя:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалютаКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("ВалютаТекст", ТекстВалюта);
	ДанныеЗаполненияШапки.Вставить("Валюта", ОпределитьВалютуПоКоду(КодВалюты));
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPrice"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.VATTotal"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.priceWithVAT"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЭтоУслуга");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СтавкаАкциза");
	ТЗ.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		ЭтоУслуга = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоУслуга");
		Если ЗначениеЗаполнено(ЭтоУслуга) Тогда
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
		Иначе
			НоваяСтрока.ЭтоУслуга = "";
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.СтавкаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаАкциза");
		НоваяСтрока.СуммаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаАкциза");
		
		ЕдиницаИзмеренияАкцизногоНалога = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияАкцизногоНалога");
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияАкцизногоНалога) Тогда
			НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = ЕдиницаИзмеренияАкцизногоНалога;
		Иначе
			НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = "";
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(СуммаНДС),СуммаНДС,0);
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция venkonПолучитьДанныеСчетаФактурыДляПечати30(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", НСтр(" ru = 'Счет-фактура №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДанныеЗаполненияШапки.Вставить("НомерАкт", НСтр(" ru = 'АКТ ВЫПОЛНЕННЫХ РАБОТ №'") +" "+ НомерДокумента +" "+ НСтр("ru = 'от'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	Дата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ТекстОшибки = "";
	ДатаДокумента = ПолучитьДатуИзСтроки(Дата, ТекстОшибки);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ДатаДокумента);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	Дата);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	//Реквизиты доверенности
	НомерДоверенности = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДоверенности");
	Если НомерДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("НомерДоверенности",	НомерДоверенности);
	КонецЕсли;
	ДатаДоверенности  = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДоверенности");
	Если ДатаДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДоверенности",	ДатаДоверенности);
	КонецЕсли;
	ФИОДоверенности   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФИОДоверенности");
	Если ФИОДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ФИОДоверенности",	ФИОДоверенности);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	СведенияОКонтрагенте.Вставить("ОКОНХ", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okonh"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	СведенияОКонтрагенте.Вставить("КодПоОКЭД",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.oked"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	СведенияОКонтрагенте.Вставить("Банк",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	СведенияОКонтрагенте.Вставить("БИК",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОКонтрагенте.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasuryAccount"));
		СведенияОКонтрагенте.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БанкКазначейства"));
		СведенияОКонтрагенте.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БИККазначейства"));
		СведенияОКонтрагенте.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИННКазначейства"));
		СведенияОКонтрагенте.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Казначейство"));
		// Начиная с версии 2.0
		СведенияОКонтрагенте.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЛицевойСчет"));
	Иначе
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	СведенияОКонтрагенте.Вставить("Телефоны",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	СведенияОКонтрагенте.Вставить("АдресБанка",			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.АдресБанка"));
	
	ИмяРеквОрганизации = "Организация";
	ИмяБанкСчета = "БанковскийСчетОрганизации";
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	СведенияООрганизации.Вставить("ОКОНХ", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okonh"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	СведенияООрганизации.Вставить("КодПоОКЭД",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.oked"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияООрганизации.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasuryAccount"));
		СведенияООрганизации.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БанкКазначейства"));
		СведенияООрганизации.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БИККазначейства"));
		СведенияООрганизации.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИННКазначейства"));
		СведенияООрганизации.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Казначейство"));
		// Начиная с версии 2.0
		СведенияООрганизации.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЛицевойСчет"));
	Иначе
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	СведенияООрганизации.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.АдресБанка"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".okpo"));
	СведенияОГрузоотправителе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".oked"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузоотправителе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasuryAccount"));
		СведенияОГрузоотправителе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".БанкКазначейства"));
		СведенияОГрузоотправителе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".БИККазначейства"));
		СведенияОГрузоотправителе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ИННКазначейства"));
		СведенияОГрузоотправителе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузоотправителе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	СведенияОГрузоотправителе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".okpo"));
	СведенияОГрузополучателе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".oked"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузополучателе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasuryAccount"));
		СведенияОГрузополучателе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".БанкКазначейства"));
		СведенияОГрузополучателе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".БИККазначейства"));
		СведенияОГрузополучателе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ИННКазначейства"));
		СведенияОГрузополучателе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузополучателе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	СведенияОГрузополучателе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".АдресБанка"));
	
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru = 'ИНН/КПП продавца:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес:'")+ " "
		+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
		+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес:'")+ " "
		+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
		+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес: --'"));
	КонецЕсли;
	
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru = 'ИНН/КПП покупателя:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалютаКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("ВалютаТекст", ТекстВалюта);
	ДанныеЗаполненияШапки.Вставить("Валюта", ОпределитьВалютуПоКоду(КодВалюты));
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPrice"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.VATTotal"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.priceWithVAT"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЭтоУслуга");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СтавкаАкциза");
	ТЗ.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		ЭтоУслуга = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоУслуга");
		Если ЗначениеЗаполнено(ЭтоУслуга) Тогда
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
		Иначе
			НоваяСтрока.ЭтоУслуга = "";
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.СтавкаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаАкциза");
		НоваяСтрока.СуммаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаАкциза");
		
		//ЕдиницаИзмеренияАкцизногоНалога = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияАкцизногоНалога");
		//Если ЗначениеЗаполнено(ЕдиницаИзмеренияАкцизногоНалога) Тогда
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = ЕдиницаИзмеренияАкцизногоНалога;
		//Иначе
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = "";
		//КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(СуммаНДС),СуммаНДС,0);
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция venkonПолучитьДанныеСчетаФактурыДляПечати40(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", НСтр(" ru = 'Счет-фактура №'") +" "+ НомерДокумента +" "+ НСтр("ru='от';uz='dan'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДанныеЗаполненияШапки.Вставить("НомерАкт", НСтр(" ru = 'АКТ ВЫПОЛНЕННЫХ РАБОТ №'") +" "+ НомерДокумента +" "+ НСтр("ru='от';uz='dan'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	Дата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ТекстОшибки = "";
	ДатаДокумента = ПолучитьДатуИзСтроки(Дата, ТекстОшибки);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ДатаДокумента);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	Дата);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	//Реквизиты доверенности
	НомерДоверенности = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДоверенности");
	Если НомерДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("НомерДоверенности",	НомерДоверенности);
	КонецЕсли;
	ДатаДоверенности  = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДоверенности");
	Если ДатаДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДоверенности",	ДатаДоверенности);
	КонецЕсли;
	ФИОДоверенности   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФИОДоверенности");
	Если ФИОДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ФИОДоверенности",	ФИОДоверенности);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	СведенияОКонтрагенте.Вставить("РегистрационныйКодПлательщикаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.vatCode"));
	//СведенияОКонтрагенте.Вставить("КодПоОКПО",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	//СведенияОКонтрагенте.Вставить("КодПоОКЭД",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.oked"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	//СведенияОКонтрагенте.Вставить("НомерСчета",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	//СведенияОКонтрагенте.Вставить("Банк",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	//СведенияОКонтрагенте.Вставить("БИК",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОКонтрагенте.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasuryAccount"));
		СведенияОКонтрагенте.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БанкКазначейства"));
		СведенияОКонтрагенте.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БИККазначейства"));
		СведенияОКонтрагенте.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИННКазначейства"));
		СведенияОКонтрагенте.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Казначейство"));
		// Начиная с версии 2.0
		СведенияОКонтрагенте.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЛицевойСчет"));
	Иначе
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	//СведенияОКонтрагенте.Вставить("Телефоны",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	//СведенияОКонтрагенте.Вставить("АдресБанка",			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.АдресБанка"));
	
	ИмяРеквОрганизации = "Организация";
	ИмяБанкСчета = "БанковскийСчетОрганизации";
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	СведенияООрганизации.Вставить("РегистрационныйКодПлательщикаНДС", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.vatCode"));
	//СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	//СведенияООрганизации.Вставить("КодПоОКЭД",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.oked"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	//СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	//СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	//СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияООрганизации.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasuryAccount"));
		СведенияООрганизации.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БанкКазначейства"));
		СведенияООрганизации.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БИККазначейства"));
		СведенияООрганизации.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИННКазначейства"));
		СведенияООрганизации.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Казначейство"));
		// Начиная с версии 2.0
		СведенияООрганизации.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЛицевойСчет"));
	Иначе
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	//СведенияООрганизации.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.АдресБанка"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	СведенияОГрузоотправителе.Вставить("РегистрационныйКодПлательщикаНДС",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".vatCode"));
	//СведенияОГрузоотправителе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".oked"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	//СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	//СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	//СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузоотправителе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasuryAccount"));
		СведенияОГрузоотправителе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".БанкКазначейства"));
		СведенияОГрузоотправителе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".БИККазначейства"));
		СведенияОГрузоотправителе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ИННКазначейства"));
		СведенияОГрузоотправителе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузоотправителе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	//СведенияОГрузоотправителе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	СведенияОГрузополучателе.Вставить("РегистрационныйКодПлательщикаНДС",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".vatCode"));
	//СведенияОГрузополучателе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".oked"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	//СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	//СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	//СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузополучателе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasuryAccount"));
		СведенияОГрузополучателе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".БанкКазначейства"));
		СведенияОГрузополучателе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".БИККазначейства"));
		СведенияОГрузополучателе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ИННКазначейства"));
		СведенияОГрузополучателе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузополучателе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	//СведенияОГрузополучателе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru = 'ИНН/КПП продавца:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес:'")+ " "
		+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
		+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес:'")+ " "
		+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
		+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес: --'"));
	КонецЕсли;
	
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru = 'ИНН/КПП покупателя:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалютаКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("ВалютаТекст", ТекстВалюта);
	ДанныеЗаполненияШапки.Вставить("Валюта", ОпределитьВалютуПоКоду(КодВалюты));
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPrice"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.VATTotal"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.priceWithVAT"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЭтоУслуга");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СтавкаАкциза");
	ТЗ.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		ЭтоУслуга = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоУслуга");
		Если ЗначениеЗаполнено(ЭтоУслуга) Тогда
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
		Иначе
			НоваяСтрока.ЭтоУслуга = "";
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		//НоваяСтрока.СтавкаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаАкциза");
		//НоваяСтрока.СуммаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаАкциза");
		
		//ЕдиницаИзмеренияАкцизногоНалога = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияАкцизногоНалога");
		//Если ЗначениеЗаполнено(ЕдиницаИзмеренияАкцизногоНалога) Тогда
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = ЕдиницаИзмеренияАкцизногоНалога;
		//Иначе
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = "";
		//КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(СуммаНДС),СуммаНДС,0);
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция venkonПолучитьДанныеДверенностиДляПечати70(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДоверенности");
	
	ДанныеЗаполненияШапки.Вставить("НомерДоверенности", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	ДанныеЗаполненияШапки.Вставить("ДатаОт", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДоверенности"));
	ДанныеЗаполненияШапки.Вставить("ДатаДо", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДо"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеПотребителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	ДанныеЗаполненияШапки.Вставить("Адрес", venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	ДанныеЗаполненияШапки.Вставить("ИНН", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	ДанныеЗаполненияШапки.Вставить("НомерСчета", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount")); //
	ДанныеЗаполненияШапки.Вставить("Должность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Должность"));
	ДанныеЗаполненияШапки.Вставить("ФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФИОДоверенногоЛица"));
	ДанныеЗаполненияШапки.Вставить("СерияИНомерПаспорта", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СерияИНомерПаспорта"));
	ДанныеЗаполненияШапки.Вставить("КемВыдан", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КемВыдан"));
	ДанныеЗаполненияШапки.Вставить("ДатаВыдачи", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаВыдачи"));
	ДанныеЗаполненияШапки.Вставить("НаПолучениеОт", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование")); //
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НаименованиеТовара");
	ТЗ.Колонки.Добавить("ЕдИзм");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.НаименованиеТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		НоваяСтрока.ЕдИзм = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ОпределитьВалютуПоКоду(Код)
	
	Валюта = Неопределено; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Валюта = ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЕсли;
	
	Возврат Валюта;
	
	
КонецФункции

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура venkonЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати, ОбластьФорматСтроки)
	
	СчетФактура2014 = Ложь; // Учитывать налог на потребление топлива
	
	Если ДанныеПечати.Свойство("СчетФактура2014") Тогда
		СчетФактура2014 = ДанныеПечати.СчетФактура2014;
	КонецЕсли;
	
	СчетФактураСКодомОКЭД = ДанныеПечати.Шапка.ДатаДокумента >= Дата(2017, 3, 22); // Дата ввода кода ОКЭД - 22 марта 2017г.
	
	ДанныеЗаполненияШапки = ДанныеПечати.Шапка;	
	ВалютаДокумента = Неопределено;
	Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
		ВалютаДокумента = ДанныеЗаполненияШапки.Валюта;
	КонецЕсли;
		
	СведенияОГрузополучателе = ДанныеПечати.Шапка.СведенияОГрузополучателе;
	ОплатаЧерезКазначейство = СведенияОГрузополучателе.ОплатаЧерезКазначейство;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОплатаЧерезКазначействоПК = СведенияОПоставщике.ОплатаЧерезКазначейство;
	
	ПостфиксМакета = "";
	Если ОплатаЧерезКазначействоПК Тогда 
		ПостфиксМакета = "ПК";
	КонецЕсли;

	Если СчетФактураСКодомОКЭД Тогда 
		Если СчетФактура2014 Тогда
			Если ОплатаЧерезКазначейство Тогда
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2017НПТК" + ПостфиксМакета);
			Иначе
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2017НПТ" + ПостфиксМакета);
			КонецЕсли;
		Иначе
			Если ОплатаЧерезКазначейство Тогда
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2017К" + ПостфиксМакета);
			Иначе
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2017" + ПостфиксМакета);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СчетФактура2014 Тогда
			Если ОплатаЧерезКазначейство Тогда
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2014К");
			Иначе
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2014");
			КонецЕсли;
		Иначе
			Если ОплатаЧерезКазначейство Тогда
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура283К");
			Иначе
				Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура283");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбластьФорматСтроки = Макет.ПолучитьОбласть("ФорматСтроки");
	
	// Шапка
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаДокумента.Параметры.Заполнить(ДанныеЗаполненияШапки);
	
	Если ДанныеЗаполненияШапки.Свойство("Номер") Тогда
		ОбластьШапкаДокумента.Параметры.Номер = ДанныеЗаполненияШапки.Номер; 
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.Свойство("НаименованиеДоговора") Тогда
		ОбластьШапкаДокумента.Параметры.ТоварныйДокумент = ДанныеЗаполненияШапки.НаименованиеДоговора; 
	КонецЕсли;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПокупателе = ДанныеПечати.Шапка.СведенияОПокупателе;
	
	Если СведенияОПоставщике.Свойство("Телефоны") Тогда
		ОбластьШапкаДокумента.Параметры.ТелефонПоставщика = СведенияОПоставщике.Телефоны; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("Телефоны") Тогда
		ОбластьШапкаДокумента.Параметры.ТелефонПокупателя = СведенияОПокупателе.Телефоны; 
	КонецЕсли;
	
	Если СведенияОПоставщике.Свойство("НомерСчета") Тогда
		ОбластьШапкаДокумента.Параметры.НомерСчетаПоставщика = СведенияОПоставщике.НомерСчета; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("НомерСчета") Тогда
		ОбластьШапкаДокумента.Параметры.НомерСчетаПокупателя = СведенияОПокупателе.НомерСчета; 
	КонецЕсли;
	
	Если СведенияОПоставщике.Свойство("Банк") Тогда
		ОбластьШапкаДокумента.Параметры.БанкПоставщика = СведенияОПоставщике.Банк; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("Банк") Тогда
		ОбластьШапкаДокумента.Параметры.БанкПокупателя = СведенияОПокупателе.Банк; 
	КонецЕсли;
	
	Если СведенияОПоставщике.Свойство("АдресБанка") Тогда  //
		ОбластьШапкаДокумента.Параметры.АдресБанкаПоставщика = СведенияОПоставщике.АдресБанка; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("АдресБанка") Тогда
		ОбластьШапкаДокумента.Параметры.АдресБанкаПокупателя = СведенияОПокупателе.АдресБанка; 
	КонецЕсли;
	
	Если СведенияОПоставщике.Свойство("БИК") Тогда
		ОбластьШапкаДокумента.Параметры.МФОПоставщика = СведенияОПоставщике.БИК; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("БИК") Тогда
		ОбластьШапкаДокумента.Параметры.МФОПокупателя = СведенияОПокупателе.БИК; 
	КонецЕсли;
	
	Если СведенияОПоставщике.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПоставщика = СведенияОПоставщике.ИНН; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПокупателя = СведенияОПокупателе.ИНН; 
	КонецЕсли;
	
	Если СчетФактураСКодомОКЭД Тогда 
		
		Если СведенияОПоставщике.Свойство("КодПоОКЭД") Тогда //
			ОбластьШапкаДокумента.Параметры.ОКВЭДПоставщика = СведенияОПоставщике.КодПоОКЭД; 
		КонецЕсли;
		Если СведенияОПокупателе.Свойство("КодПоОКЭД") Тогда
			ОбластьШапкаДокумента.Параметры.ОКВЭДПокупателя = СведенияОПокупателе.КодПоОКЭД; 
		КонецЕсли;
		
	Иначе
		
		Если СведенияОПоставщике.Свойство("КодПоОКЭД") Тогда //
			ОбластьШапкаДокумента.Параметры.ОКОНХПоставщика = СведенияОПоставщике.ОКОНХ; 
		КонецЕсли;
		Если СведенияОПокупателе.Свойство("КодПоОКЭД") Тогда
			ОбластьШапкаДокумента.Параметры.ОКОНХПокупателя = СведенияОПокупателе.ОКОНХ; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОплатаЧерезКазначейство Тогда
		Если СведенияОПокупателе.Свойство("БанкКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.БанкКазначейства = СведенияОПокупателе.БанкКазначейства; 
		КонецЕсли;
		
		Если СведенияОПокупателе.Свойство("БИККазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.БИККазначейства = СведенияОПокупателе.БИККазначейства; 
		КонецЕсли;
		
		Если СведенияОПокупателе.Свойство("ИННКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.ИННКазначейства = СведенияОПокупателе.ИННКазначейства; 
		КонецЕсли;
		
		Если СведенияОПокупателе.Свойство("ИННКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.ИННКазначейства = СведенияОПокупателе.ИННКазначейства; 
		КонецЕсли;
		
		Если СведенияОПокупателе.Свойство("Казначейство") Тогда
			ОбластьШапкаДокумента.Параметры.Казначейство = СведенияОПокупателе.Казначейство; 
		КонецЕсли;
		
		Если СведенияОПокупателе.Свойство("ЛицевойСчет") Тогда
			ОбластьШапкаДокумента.Параметры.ЛицевойСчет	 = СведенияОПокупателе.ЛицевойСчет; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОплатаЧерезКазначействоПК Тогда
		
		СтруктураКазначейства = Новый Структура();
		Если СведенияОПоставщике.Свойство("ИННКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.ИННКазначействаПоставщика = СведенияОПоставщике.ИННКазначейства; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("Казначейство") Тогда
			ОбластьШапкаДокумента.Параметры.КазначействоПоставщика = СведенияОПоставщике.Казначейство; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("ЛицевойСчет") Тогда
			ОбластьШапкаДокумента.Параметры.ЛицевойСчетПоставщика = СведенияОПоставщике.ЛицевойСчет; 
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	
	// Выводим заголовок таблицы.
	//ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ОсновныеДанныеТаблицы");
	//ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	НДС0 = Ложь;
	НомерСтроки = 1;
	
	УстанавливатьКолонкуВсего = (Товары.Итог("СуммаАкциза")+Товары.Итог("СуммаНДС") > 0);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 
		ОбластьСтрока.Параметры.ТоварНаименование = СтрокаТовары.ТоварНаименование;
		Если СтрокаТовары.ЭтоУслуга = "" ИЛИ СтрокаТовары.ЭтоУслуга = "1" Тогда
			Если ВалютаДокумента <> Неопределено Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = ВалютаДокумента.Наименование;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "";
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
		КонецЕсли;
		ОбластьСтрока.Параметры.Количество = ?(СтрокаТовары.Количество = 0, "", СтрокаТовары.Количество); 
		ОбластьСтрока.Параметры.Цена = СтрокаТовары.Цена; 
		ОбластьСтрока.Параметры.Стоимость = СтрокаТовары.СуммаБезНДС; 
		
		ЕдиницаИзмеренияАкцизногоНалога = СтрокаТовары.ЕдиницаИзмеренияАкцизногоНалога;
		
		СтавкаАкциза = СтрокаТовары.СтавкаАкциза;
		СуммаАкциза  = СтрокаТовары.СуммаАкциза;
		
		ЗнакАкциза = "%";
		
		ОбластьСтрока.Параметры.СтавкаАкциз	= ?(СуммаАкциза = 0, "Без", ""+СтавкаАкциза + ЗнакАкциза);
		ОбластьСтрока.Параметры.Акциз		= ?(СуммаАкциза = 0, "акциза", СуммаАкциза);
		
		// Начиная с версии 2.0
		Если СтрокаТовары.СтавкаНДС = "Без НДС" ИЛИ СтрокаТовары.СтавкаНДС = "без НДС" Тогда
			ОбластьСтрока.Параметры.СтавкаНДС = "Без";
			ОбластьСтрока.Параметры.СуммаНДС = "НДС";
		Иначе
			ОбластьСтрока.Параметры.СтавкаНДС  = СтрокаТовары.СтавкаНДС;
			ОбластьСтрока.Параметры.СуммаНДС = СтрокаТовары.СуммаНДС;
			УстанавливатьКолонкуВсего = Истина;
			Если СтрокаТовары.СтавкаНДС  = "0%" И НЕ НДС0 Тогда
				НДС0 = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если УстанавливатьКолонкуВсего Тогда
			ОбластьСтрока.Параметры.Всего = СтрокаТовары.СуммаСНДС;
		Иначе
			ОбластьСтрока.Параметры.Всего      = 0;			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ИтогоСуммаНДС = Товары.Итог("СуммаНДС");
	ОбластьИтого.Параметры.ИтогоСуммаНДС 	= ИтогоСуммаНДС;
	ОбластьИтого.Параметры.ИтогоСтоимость   = Товары.Итог("СуммаБезНДС");
	ИтогоСуммаАкциза = Товары.Итог("СуммаАкциза");
	ОбластьИтого.Параметры.ИтогоСуммаАкциза = ИтогоСуммаАкциза;
	Если УстанавливатьКолонкуВсего Тогда
		ОбластьИтого.Параметры.ИтогоВсего = Товары.Итог("СуммаСНДС");
	КонецЕсли;
	ОбластьИтого.Параметры.НадписьИтого     = НСтр("ru='Итого'");	
	//ОбластьИтого.Параметры.НадписьИтого = НСтр("ru='Итого'")+?(ВалютаДокумента=мВалютаРегламентированногоУчета,":"," ("+ВалютаДокумента+")");
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьИтогоПрописью = Макет.ПолучитьОбласть("ИтогоПрописью");
	ФорматСтрока  = "ДП=Ложь";
	Если ВалютаДокумента <> Неопределено Тогда
		ПарамПредмета = ВалютаДокумента.ПараметрыпрописиНаРусском;
		ОплатаПропись = ЧислоПрописью(Товары.Итог("СуммаСНДС"), ФорматСтрока, ПарамПредмета);
		Если ИтогоСуммаНДС <> 0 Тогда
			ОплатаПропись = ОплатаПропись + НСтр("ru=', в т.ч. НДС: ';uz=', шу ж. ҚҚС:'") + Формат(ИтогоСуммаНДС,"ЧДЦ=2");
			Если ИтогоСуммаАкциза <> 0 Тогда
				ОплатаПропись = ОплатаПропись + НСтр("ru=' и Акцизный налог: '")+Формат(ИтогоСуммаАкциза, "ЧДЦ=2");
			КонецЕсли;
		Иначе
			Если ИтогоСуммаАкциза <> 0 Тогда
				ОплатаПропись = ОплатаПропись + НСтр("ru=', в т.ч Акцизный налог: ';uz=', шу ж. Акциз:'")+Формат(ИтогоСуммаАкциза, "ЧДЦ=2");
			КонецЕсли;
			Если НДС0 Тогда 
				ОплатаПропись = ОплатаПропись + НСтр("ru='. НДС (0%): 0,00';uz='. ҚҚС (0%): 0,00'");
			Иначе
				ОплатаПропись = ОплатаПропись + НСтр("ru='. Без НДС';uz='. ҚҚС сиз'");
			КонецЕсли;
		КонецЕсли;
		Если СчетФактура2014 Тогда
			ОплатаПропись = ОплатаПропись + Нстр("ru = '. Без налога на потребление бензина, дизельного топлива и газа для транспортных средств.'; uz = '. Транспорт воситалари учун дизель, бензин ва газ истемол солиғи ҳисобисиз.'");
		КонецЕсли;
	КонецЕсли;
	
	
	ОбластьИтогоПрописью.Параметры.ОплатаПропись = ОплатаПропись;
	ОбластьИтогоПрописью.Параметры.НадписьИтого = НСтр("ru='Всего к оплате:';uz='Жами тўланади:'");
	ТабличныйДокумент.Вывести(ОбластьИтогоПрописью);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	//РеквизитыДоверенности
	ДоверенностьДатаНомер = "";
	Если ДанныеПечати.Шапка.Свойство("НомерДоверенности") Тогда	
		ДоверенностьДатаНомер = "№ " + ДанныеПечати.Шапка.НомерДоверенности + " "; 
	КонецЕсли;
	Если ДанныеПечати.Шапка.Свойство("ДатаДоверенности") Тогда	
		ДоверенностьДатаНомер = ДоверенностьДатаНомер + "от " + ДанныеПечати.Шапка.ДатаДоверенности; 
	КонецЕсли;
	
	ДоверенностьЧерезКого = "";
	Если ДанныеПечати.Шапка.Свойство("ФИОДоверенности") Тогда	
		ДоверенностьЧерезКого = ДанныеПечати.Шапка.ФИОДоверенности; 
	КонецЕсли;
	
	РеквизитыДоверенности = Новый Структура("ДоверенностьДатаНомер, ДоверенностьЧерезКого", ДоверенностьДатаНомер, ДоверенностьЧерезКого);
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, РеквизитыДоверенности); 
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	//ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура venkonЗаполнитьТабличныйДокументСчетФактура_ЭДВерсия40(ТабличныйДокумент, ДанныеПечати, ОбластьФорматСтроки)
	
	ДанныеЗаполненияШапки = ДанныеПечати.Шапка;	
	ВалютаДокумента = Неопределено;
	Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
		ВалютаДокумента = ДанныеЗаполненияШапки.Валюта;
	КонецЕсли;
		
	СведенияОГрузополучателе = ДанныеПечати.Шапка.СведенияОГрузополучателе;
	ОплатаЧерезКазначейство = СведенияОГрузополучателе.ОплатаЧерезКазначейство;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОплатаЧерезКазначействоПК = СведенияОПоставщике.ОплатаЧерезКазначейство;
	
	ПостфиксМакета = "";
	Если ОплатаЧерезКазначействоПК Тогда 
		ПостфиксМакета = "ПК";
	КонецЕсли;

	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактура2019"); //

	// Шапка
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаДокумента.Параметры.Заполнить(ДанныеЗаполненияШапки);
	
	Если ДанныеЗаполненияШапки.Свойство("Номер") Тогда
		ОбластьШапкаДокумента.Параметры.Номер = ДанныеЗаполненияШапки.Номер; 
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.Свойство("НаименованиеДоговора") Тогда
		ОбластьШапкаДокумента.Параметры.ТоварныйДокумент = ДанныеЗаполненияШапки.НаименованиеДоговора; 
	КонецЕсли;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПокупателе = ДанныеПечати.Шапка.СведенияОПокупателе;
	
	Если СведенияОПоставщике.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПоставщика = СведенияОПоставщике.ИНН; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПокупателя = СведенияОПокупателе.ИНН; 
	КонецЕсли;
	
	//
	Если СведенияОПоставщике.Свойство("РегистрационныйКодПлательщикаНДС") Тогда
		ОбластьШапкаДокумента.Параметры.РегистрационныйКодПлательщикаНДСПоставщика = СведенияОПоставщике.РегистрационныйКодПлательщикаНДС; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("РегистрационныйКодПлательщикаНДС") Тогда
		ОбластьШапкаДокумента.Параметры.РегистрационныйКодПлательщикаНДСПокупателя = СведенияОПокупателе.РегистрационныйКодПлательщикаНДС; 
	КонецЕсли;
	//
	
	Если ОплатаЧерезКазначействоПК Тогда
		
		СтруктураКазначейства = Новый Структура();
		Если СведенияОПоставщике.Свойство("ИННКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.ИННКазначействаПоставщика = СведенияОПоставщике.ИННКазначейства; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("Казначейство") Тогда
			ОбластьШапкаДокумента.Параметры.КазначействоПоставщика = СведенияОПоставщике.Казначейство; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("ЛицевойСчет") Тогда
			ОбластьШапкаДокумента.Параметры.ЛицевойСчетПоставщика = СведенияОПоставщике.ЛицевойСчет; 
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	НДС0 = Ложь;
	НомерСтроки = 1;
	
	УстанавливатьКолонкуВсего = (Товары.Итог("СуммаАкциза")+Товары.Итог("СуммаНДС") > 0);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 
		ОбластьСтрока.Параметры.ТоварНаименование = СтрокаТовары.ТоварНаименование;
		Если СтрокаТовары.ЭтоУслуга = "" ИЛИ СтрокаТовары.ЭтоУслуга = "1" Тогда
			Если ВалютаДокумента <> Неопределено Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = ВалютаДокумента.Наименование;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "";
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
		КонецЕсли;
		ОбластьСтрока.Параметры.Количество = ?(СтрокаТовары.Количество = 0, "", СтрокаТовары.Количество); 
		ОбластьСтрока.Параметры.Цена = СтрокаТовары.Цена; 
		ОбластьСтрока.Параметры.Стоимость = СтрокаТовары.СуммаБезНДС; 
		
		ЕдиницаИзмеренияАкцизногоНалога = СтрокаТовары.ЕдиницаИзмеренияАкцизногоНалога;
		
		СтавкаАкциза = СтрокаТовары.СтавкаАкциза;
		СуммаАкциза  = СтрокаТовары.СуммаАкциза;
		
		// Начиная с версии 2.0
		Если СтрокаТовары.СтавкаНДС = "Без НДС" ИЛИ СтрокаТовары.СтавкаНДС = "без НДС" Тогда
			ОбластьСтрока.Параметры.СтавкаНДС = "Без";
			ОбластьСтрока.Параметры.СуммаНДС = "НДС";
		Иначе
			ОбластьСтрока.Параметры.СтавкаНДС  = СтрокаТовары.СтавкаНДС;
			ОбластьСтрока.Параметры.СуммаНДС = СтрокаТовары.СуммаНДС;
			УстанавливатьКолонкуВсего = Истина;
			Если СтрокаТовары.СтавкаНДС  = "0%" И НЕ НДС0 Тогда
				НДС0 = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если УстанавливатьКолонкуВсего Тогда
			ОбластьСтрока.Параметры.Всего = СтрокаТовары.СуммаСНДС;
		Иначе
			ОбластьСтрока.Параметры.Всего      = 0;			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ИтогоСуммаНДС = Товары.Итог("СуммаНДС");
	ОбластьИтого.Параметры.ИтогоСуммаНДС 	= ИтогоСуммаНДС;
	ОбластьИтого.Параметры.ИтогоСтоимость   = Товары.Итог("СуммаБезНДС");
	Если УстанавливатьКолонкуВсего Тогда
		ОбластьИтого.Параметры.ИтогоВсего = Товары.Итог("СуммаСНДС");
	КонецЕсли;
	ОбластьИтого.Параметры.НадписьИтого     = НСтр("ru='Итого';uz='Jami'");	
	//ОбластьИтого.Параметры.НадписьИтого = НСтр("ru='Итого';uz='Jami'")+?(ВалютаДокумента=мВалютаРегламентированногоУчета,":"," ("+ВалютаДокумента+")");
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьИтогоПрописью = Макет.ПолучитьОбласть("ИтогоПрописью");
	ФорматСтрока  = "ДП=Ложь";
	Если ВалютаДокумента <> Неопределено Тогда
		ПарамПредмета = ВалютаДокумента.ПараметрыпрописиНаРусском;
		ОплатаПропись = ЧислоПрописью(Товары.Итог("СуммаСНДС"), ФорматСтрока, ПарамПредмета);
		Если ИтогоСуммаНДС <> 0 Тогда
			ОплатаПропись = ОплатаПропись + НСтр("ru=', в т.ч. НДС: ';uz=', шу ж. ҚҚС:'") + Формат(ИтогоСуммаНДС,"ЧДЦ=2");
		Иначе
			Если НДС0 Тогда 
				ОплатаПропись = ОплатаПропись + НСтр("ru='. НДС (0%): 0,00';uz='. ҚҚС (0%): 0,00'");
			Иначе
				ОплатаПропись = ОплатаПропись + НСтр("ru='. Без НДС';uz='. ҚҚС сиз'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьИтогоПрописью.Параметры.ОплатаПропись = ОплатаПропись;
	ОбластьИтогоПрописью.Параметры.НадписьИтого = НСтр("ru='Всего к оплате:';uz='Жами тўланади:'");
	ТабличныйДокумент.Вывести(ОбластьИтогоПрописью);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	//РеквизитыДоверенности
	ДоверенностьДатаНомер = "";
	Если ДанныеПечати.Шапка.Свойство("НомерДоверенности") Тогда	
		ДоверенностьДатаНомер = "№ " + ДанныеПечати.Шапка.НомерДоверенности + " "; 
	КонецЕсли;
	Если ДанныеПечати.Шапка.Свойство("ДатаДоверенности") Тогда	
		ДоверенностьДатаНомер = ДоверенностьДатаНомер + "от " + ДанныеПечати.Шапка.ДатаДоверенности; 
	КонецЕсли;
	
	ДоверенностьЧерезКого = "";
	Если ДанныеПечати.Шапка.Свойство("ФИОДоверенности") Тогда	
		ДоверенностьЧерезКого = ДанныеПечати.Шапка.ФИОДоверенности; 
	КонецЕсли;
	
	РеквизитыДоверенности = Новый Структура("ДоверенностьДатаНомер, ДоверенностьЧерезКого", ДоверенностьДатаНомер, ДоверенностьЧерезКого);
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, РеквизитыДоверенности); 
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	//ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполняет табличный документ "Доверенность".
//
Процедура venkonЗаполнитьТабличныйДокументДоверенность_ЭДВерсия70(ТабличныйДокумент, ДанныеПечати)
	
	ДанныеЗаполненияШапки = ДанныеПечати.Шапка;	
	ВалютаДокумента = Неопределено;
		
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("Доверенность");

	// Шапка
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаДокумента.Параметры.Заполнить(ДанныеЗаполненияШапки);
	
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	НомерСтроки = 1;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 
		ОбластьСтрока.Параметры.НаименованиеТовара = СтрокаТовары.НаименованиеТовара;
		ОбластьСтрока.Параметры.ЕдИзм = СтрокаТовары.ЕдИзм;
		ОбластьСтрока.Параметры.Количество = СтрокаТовары.Количество;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// Процедура выводит "Акт выполненных работ" в табличный документ
//
Процедура venkonЗаполнитьТабличныйДокументАктВыполненныхРабот(ТабличныйДокумент, ДанныеПечати, ОбластьФорматСтроки)
	
	СчетФактура2014 = Ложь;
	
	Если ДанныеПечати.Свойство("СчетФактура2014") Тогда
		СчетФактура2014 = ДанныеПечати.СчетФактура2014;
	КонецЕсли;
	
	Если СчетФактура2014 Тогда 
		МакетАктаВыполненныхРаботы = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("АктВыполненныхРаботНПТ");
	Иначе
		МакетАктаВыполненныхРаботы = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("АктВыполненныхРабот");
	КонецЕсли;
	ШапкаАкта = МакетАктаВыполненныхРаботы.ПолучитьОбласть("ШапкаАкт");
	ДанныеЗаполненияШапки = ДанныеПечати.Шапка;
	
	ВалютаДокумента = Неопределено;
	СтруктураКурсов = Неопределено;
	мВалютаРегламентированногоУчета = Неопределено;
	Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
		ВалютаДокумента = ДанныеЗаполненияШапки.Валюта;
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			Если ТипЗнч(ДанныеЗаполненияШапки.ДатаДокумента) = Тип("Дата") Тогда
				СтруктураКурсов = ПолучитьКурсВалюты(ВалютаДокумента, ДанныеЗаполненияШапки.ДатаДокумента);
			Иначе
				СтруктураКурсов = ПолучитьКурсВалюты(ВалютаДокумента, Дата(1, 1, 1));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ШапкаАкта.Параметры.Заполнить(ДанныеЗаполненияШапки);
	ШапкаАкта.Параметры.НомерАкт = ДанныеЗаполненияШапки.НомерАкт;
	ШапкаАкта.Параметры.НаименованиеДоговора = ДанныеЗаполненияШапки.НаименованиеДоговора;
	
	ШапкаАкта.Параметры.ПредставлениеПоставщика       = ДанныеЗаполненияШапки.ПредставлениеПоставщика;
	ШапкаАкта.Параметры.ПредставлениеПокупателя       = ДанныеЗаполненияШапки.ПредставлениеПокупателя;
	ШапкаАкта.Параметры.ДатаДокумента = ДанныеЗаполненияШапки.ДатаДокумента;
	ТабличныйДокумент.Вывести(ШапкаАкта);
	
	//Формируем строку услуг
	Товары = ДанныеПечати.Товары;
	ПереченьУслуг = "";
	СуммаИтого = 0;
	НомерСтроки = 0;
	Для Каждого Строка Из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаАкта = МакетАктаВыполненныхРаботы.ПолучитьОбласть("СтрокаАкт");
		СтрокаАкта.Параметры.ТоварНаименование = Строка.ТоварНаименование;
		СтрокаАкта.Параметры.СуммаСНДС = Формат(Строка.СуммаСНДС, "") + ?(ВалютаДокумента <> Неопределено, " " + ВалютаДокумента.Наименование, "");
		СтрокаАкта.Параметры.НомерСтроки = НомерСтроки;
		
		ТабличныйДокумент.Вывести(СтрокаАкта);
		
	КонецЦикла; 
	
	ПодвалАкта = МакетАктаВыполненныхРаботы.ПолучитьОбласть("ПодвалАкт");
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = ?(ВалютаДокумента <> Неопределено, ВалютаДокумента.ПараметрыПрописиНаРусском, "");
	СуммаИтого = Товары.Итог("СуммаСНДС");
	СуммаНДСИтого = Товары.Итог("СуммаНДС");
	ИтоговаяСуммаАкта = Формат(СуммаИтого, "ЧДЦ=2") + " (" + ЧислоПрописью(СуммаИтого, ФорматСтрока, ПарамПредмета) + ")";
	Если СуммаНДСИтого = 0 Тогда 
		ИтоговаяСуммаАкта = ИтоговаяСуммаАкта + НСтр("ru='. Без НДС.';uz='. ҚҚС сиз'");
	Иначе
		Если ВалютаДокумента <> Неопределено Тогда
			Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				ИтоговаяСуммаАкта = ИтоговаяСуммаАкта + НСтр("ru=', в т.ч. НДС: ';uz=', шу ж. ҚҚС:'") + Формат(ПересчитатьИзВалютыВВалюту(СуммаНДСИтого, ВалютаДокумента, мВалютаРегламентированногоУчета, СтруктураКурсов.Курс,1, СтруктураКурсов.Кратность, 1),"ЧДЦ=2");
			Иначе
				ИтоговаяСуммаАкта = ИтоговаяСуммаАкта + НСтр("ru=', в т.ч. НДС: ';uz=', шу ж. ҚҚС:'") + Формат(СуммаНДСИтого,"ЧДЦ=2");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПодвалАкта.Параметры.ИтоговаяСуммаАкта = ИтоговаяСуммаАкта;
	ПодвалАкта.Параметры.ЭквивалентнаяСуммаАкта = "";
	Если ВалютаДокумента <> Неопределено Тогда
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ЭквивалентнаяСумма = ПересчитатьИзВалютыВВалюту(СуммаИтого, ВалютаДокумента, мВалютаРегламентированногоУчета, СтруктураКурсов.Курс, 1, СтруктураКурсов.Кратность, 1);
			ПарамПредмета = мВалютаРегламентированногоУчета.ПараметрыПрописиНаРусском;
			ПодвалАкта.Параметры.ЭквивалентнаяСуммаАкта = "В эквиваленте: "+Формат(ЭквивалентнаяСумма, "ЧДЦ=2")+
			" (" + ЧислоПрописью(ЭквивалентнаяСумма, ФорматСтрока, ПарамПредмета)+")";
		КонецЕсли;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ПодвалАкта);
	
КонецПроцедуры

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Типы объектов

// Получает имя владельца справочника НоменклатураПоставщика.
//
// Возвращаемое значение:
//  ИмяСправочника - строковое имя владельца.
//
Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков()
	
	ИмяРеквизитаВладельца = Неопределено;
	ЭлектронныеДокументыПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца);
	
	Если ИмяРеквизитаВладельца = Неопределено Тогда // не задано соответствие
		ТекстСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать имя реквизита для владельца номенклатуры поставщиков.'");
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			2, УровеньЖурналаРегистрации.Предупреждение);
		ИмяРеквизитаВладельца = "";
	КонецЕсли;
	
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Определяет, является ли параметр ссылкой на номенклатуру
//
// Параметры:
//  СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков
//
Функция ЭтоНоменклатура(СсылкаНаОбъект)
	
	Результат = Ложь;
	
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("Номенклатура"));
	Если НЕ Результат И ОпределитьТипОбъекта("НоменклатураПоставщиков") <> Неопределено Тогда
		Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("НоменклатураПоставщиков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - строка, текстовое представление типа объекта.
//
Функция ОпределитьТипОбъекта(ОписаниеТипаОбъекта)
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

//<Raxx

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
Функция venkonВернутьМассивДвоичныхДанныхПакета(ПакетЭД = Неопределено, ВключаяПодписи = Истина, ФайлАрхива = Неопределено, УдалитьФайлы = Истина) Экспорт
	
	СтруктураВозврата = Новый Структура; 
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФайлАрхива = Неопределено Тогда
		
		ФайлАрхива = "";
		
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", ПакетЭД.Ссылка.УникальныйИдентификатор());
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Если УдалитьФайлы Тогда
					УдалитьФайлы(ПапкаДляРаспаковки);
				КонецЕсли;
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			
			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			СтруктураВозврата.Вставить("ФайлАрхива", ДвоичныеДанныеФайла);
			
		Исключение
			
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
			
			Возврат СтруктураВозврата;
			
		КонецПопытки;
		
	Иначе
		
		СтруктураВозврата.Вставить("ФайлАрхива", Новый ДвоичныеДанные(ФайлАрхива));
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext");
		
	КонецЕсли;
	
	Попытка
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		Если УдалитьФайлы Тогда
			УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		КонецЕсли;
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
			Если УдалитьФайлы Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ФайлАрхива);
			КонецЕсли;
			Возврат СтруктураВозврата;
		КонецПопытки;
		
		ЗИПЧтение.Закрыть();
		Если УдалитьФайлы Тогда
			УдалитьФайлы(ФайлАрхива);
		КонецЕсли;

		// получение исходного файла
		МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, "*.xml", Истина);
		ДвоичныеДанныеДокумента = Неопределено; 
		ФайлДанных = Неопределено;
		Для каждого ФайлИсточник Из МассивФайловИсточник Цикл
			Если ФайлИсточник.ИмяБезРасширения <> "packageDescription" Тогда
				ФайлДанных = ФайлИсточник;
				ДвоичныеДанныеДокумента = Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивДанныхПодписей = Новый Массив; 
		
		Если ВключаяПодписи Тогда
			МассивФайловПодписей = НайтиФайлы(ПапкаДляРаспаковки, ФайлДанных.ИмяБезРасширения + "*.p7s", Истина);
			Для Каждого ФайлПодписи Из МассивФайловПодписей Цикл
				ДанныеПодписи = venkonСтруктураДанныхПодписи(ДвоичныеДанныеДокумента, ФайлПодписи);
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
			КонецЦикла;
		КонецЕсли;
				
		ФайлДанныхСтруктура = Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение");
		ЗаполнитьЗначенияСвойств(ФайлДанныхСтруктура , ФайлДанных);
		
		СтруктураВозврата.Вставить("ФайлДанных", ФайлДанныхСтруктура);
		СтруктураВозврата.Вставить("МассивДанныхПодписей", МассивДанныхПодписей);
		СтруктураВозврата.Вставить("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента);
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
		ТекстОшибки,
		ТекстСообщения);
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция venkonПолучитьСтрокуПодписи(ФайлПодписи) Экспорт
	
	ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлПодписи.ПолноеИмя);
	ЧтениеТекста = Новый ЧтениеТекста(ФайлПодписи.ПолноеИмя);
	СтрокаПодписи = ЧтениеТекста.Прочитать();
	Возврат СтрокаПодписи;
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, Имя, Значение)

	ЗаголовокЗапроса = ЗаголовокЗапроса + Имя + ": "+ Значение + Символы.ВК + Символы.ПС;

КонецПроцедуры

Функция ПреобразоватьТекстСтатуса(КодСтатуса)
	
	Если КодСтатуса = "Incoming" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие; //"Входящий запрос";
	ИначеЕсли КодСтатуса = "Rejected" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен; //"Отсоединен"
	ИначеЕсли КодСтатуса = "Accepted" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен; //"Присоединен"
	ИначеЕсли КодСтатуса = "Sent" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия; //"Ожидаем согласия"
	ИначеЕсли КодСтатуса = "Error" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка; // "Ошибка"
	
	ИначеЕсли КодСтатуса = "InvalidINN" Тогда
		ВозвращаемоеЗначение = "Неправильный ИНН";
	ИначеЕсли КодСтатуса = "InvalidEmail" Тогда
		ВозвращаемоеЗначение = "Неправильный адрес электронной почты";
	Иначе
		ВозвращаемоеЗначение = КодСтатуса;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьКодРегламента(ЭлектронныйДокумент)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, ВидЭД, ЭлектронныйДокументВладелец");
	
	// Изменим код регламента при использовании версии регламента 20.
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент)
		И ЗначениеЗаполнено(ПараметрыЭД.ЭлектронныйДокументВладелец) Тогда
		КодРегламента = ПолучитьКодРегламента(ПараметрыЭД.ЭлектронныйДокументВладелец);
	ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
		КодРегламента = "Invoice";
	ИначеЕсли ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
			КодРегламента = "Formalized";
	Иначе
		КодРегламента = "Nonformalized";
	КонецЕсли;
	
	Возврат КодРегламента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

//<Raxx
Функция venkonРазобратьТекстСпискаЭД(СписокЭД_JSON, ТЗ)
	
	// Парсим JSON-строку
	СписокЭД = ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(СписокЭД_JSON, Истина);
	
	Если СписокЭД = Неопределено Тогда
		// Обработать исключение
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДДокументооборота");
	ТЗ.Колонки.Добавить("КодТранзакции");
	ТЗ.Колонки.Добавить("ИДДокумента");
	ТЗ.Колонки.Добавить("ДатаОбновления");
	ТЗ.Колонки.Добавить("timestamp");
	ТЗ.Колонки.Добавить("status");
	ТЗ.Колонки.Добавить("Приоритет");
	
	ДатаВремяЗапроса   = Неопределено;
	ИДДокументооборота = Неопределено;
	КодТранзакции      = Неопределено;
	Для каждого ЭД Из СписокЭД Цикл
		СтрТЗ = ТЗ.Добавить();
		// Получаем timestamp
		ДатаВремяЗапроса = "0";
		СтрТЗ.ИДДокументооборота = ЭД.Получить("id");
	    СтрТЗ.КодТранзакции = "";
		СтрТЗ.ИДДокумента = ЭД.Получить("id");
		СтрТЗ.ДатаОбновления = ПолучитьДатуВремяИзСтроки(ЭД.Получить("updated"));
		СтрТЗ.timestamp = ЭД.Получить("updated");
		СтрТЗ.status = ЭД.Получить("status");
	    СтрТЗ.Приоритет = 0;
	КонецЦикла;
	
	ТЗ.Сортировать("ДатаОбновления Возр");
	СтрТЗ = ТЗ[ТЗ.Количество()-1];
	
	Возврат СтрТЗ.ДатаОбновления;
	
КонецФункции

//Raxx>

Функция ПакетЭДУжеЗагружен(ИДДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	//|	И ПакетЭД.Направление = &Направление
	|	И НЕ ПакетЭД.ПометкаУдаления";
	//Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ВнешнийУИД",  ИДДокумента);
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Возврат НЕ РезультатПустой;
	
КонецФункции

//<Raxx

Функция venkonПолучитьДанныеВходящегоЭД(ДвоичныеДанные, ИДДокумента, ПрофильНастроекЭДО = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	ИмяВременногоФайлаЗИП = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("input", КлючУникальности);
	ОшибкаРаспаковки = Ложь;
	
	Попытка
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		ОшибкаРаспаковки = Истина;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
		ТекстОшибки,
		ТекстСообщения);
		ЗипЧтение.Закрыть();
	КонецПопытки;
	
	Если НЕ ОшибкаРаспаковки Тогда
		
		МассФайловЭД  = НайтиФайлы(ПапкаДляРаспаковки, "*.xml", Истина);
		ФайлЭД = Неопределено;
		Для каждого Элемент Из МассФайловЭД Цикл
			Если Элемент.ИмяБезРасширения <> "packageDescription" Тогда
				ФайлЭД = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		ВидЭД = Неопределено;
		Если ФайлЭД <> Неопределено Тогда
			
			СтруктураЗначений = Новый Структура;
			УдалосьПрочитатьЭД = Ложь;
			
			Попытка
				ОбъектXML = Новый ЧтениеXML;
				ОбъектXML.ОткрытьФайл(ФайлЭД.ПолноеИмя); //, , , "UTF-8"
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
				ОбъектXML.Закрыть();
				УдалосьПрочитатьЭД = Истина;
			Исключение
				
				ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлЭД.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
				
			КонецПопытки;
			
			Если УдалосьПрочитатьЭД Тогда
				
				Попытка
					
					Если Не ЭД.Header.Свойства().Получить("senderInn") = Неопределено Тогда
						ИДОтправителя = ЭД.Header.senderInn;
					КонецЕсли;
					
					Если Не ЭД.Header.Свойства().Получить("reciverInn") = Неопределено Тогда
						ИДПолучателя  = ЭД.Header.reciverInn;
					КонецЕсли;
					
					НастройкиСоглашения = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
					
					Если НастройкиСоглашения = Неопределено Тогда
						НастройкиСоглашения = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя);
					КонецЕсли;
					
					Если Не ЭД.Document.Свойства().Получить("docType") = Неопределено Тогда
						docType  = ЭД.Document.docType;
						Если docType = "000" Тогда
							ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
						ИначеЕсли docType = "001" Тогда
							ВидЭД = Перечисления.ВидыЭД.СчетФактура;
						ИначеЕсли docType = "002" Тогда
							ВидЭД = Перечисления.ВидыЭД.СчетФактураБезАкта;
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ФайлЭД.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	
	Если НастройкиСоглашения <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Зашифрован",          Ложь);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", Неопределено);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", НастройкиСоглашения.ВерсияФорматаПакета);
		СтруктураПараметров.Вставить("ВнешнийУИД",          ИДДокумента);
		СтруктураПараметров.Вставить("СтатусПакета",        Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",       Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("ВидЭД",               ВидЭД);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Функция ЭЦПУжеДобавлена(ЭлектронныеЦифровыеПодписи, ДанныеПодписи) Экспорт
	
	Для каждого ЭЦП Из ЭлектронныеЦифровыеПодписи Цикл
		Если ЭЦП.СерийныйНомер = ДанныеПодписи.СерийныйНомер Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

//<Raxx

 //Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
 //
 //Параметры:
 // Маркер                - двоичные данные, маркер, полученный на клиенте;
 // АдресКаталогаОтправки - строка, полный путь к каталогу с передаваемыми файлами;
 // АдресРесурса          - строка, адрес веб-сервиса;
 // ПрофильНастроекЭДО    - СправочникСсылка.ПрофилиНастроекЭДО - профиль настроек ЭДО, по которому происходит отправка;
 //
 //Возвращаемое значение:
 // РезультатОтправки - Число (количество отправленных документов)
 //
Функция venkonОтправитьЭД(ИДДокумента, АдресКаталогаОтправки, ПрофильНастроекЭДО, Контрагент) Экспорт
	
	РезультатОтправки = 0;
	
	Соединение = ПолучитьСоединение();
	
	ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
	Для Каждого Файл Из ФайлыОтправки Цикл
		ПромежуточныйРезультат = ЭлектронноеВзаимодействиеССерверомDidox.venkonПередатьПакетЭД(
		                                            ИДДокумента,
													Файл,
													Соединение,
													ПрофильНастроекЭДО,
													Контрагент); // Raxx
		РезультатОтправки = РезультатОтправки + ПромежуточныйРезультат;
	КонецЦикла;
	
	УдалитьФайлы(АдресКаталогаОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция venkonОтказатьЭД(ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента) Экспорт

	Соединение = ПолучитьСоединение();
	
	// ИНТЕГРАЦИЯ ГНК
	СтруктураРезультата = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьJSONСтрокуСуществующегоДокумента(ПрофильНастроекЭДО, Соединение, ИДДокумента);
	Если СтруктураРезультата.Успешно Тогда
		
		ТЗ_Сертификатов = ПрофильНастроекЭДО.СертификатыПодписейОрганизации.Выгрузить();
		СертификатДляПодписи = ТЗ_Сертификатов[0];
		keyId = ОбработчикиDidoxEImzoСервер.ПолучитьЗагрузитьIDКлюча(СертификатДляПодписи.Сертификат);													
		СтрокаПодписи = ОбработчикиDidoxEImzoСервер.ПодписатьСтроку(СтруктураРезультата.Результат, keyId, СертификатДляПодписи.Сертификат, , Истина);
		Если  СтрокаПодписи = Неопределено Тогда
			СтрокаПодписи = ОбработчикиDidoxEImzoСервер.ПодписатьСтроку(СтруктураРезультата.Результат, keyId, СертификатДляПодписи.Сертификат);
		КонецЕсли;
		Если  СтрокаПодписи <> Неопределено Тогда
			Возврат ЭлектронноеВзаимодействиеССерверомDidox.venkonОтказОтПодписи(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента, СтрокаПодписи);
		Иначе
			Возврат ЭлектронноеВзаимодействиеССерверомDidox.venkonОтказОтПодписи(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
		КонецЕсли;
		
	Иначе
		
		Возврат ЭлектронноеВзаимодействиеССерверомDidox.venkonОтказОтПодписи(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
		
	КонецЕсли;
	
	
	Возврат ЭлектронноеВзаимодействиеССерверомDidox.venkonОтказОтПодписи(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
	
КонецФункции

Функция venkonУдалитьЭД(ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента) Экспорт

	Соединение = ПолучитьСоединение();
	
	Возврат ЭлектронноеВзаимодействиеССерверомDidox.venkonУдалитьЭД(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
	
КонецФункции
//Raxx>


////////////////////////////////////////////////////////////////////////////////
// Получение ЭД

//<Raxx

// Получить новые электронные документы от оператора Venkon ЭДО.
//
// Параметры:
//  СтруктураВозврата - структура с полями: "ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение"
//
Процедура ПолучитьОбновленияЭДVenkonЭДО(СтруктураВозврата) Экспорт
	
	КоличествоНовыхДокументов = 0;
	КоличествоОбновленныхДокументов = 0;
	
	ЭтоПолнаяЗагрузкаОбновлений = ЭлектронныеДокументыСлужебный.ЭтоПолнаяЗагрузкаОбновленийПоИсходящимДокументам();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОЧерезVenkonЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.timestamp КАК ДатаПолученияЭД,
	|	ПрофилиНастроекЭДОЧерезVenkonЭДО.Организация.ИНН КАК ИдентификаторУчастника
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДОЧерезVenkonЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|		ПО (СостоянияОбменовЭДЧерезОператоровЭДО.ПрофильНастроекЭДО = ПрофилиНастроекЭДОЧерезVenkonЭДО.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОЧерезVenkonЭДО.ПометкаУдаления";
	
	ТаблицаДатПолученияЭД = Запрос.Выполнить().Выгрузить();
	
	ИдентификаторыЭДО = Новый Массив; //
	Для Каждого СтрокаТаблицы Из ТаблицаДатПолученияЭД Цикл
		
		ПрофильНастроекЭДО = СтрокаТаблицы.ПрофильНастроекЭДО;
		СтруктураСертификата = Новый Структура;
		
		ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"ИдентификаторОрганизации");
		
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		ПарольКСертификату = Неопределено;
		
		ДатаВремяЗапроса = СтрокаТаблицы.ДатаПолученияЭД;
		СтруктураВозврата.Профили.Добавить(ПрофильНастроекЭДО);
		
		Соединение = ПолучитьСоединение();
		
		СдвигатьДату = Истина;
		ПолученыВсеДокументы = Ложь;
		
		//ДатаВремяЗапроса = Формат(ДатаВремяЗапроса, "ДФ='yyyy-MM-dd HH:mm:ss'");
		ОтветСервера = ЭлектронноеВзаимодействиеССерверомDidox.venkonПолучитьСписокЭД(ПрофильНастроекЭДО, Соединение, ДатаВремяЗапроса);
		СписокЭД_JSON = "";
		Если ОтветСервера = Неопределено Тогда
			Продолжить;
		Иначе
			СписокЭД_JSON = ОтветСервера.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если СписокЭД_JSON = "[]" Тогда
			Продолжить;
		КонецЕсли;
		
		СписокИДДокументов = "";
		//<Raxx
		//ДатаВремяЗапроса   = РазобратьТекстСпискаЭД(СписокЭД_XML, СписокИДДокументов);
		ДатаВремяЗапроса   = venkonРазобратьТекстСпискаЭД(СписокЭД_JSON, СписокИДДокументов);
		//Raxx>
		//УдалитьФайлы(СписокЭД_JSON);
		
		Если СписокИДДокументов.Количество() = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		//<Raxx
		timestamp = "";
		
		//Raxx>
		
		Для Каждого Стр Из СписокИДДокументов Цикл
			
			МассивДобавленныхЭД = Новый Массив;
			
			Если Стр["status"] = 1 Тогда
				// Новый документ созданный на сайте
				Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
					
					ФайлЭД = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьЭД(ПрофильНастроекЭДО, Соединение, Стр.ИДДокумента);
					
					Если ФайлЭД = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураЭД = СоздатьНовыеОбъектыМетаданныхДляЭД(ФайлЭД, ПрофильНастроекЭДО, Стр.ИДДокумента, Перечисления.НаправленияЭД.Исходящий);
					
					Если  СтруктураЭД = Неопределено Тогда
						УдалитьФайлы(ФайлЭД);
						Продолжить;
					КонецЕсли;
					
					
					ПрисоединенныйФайл  = СтруктураЭД.ПрисоединенныйФайл;
					ПакетЭД  = СтруктураЭД.ПакетЭД;
					
					МассивДобавленныхЭД.Добавить(СтруктураЭД);
					
					СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
					СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Истина, ПакетЭД.Ссылка);
					ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка);
					МассивДанныхПодписей = Неопределено;
					Если ДанныеРаспаковки <> Неопределено И ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
						И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
						Для каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
							Для каждого Подпись Из ДанныеПодписи Цикл
								ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ПрисоединенныйФайл, Подпись);
								ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ПрисоединенныйФайл);
							КонецЦикла
						КонецЦикла
					КонецЕсли;
					СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
					СтруктураРаспаковки.Вставить("Статус", Стр["status"]);
					
					СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
					
					УдалитьФайлы(ФайлЭД);
					
					КоличествоНовыхДокументов = КоличествоНовыхДокументов + 1; 
					
				КонецЕсли;
				
				// Добавим информацию о присоединенном файле в документ пакета электронных документов
				Для каждого СтруктураЭД Из МассивДобавленныхЭД Цикл
					ПакетЭДОбъект = СтруктураЭД.ПакетЭД;
					ПрисоединенныйФайл = СтруктураЭД.ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
					НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент.ОбъектВладелец      = ПрисоединенныйФайл.ВладелецФайла;
					ПакетЭДОбъект.Записать();
				КонецЦикла;
				
			ИначеЕсли Стр["status"] = 2 Тогда
				// Новый документ входящий
				Если НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
					
					ФайлЭД = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьЭД(ПрофильНастроекЭДО, Соединение, Стр.ИДДокумента);
					
					Если ФайлЭД = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураЭД = СоздатьНовыеОбъектыМетаданныхДляЭД(ФайлЭД, ПрофильНастроекЭДО, Стр.ИДДокумента, Перечисления.НаправленияЭД.Входящий);
					
					Если  СтруктураЭД = Неопределено Тогда
						УдалитьФайлы(ФайлЭД);
						Продолжить;
					КонецЕсли;
					
					ПрисоединенныйФайл  = СтруктураЭД.ПрисоединенныйФайл;
					ПакетЭД  = СтруктураЭД.ПакетЭД;
					
					МассивДобавленныхЭД.Добавить(СтруктураЭД);
					
					СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
					СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Истина, ПакетЭД.Ссылка);
					ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка);
					МассивДанныхПодписей = Неопределено;
					Если ДанныеРаспаковки <> Неопределено И ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
						И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
						Для каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
							Для каждого Подпись Из ДанныеПодписи Цикл
								ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ПрисоединенныйФайл, Подпись);
								ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ПрисоединенныйФайл);
							КонецЦикла
						КонецЦикла
					КонецЕсли;
					СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
					СтруктураРаспаковки.Вставить("Статус", Стр["status"]);
					
					СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
					
					УдалитьФайлы(ФайлЭД);
					
					КоличествоНовыхДокументов = КоличествоНовыхДокументов + 1; 
					
				КонецЕсли;
				
				// Добавим информацию о присоединенном файле в документ пакета электронных документов
				Для каждого СтруктураЭД Из МассивДобавленныхЭД Цикл
					ПакетЭДОбъект = СтруктураЭД.ПакетЭД;
					ПрисоединенныйФайл = СтруктураЭД.ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
					НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент.ОбъектВладелец      = ПрисоединенныйФайл.ВладелецФайла;
					ПакетЭДОбъект.Записать();
				КонецЦикла;
				
			ИначеЕсли Стр["status"] = 3 Тогда 
				// Документ подписали	
				Если ЭтоПолнаяЗагрузкаОбновлений ИЛИ НЕ ПакетЭДУжеЗагружен(Стр.ИДДокумента) Тогда
					
					ФайлЭД = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьЭД(ПрофильНастроекЭДО, Соединение, Стр.ИДДокумента);
					
					Если ФайлЭД = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
					ПакетЭД = ЭлектронныеДокументыСлужебный.НайтиПакетЭДПоВнешнемуУИДу(Стр.ИДДокумента);
					ПрисоединенныйФайл = ПолучитьПрисоединенныйФайлПакетаЭД(ПакетЭД);
					
					Если ПакетЭД = Неопределено И ПрисоединенныйФайл = Неопределено Тогда
						СтруктураЭД = СоздатьНовыеОбъектыМетаданныхДляЭД(ФайлЭД, ПрофильНастроекЭДО, Стр.ИДДокумента, Перечисления.НаправленияЭД.Исходящий);
						
						Если  СтруктураЭД = Неопределено Тогда
							УдалитьФайлы(ФайлЭД);
							Продолжить;
						КонецЕсли;
						
						ПрисоединенныйФайл  = СтруктураЭД.ПрисоединенныйФайл;
						ПакетЭД  = СтруктураЭД.ПакетЭД;
					КонецЕсли;
					
					Если ПакетЭД <> Неопределено И ПрисоединенныйФайл <> Неопределено Тогда
						
						ИмяФайла = "EDI_" + ПакетЭД.ВнешнийУИД;
						АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
						
						ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
						
						Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
							СвояТранзакцияОткрыта = Истина;
							ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл, ДвоичныеДанныеЭлемента);
							ПрисоединенныйФайлОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
							ПрисоединенныйФайлОбъект.ПутьКФайлу = "";
							ПрисоединенныйФайлОбъект.Наименование = ИмяФайла;
							ПрисоединенныйФайлОбъект.НаименованиеФайла = ИмяФайла;
							ПрисоединенныйФайлОбъект.Расширение = "zip";
						Иначе
							// Добавление в один из томов (где есть свободное место).
							ФайловыеФункцииСлужебный.ДобавитьНаДиск(
							ДвоичныеДанныеЭлемента,
							ПрисоединенныйФайлОбъект.ПутьКФайлу,
							ПрисоединенныйФайлОбъект.Том,
							ТекущаяДатаСеанса(),
							"",
							ИмяФайла,
							"zip",
							ПрисоединенныйФайлОбъект.Размер,
							ПрисоединенныйФайлОбъект.Зашифрован);
						КонецЕсли;
						//ПрисоединенныйФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						ПрисоединенныйФайлОбъект.Записать();
						
						СтруктураЭД = Новый Структура("ПакетЭД, ПрисоединенныйФайл", ПакетЭД, ПрисоединенныйФайл);
						МассивДобавленныхЭД.Добавить(СтруктураЭД);
						
						СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
						СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Истина, ПакетЭД.Ссылка);
						ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка);
						МассивДанныхПодписей = Неопределено;
						Если ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
							И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
							Для каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
								Для каждого Подпись Из ДанныеПодписи Цикл
									ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ПрисоединенныйФайл, Подпись);
									ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ПрисоединенныйФайл);
								КонецЦикла
							КонецЦикла
						КонецЕсли;
						СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
						СтруктураРаспаковки.Вставить("Статус", Стр["status"]);
						
						СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
					Иначе
						СдвигатьДату = Ложь;
					КонецЕсли;
					УдалитьФайлы(ФайлЭД);
					
					КоличествоОбновленныхДокументов = КоличествоОбновленныхДокументов + 1; 
					
					// Добавим информацию о присоединенном файле в документ пакета электронных документов
					Для каждого СтруктураЭД Из МассивДобавленныхЭД Цикл
						ПакетЭДОбъект = СтруктураЭД.ПакетЭД;
						ПрисоединенныйФайл = СтруктураЭД.ПрисоединенныйФайл;
						ПакетЭДОбъект.ЭлектронныеДокументы.Очистить();
						НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
						НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ПрисоединенныйФайл;
						НовыйЭлектронныйДокумент.ОбъектВладелец      = ПрисоединенныйФайл.ВладелецФайла;
						ПакетЭДОбъект.Записать();
					КонецЦикла;
					
				Иначе
					
					// запоминаем только статус					
					ПакетЭД = ЭлектронныеДокументыСлужебный.НайтиПакетЭДПоВнешнемуУИДу(Стр.ИДДокумента, Истина);
					ПрисоединенныйФайл = ПолучитьПрисоединенныйФайлПакетаЭД(ПакетЭД);
					СтруктураЭД = Новый Структура("ПакетЭД, ПрисоединенныйФайл", ПакетЭД, ПрисоединенныйФайл);
					СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
					СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Ложь, ПакетЭД.Ссылка);
					
					// Вкдючаем флаг
					Документы.ПакетЭД.ВключитьПризнакНеобходимостиОбновленияЭД(ПакетЭД.Ссылка);
					
					СтруктураРаспаковки.Вставить("Статус", Стр["status"]);
					СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
					
				КонецЕсли;
				
			ИначеЕсли Стр["status"] = 4 Тогда
				// Отказали	
				ПакетЭД = ЭлектронныеДокументыСлужебный.НайтиПакетЭДПоВнешнемуУИДу(Стр.ИДДокумента, Истина);
				
				Если ПакетЭД = Неопределено Тогда
					
					ФайлЭД = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьЭД(ПрофильНастроекЭДО, Соединение, Стр.ИДДокумента);
					
					Если ФайлЭД = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураЭД = СоздатьНовыеОбъектыМетаданныхДляЭД(ФайлЭД, ПрофильНастроекЭДО, Стр.ИДДокумента, Перечисления.НаправленияЭД.Исходящий);
					
					Если  СтруктураЭД = Неопределено Тогда
						УдалитьФайлы(ФайлЭД);
						Продолжить;
					КонецЕсли;
					
					МассивДобавленныхЭД.Добавить(СтруктураЭД);
					
				Иначе
					
					ПрисоединенныйФайл = ПолучитьПрисоединенныйФайлПакетаЭД(ПакетЭД);
					
					СтруктураЭД = Новый Структура("ПакетЭД, ПрисоединенныйФайл", ПакетЭД, ПрисоединенныйФайл);
					
				КонецЕсли;
				
				ПрисоединенныйФайл  = СтруктураЭД.ПрисоединенныйФайл;
				ПакетЭД  = СтруктураЭД.ПакетЭД;
				
				
				СтруктураВозврата.МассивВозврата.Добавить(ПрисоединенныйФайл);
				
				СтруктураРаспаковки = Новый Структура("Распаковывать, ПакетЭД", Истина, ПакетЭД.Ссылка);
				
				ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка);
				МассивДанныхПодписей = Неопределено;
				Если ДанныеРаспаковки <> Неопределено И ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
					И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
					Для каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
						Для каждого Подпись Из ДанныеПодписи Цикл
							ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ПрисоединенныйФайл, Подпись);
							ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ПрисоединенныйФайл);
						КонецЦикла
					КонецЦикла
				КонецЕсли;
				
				СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
				СтруктураРаспаковки.Вставить("Статус", Стр["status"]);
				СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
				
				
				Если ПакетЭД <> Неопределено Тогда
					СтруктураВозврата.ДанныеПоОтказаннымДокументам.Добавить(ПакетЭД.Ссылка);
				КонецЕсли;
				
				// Добавим информацию о присоединенном файле в документ пакета электронных документов
				Для каждого СтруктураЭД Из МассивДобавленныхЭД Цикл
					ПакетЭДОбъект = СтруктураЭД.ПакетЭД;
					ПрисоединенныйФайл = СтруктураЭД.ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
					НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ПрисоединенныйФайл;
					НовыйЭлектронныйДокумент.ОбъектВладелец      = ПрисоединенныйФайл.ВладелецФайла;
					ПакетЭДОбъект.Записать();
				КонецЦикла;
				
			КонецЕсли;
			timestamp = Стр.timestamp;
			
			КоличествоОбновленныхДокументов = КоличествоОбновленныхДокументов + 1; 
			
		КонецЦикла;
		
		Если СдвигатьДату И ЗначениеЗаполнено(ДатаВремяЗапроса) И СписокИДДокументов.Количество() > 0 Тогда
			Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
			Запись.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
			Запись.Прочитать();
			Если Запись.ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка() Тогда
				Запись.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
			КонецЕсли;
			Запись.ДатаПолученияЭД = ДатаВремяЗапроса;
			Запись.timestamp = timestamp;
			Запись.Записать();
		КонецЕсли;
		
		ИдентификаторыЭДО.Добавить(ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ИдентификаторыЭДО", ИдентификаторыЭДО);
	СтруктураВозврата.Вставить("КоличествоНовыхДокументов", КоличествоНовыхДокументов);
	СтруктураВозврата.Вставить("КоличествоОбновленныхДокументов", КоличествоОбновленныхДокументов);
	
КонецПроцедуры

Функция ПолучитьПрисоединенныйФайлПакетаЭД(ПакетЭД) Экспорт
	
	Если ПакетЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка = &ПакетЭД
	|	И НЕ ПакетЭДЭлектронныеДокументы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПакетЭД", ПакетЭД.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		
		Возврат РезультатЗапроса.ЭлектронныйДокумент;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьПрофильПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления
	|	И ПрофилиНастроекЭДО.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьНовыеОбъектыМетаданныхДляЭД(ФайлЭД, ПрофильНастроекЭДО, ИДДокумента, НаправлениеЭД)
	
	СтруктураЭД = Неопределено; 
	
	ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ФайлЭД);
	
	СтруктураПараметров = venkonПолучитьДанныеВходящегоЭД(ДвоичныеДанныеЭлемента, ИДДокумента, ПрофильНастроекЭДО);
	
	// +aldo
	//Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
	//	Возврат СтруктураЭД;
	//КонецЕсли;
	// -aldo
	
	Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
		
		ПакетЭД = ЭлектронныеДокументыСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
		
		Если ЗначениеЗаполнено(ПакетЭД.Ссылка) Тогда
			ИмяФайла = "EDI_" + ИДДокумента;
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка,
																	ИмяФайла,
																	"zip",
																	ТекущаяДатаСеанса(),
																	ТекущаяДатаСеанса(),
																	АдресВХранилище,
																	,
																	,
																	Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(),
																	НаправлениеЭД);
			
			
			
			СтруктураЭД = Новый Структура("ПакетЭД, ПрисоединенныйФайл, ДвоичныеДанныеЭлемента", ПакетЭД, ПрисоединенныйФайл, ДвоичныеДанныеЭлемента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЭД = Неопределено Тогда
		СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, ПрофильНастроекЭДО, ИДДокумента);
	КонецЕсли;
	
	Возврат СтруктураЭД;
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Работа с деревом

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

// Только для внутреннего использования
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = Нстр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

//<Raxx

Процедура venkonДобавитьСлужебныеПоля(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсПрог", "1С:Предприятие 8");
	
	Если СтруктураЭД.Свойство("ВерсияФормата") Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ВерсФорм", СтруктураЭД.ВерсияФормата);
	Иначе
		ВставитьЗначениеВДерево(ДеревоДанных, "ВерсФорм", "5.01");
	КонецЕсли;
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдОтпр",   СтруктураЭД.Отправитель);
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдПок",    СтруктураЭД.Получатель);
	
	Если СтруктураЭД.Свойство("ПространствоИмен") Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ПространствоИмен",    СтруктураЭД.ПространствоИмен);
	КонецЕсли;
	
	ТекДатаВремя = ТекущаяДатаСеанса();
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаДок", Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy"));
	ВставитьЗначениеВДерево(ДеревоДанных, "ВремДок", Формат(ТекДатаВремя, "ДФ=HH.mm.ss"));
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД",   СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "КНД",     СтруктураЭД.КНД);
	ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
									 СтруктураЭД.ПрефиксИдФайла,
									 СтруктураЭД.Получатель,
									 СтруктураЭД.Отправитель,
									 ГГГГММДД,
									 СтруктураЭД.УникальныйИдентификатор);
	ВставитьЗначениеВДерево(ДеревоДанных, "ИдФайл", ЭлектронныеДокументыСлужебный.DidoxИмяФайла(СтруктураФайла));
	
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева
// Параметры:
//  ДеревоДанных - деревоЗначений - дерево с данными.
//  ТекстОшибки - Строка - содержит текст ошибки
//
Процедура venkonПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки, ЭтоТаблица = Ложь, НомерСтроки = Неопределено)
	
	// Если в дереве есть поле ТестОшибки значит на этапе формирования дерева возникли ошибки
	// например, не сопоставлена номенклатура с номенклатурой поставщика.
	ТекстОшибкиСопоставления = ЗначениеРеквизитаВДереве(ДеревоДанных, "ТекстОшибки", Ложь);
	Если ЗначениеЗаполнено(ТекстОшибкиСопоставления) Тогда
		ТекстОшибки = ТекстОшибкиСопоставления;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция venkonЗаполнитьДанныеУчастникаФНС(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");
	
	Если ЗначениеЗаполнено(legalEntity) Тогда
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
		
		
		Если legalEntity Тогда
			
			organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
			
			ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
			ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
			fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
			ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
			shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
			ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
			bankAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankAccount");
			ЗаполнитьСвойствоXDTO(organization, "bankAccount", bankAccount, , ТекстОшибки);
			bankName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankName");
			ЗаполнитьСвойствоXDTO(organization, "bankName", bankName, , ТекстОшибки);
			bankCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCode");
			ЗаполнитьСвойствоXDTO(organization, "bankCode", bankCode, , ТекстОшибки);
			bankCodeType = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCodeType");
			ЗаполнитьСвойствоXDTO(organization, "bankCodeType", bankCodeType, , ТекстОшибки);
			treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
			ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
			treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
			ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
			ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
			okpo = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okpo");
			ЗаполнитьСвойствоXDTO(organization, "okpo", okpo, , ТекстОшибки);
			okonh = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okonh");
			ЗаполнитьСвойствоXDTO(organization, "okonh", okonh, , ТекстОшибки);
			oked = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.oked");
			ЗаполнитьСвойствоXDTO(organization, "oked", oked, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
			
			organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
			
			КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
			
			АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "АдресБанка", АдресБанка, , ТекстОшибки);
			
			БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БанкКазначейства");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "БанкКазначейства", БанкКазначейства, , ТекстОшибки);
			
			БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БИККазначейства");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "БИККазначейства", БИККазначейства, , ТекстОшибки);
			
			ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.ИННКазначейства");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "ИННКазначейства", ИННКазначейства, , ТекстОшибки);
			
			Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.Казначейство");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "Казначейство", Казначейство, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
			
		Иначе
			
			privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
			
			surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
			ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
			firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
			ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
			middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
			ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
			ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
			pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
			ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
			pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
			pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
			pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
			pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
			
			privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
			ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.ПолноеНаименование");
			ЗаполнитьСвойствоXDTO(privatePersonExpansion, "ПолноеНаименование", ПолноеНаименование, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
			
			
		КонецЕсли;
		
		address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
		
		street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
		ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
		house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
		ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
		building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
		ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
		flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
		ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
		settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
		ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
		district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
		ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
		region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
		ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
		country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
		ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
		postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
		ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
		postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
		ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
		nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
		ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
		
		addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
		Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.Телефоны");
		ЗаполнитьСвойствоXDTO(addressExpansion, "Телефоны", Телефоны, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
		
		РуководительExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".Руководитель", ПространствоИменСхемы);
		Фамилия = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия");
		ЗаполнитьСвойствоXDTO(РуководительExpansion, "Фамилия", Фамилия, , ТекстОшибки);
		Имя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя");
		ЗаполнитьСвойствоXDTO(РуководительExpansion, "Имя", Имя, , ТекстОшибки);
		Отчество = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество");
		ЗаполнитьСвойствоXDTO(РуководительExpansion, "ИмОтчествоя", Отчество, , ТекстОшибки);
		Должность = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность");
		ЗаполнитьСвойствоXDTO(РуководительExpansion, "Должность", Должность, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "Руководитель", РуководительExpansion, Истина, ТекстОшибки);
		
		
		ДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция venkonЗаполнитьДанныеУчастникаВерсия10(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)

ДанныеЗаполнены = Ложь;

legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");

Если ЗначениеЗаполнено(legalEntity) Тогда
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
	
	
	Если legalEntity Тогда
		
		organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
		
		ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
		ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
		fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
		ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
		shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
		ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
		bankAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankAccount");
		ЗаполнитьСвойствоXDTO(organization, "bankAccount", bankAccount, , ТекстОшибки);
		bankName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankName");
		ЗаполнитьСвойствоXDTO(organization, "bankName", bankName, , ТекстОшибки);
		bankCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCode");
		ЗаполнитьСвойствоXDTO(organization, "bankCode", bankCode, , ТекстОшибки);
		bankCodeType = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCodeType");
		ЗаполнитьСвойствоXDTO(organization, "bankCodeType", bankCodeType, , ТекстОшибки);
		treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
		ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
		treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
		ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
		ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
		okpo = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okpo");
		ЗаполнитьСвойствоXDTO(organization, "okpo", okpo, , ТекстОшибки);
		okonh = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okonh");
		ЗаполнитьСвойствоXDTO(organization, "okonh", okonh, , ТекстОшибки);
		oked = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.oked");
		ЗаполнитьСвойствоXDTO(organization, "oked", oked, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
		
		organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
		
		КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
		
		АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "АдресБанка", АдресБанка, , ТекстОшибки);
		
		БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БанкКазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "БанкКазначейства", БанкКазначейства, , ТекстОшибки);
		
		БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БИККазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "БИККазначейства", БИККазначейства, , ТекстОшибки);
		
		ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.ИННКазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "ИННКазначейства", ИННКазначейства, , ТекстОшибки);
		
		Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.Казначейство");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "Казначейство", Казначейство, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
		
	Иначе
		
		privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
		
		surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
		ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
		firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
		ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
		middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
		ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
		ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
		pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
		ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
		pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
		pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
		pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
		pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
		
		privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
		ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.ПолноеНаименование");
		ЗаполнитьСвойствоXDTO(privatePersonExpansion, "ПолноеНаименование", ПолноеНаименование, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
		
		
	КонецЕсли;
	
	address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
	
	street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
	ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
	house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
	ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
	building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
	ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
	flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
	ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
	settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
	ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
	district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
	ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
	region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
	ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
	country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
	ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
	postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
	ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
	postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
	ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
	nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
	ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
	
	addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
	Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.Телефоны");
	ЗаполнитьСвойствоXDTO(addressExpansion, "Телефоны", Телефоны, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
	
	РуководительExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".Руководитель", ПространствоИменСхемы);
	Фамилия = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Фамилия", Фамилия, , ТекстОшибки);
	Имя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Имя", Имя, , ТекстОшибки);
	Отчество = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "ИмОтчествоя", Отчество, , ТекстОшибки);
	Должность = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Должность", Должность, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "Руководитель", РуководительExpansion, Истина, ТекстОшибки);
	
	
	ДанныеЗаполнены = Истина;
	
КонецЕсли;

Возврат ДанныеЗаполнены;

КонецФункции

Функция venkonЗаполнитьДанныеУчастникаВерсия20(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)

ДанныеЗаполнены = Ложь;

legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");

Если ЗначениеЗаполнено(legalEntity) Тогда
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
	
	
	Если legalEntity Тогда
		
		organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
		
		ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
		ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
		fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
		ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
		shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
		ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
		bankAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankAccount");
		ЗаполнитьСвойствоXDTO(organization, "bankAccount", bankAccount, , ТекстОшибки);
		bankName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankName");
		ЗаполнитьСвойствоXDTO(organization, "bankName", bankName, , ТекстОшибки);
		bankCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCode");
		ЗаполнитьСвойствоXDTO(organization, "bankCode", bankCode, , ТекстОшибки);
		bankCodeType = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCodeType");
		ЗаполнитьСвойствоXDTO(organization, "bankCodeType", bankCodeType, , ТекстОшибки);
		treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
		ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
		treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
		ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
		ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
		okpo = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okpo");
		ЗаполнитьСвойствоXDTO(organization, "okpo", okpo, , ТекстОшибки);
		okonh = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okonh");
		ЗаполнитьСвойствоXDTO(organization, "okonh", okonh, , ТекстОшибки);
		oked = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.oked");
		ЗаполнитьСвойствоXDTO(organization, "oked", oked, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
		
		organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
		
		КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
		
		АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.АдресБанка");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "АдресБанка", АдресБанка, , ТекстОшибки);
		
		БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БанкКазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "БанкКазначейства", БанкКазначейства, , ТекстОшибки);
		
		БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.БИККазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "БИККазначейства", БИККазначейства, , ТекстОшибки);
		
		ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.ИННКазначейства");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "ИННКазначейства", ИННКазначейства, , ТекстОшибки);
		
		Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.Казначейство");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "Казначейство", Казначейство, , ТекстОшибки);
		
		// Начиная с версии 2.0
		ЛицевойСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.ЛицевойСчет");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "ЛицевойСчет", ЛицевойСчет, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
		
	Иначе
		
		privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
		
		surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
		ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
		firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
		ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
		middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
		ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
		ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
		pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
		ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
		pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
		pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
		pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
		pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
		
		privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
		ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.ПолноеНаименование");
		ЗаполнитьСвойствоXDTO(privatePersonExpansion, "ПолноеНаименование", ПолноеНаименование, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
		
		
	КонецЕсли;
	
	address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
	
	street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
	ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
	house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
	ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
	building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
	ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
	flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
	ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
	settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
	ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
	district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
	ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
	region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
	ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
	country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
	ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
	postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
	ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
	postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
	ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
	nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
	ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
	
	addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
	Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.Телефоны");
	ЗаполнитьСвойствоXDTO(addressExpansion, "Телефоны", Телефоны, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
	
	РуководительExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".Руководитель", ПространствоИменСхемы);
	Фамилия = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Фамилия", Фамилия, , ТекстОшибки);
	Имя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Имя", Имя, , ТекстОшибки);
	Отчество = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "ИмОтчествоя", Отчество, , ТекстОшибки);
	Должность = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность");
	ЗаполнитьСвойствоXDTO(РуководительExpansion, "Должность", Должность, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "Руководитель", РуководительExpansion, Истина, ТекстОшибки);
	
	
	ДанныеЗаполнены = Истина;
	
КонецЕсли;

Возврат ДанныеЗаполнены;

КонецФункции

Функция venkonЗаполнитьДанныеУчастникаВерсия30(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)

ДанныеЗаполнены = Ложь;

legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");

Если ЗначениеЗаполнено(legalEntity) Тогда
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
	
	
	Если legalEntity Тогда
		
		organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
		
		ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
		ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
		fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
		ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
		shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
		ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
		bankAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankAccount");
		ЗаполнитьСвойствоXDTO(organization, "bankAccount", bankAccount, , ТекстОшибки);
		bankName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankName");
		ЗаполнитьСвойствоXDTO(organization, "bankName", bankName, , ТекстОшибки);
		bankCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCode");
		ЗаполнитьСвойствоXDTO(organization, "bankCode", bankCode, , ТекстОшибки);
		bankCodeType = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.bankCodeType");
		ЗаполнитьСвойствоXDTO(organization, "bankCodeType", bankCodeType, , ТекстОшибки);
		treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
		ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
		treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
		ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
		ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
		okpo = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okpo");
		ЗаполнитьСвойствоXDTO(organization, "okpo", okpo, , ТекстОшибки);
		okonh = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.okonh");
		ЗаполнитьСвойствоXDTO(organization, "okonh", okonh, , ТекстОшибки);
		oked = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.oked");
		ЗаполнитьСвойствоXDTO(organization, "oked", oked, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
		
		organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
		
		//КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
		//ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
		
		АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.BankAddress");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "BankAddress", АдресБанка, , ТекстОшибки);
		
		БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryBank");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryBank", БанкКазначейства, , ТекстОшибки);
		
		БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryCode");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryCode", БИККазначейства, , ТекстОшибки);
		
		ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTIN");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTIN", ИННКазначейства, , ТекстОшибки);
		
		Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTitle");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTitle", Казначейство, , ТекстОшибки);
		
		// Начиная с версии 2.0
		ЛицевойСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasyruPersonalAccount");
		ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasyruPersonalAccount", ЛицевойСчет, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
		
	Иначе
		
		privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
		
		surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
		ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
		firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
		ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
		middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
		ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
		inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
		ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
		pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
		ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
		pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
		pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
		pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
		pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
		ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
		
		privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
		ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.FullTitle");
		ЗаполнитьСвойствоXDTO(privatePersonExpansion, "FullTitle", ПолноеНаименование, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
		
		
	КонецЕсли;
	
	address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
	
	street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
	ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
	house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
	ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
	building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
	ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
	flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
	ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
	settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
	ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
	district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
	ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
	region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
	ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
	country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
	ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
	postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
	ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
	postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
	ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
	nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
	ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
	
	addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
	Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber");
	ЗаполнитьСвойствоXDTO(addressExpansion, "PhoneNumber", Телефоны, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
	
	//РуководительExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".Руководитель", ПространствоИменСхемы);
	//Фамилия = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Фамилия");
	//ЗаполнитьСвойствоXDTO(РуководительExpansion, "Фамилия", Фамилия, , ТекстОшибки);
	//Имя = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Имя");
	//ЗаполнитьСвойствоXDTO(РуководительExpansion, "Имя", Имя, , ТекстОшибки);
	//Отчество = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Отчество");
	//ЗаполнитьСвойствоXDTO(РуководительExpansion, "ИмОтчествоя", Отчество, , ТекстОшибки);
	//Должность = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".Руководитель.Должность");
	//ЗаполнитьСвойствоXDTO(РуководительExpansion, "Должность", Должность, , ТекстОшибки);
	//
	//ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "Руководитель", РуководительExpansion, Истина, ТекстОшибки);
	
	
	ДанныеЗаполнены = Истина;
	
КонецЕсли;

Возврат ДанныеЗаполнены;

КонецФункции

Функция venkonЗаполнитьДанныеУчастникаВерсия40(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");
	
	Если ЗначениеЗаполнено(legalEntity) Тогда
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
		
		
		Если legalEntity Тогда
			
			organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
			
			ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
			ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
			fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
			ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
			shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
			ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
			treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
			ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
			treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
			ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
			ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
			vatCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.vatCode");
			ЗаполнитьСвойствоXDTO(organization, "vatCode", vatCode, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
			
			organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
			
			//КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
			//ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
			
			АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.BankAddress");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "BankAddress", АдресБанка, , ТекстОшибки);
			
			БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryBank");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryBank", БанкКазначейства, , ТекстОшибки);
			
			БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryCode");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryCode", БИККазначейства, , ТекстОшибки);
			
			ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTIN");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTIN", ИННКазначейства, , ТекстОшибки);
			
			Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTitle");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTitle", Казначейство, , ТекстОшибки);
			
			// Начиная с версии 2.0
			ЛицевойСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasyruPersonalAccount");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasyruPersonalAccount", ЛицевойСчет, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
			
		Иначе
			
			privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
			
			surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
			ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
			firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
			ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
			middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
			ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
			ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
			pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
			ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
			pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
			pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
			pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
			pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
			
			privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
			ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.FullTitle");
			ЗаполнитьСвойствоXDTO(privatePersonExpansion, "FullTitle", ПолноеНаименование, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
			
			
		КонецЕсли;
		
		address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
		
		street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
		ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
		house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
		ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
		building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
		ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
		flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
		ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
		settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
		ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
		district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
		ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
		region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
		ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
		country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
		ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
		postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
		ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
		postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
		ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
		nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
		ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
		
		addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
		Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber");
		ЗаполнитьСвойствоXDTO(addressExpansion, "PhoneNumber", Телефоны, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
		
		ДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Функция venkonЗаполнитьДанныеУчастникаВерсия50(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");
	
	Если ЗначениеЗаполнено(legalEntity) Тогда
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
		
		
		Если legalEntity Тогда
			
			organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
			
			ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
			ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
			fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
			ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
			shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
			ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
			treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
			ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
			treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
			ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
			ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
			vatCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.vatCode");
			ЗаполнитьСвойствоXDTO(organization, "vatCode", vatCode, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
			
			organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
			
			//КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
			//ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
			
			АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.BankAddress");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "BankAddress", АдресБанка, , ТекстОшибки);
			
			БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryBank");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryBank", БанкКазначейства, , ТекстОшибки);
			
			БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryCode");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryCode", БИККазначейства, , ТекстОшибки);
			
			ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTIN");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTIN", ИННКазначейства, , ТекстОшибки);
			
			Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTitle");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTitle", Казначейство, , ТекстОшибки);
			
			// Начиная с версии 2.0
			ЛицевойСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasyruPersonalAccount");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasyruPersonalAccount", ЛицевойСчет, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
			
		Иначе
			
			privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
			
			surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
			ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
			firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
			ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
			middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
			ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
			ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
			pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
			ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
			pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
			pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
			pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
			pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
			
			privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
			ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.FullTitle");
			ЗаполнитьСвойствоXDTO(privatePersonExpansion, "FullTitle", ПолноеНаименование, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
			
			
		КонецЕсли;
		
		address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
		
		street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
		ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
		house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
		ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
		building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
		ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
		flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
		ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
		settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
		ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
		district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
		ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
		region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
		ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
		country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
		ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
		postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
		ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
		postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
		ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
		nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
		ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
		districtId = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.districtId");
		ЗаполнитьСвойствоXDTO(address, "districtId", districtId, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
		
		addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
		Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber");
		ЗаполнитьСвойствоXDTO(addressExpansion, "PhoneNumber", Телефоны, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
		
		ДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

//Raxx>

Функция venkonЗаполнитьДанныеУчастникаВерсия70(УчастникXDTO, УчастникXDTOExpansion, СтрокаДереваДанных, ТекстОшибки, ПространствоИменСхемы, ВидУчастника)
	
	ДанныеЗаполнены = Ложь;
	
	legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".legalEntity");
	
	Если ЗначениеЗаполнено(legalEntity) Тогда
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "legalEntity", legalEntity, , ТекстОшибки);
		
		
		Если legalEntity Тогда
			
			organization = ПолучитьОбъектТипаCML("СторонаТип.organization", ПространствоИменСхемы);
			
			ownership = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.ownership");
			ЗаполнитьСвойствоXDTO(organization, "ownership", ownership, , ТекстОшибки);
			fullname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.fullname");
			ЗаполнитьСвойствоXDTO(organization, "fullname", fullname, , ТекстОшибки);
			shortname = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.shortname");
			ЗаполнитьСвойствоXDTO(organization, "shortname", shortname, , ТекстОшибки);
			treasury = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasury");
			ЗаполнитьСвойствоXDTO(organization, "treasury", treasury, , ТекстОшибки);
			treasuryAccount = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.treasuryAccount");
			ЗаполнитьСвойствоXDTO(organization, "treasuryAccount", treasuryAccount, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.inn");
			ЗаполнитьСвойствоXDTO(organization, "inn", inn, , ТекстОшибки);
			vatCode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".organization.vatCode");
			ЗаполнитьСвойствоXDTO(organization, "vatCode", vatCode, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "organization", organization, Истина, ТекстОшибки);
			
			organizationExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".organization", ПространствоИменСхемы);
			
			//КоррСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.КоррСчет");
			//ЗаполнитьСвойствоXDTO(organizationExpansion, "КоррСчет", КоррСчет, , ТекстОшибки);
			
			АдресБанка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.BankAddress");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "BankAddress", АдресБанка, , ТекстОшибки);
			
			БанкКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryBank");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryBank", БанкКазначейства, , ТекстОшибки);
			
			БИККазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryCode");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryCode", БИККазначейства, , ТекстОшибки);
			
			ИННКазначейства = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTIN");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTIN", ИННКазначейства, , ТекстОшибки);
			
			Казначейство = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasuryTitle");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasuryTitle", Казначейство, , ТекстОшибки);
			
			// Начиная с версии 2.0
			ЛицевойСчет = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".organization.TreasyruPersonalAccount");
			ЗаполнитьСвойствоXDTO(organizationExpansion, "TreasyruPersonalAccount", ЛицевойСчет, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "organization", organizationExpansion, Истина, ТекстОшибки);
			
		Иначе
			
			privatePerson = ПолучитьОбъектТипаCML("СторонаТип.privatePerson", ПространствоИменСхемы);
			
			surName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.surName");
			ЗаполнитьСвойствоXDTO(privatePerson, "surName", surName, , ТекстОшибки);
			firstName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.firstName");
			ЗаполнитьСвойствоXDTO(privatePerson, "firstName", firstName, , ТекстОшибки);
			middleName = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.middleName");
			ЗаполнитьСвойствоXDTO(privatePerson, "middleName", middleName, , ТекстОшибки);
			inn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.inn");
			ЗаполнитьСвойствоXDTO(privatePerson, "inn", inn, , ТекстОшибки);
			pinfl = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pinfl");
			ЗаполнитьСвойствоXDTO(privatePerson, "pinfl", pinfl, , ТекстОшибки);
			pas_ser = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_ser");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_ser", pas_ser, , ТекстОшибки);
			pas_num = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_num");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_num", pas_num, , ТекстОшибки);
			pas_org = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_org");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_org", pas_org, , ТекстОшибки);
			pas_date = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".privatePerson.pas_date");
			ЗаполнитьСвойствоXDTO(privatePerson, "pas_date", pas_date, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTO, "privatePerson", privatePerson, Истина, ТекстОшибки);
			
			privatePersonExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".privatePerson", ПространствоИменСхемы);
			ПолноеНаименование = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".privatePerson.FullTitle");
			ЗаполнитьСвойствоXDTO(privatePersonExpansion, "FullTitle", ПолноеНаименование, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "privatePerson", privatePersonExpansion, Истина, ТекстОшибки);
			
			
		КонецЕсли;
		
		address = ПолучитьОбъектТипаCML("СторонаТип.address", ПространствоИменСхемы);
		
		street = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.street");
		ЗаполнитьСвойствоXDTO(address, "street", street, , ТекстОшибки);
		house = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.house");
		ЗаполнитьСвойствоXDTO(address, "house", house, , ТекстОшибки);
		building = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.building");
		ЗаполнитьСвойствоXDTO(address, "building", building, , ТекстОшибки);
		flat = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.flat");
		ЗаполнитьСвойствоXDTO(address, "flat", flat, , ТекстОшибки);
		settlement = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.settlement");
		ЗаполнитьСвойствоXDTO(address, "settlement", settlement, , ТекстОшибки);
		district = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.district");
		ЗаполнитьСвойствоXDTO(address, "district", district, , ТекстОшибки);
		region = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.region");
		ЗаполнитьСвойствоXDTO(address, "region", region, , ТекстОшибки);
		country = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.country");
		ЗаполнитьСвойствоXDTO(address, "country", country, , ТекстОшибки);
		postcode = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postcode");
		ЗаполнитьСвойствоXDTO(address, "postcode", postcode, , ТекстОшибки);
		postbox = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.postbox");
		ЗаполнитьСвойствоXDTO(address, "postbox", postbox, , ТекстОшибки);
		nontypical = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.nontypical");
		ЗаполнитьСвойствоXDTO(address, "nontypical", nontypical, , ТекстОшибки);
		districtId = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Document." + ВидУчастника + ".address.districtId");
		ЗаполнитьСвойствоXDTO(address, "districtId", districtId, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "address", address, Истина, ТекстОшибки);
		
		addressExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion." + ВидУчастника + ".address", ПространствоИменСхемы);
		Телефоны = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "ROOT.Expansion." + ВидУчастника + ".address.PhoneNumber");
		ЗаполнитьСвойствоXDTO(addressExpansion, "PhoneNumber", Телефоны, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(УчастникXDTOExpansion, "address", addressExpansion, Истина, ТекстОшибки);
		
		ДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера

Процедура СохранитьНеизвестныйПакет(ДвоичныеДанныеЭлемента, ПрофильНастроекЭДО, ВнешнийУИД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                    = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата               = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета       = Перечисления.СтатусыПакетовЭД.Неизвестный;
		ПакетЭД.Направление        = Перечисления.НаправленияЭД.Входящий;
		ПакетЭД.Организация        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
		ПакетЭД.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
		ПакетЭД.ВнешнийУИД         = ВнешнийУИД;
		ПакетЭД.Записать();
		
		УиИд = Строка(Новый УникальныйИдентификатор());
		
		ИмяФайла = "EDI_" + УиИд;
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента, Новый УникальныйИдентификатор);
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ПакетЭД.Ссылка,
								ИмяФайла,
								"zip",
								ТекущаяДатаСеанса(),
								ТекущаяДатаСеанса(),
								АдресВХранилище,
								,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
						+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Создание нового ПакетаЭД'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Знач ДатаСтрокой, ТекстОшибки) Экспорт
	
	ПозицияТочки = Найти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		Попытка
			ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "-", "");
			Возврат Дата(ДатаСтрокой);
		Исключение
			ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ЧислоДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ДатаСтрокой = Сред(ДатаСтрокой, ПозицияТочки + 1);
	ПозицияТочки = Найти(ДатаСтрокой, ".");
	
	Если ПозицияТочки = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецЕсли;
	
	МесяцДаты = Лев(ДатаСтрокой, ПозицияТочки - 1);
	ГодДаты = Сред(ДатаСтрокой, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		ТекстОшибки = НСтр("ru = 'Неверный формат строки с датой'");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Только для внутреннего использования
Функция ПолучитьСоединение(Таймаут = 30) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Протокол = "";
	
	НастройкиСервисаЭДО = Новый Структура;
	НастройкиСервисаЭДО.Вставить("АдресВебСервиса", "api.goodsign.biz");
	НастройкиСервисаЭДО.Вставить("ПортПодключения", 443);
		
	Прокси = Новый ИнтернетПрокси;
	Адрес  = НастройкиСервисаЭДО.АдресВебСервиса;
	Порт   = НастройкиСервисаЭДО.ПортПодключения;
	ЗначениеКонстанты = Константы.ПортПодключения.Получить();	
	Если НЕ ПустаяСтрока(ЗначениеКонстанты) Тогда
		Порт = Число(ЗначениеКонстанты);
	КонецЕсли;
	Соединение = Новый HTTPСоединение(Адрес, Порт, , , Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

Функция ДеревоКартинок(ИмяФайлаКартинок)
	
	ДеревоКартинок = Новый ДеревоЗначений();
	ДеревоКартинок.Колонки.Добавить("ИдентификаторТовара");
	ДеревоКартинок.Колонки.Добавить("ИмяФайла");
	ДеревоКартинок.Колонки.Добавить("АдресВременногоХранилища");
	ВремКаталог = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов();
	ВремКаталог = ВремКаталог + "\" + Строка(Новый УникальныйИдентификатор);
	УдалитьФайлы(ВремКаталог, "*");
	ЧтениеZIPФайла = Новый ЧтениеZipФайла(ИмяФайлаКартинок);
	ЧтениеZIPФайла.ИзвлечьВсе(ВремКаталог);
	Папки = НайтиФайлы(ВремКаталог, "*", Ложь);
	Для Каждого Папка Из Папки Цикл
		СтрокаТовара = ДеревоКартинок.Строки.Добавить();
		СтрокаТовара.ИдентификаторТовара = Папка.Имя;
		Файлы = НайтиФайлы(ВремКаталог + "\" + Папка.Имя + "\", "*");
		Для Каждого Файл ИЗ Файлы Цикл
			СтрокаКартинки = СтрокаТовара.Строки.Добавить();
			СтрокаКартинки.ИмяФайла = Файл.Имя;
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			СтрокаКартинки.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла,
			                                                                        Новый УникальныйИдентификатор);
		КонецЦикла
	КонецЦикла;
	
	УдалитьФайлы(ВремКаталог);
	Возврат  ДеревоКартинок;
	
КонецФункции

// Возвращает массив документов ИБ по переданному массиву ЭД
Функция ВладельцыЭД(МассивЭД) Экспорт

	ДокументыЭДИВладельцы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	
	МассивИБ = Новый Массив;
	Для Каждого ДокументЭДИБ Из ДокументыЭДИВладельцы Цикл
		МассивИБ.Добавить(ДокументЭДИБ.Значение);
	КонецЦикла;
	
	Возврат МассивИБ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД ФНС из документов БД

//<Raxx
Функция venkonСтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД)
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",             НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",              НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",           ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",                 ВернутьИдЭД(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаЭД",                  ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД",              СсылкаНаОбъект);
	
	СтруктураЭД.Вставить("Организация",             НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("Контрагент",           	НастройкиОбменаЭД.Контрагент);
	
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",      НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",     Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	Если НастройкиОбменаЭД.Свойство("ПутьКФайлу") Тогда
		СтруктураЭД.Вставить("ПутьКФайлу",      НастройкиОбменаЭД.ПутьКФайлу);
	КонецЕсли;
	
	ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
	СтруктураЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
	
	Возврат СтруктураЭД;
	
КонецФункции
//Raxx>

Процедура СохранитьДопДанныеВФайл(ЭДСсылка, ИмяФайла)
	
	ВыборкаЭДДопДанных = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(ЭДСсылка);
	Если ВыборкаЭДДопДанных.Следующий() Тогда
		
		ПараметрыФайла = СвойстваФайла();
		
		СохранитьЭДВФайл(ВыборкаЭДДопДанных.Ссылка, ПараметрыФайла);
		
		ИмяФайла = ПараметрыФайла.ИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваФайла()
	
	Свойства = Новый Структура("ИмяФайла, Наименование, Расширение");
	
	Возврат Свойства;
	
КонецФункции

Функция ЗначениеПараметра(ЗначенияСвойств, ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	ЗначенияСвойств.Свойство(ИмяСвойства, ЗначениеСвойства);
	
	Возврат ЗначениеСвойства;
	
КонецФункции

Функция ЕстьСвойствоXDTO(ОбъектXDTO, ИмяСвойства)  Экспорт
	
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;

	Результат = Истина;
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат  Результат;
	
КонецФункции

Функция ЗначениеДопРеквизита(КоллецияЗначений, ИмяРеквизита)
	
	Результат = Неопределено;
	Для Каждого КлючЗначение Из КоллецияЗначений Цикл
		
		Если ВРег(КлючЗначение.Идентиф) = ВРег(ИмяРеквизита) Тогда
			Результат = КлючЗначение.Значен;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//<Raxx
Функция venkonПространствоИменПередачаТоваровПродавец()
	
	Возврат "TORGPR";
	
КонецФункции

Функция venkonПространствоИменЭлектронногоДокументаПоГосту()

	Возврат "Didox";

КонецФункции
//Raxx>


Функция ДанныеФайлаЭД(ИмяФайлаЭД, ОписаниеОшибки, ПространствоИменФНС = Неопределено) Экспорт
	
	ДанныеФайлаЭД = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
		ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла:
									|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаЭД);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Возврат ДанныеФайлаЭД;
	
КонецФункции

Функция СтрокаДереваЭД(ДеревоДанных, ИмяТаблицы, ВключатьПодчиненные = Ложь)
	
	Возврат ДеревоДанных.Строки.Найти(ИмяТаблицы, "ПолныйПуть", ВключатьПодчиненные);
	
КонецФункции


Функция venkonСтруктураДанныхПодписи(ДвоичныеДанныеДокумента, ФайлПодписи) Экспорт
	
	ТекстОшибки = ""; 	
	МассивВозврата = Новый Массив; 
	
	ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлПодписи.ПолноеИмя);
	ЧтениеТекста = Новый ЧтениеТекста(ФайлПодписи.ПолноеИмя);
	СтрокаПодписи = ЧтениеТекста.Прочитать();
	ИнформацияОПодписиСтркутура = ОбработчикиDidoxEImzoСервер.ПолучитьИнформациюОПодписи(СтрокаПодписи);  // Отказ от VenkonEImzo
	
	Если ИнформацияОПодписиСтркутура = Неопределено Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	
	Успешно = Ложь; 
	Если ИнформацияОПодписиСтркутура.Свойство("success", Успешно) И Успешно Тогда
		ИнформацияОПодписиСоответствие = ИнформацияОПодписиСтркутура.pkcs7Info;
		ИнформацияОПодписантах = ИнформацияОПодписиСоответствие.Получить("signers");
		Подпись = ИнформацияОПодписантах[0]; 
		
		Для каждого Подпись Из ИнформацияОПодписантах Цикл
			
			ДанныеПодписи = Новый Структура;
			
			ДатаПодписи = Подпись.Получить("signingTime");
			ДатаПодписи = ?(ЗначениеЗаполнено(ДатаПодписи), ОбработчикиDidoxEImzoСервер.ПолучитьДатуИзСтроки(ДатаПодписи, 2), ТекущаяДатаСеанса());  // Отказ от VenkonEImzo
			
			certificates = Подпись.Получить("certificate");
			certificate = certificates[0];
			subjectName = certificate.Получить("subjectName");
			ДопДанныеСертификата = ОбработчикиDidoxEImzoСервер.ОпределитьВладельцаСертификата(subjectName); // Отказ от VenkonEImzo

			
			// Серийный номер
			serialNumber = "";
			signerId = Подпись.Получить("signerId");
			Если signerId <> Неопределено Тогда
				subjectSerialNumber = signerId.Получить("subjectSerialNumber");
				Если subjectSerialNumber <> Неопределено Тогда
					serialNumber = subjectSerialNumber;
				КонецЕсли;
			КонецЕсли;
			
			
			ДанныеПодписи.Вставить("ДвоичныеДанные",        ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеФайла",   ДвоичныеДанныеДокумента);
			ДанныеПодписи.Вставить("ИмяФайлаБезРасширения", ФайлПодписи.ИмяБезРасширения);
			ДанныеПодписи.Вставить("ИмяФайла",              ФайлПодписи.Имя);
			ДанныеПодписи.Вставить("ИмяФайлаПодписи",              ФайлПодписи.Имя);
			ДанныеПодписи.Вставить("ДатаПодписи",           ДатаПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("КомуВыданСертификат", ДопДанныеСертификата["КомуВыдан"]);
			ДанныеПодписи.Вставить("Отпечаток", Подпись.Получить("signature"));
			ДанныеПодписи.Вставить("ДанныеСертификатаПолучены", Успешно);
			ДанныеПодписи.Вставить("СтрокаПодписи", СтрокаПодписи);
			ДанныеПодписи.Вставить("АдресФайла", "");
			ДанныеПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Сертификат", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Комментарий", "");
			ДанныеПодписи.Вставить("СерийныйНомер", serialNumber);
			
			// Верификация
			//ДанныеПодписи.Вставить("ПодписьВерна", Истина);
			
			
			
			МассивВозврата.Добавить(ДанныеПодписи);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивВозврата;
	
КонецФункции

Процедура ПрочитатьДопДанныеСтрокиТЧ(СтрокаXDTO, ДеревоДокумента, ИмяТаблицы, НомерСтроки, СвойстваТЧ, ДопПараметры = Неопределено)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	СтрокаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	
	НовоеДерево = Ложь;
	Если СтрокаДопДерево = Неопределено Тогда
		ДопДерево = ДеревоДопДанных();
		НовоеДерево = Истина;
		
	Иначе
		ДопДерево = СтрокаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
	
	ПрочитатьИнфПол(ДопДанные, ДопДерево, ИмяТаблицы, Строка(НомерСтроки));
	
	Если НовоеДерево Тогда
		ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, Строка(НомерСтроки), ДопПараметры);
	
КонецПроцедуры

Функция ЗначениеДопРеквизитаДокумента(ИмяРеквизита, ЭД)
	
	ЗначениеРеквизита = Неопределено;
	
	Если ЭД.Свойства().Получить("ЗначенияРеквизитов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(ЭД.ЗначенияРеквизитов) = Тип("ОбъектXDTO") Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из ЭД.ЗначенияРеквизитов.ЗначениеРеквизита Цикл
		Если Врег(ТекРеквизит.Наименование) = Врег(ИмяРеквизита) Тогда
			Если ТекРеквизит.Значение.Количество() = 1 Тогда
				ЗначениеРеквизита = ТекРеквизит.Значение[0];
			Иначе
				ЗначениеРеквизита = ТекРеквизит.Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено)
	
	// Тег <Данные> - обязательный для xml-строки в формате универсального доп.файла.
	Если Найти(СтрокаXML, "<Данные>") > 0 Тогда
		СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
		+ СтрокаXML + "</ДопФайл>";
		
		ДеревоСозданоРаньше = Истина;
		Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
			ДеревоДопДанных = ДеревоДопДанных();
			ДеревоСозданоРаньше = Ложь;
		КонецЕсли;
		ОбъектXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектXML.УстановитьСтроку(СтрокаXML);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
			ОбъектXML.Закрыть();
			Если ЭД.Данные <> Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
				Если СтрокаДЗ = Неопределено Тогда
					СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
					СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
					Если НомерСтроки = Неопределено Тогда
						СтрокаДЗ.ИмяРеквизита = "Набор";
					Иначе
						СтрокаДЗ.ИмяРеквизита = "Список";
					КонецЕсли;
				КонецЕсли;
				Если НомерСтроки <> Неопределено Тогда
					СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
					
					//Поиск подчиненных по разделителю "."
					ИндексРазделителяНомера = Найти(Строка(НомерСтроки), ".");
					Если ИндексРазделителяНомера Тогда
						СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
						СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
					КонецЕсли;
					
					Если СтрокиДЗ.Количество() > 0 Тогда
						СтрокаДЗ = СтрокиДЗ[0];
					ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
						//ОбщегоНазначенияЭД.СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
					Иначе
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
			КонецЕсли;
		Исключение
			Если Не ДеревоСозданоРаньше Тогда
				ДеревоДопДанных = Неопределено;
			КонецЕсли;
			ОбъектXML.Закрыть();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных. (%1)'"), ОписаниеОшибки());
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение эл.документов'"),
			ТекстОшибки);
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, НомерСтроки, ДопПараметры)
	
	СвойстваТаблицы = ДопДерево.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СвойстваТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого НомерСтр Из СвойстваТаблицы.Строки Цикл
		
		Если ВРег(НомерСтр.ИмяРеквизита) = ВРег("Нпп") Тогда
			Если Не НомерСтр.ЗначениеРеквизита = НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснованиеНайден = Ложь;
		
		Для Каждого ТекСвойство Из НомерСтр.Строки Цикл
			
			ИмяСвойства = ТекСвойство.ИмяРеквизита;
			ЗначениеСвойства = ТекСвойство.ЗначениеРеквизита;
			
			Если ВРег(ИмяСвойства) = ВРег("ВидДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("НомерДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("ДатаДокументаОснования") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(ИмяСвойства) = ВРег("ИдентификаторДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				// Актуальный алгоритм передачи связки с документами-основаниями.
				// В качестве идентификатора документа-основания во входящем ЭД приходит
				// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
				// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
				// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
				// будет найдена.
				ЗначениеСвойства = ДокументОснованиеПоИдентификатору(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			ИначеЕсли ВРег(ИмяСвойства) = ВРег("ИДЭДДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				ЗначениеСвойства = ПолучитьДокументОснование(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			КонецЕсли;
			
			СвойстваТЧ.Добавить(ЗначениеСвойства, ИмяСвойства);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разбор xml-файла/строки

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Функция используется для обратной совместимости, при разборе ЭД, сформированных в более ранних версиях БЭД.
//
Функция ПолучитьДокументОснование(НаименованиеФайла, ДопПараметрыПоиска)
	
	ДокументОснование = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла ПОДОБНО &Наименование
	|
	|";
	Запрос.УстановитьПараметр("Наименование", НаименованиеФайла + "%");
	Для Каждого Элемент Из ДопПараметрыПоиска Цикл
		Текст = Текст + СтрЗаменить("	И ЭДПрисоединенныеФайлы.%1 = &%1", "%1", Элемент.Ключ);
		Запрос.УстановитьПараметр(Элемент.Ключ,  Элемент.Значение);
	КонецЦикла;
	Запрос.Текст = Текст;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с документами основаниями

// Функция определяет документы-основания для ВладелецФайла по идентификаторам документов ИБ.
//
// Параметры:
//   МассивИД                  - Массив - содержит строки идентификаторов документов-оснований (из базы отправителя).
//   СтруктураПараметровПоиска - Структура - дополнительные отборы для оптимизации запроса:
//      Ключ     - Строка - Наименование отбора, совпадает с именем реквизита справочника ЭДПрисоединенныеФайлы.
//      Значение - Произвольный - отбираемое значение реквизита ЭД.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит 2 колонки:
//      Ссылка  - ДокументСсылка - ссылка на документ-основание.
//      НомерЭД - Строка - идентификатор документа-основания
//
Функция ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы";
	
	Если МассивИД.Количество() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД = &ИДОснованийВладельца)";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД[0]);
	Иначе
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД В (&ИДОснованийВладельца))";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД);
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровПоиска Цикл
		ТекстЗапроса = ТекстЗапроса + " И " + СтрЗаменить("ЭДПрисоединенныеФайлы.%1 = &%1", "%1", ЭлементСтруктуры.Ключ);
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	ТЗ = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТЗ;
	
КонецФункции

// Фозвращает ссылку на документ-основание найденный по идентификатору, либо Неопределено.
Функция ДокументОснованиеПоИдентификатору(ИДДокументаОснования, СтруктураОтбора)
	
	ДокументОснование = Неопределено;
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(ИДДокументаОснования);
	ТЗПолученныхОснований = ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураОтбора);
	Если ТЗПолученныхОснований.Количество() > 0 Тогда
		ДокументОснование = ТЗПолученныхОснований[0].Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции


// +aldo

Функция venkonСформироватьПроизвольныйЭД(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина, ДопПараметры) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = venkonСтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
	СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	// Сформируем структуру параметров для произвольного ЭД и заполним ее.
	ОтправительФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(НастройкиОбменаЭД.Организация);
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	ДеревоДанных = ОбщегоНазначенияЭД.ДеревоДокумента("ДеревоЭДПоГосту"); // "Гост"
	ЭлектронныеДокументыПереопределяемый.venkonЗаполнитьДанныеПоПроизвольномуЭД(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ДопПараметры, ТекстОшибки);
	СтруктураЭД.Вставить("КНД", "1115101");
	СтруктураЭД.Вставить("ПрефиксИдФайла", "ON_ARBITRARY");
	
	//ТекстОшибки = "";
	//ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate"));
		
		venkonДобавитьСлужебныеПоля(ДеревоДанных, СтруктураЭД);
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
		РезультатФормирования = venkonСформироватьФайлПроизвольногоЭД(СсылкаНаОбъект, ДеревоДанных); //СформироватьСчетФактуруФНСCML(ДеревоДанных);
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор", ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция venkonСформироватьФайлПроизвольногоЭД(СсылкаНаОбъект, ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	
	ПространствоИменСхемы = venkonПространствоИменЭлектронногоДокументаПоГосту();
	
	ТекстОшибки = "";
	Попытка
		ROOT = ПолучитьОбъектТипаCML("ROOT", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		Header    = ПолучитьОбъектТипаCML("ROOT.Header", ПространствоИменСхемы);
		Document  = ПолучитьОбъектТипаCML("ROOT.Document", ПространствоИменСхемы);
		Expansion = ПолучитьОбъектТипаCML("ROOT.Expansion", ПространствоИменСхемы);
		
		// Заполняем Header
		ЗаполнитьСвойствоXDTO(Header, "msgType",   1,   Истина, ТекстОшибки);
		senderInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.legalEntity");
		Если legalEntity Тогда 
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.organization.inn");
		Иначе	
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "senderInn",   senderInn,   Истина, ТекстОшибки);
		
		
		reciverInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.legalEntity");
		Если legalEntity Тогда 
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.organization.inn");
		Иначе	
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "reciverInn",   reciverInn,   Истина, ТекстОшибки);
		
		// Получаем ИД-Документа.
		Соединение  = ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервисVenkonЭДО);
		СтруктураИД = ЭлектронноеВзаимодействиеССерверомDidox.СоздатьДокументНаСервере(СсылкаНаОбъект, Соединение, ФайлНаДиске.ИмяБезРасширения, Истина);
		Если НЕ СтруктураИД.Успешно Тогда 
			ВызватьИсключение "Произошли ошибки при создании документа на сервере. Поробности смотреть в журнале регистрации.";
		КонецЕсли;
		ИДДокумента = СтруктураИД.ИДДокумента;
		ЗаполнитьСвойствоXDTO(Header, "docId",   ИДДокумента,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ROOT, "Header", Header, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "docType",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Document, "regNum",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regNum"),   Истина, ТекстОшибки);
		regDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate")));
		ЗаполнитьСвойствоXDTO(Document, "regDate", regDate,   Истина, ТекстОшибки);
		
		supplier = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		supplierExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.supplier", ПространствоИменСхемы);
		
		ПродавецЗаполнен = Ложь;
		ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "supplier", supplier, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "supplier", supplierExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		buyer = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		buyerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.buyer", ПространствоИменСхемы);
		
		ПокупательЗаполнен = Ложь;
		ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		
		Если ПокупательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "buyer", buyer, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "buyer", buyerExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Версия состава ЭД
		ВерсияСостава = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.Version");
		ЗаполнитьСвойствоXDTO(Expansion, "Version",   ВерсияСостава,   Истина, ТекстОшибки);
		
		ХэшСтрока = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.HashFile");
		Если ЗначениеЗаполнено(ХэшСтрока) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "HashFile",   ХэшСтрока,   Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ROOT, "Document", Document, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ROOT, "Expansion", Expansion, Истина, ТекстОшибки);
		
		//Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(ROOT, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "UTF-8", "ROOT");
		УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы, "UTF-8");
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
		ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция venkonСформироватьСчетФактуруФарм(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;

	// Сформируем и заполним структуру электронного документа.
	СтруктураЭД = venkonСтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
	Если НастройкиОбменаЭД.Свойство("ВидЭД") Тогда
		СтруктураЭД.Вставить("ВидЭД",     НастройкиОбменаЭД.ВидЭД);
	Иначе
		СтруктураЭД.Вставить("ВидЭД",     Перечисления.ВидыЭД.СчетФактураФарм);
	КонецЕсли;
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	
	ДеревоДанных = ОбщегоНазначенияЭД.ДеревоДокумента("ДеревоЭДПоГосту");
	ЭлектронныеДокументыПереопределяемый.venkonЗаполнитьДанныеПоСчетФактуреФарм(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураЭД.Вставить("КНД", "1115101");
	СтруктураЭД.Вставить("ПрефиксИдФайла", "SFAKT");
	
	ТекстОшибки = "";
	venkonПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		СтруктураЭД.Вставить("НомерДокументаОтправителя", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regNum"));
		СтруктураЭД.Вставить("ДатаДокументаОтправителя",  ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.regDate"));
		
		venkonДобавитьСлужебныеПоля(ДеревоДанных, СтруктураЭД);

		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", АдресКаталога + ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл") + ".xml");
		
   		РезультатФормирования = venkonСформироватьФайлЭДСчетФактурыФарм(СсылкаНаОбъект, ДеревоДанных); //СформироватьСчетФактуруФНСCML(ДеревоДанных);
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураЭД.Вставить("СуммаДокумента", 0);
		//Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
		//	СтруктураЭД.Вставить("ДополнительнаяИнформация", ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
		//КонецЕсли;
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		СтруктураПараметров.Вставить("УникальныйИдентификатор", ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
			СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
			СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
		КонецЕсли;
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция venkonСформироватьФайлЭДСчетФактурыФарм(СсылкаНаОбъект, ДеревоДанных)
	
	СтруктураПараметров = Новый Структура();
	
	//ПространствоИменСхемы = ПространствоИменПередачаТоваровПродавец();
	
	ПространствоИменСхемы = venkonПространствоИменЭлектронногоДокументаПоГосту();
	
	ТекстОшибки = "";
	Попытка
		ROOT = ПолучитьОбъектТипаCML("ROOT", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(ЗначениеРеквизитаВДереве(ДеревоДанных,"ПолноеИмяФайла"));
		
		Header    = ПолучитьОбъектТипаCML("ROOT.Header", ПространствоИменСхемы);
		Document  = ПолучитьОбъектТипаCML("ROOT.Document", ПространствоИменСхемы);
		Expansion = ПолучитьОбъектТипаCML("ROOT.Expansion", ПространствоИменСхемы);
		
		ВерсияСостава = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.Version");
		
		// Заполняем Header
		ЗаполнитьСвойствоXDTO(Header, "msgType",   1,   Истина, ТекстОшибки);
		senderInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.legalEntity");
		Если legalEntity Тогда 
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.organization.inn");
		Иначе	
			senderInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.supplier.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "senderInn",   senderInn,   Истина, ТекстОшибки);
		
		
		reciverInn = "";
		legalEntity = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.legalEntity");
		Если legalEntity Тогда 
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.organization.inn");
		Иначе	
			reciverInn = ОбщегоНазначенияЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.buyer.privatePerson.inn");
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Header, "reciverInn",   reciverInn,   Истина, ТекстОшибки);
		
		// Получаем ИД-Документа.
		ТипДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType");
		Соединение  = ПолучитьСоединение();
		СтруктураИД = ЭлектронноеВзаимодействиеССерверомDidox.СоздатьДокументНаСервере(СсылкаНаОбъект, Соединение, ТипДокумента);
		Если НЕ СтруктураИД.Успешно Тогда 
			ВызватьИсключение "Произошли ошибки при создании документа на сервере. Поробности смотреть в журнале регистрации.";
		КонецЕсли;
		ИДДокумента = СтруктураИД.ИДДокумента;
		ЗаполнитьСвойствоXDTO(Header, "docId",   ИДДокумента,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ROOT, "Header", Header, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "docType",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.docType"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Document, "regNum",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regNum"),   Истина, ТекстОшибки);
		regDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Document.regDate")));
		ЗаполнитьСвойствоXDTO(Document, "regDate", regDate,   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "CurrencyCode",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.CurrencyCode"),   Истина, ТекстОшибки);
		//ЗаполнитьСвойствоXDTO(Expansion, "ВидОперации",   ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.ВидОперации"),   Истина, ТекстОшибки);
		
		contract = ПолучитьОбъектТипаCML("ROOT.Document.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contract, "contractNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractNum"), Истина, ТекстОшибки);
		contractDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDate")));
		ЗаполнитьСвойствоXDTO(contract, "contractDate", contractDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(contract, "contractDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.contract.contractDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "contract", contract, Истина, ТекстОшибки);
		
		contractExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.contract", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(contractExpansion, "Title", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.contract.Title"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Expansion, "contract", contractExpansion, Истина, ТекстОшибки);
		
		amendment = ПолучитьОбъектТипаCML("ROOT.Document.amendment", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentNum", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentNum"), Истина, ТекстОшибки);
		amendmentDate = ДатаДД_ММ_ГГГГ(?(ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate") = "", Дата(1,1,1,0,0,1), ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDate")));
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDate", amendmentDate, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(amendment, "amendmentDetailsURL", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.amendment.amendmentDetailsURL"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Document, "amendment", amendment, Истина, ТекстОшибки);
		
		//amendmentExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.amendment", ПространствоИменСхемы);
		//ЗаполнитьСвойствоXDTO(amendmentExpansion, "Наименование", ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Expansion.amendment.Наименование"), Истина, ТекстОшибки);
		//
		//ЗаполнитьСвойствоXDTO(Expansion, "amendment", amendmentExpansion, Истина, ТекстОшибки);
		
		supplier = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		supplierExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.supplier", ПространствоИменСхемы);
		
		ПродавецЗаполнен = Ложь;
		Если ВерсияСостава = 1 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 2 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 3 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 4 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");	
		ИначеЕсли ВерсияСостава = 5 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		ИначеЕсли ВерсияСостава = 7 ИЛИ ВерсияСостава = 8 Тогда
			ПродавецЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия70(supplier, supplierExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "supplier");
		КонецЕсли;
		
		Если ПродавецЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "supplier", supplier, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "supplier", supplierExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		//comissioner = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		//comissionerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.comissioner", ПространствоИменСхемы);
		//
		//КомиссионерЗаполнен = Ложь;
		//Если ВерсияСостава = 1 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 2 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 3 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 4 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//ИначеЕсли ВерсияСостава = 5 Тогда
		//	КомиссионерЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(comissioner, comissionerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "comissioner");
		//КонецЕсли;
		//
		//Если КомиссионерЗаполнен Тогда
		//	ЗаполнитьСвойствоXDTO(Document, "comissioner", comissioner, Истина, ТекстОшибки);
		//	ЗаполнитьСвойствоXDTO(Expansion, "comissioner", comissionerExpansion, Истина, ТекстОшибки);
		//КонецЕсли;
		
		buyer = ПолучитьОбъектТипаCML("СторонаТип", ПространствоИменСхемы);
		buyerExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.buyer", ПространствоИменСхемы);
		
		ПокупательЗаполнен = Ложь;
		Если ВерсияСостава = 1 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия10(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 2 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия20(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 3 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия30(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 4 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия40(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 5 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия50(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		ИначеЕсли ВерсияСостава = 7 ИЛИ ВерсияСостава = 8 Тогда
			ПокупательЗаполнен = venkonЗаполнитьДанныеУчастникаВерсия70(buyer, buyerExpansion, ДеревоДанных, ТекстОшибки, ПространствоИменСхемы, "buyer");
		КонецЕсли;
		
		Если ПокупательЗаполнен Тогда
			ЗаполнитьСвойствоXDTO(Document, "buyer", buyer, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Expansion, "buyer", buyerExpansion, Истина, ТекстОшибки);
		КонецЕсли;
		
		productList = ПолучитьОбъектТипаCML("ROOT.Document.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Document.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Document.productList.product", ПространствоИменСхемы);
			
			productId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productId"); //
			ЗаполнитьСвойствоXDTO(productInfo, "productId", productId, Истина, ТекстОшибки);
			
			productName = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.productName"));
			ЗаполнитьСвойствоXDTO(productInfo, "productName", productName, Истина, ТекстОшибки);
			
			measurment = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.measurment"));
			ЗаполнитьСвойствоXDTO(productInfo, "measurment", measurment, Истина, ТекстОшибки);
			
			Если ВерсияСостава >= 5 Тогда
				
				measurmentId = Строка(ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.measurmentId"));
				ЗаполнитьСвойствоXDTO(productInfo, "measurmentId", measurmentId, Истина, ТекстОшибки);
				
			КонецЕсли;
			
			quantity = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.quantity");
			ЗаполнитьСвойствоXDTO(productInfo, "quantity", quantity, Истина, ТекстОшибки);
			
			price = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.price");
			ЗаполнитьСвойствоXDTO(productInfo, "price", price, Истина, ТекстОшибки);
			
			currencyId = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.currencyId");
			ЗаполнитьСвойствоXDTO(productInfo, "currencyId", currencyId, Истина, ТекстОшибки);
			
			totalPrice = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.totalPrice");
			ЗаполнитьСвойствоXDTO(productInfo, "totalPrice", totalPrice, Истина, ТекстОшибки);
			
			Если ВерсияСостава < 4 Тогда
				
				exciseTax = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTax");
				ЗаполнитьСвойствоXDTO(productInfo, "exciseTax", exciseTax, Истина, ТекстОшибки);
				
				exciseTaxSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.exciseTaxSum");
				ЗаполнитьСвойствоXDTO(productInfo, "exciseTaxSum", exciseTaxSum, Истина, ТекстОшибки);
				
			КонецЕсли;
			
			// Начиная с версии 2.0 есть разделение ставок "БезНДС" и "0%"
			// НДС ОБНОВЛЕНИЯ
			СтавкаНДС = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VAT");
			Если СтавкаНДС = 0 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 0, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 20 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 20, Истина, ТекстОшибки);
			// новые ставки
			ИначеЕсли СтавкаНДС = 4 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 4, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 6 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 6, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 7 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 7, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 8 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 8, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 10 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 10, Истина, ТекстОшибки);
			ИначеЕсли СтавкаНДС = 15 Тогда
				ЗаполнитьСвойствоXDTO(productInfo, "VAT", 15, Истина, ТекстОшибки);
			КонецЕсли;
			//
			
			VATSum = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.VATSum");
			ЗаполнитьСвойствоXDTO(productInfo, "VATSum", VATSum, Истина, ТекстОшибки);
			
			priceWithVAT = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.priceWithVAT");
			ЗаполнитьСвойствоXDTO(productInfo, "priceWithVAT", priceWithVAT, Истина, ТекстОшибки);
			
			manufacturer = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.manufacturer");
			ЗаполнитьСвойствоXDTO(productInfo, "manufacturer", manufacturer, Истина, ТекстОшибки);
			
			series = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.series");
			ЗаполнитьСвойствоXDTO(productInfo, "series", series, Истина, ТекстОшибки);
			
			basePrice = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.basePrice");
			ЗаполнитьСвойствоXDTO(productInfo, "basePrice", basePrice, Истина, ТекстОшибки);
			
			baseCost = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.baseCost");
			ЗаполнитьСвойствоXDTO(productInfo, "baseCost", baseCost, Истина, ТекстОшибки);
			
			supplierMargin = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.supplierMargin");
			ЗаполнитьСвойствоXDTO(productInfo, "supplierMargin", supplierMargin, Истина, ТекстОшибки);
			
			supplierPrice = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.supplierPrice");
			ЗаполнитьСвойствоXDTO(productInfo, "supplierPrice", supplierPrice, Истина, ТекстОшибки);
			
			margin = ЗначениеРеквизитаВДереве(Товар, "ROOT.Document.productList.product.margin");
			ЗаполнитьСвойствоXDTO(productInfo, "margin", margin, Истина, ТекстОшибки);
			
			
			productList.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		productListExpansion = ПолучитьОбъектТипаCML("ROOT.Expansion.productList", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = СтрокаДереваЭД(ДеревоДанных,"ROOT.Expansion.productList", Истина);
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			productInfo =  ПолучитьОбъектТипаCML("ROOT.Expansion.productList.product", ПространствоИменСхемы);
			
			// Начиная с 3 версии все теги названы латинскими буквами
			
			ИдТовараУКонтрагента = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.GoodID"); //
			ЗаполнитьСвойствоXDTO(productInfo, "GoodID", ИдТовараУКонтрагента, Истина, ТекстОшибки);
			
			ЭтоУслуга = ЗначениеРеквизитаВДереве(Товар, "ROOT.Expansion.productList.product.ThisIsService"); //
			ЗаполнитьСвойствоXDTO(productInfo, "ThisIsService", ЭтоУслуга, Истина, ТекстОшибки);
			
			productListExpansion.product.Добавить(productInfo);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Expansion, "productList", productListExpansion, Истина, ТекстОшибки);
		
		// Заполняем Итоги табличной части
		totalPrice = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPrice");
		exciseTaxSum = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.exciseTaxSum");
		VATTotal = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.VATTotal");
		priceWithVAT = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.priceWithVAT");
		totalPriceWithoutDiscount = ЗначениеРеквизитаВДереве(ДеревоДанных, "ROOT.Document.forPay.totalPriceWithoutDiscount");
		
		Если ЗначениеЗаполнено(totalPrice) 
			Или ЗначениеЗаполнено(exciseTaxSum)
			Или ЗначениеЗаполнено(VATTotal)
			Или ЗначениеЗаполнено(priceWithVAT)
			Или ЗначениеЗаполнено(totalPriceWithoutDiscount)Тогда
			
			forPay = ПолучитьОбъектТипаCML("ROOT.Document.productList.forPay", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(forPay, "totalPrice", totalPrice, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "exciseTaxSum", exciseTaxSum, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "VATTotal", VATTotal, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "priceWithVAT", priceWithVAT, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(forPay, "totalPriceWithoutDiscount", totalPriceWithoutDiscount, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(productList, "forPay", forPay, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Document, "productList", productList, Истина, ТекстОшибки);
		
		// РеквизитыДоверенности
		НомерДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityNum");
		Если ЗначениеЗаполнено(НомерДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityNum",   НомерДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		ДатаДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityDate");
		Если ЗначениеЗаполнено(ДатаДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityDate",   ДатаДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		ФИОДоверенности = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.AuthorityName");
		Если ЗначениеЗаполнено(ФИОДоверенности) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "AuthorityName",   ФИОДоверенности,   Истина, ТекстОшибки);
		КонецЕсли;
		
		// Скидка
		Скидка = ЗначениеРеквизитаВДереве(ДеревоДанных,"ROOT.Expansion.Discount");
		Если ЗначениеЗаполнено(Скидка) Тогда
			ЗаполнитьСвойствоXDTO(Expansion, "Discount",   Скидка,   Истина, ТекстОшибки);
		КонецЕсли;
		
		// Версия состава ЭД
		ЗаполнитьСвойствоXDTO(Expansion, "Version",   ВерсияСостава,   Истина, ТекстОшибки);
		
		// Начиная с версии 2.0
		// Base64-строка файла-превью добавиться после формирования ЭД.
		//ЗаполнитьСвойствоXDTO(Expansion, "preview",   "preview",   Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ROOT, "Document", Document, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ROOT, "Expansion", Expansion, Истина, ТекстОшибки);
		
		//Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыгрузитьЭДвФайл(ROOT, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), Ложь, "UTF-8", "ROOT");
		УдалитьПространствоИмен(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"), ПространствоИменСхемы, "UTF-8");
		Возврат Истина;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
		ТекстСообщения);
		
		// Удалим файл дополнительной информации в случае ошибок.
		Если СтруктураПараметров.Свойство("ПолноеИмяДопФайла") Тогда
			УдалитьФайлы(СтруктураПараметров.ПолноеИмяДопФайла);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура venkonПрочитатьСчетФактуруФармXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИДВладельца = "")
	
	// Получим версию состава ЭД
	ВерсияСоставаЭД = ЭлектронныеДокументыСлужебный.ПолучитьВерсиюДокумента(ЭД);
	НовыйЭД.ВерсияСостава = ВерсияСоставаЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСоставаЭД", ВерсияСоставаЭД);
	// docType
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "docType", ЭД.Document.docType);
	
	НомерИДатаРегистрацииЭД = ЭлектронныеДокументыСлужебный.ПолучитьНомерИДатуРегистрацииЭД(ЭД);
	
	// Уникальный номер ЭД в разрезе участников обмена
	ИДДокумента = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(, ЭД);
	Если ПустаяСтрока(ИДДокумента) ИЛИ ИДДокумента = "docId" Тогда
		Если НЕ ПустаяСтрока(ИДВладельца) Тогда
			ИДДокумента = ИДВладельца; 
		Иначе
			ИДДокумента = НомерИДатаРегистрацииЭД.regNum; 
		КонецЕсли;
	КонецЕсли;
	ЭДПрисоединенныйФайл = ОбщегоНазначенияЭД.ПолучитьЭДПоИДДокумента(ИДДокумента);
	ИННОрганизации = ЭДПрисоединенныйФайл.Организация.ИНН;
	
	НовыйЭД.ИД = ИДДокумента;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияСостава", ВерсияСоставаЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИДДокумента);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерИДатаРегистрацииЭД.regNum);  //
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", НомерИДатаРегистрацииЭД.regDate);
	
	Если ЕстьСвойствоXDTO(ЭД, "Expansion") Тогда
		
		Expanison = ЭД.Expansion;
		Если ЕстьСвойствоXDTO(Expanison, "СуммаВключаетНДС") Тогда
			СуммаВключаетНДС = Expanison.СуммаВключаетНДС;
			Если ТипЗнч(СуммаВключаетНДС) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(СуммаВключаетНДС) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВключаетНДС", СуммаВключаетНДС);
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСвойствоXDTO(Expanison, "CurrencyCode") Тогда
			CurrencyCode = Expanison.CurrencyCode;
			Если ТипЗнч(CurrencyCode) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(CurrencyCode) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалютаКод", CurrencyCode);
			КонецЕсли;
		ИначеЕсли ЕстьСвойствоXDTO(Expanison, "ВалютаКод") Тогда
			ВалютаКод = Expanison.ВалютаКод;
			Если ТипЗнч(ВалютаКод) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ВалютаКод) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалютаКод", ВалютаКод);
			КонецЕсли;
		КонецЕсли;
		
		// РеквизитыДоверенности
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityNum") Тогда
			НомерДоверенности = Expanison.AuthorityNum;
			Если ТипЗнч(НомерДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(НомерДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДоверенности", НомерДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityDate") Тогда
			ДатаДоверенности = Expanison.AuthorityDate;
			Если ТипЗнч(ДатаДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ДатаДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДоверенности", ДатаДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Expanison, "AuthorityName") Тогда
			ФИОДоверенности = Expanison.AuthorityName;
			Если ТипЗнч(ФИОДоверенности) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(ФИОДоверенности) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФИОДоверенности", ФИОДоверенности);
			КонецЕсли;
		КонецЕсли;
		
		// Скидка
		Если ЕстьСвойствоXDTO(Expanison, "Discount") Тогда
			Скидка = Expanison.Discount;
			Если ТипЗнч(Скидка) <> Тип("ОбъектXDTO") И ЗначениеЗаполнено(Скидка) Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Скидка", Скидка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСвойствоXDTO(ЭД, "Document") Тогда
		Document = ЭД.Document;
		
		// Договор
		Если ЕстьСвойствоXDTO(Document, "contract") Тогда
			Договор = Document.contract;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеДоговора(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
				venkonПрочитатьДанныеДоговора30(Договор, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "contract");
			КонецЕсли;
		КонецЕсли;
		
		// Поставщик
		Если ЕстьСвойствоXDTO(Document, "supplier") Тогда
			Поставщик = Document.supplier;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия10(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия20(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия30(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия40(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "supplier", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		// Покупатель
		Если ЕстьСвойствоXDTO(Document, "buyer") Тогда
			Покупатель = Document.buyer;
			Если ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия10 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия10(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия20 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия20(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия30 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия30(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			ИначеЕсли ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия40
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия50 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия60 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия70 
				ИЛИ ВерсияСоставаЭД = Перечисления.ВерсииСоставаЭД.Версия80 Тогда
				venkonПрочитатьДанныеКонтрагентаВерсия40(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "buyer", ИННОрганизации);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Document, "productList") Тогда
			productList = Document.productList;
			
			// Таб.часть
			Если ЕстьСвойствоXDTO(productList, "product") Тогда
				НаборДанных = productList.product;
				venkonПрочитатьДанныеПоТЧСчетФактурыФарм(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			КонецЕсли;
			
			// Итоги
			Если ЕстьСвойствоXDTO(productList, "forPay") Тогда
				Итоги = productList.forPay;
				venkonПрочитатьИтоги(Итоги, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Итоги");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonПрочитатьДанныеПоТЧСчетФактурыФарм(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		НомерСтроки = 1;
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			venkonРазобратьСтрокуТЧCMLСчетФактурыФарм(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки);
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("ОбъектXDTO") Тогда
		СписокТЧ = Новый СписокЗначений;
		venkonРазобратьСтрокуТЧCMLСчетФактурыФарм(НаборДанных, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonРазобратьСтрокуТЧCMLСчетФактурыФарм(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ТипЗнч(ЭД.Document.regNum) = ТипЗнч("Строка"), ЭД.Document.regNum, "");
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	СтруктураДопРеквизитов = Новый Структура;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("productId") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("productName") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("measurment") Тогда
			РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("quantity") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Количество");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("price") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Цена");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("currencyId") Тогда
			СписокТЧ.Добавить(ЗнДанных, "КодВалюты");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("totalPrice") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаБезНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("exciseTax") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СтавкаАкциза");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("exciseTaxSum") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаАкциза");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("VAT") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = "";
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СтавкаНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("VATSum") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("priceWithVAT") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "СуммаСУчетомНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("manufacturer") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Производитель");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("series") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Серия");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("basePrice") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "БазоваяЦена");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("baseCost") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "БазоваяСтоимость");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("supplierMargin") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "НаценкаПоставщика");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("supplierPrice") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "ЦенаПоставщика");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("margin") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ЗнДанных = 0;
			КонецЕсли;
			СписокТЧ.Добавить(ЗнДанных, "Наценка");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Expansion = ЭД.Получить("Expansion");
		НаборДанныхExpansion = Expansion["productList"].product;
		Если НомерСтроки = Неопределено Тогда 
			ЭлементExpansion = НаборДанныхExpansion;
		Иначе
			ЭлементExpansion = НаборДанныхExpansion[НомерСтроки - 1];
		КонецЕсли;
		Для Каждого ТекСвойство Из ЭлементExpansion.Свойства() Цикл
			ЗнДанных = ЭлементExpansion[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			Иначе
				Если ВРег(ТекСвойство.Имя) = ВРег("GoodID") Тогда
					РеквизитыНоменклатуры.Вставить("ИдТовараУКонтрагента", ЗнДанных);
					СписокТЧ.Добавить(ЗнДанных, "ИдТовараУКонтрагента");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ThisIsService") Тогда
					РеквизитыНоменклатуры.Вставить("ЭтоУслуга", ЗнДанных);
					
					Если ЗнДанных = "true" Тогда
						ЗнДанных = "1";
					ИначеЕсли ЗнДанных = "false" Тогда
						ЗнДанных = "0";
					КонецЕсли;
					
					СписокТЧ.Добавить(ЗнДанных, "ЭтоУслуга");
				Иначе
					РеквизитыНоменклатуры.Вставить(ТекСвойство.Имя, ЗнДанных);
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", РеквизитыНоменклатуры.ИдТовараУКонтрагента);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
		РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, НоменклатураПоставщика,
		РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
	Исключение
	КонецПопытки;
	//КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыНоменклатуры.ИдТовараУКонтрагента, НаимТовара, Номенклатура,
	РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	
КонецПроцедуры

Функция venkonПолучитьДанныеСчетаФактурыФармДляПечати80(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", НСтр(" ru = 'Счет-фактура №'") +" "+ НомерДокумента +" "+ НСтр("ru='от';uz='dan'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДанныеЗаполненияШапки.Вставить("НомерАкт", НСтр(" ru = 'АКТ ВЫПОЛНЕННЫХ РАБОТ №'") +" "+ НомерДокумента +" "+ НСтр("ru='от';uz='dan'")
	+" "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	Дата = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ТекстОшибки = "";
	ДатаДокумента = ПолучитьДатуИзСтроки(Дата, ТекстОшибки);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	ДатаДокумента);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДатаДокумента",	Дата);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НаименованиеДоговора",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Договор.Наименование"));
	
	//Реквизиты доверенности
	НомерДоверенности = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерДоверенности");
	Если НомерДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("НомерДоверенности",	НомерДоверенности);
	КонецЕсли;
	ДатаДоверенности  = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаДоверенности");
	Если ДатаДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ДатаДоверенности",	ДатаДоверенности);
	КонецЕсли;
	ФИОДоверенности   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФИОДоверенности");
	Если ФИОДоверенности <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ФИОДоверенности",	ФИОДоверенности);
	КонецЕсли;
	
	// Скидка
	Скидка   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Скидка");
	Если Скидка <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("Скидка",	Скидка);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.fullname"));
	СведенияОКонтрагенте.Вставить("ИНН", 				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.inn"));
	СведенияОКонтрагенте.Вставить("РегистрационныйКодПлательщикаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.vatCode"));
	//СведенияОКонтрагенте.Вставить("КодПоОКПО",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.okpo"));
	//СведенияОКонтрагенте.Вставить("КодПоОКЭД",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.oked"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	     venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Контрагент"));
	//СведенияОКонтрагенте.Вставить("НомерСчета",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankAccount"));
	//СведенияОКонтрагенте.Вставить("Банк",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankName"));
	//СведенияОКонтрагенте.Вставить("БИК",				     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.bankCode"));
	//СведенияОКонтрагенте.Вставить("КоррСчет",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОКонтрагенте.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.treasuryAccount"));
		СведенияОКонтрагенте.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БанкКазначейства"));
		СведенияОКонтрагенте.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.БИККазначейства"));
		СведенияОКонтрагенте.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИННКазначейства"));
		СведенияОКонтрагенте.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Казначейство"));
		// Начиная с версии 2.0
		СведенияОКонтрагенте.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЛицевойСчет"));
	Иначе
		СведенияОКонтрагенте.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	//СведенияОКонтрагенте.Вставить("Телефоны",			     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	//СведенияОКонтрагенте.Вставить("АдресБанка",			    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.АдресБанка"));
	
	ИмяРеквОрганизации = "Организация";
	ИмяБанкСчета = "БанковскийСчетОрганизации";
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.fullname"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.inn"));
	СведенияООрганизации.Вставить("РегистрационныйКодПлательщикаНДС", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.vatCode"));
	//СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.okpo"));
	//СведенияООрганизации.Вставить("КодПоОКЭД",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.oked"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, "Организация"));
	//СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankAccount"));
	//СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankName"));
	//СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.bankCode"));
	//СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияООрганизации.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.treasuryAccount"));
		СведенияООрганизации.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БанкКазначейства"));
		СведенияООрганизации.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.БИККазначейства"));
		СведенияООрганизации.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИННКазначейства"));
		СведенияООрганизации.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Казначейство"));
		// Начиная с версии 2.0
		СведенияООрганизации.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЛицевойСчет"));
	Иначе
		СведенияООрганизации.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	//СведенияООрганизации.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.АдресБанка"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Организация";
		ИмяРеквизитаГрузополучатель = "Контрагент";
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
		
		ИмяРеквизитаГрузоотправитель = "Контрагент";
		ИмяРеквизитаГрузополучатель = "Организация";
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Грузоотправитель"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ГрузоотправительАдрес"));
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".fullname"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".inn"));
	СведенияОГрузоотправителе.Вставить("РегистрационныйКодПлательщикаНДС",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".vatCode"));
	//СведенияОГрузоотправителе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".oked"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель));
	//СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankAccount"));
	//СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankName"));
	//СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".bankCode"));
	//СведенияОГрузоотправителе.Вставить("КоррСчет",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузоотправителе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".treasuryAccount"));
		СведенияОГрузоотправителе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель +  ".БанкКазначейства"));
		СведенияОГрузоотправителе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".БИККазначейства"));
		СведенияОГрузоотправителе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ИННКазначейства"));
		СведенияОГрузоотправителе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузоотправителе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузоотправителе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияОГрузоотправителе.Вставить("Телефоны",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".Телефоны"));
	//СведенияОГрузоотправителе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузоотправитель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".fullname"));
	СведенияОГрузополучателе.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".inn"));
	СведенияОГрузополучателе.Вставить("РегистрационныйКодПлательщикаНДС",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".vatCode"));
	//СведенияОГрузополучателе.Вставить("КодПоОКЭД",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".oked"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	venkonПолучитьПредставлениеАдреса(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель));
	//СведенияОГрузополучателе.Вставить("НомерСчета",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankAccount"));
	//СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankName"));
	//СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".bankCode"));
	//СведенияОГрузополучателе.Вставить("КоррСчет",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Банк.КоррСчет"));
	ОплатаЧерезКазначейство = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasury");
	Если ЗначениеЗаполнено(ОплатаЧерезКазначейство) И ОплатаЧерезКазначейство = 1 Тогда
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Истина);
		СведенияОГрузополучателе.Вставить("СчетВКазначействе", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".treasuryAccount"));
		СведенияОГрузополучателе.Вставить("БанкКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель +  ".БанкКазначейства"));
		СведенияОГрузополучателе.Вставить("БИККазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".БИККазначейства"));
		СведенияОГрузополучателе.Вставить("ИННКазначейства", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ИННКазначейства"));
		СведенияОГрузополучателе.Вставить("Казначейство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Казначейство"));
		// Начиная с версии 2.0
		СведенияОГрузополучателе.Вставить("ЛицевойСчет", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".ЛицевойСчет"));
	Иначе
		СведенияОГрузополучателе.Вставить("ОплатаЧерезКазначейство", Ложь);
	КонецЕсли;
	
	//СведенияОГрузополучателе.Вставить("Телефоны",		    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".Телефоны"));
	//СведенияОГрузополучателе.Вставить("АдресБанка",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаГрузополучатель + ".АдресБанка"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", ДанныеЗаполненияШапки.СведенияОПоставщике.ЮридическийАдрес);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ПолноеНаименование);
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", ДанныеЗаполненияШапки.СведенияОПокупателе.ЮридическийАдрес);
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПоставщике.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", НСтр("ru = 'ИНН/КПП продавца:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	Если ЗначениеЗаполнено(СведенияОГрузоотправителе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес:'")+ " "
		+ СведенияОГрузоотправителе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузоотправителе.ФактическийАдрес), ", "
		+ СведенияОГрузоотправителе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", НСтр("ru = 'Грузоотправитель и его адрес: --'")); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОГрузополучателе.ПолноеНаименование) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес:'")+ " "
		+ СведенияОГрузополучателе.ПолноеНаименование + ?(ЗначениеЗаполнено(СведенияОГрузополучателе.ФактическийАдрес), ", "
		+ СведенияОГрузополучателе.ФактическийАдрес, ""));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", НСтр("ru = 'Грузополучатель и его адрес: --'"));
	КонецЕсли;
	
	
	ИНН = ДанныеЗаполненияШапки.СведенияОПокупателе.ИНН;
	КПП = "";
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", НСтр("ru = 'ИНН/КПП покупателя:'")+ " " + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));
	
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалютаКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: код %1'"), КодВалюты);
	ДанныеЗаполненияШапки.Вставить("ВалютаТекст", ТекстВалюта);
	ДанныеЗаполненияШапки.Вставить("Валюта", ОпределитьВалютуПоКоду(КодВалюты));
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPrice"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.VATTotal"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.priceWithVAT"));
	ДанныеЗаполненияШапки.Вставить("ИтогоБезСкидки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "Итоги.totalPriceWithoutDiscount"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантИП"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
	СтрокаОбъекта, "ПодписантСвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЭтоУслуга");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СтавкаАкциза");
	ТЗ.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияАкцизногоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("Производитель");
	ТЗ.Колонки.Добавить("Серия");
	ТЗ.Колонки.Добавить("БазоваяЦена");
	ТЗ.Колонки.Добавить("БазоваяСтоимость");
	ТЗ.Колонки.Добавить("НаценкаПоставщика");
	ТЗ.Колонки.Добавить("ЦенаПоставщика");
	ТЗ.Колонки.Добавить("Наценка");
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
		
		ЭтоУслуга = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЭтоУслуга");
		Если ЗначениеЗаполнено(ЭтоУслуга) Тогда
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
		Иначе
			НоваяСтрока.ЭтоУслуга = "";
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения");
		НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.БазоваяЕдиницаКод");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		//НоваяСтрока.СтавкаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаАкциза");
		//НоваяСтрока.СуммаАкциза = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаАкциза");
		
		//ЕдиницаИзмеренияАкцизногоНалога = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмеренияАкцизногоНалога");
		//Если ЗначениеЗаполнено(ЕдиницаИзмеренияАкцизногоНалога) Тогда
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = ЕдиницаИзмеренияАкцизногоНалога;
		//Иначе
		//	НоваяСтрока.ЕдиницаИзмеренияАкцизногоНалога = "";
		//КонецЕсли;
		
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(СуммаНДС),СуммаНДС,0);
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСУчетомНДС");
		
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаБезНДС");
		
		НоваяСтрока.Производитель = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Производитель");
		НоваяСтрока.Серия = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Серия");
		НоваяСтрока.БазоваяЦена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БазоваяЦена");
		НоваяСтрока.БазоваяСтоимость = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БазоваяСтоимость");
		НоваяСтрока.НаценкаПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаценкаПоставщика");
		НоваяСтрока.ЦенаПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаПоставщика");
		НоваяСтрока.Наценка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Наценка");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Нстр("ru = 'без НДС'");
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура venkonЗаполнитьТабличныйДокументСчетФактураФарм_ЭДВерсия80(ТабличныйДокумент, ДанныеПечати, ОбластьФорматСтроки)
	
	ДанныеЗаполненияШапки = ДанныеПечати.Шапка;	
	ВалютаДокумента = Неопределено;
	Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
		ВалютаДокумента = ДанныеЗаполненияШапки.Валюта;
	КонецЕсли;
		
	СведенияОГрузополучателе = ДанныеПечати.Шапка.СведенияОГрузополучателе;
	ОплатаЧерезКазначейство = СведенияОГрузополучателе.ОплатаЧерезКазначейство;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОплатаЧерезКазначействоПК = СведенияОПоставщике.ОплатаЧерезКазначейство;
	
	ПостфиксМакета = "";
	Если ОплатаЧерезКазначействоПК Тогда 
		ПостфиксМакета = "ПК";
	КонецЕсли;

	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("СчетФактураФарм"); //

	// Шапка
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаДокумента.Параметры.Заполнить(ДанныеЗаполненияШапки);
	
	Если ДанныеЗаполненияШапки.Свойство("Номер") Тогда
		ОбластьШапкаДокумента.Параметры.Номер = ДанныеЗаполненияШапки.Номер; 
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.Свойство("НаименованиеДоговора") Тогда
		ОбластьШапкаДокумента.Параметры.ТоварныйДокумент = ДанныеЗаполненияШапки.НаименованиеДоговора; 
	КонецЕсли;
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПокупателе = ДанныеПечати.Шапка.СведенияОПокупателе;
	
	Если СведенияОПоставщике.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПоставщика = СведенияОПоставщике.ИНН; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("ИНН") Тогда
		ОбластьШапкаДокумента.Параметры.ИННПокупателя = СведенияОПокупателе.ИНН; 
	КонецЕсли;
	
	//
	Если СведенияОПоставщике.Свойство("РегистрационныйКодПлательщикаНДС") Тогда
		ОбластьШапкаДокумента.Параметры.РегистрационныйКодПлательщикаНДСПоставщика = СведенияОПоставщике.РегистрационныйКодПлательщикаНДС; 
	КонецЕсли;
	Если СведенияОПокупателе.Свойство("РегистрационныйКодПлательщикаНДС") Тогда
		ОбластьШапкаДокумента.Параметры.РегистрационныйКодПлательщикаНДСПокупателя = СведенияОПокупателе.РегистрационныйКодПлательщикаНДС; 
	КонецЕсли;
	//
	
	Если ОплатаЧерезКазначействоПК Тогда
		
		СтруктураКазначейства = Новый Структура();
		Если СведенияОПоставщике.Свойство("ИННКазначейства") Тогда
			ОбластьШапкаДокумента.Параметры.ИННКазначействаПоставщика = СведенияОПоставщике.ИННКазначейства; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("Казначейство") Тогда
			ОбластьШапкаДокумента.Параметры.КазначействоПоставщика = СведенияОПоставщике.Казначейство; 
		КонецЕсли;
		
		Если СведенияОПоставщике.Свойство("ЛицевойСчет") Тогда
			ОбластьШапкаДокумента.Параметры.ЛицевойСчетПоставщика = СведенияОПоставщике.ЛицевойСчет; 
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	НДС0 = Ложь;
	НомерСтроки = 1;
	
	УстанавливатьКолонкуВсего = (Товары.Итог("СуммаАкциза")+Товары.Итог("СуммаНДС") > 0);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 
		ОбластьСтрока.Параметры.ТоварНаименование = СтрокаТовары.ТоварНаименование;
		Если СтрокаТовары.ЭтоУслуга = "" ИЛИ СтрокаТовары.ЭтоУслуга = "1" Тогда
			Если ВалютаДокумента <> Неопределено Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = ВалютаДокумента.Наименование;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "";
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
		КонецЕсли;
		ОбластьСтрока.Параметры.Количество = ?(СтрокаТовары.Количество = 0, "", СтрокаТовары.Количество); 
		ОбластьСтрока.Параметры.Цена = СтрокаТовары.Цена; 
		ОбластьСтрока.Параметры.Стоимость = СтрокаТовары.СуммаБезНДС;
		
		ОбластьСтрока.Параметры.Производитель = СтрокаТовары.Производитель; 
		ОбластьСтрока.Параметры.Серия = СтрокаТовары.Серия; 
		ОбластьСтрока.Параметры.БазоваяЦена = СтрокаТовары.БазоваяЦена;
		ОбластьСтрока.Параметры.БазоваяСтоимость = СтрокаТовары.БазоваяСтоимость; 
		ОбластьСтрока.Параметры.НаценкаПоставщика = СтрокаТовары.НаценкаПоставщика; 
		ОбластьСтрока.Параметры.ЦенаПоставщика = СтрокаТовары.ЦенаПоставщика;
		ОбластьСтрока.Параметры.Наценка = СтрокаТовары.Наценка; 
		
		ЕдиницаИзмеренияАкцизногоНалога = СтрокаТовары.ЕдиницаИзмеренияАкцизногоНалога;
		
		СтавкаАкциза = СтрокаТовары.СтавкаАкциза;
		СуммаАкциза  = СтрокаТовары.СуммаАкциза;
		
		// Начиная с версии 2.0
		Если СтрокаТовары.СтавкаНДС = "Без НДС" ИЛИ СтрокаТовары.СтавкаНДС = "без НДС" Тогда
			ОбластьСтрока.Параметры.СтавкаНДС = "Без";
			ОбластьСтрока.Параметры.СуммаНДС = "НДС";
		Иначе
			ОбластьСтрока.Параметры.СтавкаНДС  = СтрокаТовары.СтавкаНДС;
			ОбластьСтрока.Параметры.СуммаНДС = СтрокаТовары.СуммаНДС;
			УстанавливатьКолонкуВсего = Истина;
			Если СтрокаТовары.СтавкаНДС  = "0%" И НЕ НДС0 Тогда
				НДС0 = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если УстанавливатьКолонкуВсего Тогда
			ОбластьСтрока.Параметры.Всего = СтрокаТовары.СуммаСНДС;
		Иначе
			ОбластьСтрока.Параметры.Всего      = 0;			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ИтогоСуммаНДС = Товары.Итог("СуммаНДС");
	ОбластьИтого.Параметры.ИтогоСуммаНДС 	= ИтогоСуммаНДС;
	ОбластьИтого.Параметры.ИтогоСтоимость   = Товары.Итог("СуммаБезНДС");
	Если УстанавливатьКолонкуВсего Тогда
		ОбластьИтого.Параметры.ИтогоВсего = Товары.Итог("СуммаСНДС");
	КонецЕсли;
	ОбластьИтого.Параметры.НадписьИтого     = НСтр("ru='Итого';uz='Jami'");	
	//ОбластьИтого.Параметры.НадписьИтого = НСтр("ru='Итого';uz='Jami'")+?(ВалютаДокумента=мВалютаРегламентированногоУчета,":"," ("+ВалютаДокумента+")");
	ОбластьИтого.Параметры.НадписьСкидка     = НСтр("ru='Скидка';uz='Jami'");
	ОбластьИтого.Параметры.НадписьИтогоСоСкидкой     = НСтр("ru='ИтогоСоСкидкой';uz='Jami'");
	
	Если ДанныеПечати.Шапка.Свойство("Скидка") Тогда	
		ОбластьИтого.Параметры.Скидка = ДанныеПечати.Шапка.Скидка; 
	КонецЕсли;
	
	ОбластьИтого.Параметры.ИтогоСоСкидкой     = ДанныеПечати.Шапка.ИтогоВсего;
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	ОбластьИтогоПрописью = Макет.ПолучитьОбласть("ИтогоПрописью");
	ФорматСтрока  = "ДП=Ложь";
	Если ВалютаДокумента <> Неопределено Тогда
		ПарамПредмета = ВалютаДокумента.ПараметрыпрописиНаРусском;
		ОплатаПропись = ЧислоПрописью(ДанныеПечати.Шапка.ИтогоВсего, ФорматСтрока, ПарамПредмета);
		Если ИтогоСуммаНДС <> 0 Тогда
			ОплатаПропись = ОплатаПропись + НСтр("ru=', в т.ч. НДС: ';uz=', шу ж. ҚҚС:'") + Формат(ИтогоСуммаНДС,"ЧДЦ=2");
		Иначе
			Если НДС0 Тогда 
				ОплатаПропись = ОплатаПропись + НСтр("ru='. НДС (0%): 0,00';uz='. ҚҚС (0%): 0,00'");
			Иначе
				ОплатаПропись = ОплатаПропись + НСтр("ru='. Без НДС';uz='. ҚҚС сиз'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьИтогоПрописью.Параметры.ОплатаПропись = ОплатаПропись;
	ОбластьИтогоПрописью.Параметры.НадписьИтого = НСтр("ru='Всего к оплате:';uz='Жами тўланади:'");
	ТабличныйДокумент.Вывести(ОбластьИтогоПрописью);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	//РеквизитыДоверенности
	ДоверенностьДатаНомер = "";
	Если ДанныеПечати.Шапка.Свойство("НомерДоверенности") Тогда	
		ДоверенностьДатаНомер = "№ " + ДанныеПечати.Шапка.НомерДоверенности + " "; 
	КонецЕсли;
	Если ДанныеПечати.Шапка.Свойство("ДатаДоверенности") Тогда	
		ДоверенностьДатаНомер = ДоверенностьДатаНомер + "от " + ДанныеПечати.Шапка.ДатаДоверенности; 
	КонецЕсли;
	
	ДоверенностьЧерезКого = "";
	Если ДанныеПечати.Шапка.Свойство("ФИОДоверенности") Тогда	
		ДоверенностьЧерезКого = ДанныеПечати.Шапка.ФИОДоверенности; 
	КонецЕсли;
	
	РеквизитыДоверенности = Новый Структура("ДоверенностьДатаНомер, ДоверенностьЧерезКого", ДоверенностьДатаНомер, ДоверенностьЧерезКого);
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, РеквизитыДоверенности); 
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	//ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// -aldo