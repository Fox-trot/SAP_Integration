
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	Если СтавкаНДС=Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС4 Тогда
		Возврат 4;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС6 Тогда
		Возврат 6;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС7 Тогда
		Возврат 7;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС8 Тогда
		Возврат 8;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС=Перечисления.СтавкиНДС.НДС15 Тогда
		Возврат 15;
	Иначе	
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПроводитьПоРазделуУчетаНДС(ДатаДокумента) Экспорт
	ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	Возврат ДатаНачалаУчетаНДС <= ДатаДокумента;
КонецФункции

Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено=Ложь) Экспорт
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		УжеВМасссиве = Новый Соответствие; 
		БылоНеопределено = Ложь;
		КолвоЭлементовВМассиве = Массив.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента = ТипЗнч(ЭлементМассива); 
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)	ИЛИ
					  ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)	ИЛИ
					  ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)			ИЛИ
					  ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)	ИЛИ
					  ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
			Иначе 
				ИДЭлемента = ЭлементМассива; 
			КонецЕсли; 
			Если УжеВМасссиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМасссиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
		КонецЦикла;      
	КонецЕсли;
	Возврат Массив;
КонецФункции

Функция УстановитьСтавкуНДС(Номенклатура,Дата,Организация) Экспорт
	Если ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(Номенклатура.СтавкаНДС) Тогда
			Возврат Номенклатура.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Номенклатура)=Тип("СправочникСсылка.НоменклатураПродаж") Тогда
		Если ЗначениеЗаполнено(Номенклатура.ВидДеятельностиНДС) Тогда
			Возврат Номенклатура.ВидДеятельностиНДС.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	//
	ПорядокУплатыНДС = ПолучитьПорядокУплатыНДС(Дата,Организация);
	ВидДеятельностиНДС	= Организация.ОсновнойВидДеятельностиНДС;
	Если ПорядокУплатыНДС=Перечисления.ПорядокУплатыНДС.Общеустановленный Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли ПорядокУплатыНДС=Перечисления.ПорядокУплатыНДС.Упрощенный Тогда
		Возврат Организация.ОсновнойВидДеятельностиНДС.СтавкаНДС;
	Иначе	
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
КонецФункции

Функция ПолучитьПлатежПоНДС(ДокументПоступления,Номенклатура) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПлатежПоНДС = Справочники.ПлатежиПоНДС.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежиПоНДС.Ссылка
	|ИЗ
	|	Справочник.ПлатежиПоНДС КАК ПлатежиПоНДС
	|ГДЕ
	|	НЕ ПлатежиПоНДС.ПометкаУдаления
	|	И ПлатежиПоНДС.ДокументПоступления = &ДокументПоступления
	|	И ПлатежиПоНДС.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("ДокументПоступления",ДокументПоступления);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПлатежПоНДС = Выборка.Ссылка;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ПлатежПоНДС;
КонецФункции

Функция УстановитьЗачетНДС(Дата,Организация,Номенклатура=Неопределено) Экспорт
	ПорядокУплатыНДС = ПолучитьПорядокУплатыНДС(Дата,Организация);
	Если ПорядокУплатыНДС=Перечисления.ПорядокУплатыНДС.Общеустановленный Тогда
		ТипЗачета = Перечисления.ЗачетНДС.НДСВЗачет;
		Если ТипЗнч(Номенклатура)=Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			ТипЗачета = Перечисления.ЗачетНДС.НДСУслугамВСтоимость_ОС_НМА_НС;
		ИначеЕсли ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			Если Номенклатура.ВидАктиваДляЗачетаНДС = Перечисления.ВидыАктиваДляЗачетаНДС.Недвижимость Тогда
				ТипЗачета = Перечисления.ЗачетНДС.НДСВЗачетИмущество;
			ИначеЕсли Номенклатура.ВидАктиваДляЗачетаНДС = Перечисления.ВидыАктиваДляЗачетаНДС.НедвижимостьПрочая Тогда
				ТипЗачета = Перечисления.ЗачетНДС.НДСВСтоимостьИмущество;
			ИначеЕсли Номенклатура.ВидАктиваДляЗачетаНДС = Перечисления.ВидыАктиваДляЗачетаНДС.Прочие Тогда
				ТипЗачета = Перечисления.ЗачетНДС.НДСПо_ОС_НМА_НС;
			КонецЕсли;
		КонецЕсли;
		Возврат ТипЗачета;
	ИначеЕсли ПорядокУплатыНДС=Перечисления.ПорядокУплатыНДС.Упрощенный Тогда
		Возврат Перечисления.ЗачетНДС.НДСВСтоимость;
	Иначе	
		Возврат Перечисления.ЗачетНДС.НДСВСтоимость;
	КонецЕсли;
КонецФункции

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", СпособСтроительства = Неопределено) Экспорт

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений) Экспорт

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.ОбъектСтроительства;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.НематериальныйАктив;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция определяет вид ценнности по переданным в нее субконто счета учета.
// 
Функция ПолучитьЦенностьПоСубконто(Субконто1, Субконто2, Субконто3) Экспорт

	ВидЦенности = Неопределено;

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);

	Для каждого Субконто Из МассивСубконто Цикл

		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЦенности = Субконто;
			
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЦенности = Субконто;
			
		КонецЕсли; 

		// Если вид ценности определен, то прекращаем поиск
		Если ВидЦенности <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидЦенности;

КонецФункции // ПолучитьЦенностьПоСубконто()

// Функция для выбора подчиненных счетов-фактур на аванс по ссылке на документ оплаты
// Помимо списка документов получает дополнительные реквизиты (договор, ставка НДС)
Функция ВыбратьПодчиненныеСФНаАванс(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеНеЗаполнено(ДокументСсылка) Тогда

		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.ДоговорКонтрагента,
		|	СчетФактураВыданный.СтавкаНДС
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументСсылка И
		|	(СчетФактураВыданный.НаАванс = ИСТИНА)";

		Результат = Запрос.Выполнить().Выгрузить();

	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции // НайтиПодчиненныйДокумент()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Расчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СчетУчетаЦенности = "";
        СпособСтроительства = Неопределено;
		
		Если ТаблицаЗначений.Колонки.Найти("СчетУчетаБУ") <> Неопределено Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаБУ;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);

		ИначеЕсли ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетЗатрат;
			Ценность          = ПолучитьЦенностьПоСубконто(СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
			// Особая обработка для затрат на строительство
			Если ТипЗнч(Ценность) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Для НомерСубконто =1 По 3 Цикл
					Если ТипЗнч(СтрокаТаблицы["Субконто"+НомерСубконто]) = Тип("ПеречислениеСсылка.СпособыСтроительства")  Тогда
						СпособСтроительства = СтрокаТаблицы["Субконто"+НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
		ИначеЕсли Не ЗначениеНеЗаполнено(СтрокаТаблицы.СчетУчетаЦенности) Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаЦенности;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") и не ЗначениеНеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора,СпособСтроительства);
		СтрокаТаблицы.СчетУчетаЦенности = СчетУчетаЦенности;
		СтрокаТаблицы.Ценность          = Ценность;

	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт

	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда

		// Произошло изменение пометки на удаление
		//Попытаемся найти счет-фактуру
		СчетФактура = НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если НЕ ЗначениеНеЗаполнено(СчетФактура) Тогда

			// Есть счет-фактура, нужно установить для него пометку удаления
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Контрагент, Договор, СуммаДокумента, ВалютаДокумента");

	Если ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АвансовыйОтчетТовары.Поставщик,
		|	АвансовыйОтчетТовары.СчетФактура,
		|	АвансовыйОтчетТовары.СтавкаНДС,
		|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
		|	СУММА(АвансовыйОтчетТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВЫБОР КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС ТОГДА АвансовыйОтчетТовары.Сумма - АвансовыйОтчетТовары.СуммаНДС ИНАЧЕ АвансовыйОтчетТовары.Сумма КОНЕЦ) КАК СуммаБезНДС,
		|	СУММА(ВЫБОР КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС ТОГДА АвансовыйОтчетТовары.Сумма ИНАЧЕ АвансовыйОтчетТовары.Сумма + АвансовыйОтчетТовары.СуммаНДС КОНЕЦ) КАК Сумма
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		|
		|ГДЕ
		|	АвансовыйОтчетТовары.СчетФактура = &СчетФактура И
		|	АвансовыйОтчетТовары.Ссылка = &АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчетТовары.Поставщик,
		|	АвансовыйОтчетТовары.СчетФактура,
		|	АвансовыйОтчетТовары.СтавкаНДС,
		|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвансовыйОтчетПрочее.Поставщик,
		|	АвансовыйОтчетПрочее.СчетФактура,
		|	АвансовыйОтчетПрочее.СтавкаНДС,
		|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
		|	СУММА(АвансовыйОтчетПрочее.СуммаНДС),
		|	СУММА(ВЫБОР КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС ТОГДА АвансовыйОтчетПрочее.Сумма - АвансовыйОтчетПрочее.СуммаНДС ИНАЧЕ АвансовыйОтчетПрочее.Сумма КОНЕЦ),
		|	СУММА(ВЫБОР КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС ТОГДА АвансовыйОтчетПрочее.Сумма ИНАЧЕ АвансовыйОтчетПрочее.Сумма + АвансовыйОтчетПрочее.СуммаНДС КОНЕЦ)
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		|
		|ГДЕ
		|	АвансовыйОтчетПрочее.СчетФактура = &СчетФактура И
		|	АвансовыйОтчетПрочее.Ссылка = &АвансовыйОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчетПрочее.Поставщик,
		|	АвансовыйОтчетПрочее.СчетФактура,
		|	АвансовыйОтчетПрочее.СтавкаНДС,
		|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента";
			
		Запрос.УстановитьПараметр("СчетФактура",	СчетФактура.Ссылка);
		Запрос.УстановитьПараметр("АвансовыйОтчет", СчетФактура.ДокументОснование);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Результат.СуммаДокумента = 0;
		
		Пока Выборка.Следующий() Цикл
			Результат.Контрагент     = 	Выборка.Поставщик;
			Результат.Договор        = 	"";
			Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.Сумма;
			Результат.ВалютаДокумента = Выборка.ВалютаДокумента;
			
		КонецЦикла;
		
	Иначе

		
		Если ЗначениеНеЗаполнено(СчетФактура.ДокументОснование) Тогда
			//Данные не обрабатываются.
			Возврат;
		КонецЕсли; 
		ДокументОснование = СчетФактура.ДокументОснование.ПолучитьОбъект();

		ЭтоВыданныйСФ   = Ложь;
		ЭтоПолученныйСФ = Ложь;

		Если ТипЗнч(СчетФактура.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ЭтоВыданныйСФ = Истина;

		ИначеЕсли ТипЗнч(СчетФактура.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ЭтоПолученныйСФ = Истина;

		КонецЕсли;

		Если ЕстьРеквизитДокумента("Контрагент", ДокументОснование.Метаданные()) Тогда
			Результат.Контрагент = 	ДокументОснование.Контрагент;
		КонецЕсли;
		Если ЕстьРеквизитДокумента("ДоговорКонтрагента", ДокументОснование.Метаданные()) Тогда
			Результат.Договор = 	ДокументОснование.ДоговорКонтрагента;
		КонецЕсли;

		Если ЭтоВыданныйСФ и СчетФактура.Ссылка.НаАванс тогда
			Результат.СуммаДокумента  = СчетФактура.Ссылка.ВалютнаяСумма;
			Результат.ВалютаДокумента = СчетФактура.Ссылка.ВалютаДокумента;
			Результат.Договор = 		СчетФактура.Ссылка.ДоговорКонтрагента;
   			Если Результат.Контрагент = Неопределено Тогда
				Результат.Контрагент = Результат.Договор.Владелец;
			КонецЕсли; 

		ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах"))
				и (ЭтоПолученныйСФ) Тогда
			Результат.СуммаДокумента = ДокументОснование.Товары.Итог("СуммаВознаграждения") + 
									   ?(ДокументОснование.СуммаВключаетНДС, 0, ДокументОснование.Товары.Итог("СуммаНДСВознаграждения"));
			Результат.ВалютаДокумента = ДокументОснование.ВалютаДокумента;

		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			Результат.СуммаДокумента  = ДокументОснование.СуммаДокумента;
			Результат.ВалютаДокумента = мВалютаРегламентированногоУчета;

		Иначе
			Если ЕстьРеквизитДокумента("СуммаДокумента", ДокументОснование.Метаданные()) Тогда
				Результат.СуммаДокумента  = ДокументОснование.СуммаДокумента;
			КонецЕсли;
			Если ЕстьРеквизитДокумента("ВалютаДокумента", ДокументОснование.Метаданные()) Тогда
				Результат.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

// Процедура вызывается по кнопке "Расчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |		,
	               |		Организация = &Организация
	               |		    И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |		    И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";
			
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    ВыручкаНДС = ВыручкаНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			ВыручкаБезНДС = ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			ВыручкаЕНВД = ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			ВыручкаНДС0 = ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(НачПериода=Неопределено, КонПериода= Неопределено,Организация, Фильтр = Неопределено,ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, СчетФактураПроведен = Неопределено, ДатаСФНеБолее = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  ?(ЗначениеНеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(ЗначениеНЕЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Фильтр",      Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (НЕ ЗначениеНеЗаполнено(НачПериода)) И (НЕ ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (НЕ ЗначениеНеЗаполнено(НачПериода)) И (ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (ЗначениеНеЗаполнено(НачПериода)) И (НЕ ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(ЗначениеНеЗаполнено(Организация), "", ?(ЗначениеНеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(ЗначениеНеЗаполнено(Фильтр), "", ?(ЗначениеНеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ТОГДА СчетФактураВыданный.Ссылка
					|		ИНАЧЕ СчетФактураПолученный.Ссылка
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ТОГДА СчетФактураВыданный.Ссылка.Проведен
					|		ИНАЧЕ СчетФактураПолученный.Ссылка.Проведен
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(ЗначениеНеЗаполнено(ДатаСФНеБолее), "", ?(ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ТОГДА СчетФактураВыданный.Дата
					|		ИНАЧЕ СчетФактураПолученный.Дата
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(ЗначениеНеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Ссылка
	|			ИНАЧЕ СчетФактураПолученный.Ссылка
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Проведен
	|			ИНАЧЕ СчетФактураПолученный.Проведен
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Дата
	|			ИНАЧЕ СчетФактураПолученный.Дата
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.Ссылка)";
		
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация",Условие_Основание);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

//////////////////////////////////////////////////////////////////////////
//Преобразование промежуточных таблиц для НДС

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

// Формирует список счетов учета косвенных расходов
Функция ОпределитьСчетаУчетаКосвенныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Формирует список счетов ОС, НМА и объектов строительства
Функция ОпределитьСчетаУчетаОСиНМА(ОбъектыУчета = "") Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета ="ОС" или ЗначениеНеЗаполнено(ОбъектыУчета) Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	Если ОбъектыУчета ="НМА" или ЗначениеНеЗаполнено(ОбъектыУчета) Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	Если ЗначениеНеЗаполнено(ОбъектыУчета) тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

Процедура ОтразитьПринятиеКУчетуОС(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок, ПереданНДСНаСтроительство = Ложь) Экспорт

	Если ТаблицаСписания.Количество() = 0 Тогда
		//Нет данных для отражения принятия к учету ОС
		Возврат;
	КонецЕсли; 
	
	ТаблицаДляОбработки = СформироватьТаблицуЗначений(ТаблицаСписания,Новый Структура("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость,Стоимость,НДС"));
	ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость","Стоимость, НДС");
	
	ОжидаетсяПринятиеКУчетуОС = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОжидаетсяПринятиеКУчетуОС", ОжидаетсяПринятиеКУчетуОС);
	Запрос.УстановитьПараметр("Период",  				СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",  		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидыЦенностей",      УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("Номенклатура",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("СчетУчетаНДС",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетУчетаНДС")));
	Запрос.УстановитьПараметр("СтавкаНДС",       	УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СтавкаНДС")));
	Запрос.УстановитьПараметр("НДСВключенВСтоимость",УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("НДСВключенВСтоимость")));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток,
	|	НДСпоОСиНМАОстатки.НДСОстаток,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&Период,
	|		Организация = &Организация
	|		    И Объект В (&Номенклатура)
	|		    И СчетФактура В (&СчетаФактуры)
	|		    И ВидЦенности В (&ВидыЦенностей)
	|		    И СтавкаНДС В (&СтавкаНДС)
	|		    И СчетУчетаНДС В (&СчетУчетаНДС)
	|		    И Состояние = &ОжидаетсяПринятиеКУчетуОС) КАК НДСпоОСиНМАОстатки";

	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	Распределение = Новый Структура("СуммаСНДС","Стоимость");
	Фильтр = Новый Структура("СчетФактура,ВидЦенности,Субконто1",,,"Номенклатура");
	ТаблицаКорректировкиНДСПокупки = СформироватьКорректирующиеЗаписи(ТаблицаДляОбработки,ТаблицаРезультатов,Распределение,Фильтр);
	
	Если ТаблицаКорректировкиНДСПокупки.Количество() = 0 Тогда
		ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура","Стоимость");
		Для каждого СтрокаВключенияВСтоимость Из ТаблицаДляОбработки Цикл
			СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаВключенияВСтоимость.СчетФактура+">, вид ценности <"+СтрокаВключенияВСтоимость.ВидЦенности+">, номенклатура <"+СтрокаВключенияВСтоимость.Номенклатура+">."+Символы.ПС+
			"Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС.",,Заголовок,СтатусСообщения.Внимание);
		КонецЦикла; 
		Возврат;
	КонецЕсли;
	
	// Выделение суммы без НДС и суммы НДС
	Для каждого СтрокаКорректировкиНДСПокупки из ТаблицаКорректировкиНДСПокупки Цикл
		БазоваяСуммаСНДС = СтрокаКорректировкиНДСПокупки.СуммаБезНДС+ СтрокаКорректировкиНДСПокупки.НДС;
		СтрокаКорректировкиНДСПокупки.СуммаБезНДС = Окр(СтрокаКорректировкиНДСПокупки.СуммаСНДС*СтрокаКорректировкиНДСПокупки.СуммаБезНДС/БазоваяСуммаСНДС,2);
		СтрокаКорректировкиНДСПокупки.НДС = СтрокаКорректировкиНДСПокупки.СуммаСНДС - СтрокаКорректировкиНДСПокупки.СуммаБезНДС;
	КонецЦикла; 
	
	////////////////////////////////////////////////////////
	//Отражение движений в регистре НДС покупки
	ТаблицаКорректировкиНДСПокупки.ЗаполнитьЗначения(?(ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию),"Событие");
	ЗагрузитьВТаблицуЗначений(ТаблицаКорректировкиНДСПокупки, ТаблицаДвиженийПокупки);
	//Отражение движений в регистре НДС покупки
	////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////
	// Движения по НДС партии
	ТаблицаКорректировкиНДСПокупки.Колонки.Субконто1.Имя = "Номенклатура";
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		
		СтрокиКорректировкиНДСПокупки = ТаблицаКорректировкиНДСПокупки.НайтиСтроки(Новый Структура("СчетФактура,ВидЦенности, Номенклатура",СтрокаСписания.СчетФактура,СтрокаСписания.ВидЦенности,СтрокаСписания.Номенклатура));
		Если СтрокиКорректировкиНДСПокупки.Количество()=0 Тогда
			//Если не найдены строки в результирующей таблице, включение НДС в стоимость не произведено.
			СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаСписания.СчетФактура+">, вид ценности <"+СтрокаСписания.ВидЦенности+">, номенклатура <"+СтрокаСписания.Номенклатура+">.
			| Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС (строка "+СтрокаСписания.НомерСтроки+").",,Заголовок,СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; //Для каждого Строка Из ТаблицаСписания Цикл
	// Движения по НДС партии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    СообщитьОбОшибке("При переименовании колонок таблиццы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    СообщитьОбОшибке("При переименовании колонок таблиццы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры
