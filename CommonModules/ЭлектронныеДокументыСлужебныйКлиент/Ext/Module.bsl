
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла (ключи структуры: "Расширение, ПолноеНаименование, АдресХранилища");
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла) Экспорт

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
			ДанныеФайла.Расширение);
		
		Расширение = ДанныеФайла.Расширение;
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение,
			Расширение);
		ВыборФайла.Фильтр = Фильтр;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.АдресХранилища;
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
				ДанныеФайла.Расширение);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
				|Пожалуйста, подождите.'"), ИмяФайла);
				
			Состояние(ТекстПояснения);
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу,
				ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.АдресХранилища;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
																		ДанныеФайла.Расширение);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
			|Пожалуйста, подождите.'"), ИмяФайла);
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено, ОткрытьАктуальныйЭД = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = СсылкаНаЭД;
	Если ОткрытьАктуальныйЭД Тогда
		ВходящийТитул = ЭлектронныеДокументыСлужебныйВызовСервера.ВходящийТитул(СсылкаНаЭД);
		Если Не ВходящийТитул = Неопределено Тогда
			ЭД = ВходящийТитул;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтруктурСертификатов = Новый Массив;
	
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("Ключ, СсылкаНаМассивСертификатов",
		ЭД, СсылкаНаМассивСертификатов);
	ПараметрыЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВидИВладелецЭД(ЭД);
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, , ЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы, ЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			Уникальность = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Уникальность") Тогда
				
				Уникальность = ПараметрыОткрытия.Уникальность;
			КонецЕсли;
			
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ООО "Venkon Group"
	ТелефонСлужбыПоддержки = "140-00-77";
	АдресЭлектроннойПочтыСлужбыПоддержки = "";

КонецПроцедуры

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

//<Raxx

Функция venkonПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи, ПараметрыСертификата = Неопределено, МассивНеПодписанныхЭД = Неопределено)
	
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	СтатусПодключения = ОбработчикиDidoxEImzo.ПроверитьРегистрациюКомпонентыЭО();
	Если СтатусПодключения = 0 Тогда
		ОбработчикиDidoxEImzoСервер.ПодключитьФайлКомпонентыVenkonЭДО(СтатусПодключения);
	КонецЕсли;
	
	Если СтатусПодключения <> 2 Тогда
		ТекстСообщения = "Отсутствует подключение к компоненте"; //ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	ВключениеСертификатовВПодпись = Истина;													
	keyId = ОбработчикиDidoxEImzo.ПолучитьЗагрузитьIDКлюча(СертификатПодписи);													
	Если keyId = Неопределено Тогда													
		Возврат 0;
	КонецЕсли;
	
	КоличествоПодписанныхЭД = 0;
	
	Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
		
		Попытка
			ДвоичныеДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
			ДанныеПодписи = venkonСформироватьДанныеПодписи(ТекДокумент, ДвоичныеДанныеФайла, СертификатПодписи, keyId);
			Подпись = Неопределено;
			
			Если НЕ ДанныеПодписи.Свойство("Подпись", Подпись) Или Подпись = Неопределено Тогда
				ВызватьИсключение "Произошла ошибка при подписании файла";
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи); //
			КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
			ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ТекДокумент);  //
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
			|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'установка подписи ЭП'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
			МассивНеПодписанныхЭД.Добавить(ТекДокумент);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

Функция venkonПодписатьСтроку(ДвоичныеДанные,
			СертификатПодписи) Экспорт
			
	ПодписаннаяСтрока = "";
			
	keyId = ОбработчикиDidoxEImzo.ПолучитьЗагрузитьIDКлюча(СертификатПодписи);													
	Если keyId = Неопределено Тогда													
		Возврат ПодписаннаяСтрока;
	КонецЕсли;
		
	Попытка
		ПодписаннаяСтрока = venkonПодписать(ДвоичныеДанные, keyId, СертификатПодписи);
	Исключение
		ТекстСообщения = "Произошли ошибки при подписании оферты";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Символы.ПС + ОписаниеОшибки());
		Возврат ПодписаннаяСтрока;
	КонецПопытки;
		
	Если ПодписаннаяСтрока = Неопределено ИЛИ ПодписаннаяСтрока = "" Тогда
		ТекстСообщения = "Произошли ошибки при подписании оферты";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ПодписаннаяСтрока;
	
КонецФункции

Функция venkonПодписать(ДвоичныеДанные, keyId, СертификатЭЦП = Неопределено, serialNumber = "")
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ФайлРезультатКода = ОбработчикиDidoxEImzo.ПодписатьФайл(ИмяФайла, keyId, СертификатЭЦП, serialNumber);
	
	ДД = Неопределено;
	Если ФайлРезультатКода <> Неопределено Тогда
		ДД = Новый ДвоичныеДанные(ФайлРезультатКода);
		УдалитьФайлы(ФайлРезультатКода);
	КонецЕсли;
	
	Возврат ДД;
	
КонецФункции

Функция venkonСформироватьДанныеПодписи(ОбъектДляПодписиСсылка, ДвоичныеДанные, Сертификат, keyId) Экспорт

	ДатаПодписи = Дата('00010101');
	
	serialNumber = "";
	
	НоваяПодписьДвоичныеДанные = venkonПодписать(ДвоичныеДанные, keyId, Сертификат, serialNumber);
	
	Если НоваяПодписьДвоичныеДанные = Неопределено Тогда
		ВызватьИсключение "Произошла ошибка при подписании файла!";
	КонецЕсли;
	
	ПараметрыСертификата = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(Сертификат, "Отпечаток, Наименование, ФайлСертификата");
	
	Отпечаток = Base64Строка(ПараметрыСертификата.Отпечаток);
	КомуВыданСертификат = ПараметрыСертификата.Наименование; 
	ДвоичныеДанныеСертификата = ПараметрыСертификата.ФайлСертификата.Получить();	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка",               ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("Отпечаток",                  Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДата());
	ДанныеПодписи.Вставить("Комментарий",                "");
	ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
	ДанныеПодписи.Вставить("КомуВыданСертификат",        КомуВыданСертификат);
	ДанныеПодписи.Вставить("АдресФайла",                 "");
	ДанныеПодписи.Вставить("Подпись",                    НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Сертификат",                 ДвоичныеДанныеСертификата);
	ДанныеПодписи.Вставить("СерийныйНомер",              serialNumber);
	
	Возврат ДанныеПодписи;
	
КонецФункции

//Raxx>

// Получает фактическую дату установки электронной подписи и двоичных данных подписи
//
// Параметры:
//  ДвоичныеДанныеПодписи - ДвоичныеДанные - подпись
//
// Возвращаемое значение - Дата или Неопределено.
//
Функция ДатаУстановкиПодписи(ДвоичныеДанныеПодписи) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеПодписи.Записать(ИмяВременногоФайла);
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
	Символ = ЧтениеТекста.Прочитать(1);
	Пока Символ <> Неопределено Цикл
		Если КодСимвола(Символ) = 15 Тогда
			Символ = ЧтениеТекста.Прочитать(2);
			Если КодСимвола(Символ, 1) = 23 И КодСимвола(Символ, 2) = 13 Тогда
				ДатаПодписания = ЧтениеТекста.Прочитать(12);
				ДатаПодписиНайдена = Истина;
				ЧтениеТекста.Закрыть();
				УдалитьФайлы(ИмяВременногоФайла);
				Возврат МестноеВремя(Дата("20" + ДатаПодписания));
			КонецЕсли;
		КонецЕсли;
		Символ = ЧтениеТекста.Прочитать(1);
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Неопределено;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		Для каждого Параметр Из параметрКоманды Цикл
			МассивСсылок.Добавить(Параметр.СсылкаНаОбъект);
		КонецЦикла;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
		МассивСсылок = Новый Массив;
		Для Каждого Элемент ИЗ ПараметрКоманды Цикл
			МассивСсылок.Добавить(Элемент);
		КонецЦикла;
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если НЕ ЗначениеЗаполнено(ПараметрКоманды) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД) Экспорт
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция venkonВыполнитьДействияПоЭДПодписать(Знач МассивСсылокНаОбъект,
	Знач Действия,
	ДопПараметры = "",
	Знач ЭД = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", Истина);
	СтруктураВозврата.Вставить("СообщенияПользователюЭД", Новый Массив);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", Новый Соответствие);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией", Новый Соответствие);
	
	СоответствиеСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеАктуальныхСертификатовДляПодписи(МассивСсылокНаОбъект, ЭД);
	
	КолПодписанных = 0;
	Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
		
		СсылкаНаЭД = КлючИЗначение.Ключ;
		ТЗ_УстановленныхПодписей = СсылкаНаЭД.ЭлектронныеЦифровыеПодписи.Выгрузить();
		
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			
			Подписан = 0;
			СертификатДляПодписи = КлючИЗначение.Значение[0];
						
			Если НЕ venkonПроверкаНаличияПодписи(ТЗ_УстановленныхПодписей, СертификатДляПодписи) Тогда
				Продолжить;
			КонецЕсли;
			
			// ИНТЕГРАЦИЯ ГНК
			Если ТЗ_УстановленныхПодписей <> Неопределено
				И ТЗ_УстановленныхПодписей.Количество() > 0 Тогда
				Подписан = ЭлектронныеДокументыСлужебныйВызовСервера.venkonПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, СертификатДляПодписи, Истина);
			Иначе
				Подписан = ЭлектронныеДокументыСлужебныйВызовСервера.venkonПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, СертификатДляПодписи);
			КонецЕсли;

			Если Подписан > 0 Тогда
				НовыйСтатусЭД = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ПодготовленКОтправке");
				СтруктураЭД = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураЭД, Ложь); 
				КолПодписанных = КолПодписанных + Подписан;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Если КолПодписанных > 0 Тогда
		СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
		(КолПодписанных) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция venkonПроверкаНаличияПодписи(ТЗ_УстановленныхПодписей, ТекущийСертификат)
	
	ДокументНеБылПодписан = Истина;
	
	Для каждого Стр_УстановленныхПодписей Из ТЗ_УстановленныхПодписей Цикл
		
		ДД_УстановленнойПодписи = Стр_УстановленныхПодписей["Сертификат"].Получить();
		ДД_ТекущегоСертификата =  ТекущийСертификат["ФайлСертификата"].Получить();
		
		Base64_УстановленнойПодписи = Base64Строка(ДД_УстановленнойПодписи);
		Base64_ТекущегоСертификата = Base64Строка(ДД_ТекущегоСертификата);
		
		Если Base64_УстановленнойПодписи = Base64_ТекущегоСертификата Тогда
			ДокументНеБылПодписан = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументНеБылПодписан;
	
КонецФункции

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных = 0, КолУтвержденных = 0, КолПодписанных = 0, КолПодготовленных = 0, КолОтправленных = 0, КолПолученных = 0, КолОбновленных = 0, КолОтказанных = 0, КолУдаленных = 0) Экспорт
	
	// Отправка
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КолПолученных + КолОбновленных > 0 Тогда	
		Если КолПолученных > 0 Тогда
			Если КолОбновленных > 0 Тогда
				Текст = НСтр("ru = 'Получено: (%1), обновлено: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПолученных, КолОбновленных);
			Иначе
				Текст = НСтр("ru = 'Получено: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПолученных);
			КонецЕсли;
		Иначе
			Если КолОбновленных > 0 Тогда
				Текст = НСтр("ru = 'Обновлено: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолОбновленных);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КолОтказанных + КолУдаленных > 0 Тогда	
		Если КолОтказанных > 0 Тогда
			Если КолУдаленных > 0 Тогда
				Текст = НСтр("ru = 'Отказано: (%1), удалено: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолОтказанных, КолУдаленных);
			Иначе
				Текст = НСтр("ru = 'Отказано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолОтказанных);
			КонецЕсли;
		Иначе
			Если КолУдаленных > 0 Тогда
				Текст = НСтр("ru = 'Удалено: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУдаленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//       если нужно обработать только один ЭД
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект, Действие, ДопПараметры = Неопределено, ЭД = Неопределено) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	ИтогКолОтказанных = 0;
	ИтогКолУдаленных = 0;
	Отказ = Ложь;
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	СообщенияПользователюЭД = Новый Массив;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Сформировать") Тогда
		
		РезультатСформировать = ЭлектронныеДокументыСлужебныйВызовСервера.venkonВыполнитьДействияПоЭДСформировать(МассивСсылокНаОбъект, Действие, ДопПараметры, ЭД);
		Если Не РезультатСформировать = Неопределено Тогда
			РезультатСформировать.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД);
			ИтогКолНовыхЭД = ?(ИтогКолНовыхЭД = Неопределено, 0, ИтогКолНовыхЭД);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияПользователюЭД, РезультатСформировать.СообщенияПользователюЭД);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Подписать") И НЕ Отказ Тогда
		
		РезультатПодписать = venkonВыполнитьДействияПоЭДПодписать(МассивСсылокНаОбъект, Действие, ДопПараметры, ЭД);
		Если Не РезультатПодписать = Неопределено Тогда
			РезультатПодписать.Свойство("КолПодписанных", ИтогКолПодписанных);
			ИтогКолПодписанных = ?(ИтогКолПодписанных = Неопределено, 0, ИтогКолПодписанных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияПользователюЭД, РезультатПодписать.СообщенияПользователюЭД);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Отправить") И ИтогКолПодписанных <> 0 И НЕ Отказ Тогда
		
		РезультатОтправить = ЭлектронныеДокументыСлужебныйВызовСервера.venkonВыполнитьДействияПоЭДОтправить(МассивСсылокНаОбъект, Действие, ДопПараметры, ЭД);
		Если Не РезультатОтправить = Неопределено Тогда
			РезультатОтправить.Свойство("КолПодготовленных", ИтогКолПодготовленных);
			РезультатОтправить.Свойство("КолОтправленных", ИтогКолОтправленных);
			ИтогКолПодготовленных = ?(ИтогКолПодготовленных = Неопределено, 0, ИтогКолПодготовленных);
			ИтогКолОтправленных = ?(ИтогКолОтправленных = Неопределено, 0, ИтогКолОтправленных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияПользователюЭД, РезультатОтправить.СообщенияПользователюЭД);
		КонецЕсли;
		
	КонецЕсли;

	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Отказать") Тогда
		
		РезультатОтказать = ЭлектронныеДокументыСлужебныйВызовСервера.venkonВыполнитьДействияПоЭДОтказать(МассивСсылокНаОбъект, Действие, ДопПараметры, ЭД);
		Если Не РезультатОтказать = Неопределено Тогда
			РезультатОтказать.Свойство("КолОтказанных", ИтогКолОтказанных);
			ИтогКолОтказанных = ?(ИтогКолОтказанных = Неопределено, 0, ИтогКолОтказанных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияПользователюЭД, РезультатОтказать.СообщенияПользователюЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Удалить") Тогда
		
		РезультатУдалить = ЭлектронныеДокументыСлужебныйВызовСервера.venkonВыполнитьДействияПоЭДУдалить(МассивСсылокНаОбъект, Действие, ДопПараметры, ЭД);
		Если Не РезультатУдалить = Неопределено Тогда
			РезультатУдалить.Свойство("КолУдаленных", ИтогКолУдаленных);
			ИтогКолУдаленных = ?(ИтогКолУдаленных = Неопределено, 0, ИтогКолУдаленных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияПользователюЭД, РезультатУдалить.СообщенияПользователюЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	Если ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ВывестиИнформациюОбОбработанныхЭД(
				ИтогКолНовыхЭД,
				ИтогКолУтвержденныхЭД,
				ИтогКолПодписанных,
				ИтогКолПодготовленных,
				ИтогКолОтправленных,
				,
				,
				ИтогКолОтказанных,
				ИтогКолУдаленных);
	Иначе
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
			(ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных + ИтогКолОтправленных 
			+ ИтогКолОтказанных + ИтогКолУдаленных) > 0);
	КонецЕсли;
		
	// Выводим накопленные сообщения пользователю.
	Для Каждого СообщениеПользователю Из СообщенияПользователюЭД Цикл
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
		СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	// Получение и отправка документов.
 	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы();
												
	Обновления = СтруктураВозврата["НовыеДокументы"];
	КолПолученных = Обновления["КоличествоНовыхДокументов"];
	КолОбновленных = Обновления["КоличествоОбновленныхДокументов"];
	ВывестиИнформациюОбОбработанныхЭД(, , , , , КолПолученных, КолОбновленных);											
		
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		
		Если СтруктураРаспаковки.Распаковывать Тогда
			
			ДанныеРаспаковки = venkonВернутьМассивДвоичныхДанныхПакета(СтруктураРаспаковки.ПакетЭД);
			
			Для каждого ДанныеПодписи Из ДанныеРаспаковки.МассивДанныхПодписей Цикл
				Для каждого Подпись Из ДанныеПодписи Цикл
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ДанныеРаспаковки.ПрисоединенныйФайл, Подпись);
					ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ДанныеРаспаковки.ПрисоединенныйФайл);
				КонецЦикла;
			КонецЦикла;
			
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
			
		КонецЕсли;
		
		venkonРаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, СтруктураРаспаковки);
		
	КонецЦикла;
	
	// Отказ партнера
	ДанныеПоОтказаннымДокументам = СтруктураВозврата.НовыеДокументы.ДанныеПоОтказаннымДокументам;
	Для каждого ПакетЭД Из ДанныеПоОтказаннымДокументам Цикл
		ЭлектронныеДокументыСлужебныйВызовСервера.venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, , , ПредопределенноеЗначение("Перечисление.СтатусыЭД.ОтклоненПолучателем"));
	КонецЦикла;
	
	Если НовыеДокументы.Свойство("ОбновитьНаличиеЭД") Тогда
		Оповестить("ОбновитьОСобытияхЭДО");
	КонецЕсли;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
		
	Оповестить("ОбновитьСостояниеЭД");
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - Вложенный каталог первого уровня (не используется, оставлено для совместимости)
//  КлючУникальности - Строка - Вложенный каталог второго уровня (не используется, оставлено для совместимости)
Функция РабочийКаталог(Знач Подкаталог = "", КлючУникальности = "") Экспорт
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + ОбщегоНазначенияКлиентСервер.РазделительПути();
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		ИмяКаталога = ИмяКаталога + Подкаталог + ОбщегоНазначенияКлиентСервер.РазделительПути();
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючУникальности) Тогда
		ИмяКаталога = ИмяКаталога + КлючУникальности + ОбщегоНазначенияКлиентСервер.РазделительПути();
	КонецЕсли;
	
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

//<Raxx

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  СтруктураШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//  ДанныеРаспаковки - Структура, содержит распакованные данные пакета
//
Функция venkonРаспаковатьПакетЭДНаКлиенте(ПакетЭД, СтруктураРаспаковки)
	
	МассивВозврата = Новый Массив;
	
	Попытка
		
		ДанныеРаспаковки = Неопределено;
		СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки);
		
		СтатусВДидокс = Неопределено;
		СтруктураРаспаковки.Свойство("Статус", СтатусВДидокс);
		
		Если ДанныеРаспаковки = Неопределено Тогда
			
			Если СтатусВДидокс <> Неопределено Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.venkonИзменитьЭДПоСтруктуреПараметровВызовСервера(ПакетЭД, СтатусВДидокс);
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.venkonДобавитьДанныеПоПакетуЭД(
																				ПакетЭД,
																				ДанныеРаспаковки,
																				ЕстьОшибкаРаспаковки,
																				СтатусВДидокс);
				
		Если Не ЕстьОшибкаРаспаковки Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, МассивДобавленныхФайлов);
		КонецЕсли;
		
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
									ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
// ПакетЭД             - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов,
//
// Возвращаемое значение:
//  СтруктураВозврата - массив двоичных данных.
//
Функция venkonВернутьМассивДвоичныхДанныхПакета(ПакетЭД = Неопределено, ВключаяПодписи = Истина, ФайлАрхива = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ПрисоединенныйФайл"); 
	
	Если ФайлАрхива = Неопределено Тогда
		
		ФайлАрхива = "";
		
		ПапкаДляРаспаковки = РабочийКаталог("ext", ПакетЭД.УникальныйИдентификатор());
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			СсылкаНаЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСсылкуНаЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат Неопределено;
			КонецЕсли;

			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(СсылкаНаЭД);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			СтруктураВозврата.Вставить("ФайлАрхива", ДвоичныеДанныеФайла);
			СтруктураВозврата.Вставить("ПрисоединенныйФайл", СсылкаНаЭД);
			
		Исключение
			
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
			
			Возврат СтруктураВозврата;
			
		КонецПопытки;
		
	Иначе
		
		СтруктураВозврата.Вставить("ФайлАрхива", Новый ДвоичныеДанные(ФайлАрхива));
		ПапкаДляРаспаковки = РабочийКаталог("ext");
		
	КонецЕсли;
	
	Попытка
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			//Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
			//	ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("006");
			//КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецПопытки;
		
		ЗИПЧтение.Закрыть();
		УдалитьФайлы(ФайлАрхива);
		
		// получение исходного файла
		МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, "*.xml", Истина);
		ДвоичныеДанныеДокумента = Неопределено; 
		ФайлДанных = Неопределено;
		Для каждого ФайлИсточник Из МассивФайловИсточник Цикл
			Если ФайлИсточник.ИмяБезРасширения <> "packageDescription" Тогда
				ФайлДанных = ФайлИсточник;
				ДвоичныеДанныеДокумента = Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивДанныхПодписей = Новый Массив; 
		
		Если ВключаяПодписи Тогда
			МассивФайловПодписей = НайтиФайлы(ПапкаДляРаспаковки, ФайлДанных.ИмяБезРасширения + "*.p7s", Истина);
			Для Каждого ФайлПодписи Из МассивФайловПодписей Цикл
				ДанныеПодписи = venkonСтруктураДанныхПодписи(ДвоичныеДанныеДокумента, ФайлПодписи);
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
			КонецЦикла;
		КонецЕсли;
		
		ФайлДанныхСтруктура = Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение");
		ЗаполнитьЗначенияСвойств(ФайлДанныхСтруктура , ФайлДанных);
		
		СтруктураВозврата.Вставить("ФайлДанных", ФайлДанныхСтруктура);
		СтруктураВозврата.Вставить("МассивДанныхПодписей", МассивДанныхПодписей);
		СтруктураВозврата.Вставить("ДвоичныеДанныеДокумента", ДвоичныеДанныеДокумента);
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
		ТекстОшибки,
		ТекстСообщения);
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция venkonСтруктураДанныхПодписи(ДвоичныеДанныеДокумента, ФайлПодписи) Экспорт
	
	ТекстОшибки = ""; 	
	МассивВозврата = Новый Массив; 
	ДанныеПодписи = Новый Структура;
	
	ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлПодписи.ПолноеИмя);
	ЧтениеТекста = Новый ЧтениеТекста(ФайлПодписи.ПолноеИмя);
	СтрокаПодписи = ЧтениеТекста.Прочитать();
	ИнформацияОПодписиСтркутура = ОбработчикиDidoxEImzo.ПолучитьИнформациюОПодписи(СтрокаПодписи);
	
	
	Успешно = Ложь; 
	Если ИнформацияОПодписиСтркутура.Свойство("success", Успешно) И Успешно Тогда
		ИнформацияОПодписиСоответствие = ИнформацияОПодписиСтркутура.pkcs7Info;
		ИнформацияОПодписантах = ИнформацияОПодписиСоответствие.Получить("signers");
		Подпись = ИнформацияОПодписантах[0]; 
		
		Для каждого Подпись Из ИнформацияОПодписантах Цикл
			
			ДатаПодписи = Подпись.Получить("signingTime");
			ДатаПодписи = ?(ЗначениеЗаполнено(ДатаПодписи), ОбработчикиDidoxEImzo.ПолучитьДатуИзСтроки(ДатаПодписи, 2), ТекущаяДата());
			
			certificates = Подпись.Получить("certificate");
			certificate = certificates[0];
			subjectName = certificate.Получить("subjectName");
			ДопДанныеСертификата = ОбработчикиDidoxEImzo.ОпределитьВладельцаСертификата(subjectName);
			
			// Серийный номер
			serialNumber = "";
			signerId = Подпись.Получить("signerId");
			Если signerId <> Неопределено Тогда
				subjectSerialNumber = signerId.Получить("subjectSerialNumber");
				Если subjectSerialNumber <> Неопределено Тогда
					serialNumber = subjectSerialNumber;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеПодписи.Вставить("ДвоичныеДанные",        ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеФайла",   ДвоичныеДанныеДокумента);
			ДанныеПодписи.Вставить("ИмяФайлаБезРасширения", ФайлПодписи.ИмяБезРасширения);
			ДанныеПодписи.Вставить("ИмяФайла",              ФайлПодписи.Имя);
			ДанныеПодписи.Вставить("ИмяФайлаПодписи",              ФайлПодписи.Имя);
			ДанныеПодписи.Вставить("ДатаПодписи",           ДатаПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("КомуВыданСертификат", ДопДанныеСертификата["КомуВыдан"]);
			ДанныеПодписи.Вставить("Отпечаток", Подпись.Получить("signature"));
			ДанныеПодписи.Вставить("ДанныеСертификатаПолучены", Успешно);
			ДанныеПодписи.Вставить("СтрокаПодписи", СтрокаПодписи);
			ДанныеПодписи.Вставить("АдресФайла", "");
			ДанныеПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Сертификат", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Комментарий", "");
			ДанныеПодписи.Вставить("СерийныйНомер", serialNumber);
			
			
			
			МассивВозврата.Добавить(ДанныеПодписи);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивВозврата;
	
КонецФункции


Процедура venkonПерезагрузитьПодписи(ПакетЭД, ВыводитьСообщения = Ложь) Экспорт
	
	ЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПрисоединенныйФайлПакетаЭДВызовСервера(ПакетЭД);
	
	ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД);
	МассивДанныхПодписей = Неопределено;
	Если ДанныеРаспаковки <> Неопределено И ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
		И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
		Для каждого СтруктураПодписи Из МассивДанныхПодписей Цикл
			СтрокаПодписи = "";
			ДДПодписи = Неопределено;
			Если СтруктураПодписи.Свойство("СтрокаПодписи", СтрокаПодписи)
				И СтруктураПодписи.Свойство("ДДПодписи", ДДПодписи) Тогда
				ДанныеПодписи = venkonСтруктураДанныхПодписиПоСтрокеПодписи(ДДПодписи, СтрокаПодписи);
				Для каждого Подпись Из ДанныеПодписи Цикл
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭД, Подпись);
					ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ЭД);
				КонецЦикла
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

Функция venkonСтруктураДанныхПодписиПоСтрокеПодписи(ДвоичныеДанныеПодписи, СтрокаПодписи) Экспорт
	
	ТекстОшибки = ""; 	
	МассивВозврата = Новый Массив;
	ДанныеПодписи = Новый Структура;
	ИнформацияОПодписиСтркутура = ОбработчикиDidoxEImzo.ПолучитьИнформациюОПодписи(СтрокаПодписи);  // Отказ от VenkonEImzo
	
	Если ИнформацияОПодписиСтркутура = Неопределено Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	
	Успешно = Ложь; 
	Если ИнформацияОПодписиСтркутура.Свойство("success", Успешно) И Успешно Тогда
		ИнформацияОПодписиСоответствие = ИнформацияОПодписиСтркутура.pkcs7Info;
		ИнформацияОПодписантах = ИнформацияОПодписиСоответствие.Получить("signers");
		Подпись = ИнформацияОПодписантах[0]; 
		
		Для каждого Подпись Из ИнформацияОПодписантах Цикл
			
			ДатаПодписи = Подпись.Получить("signingTime");
			ДатаПодписи = ?(ЗначениеЗаполнено(ДатаПодписи), ОбработчикиDidoxEImzo.ПолучитьДатуИзСтроки(ДатаПодписи, 2), ТекущаяДата());
			
			certificates = Подпись.Получить("certificate");
			certificate = certificates[0];
			subjectName = certificate.Получить("subjectName");
			ДопДанныеСертификата = ОбработчикиDidoxEImzo.ОпределитьВладельцаСертификата(subjectName);
			
			// Серийный номер
			serialNumber = "";
			signerId = Подпись.Получить("signerId");
			Если signerId <> Неопределено Тогда
				subjectSerialNumber = signerId.Получить("subjectSerialNumber");
				Если subjectSerialNumber <> Неопределено Тогда
					serialNumber = subjectSerialNumber;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеПодписи.Вставить("ДвоичныеДанные",        ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеФайла",   Неопределено);
			ДанныеПодписи.Вставить("ИмяФайлаБезРасширения", "");
			ДанныеПодписи.Вставить("ИмяФайла",              "");
			ДанныеПодписи.Вставить("ИмяФайлаПодписи",              "");
			ДанныеПодписи.Вставить("ДатаПодписи",           ДатаПодписи);
			ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("КомуВыданСертификат", ДопДанныеСертификата["КомуВыдан"]);
			ДанныеПодписи.Вставить("Отпечаток", Подпись.Получить("signature"));
			ДанныеПодписи.Вставить("ДанныеСертификатаПолучены", Успешно);
			ДанныеПодписи.Вставить("СтрокаПодписи", СтрокаПодписи);
			ДанныеПодписи.Вставить("АдресФайла", "");
			ДанныеПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Сертификат", ДвоичныеДанныеПодписи);
			ДанныеПодписи.Вставить("Комментарий", "");
			ДанныеПодписи.Вставить("СерийныйНомер", serialNumber);
			
			
			
			МассивВозврата.Добавить(ДанныеПодписи);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивВозврата;
	
КонецФункции

//Raxx>