
// Функция возвращает счета учета по выбранному объекту
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Объект      - ... строительства по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНДС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

Функция ПолучитьВыработкуДляНачисленияАмортизацииОС(Организация,НачалоПериода,КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыработкаДляНачисленияАмортизацииОСОбороты.ПараметрВыработки,
	|	ВыработкаДляНачисленияАмортизацииОСОбороты.ВыработкаОборот КАК Выработка
	|ИЗ
	|	РегистрНакопления.ВыработкаДляНачисленияАмортизацииОС.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ВыработкаДляНачисленияАмортизацииОСОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	
	
// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                     Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    ПолучитьОписаниеТиповЧисла(15,2));
 	ТаблицаАмортизации.Колонки.Добавить("ПереоценкаБух",          ПолучитьОписаниеТиповЧисла(15,2));
 	ТаблицаАмортизации.Колонки.Добавить("Мол");
  	ТаблицаАмортизации.Колонки.Добавить("Подразделение");
  	ТаблицаАмортизации.Колонки.Добавить("ГруппаОС");
	//ТаблицаАмортизации.Колонки.Добавить("УжеНачислялась",         ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",          КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериодаДляОстатков",          КонецМесяца(ДатаРасчета)+1);
	
	Если ОсновноеСредство = Неопределено Тогда
		ТекстУсловия = "";
		ТекстУсловияСубконто = "";
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		ТекстУсловияСубконто =   " И Субконто1 В (&ОсновноеСредство)";

	Конецесли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьНачальныйОстаток,
	|	0 КАК СтоимостьКонечныйОстаток,
	|	0 КАК АмортизацияНачальныйОстаток,
	|	0 КАК АмортизацияКонечныйОстаток,
	|	0 КАК АмортизацияОборот,
	|	0 КАК СтоимостьНаНачалоГода,
	|	0 КАК АмортизацияНаНачалоГода 
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0100))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0300)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаДляОстатков,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0100))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0300)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0200)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаДляОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0200)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотКт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0200)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация "+ТекстУсловияСубконто+", (НЕ корСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0200))), ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0100))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0300)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.а0200)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация "+ТекстУсловияСубконто+") КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(ТаблицаОстатков.СтоимостьНачальныйОстаток) КАК СтоимостьНачальныйОстаток,
	|	СУММА(ТаблицаОстатков.СтоимостьКонечныйОстаток) КАК СтоимостьКонечныйОстаток,
	|	СУММА(ТаблицаОстатков.АмортизацияНачальныйОстаток) КАК АмортизацияНачальныйОстаток,
	|	СУММА(ТаблицаОстатков.АмортизацияКонечныйОстаток) КАК АмортизацияКонечныйОстаток,
	|	СУММА(ТаблицаОстатков.АмортизацияОборот) КАК АмортизацияОборот,
	|	СУММА(ТаблицаОстатков.СтоимостьНаНачалоГода) КАК СтоимостьНаНачалоГода,
	|	СУММА(ТаблицаОстатков.АмортизацияНаНачалоГода) КАК АмортизацияНаНачалоГода
	|ПОМЕСТИТЬ СгруппированнаяТаблицаОстатков
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	СгруппированнаяТаблицаОстатков.СтоимостьНачальныйОстаток,
	|	СгруппированнаяТаблицаОстатков.СтоимостьКонечныйОстаток,
	|	СгруппированнаяТаблицаОстатков.АмортизацияНачальныйОстаток,
	|	СгруппированнаяТаблицаОстатков.АмортизацияКонечныйОстаток,
	|	СгруппированнаяТаблицаОстатков.АмортизацияОборот,
	|	СгруппированнаяТаблицаОстатков.СтоимостьНаНачалоГода,
	|	СгруппированнаяТаблицаОстатков.АмортизацияНаНачалоГода
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация "+ТекстУсловия+"
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство
	|						ИЗ
	|							РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
	|						ГДЕ
	|							СостоянияОСОрганизацийБухгалтерскийУчет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|							И СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния < &НачалоПериода
	|							И СостоянияОСОрганизацийБухгалтерскийУчет.Организация = &Организация))) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ СгруппированнаяТаблицаОстатков КАК СгруппированнаяТаблицаОстатков
	|		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СгруппированнаяТаблицаОстатков.ОсновноеСредство
	|ГДЕ
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ПараметрВыработкиОС,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КорректирующийКоэффициент
	|ПОМЕСТИТЬ ПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация "+ТекстУсловия+") КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация "+ТекстУсловия+") КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация "+ТекстУсловия+") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ГруппаОС
	|ПОМЕСТИТЬ ГруппыОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация "+ТекстУсловия+") КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация "+ТекстУсловия+") КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.ОсновноеСредство,
	|	ОсновнаяТаблица.НачислятьАмортизацию,
	|	ОсновнаяТаблица.СтоимостьНачальныйОстаток КАК СтоимостьНачальныйОстаток,
	|	ОсновнаяТаблица.СтоимостьКонечныйОстаток КАК СтоимостьКонечныйОстаток,
	|	ОсновнаяТаблица.АмортизацияНачальныйОстаток КАК АмортизацияНачальныйОстаток,
	|	ОсновнаяТаблица.АмортизацияКонечныйОстаток КАК АмортизацияКонечныйОстаток,
	|	ОсновнаяТаблица.АмортизацияОборот КАК АмортизацияОборот,
	|	ОсновнаяТаблица.СтоимостьНаНачалоГода КАК СтоимостьНаНачалоГода,
	|	ОсновнаяТаблица.АмортизацияНаНачалоГода КАК АмортизацияНаНачалоГода,
	|	ПараметрыАмортизации.КоэффициентАмортизации,
	|	ПараметрыАмортизации.ПараметрВыработкиОС,
	|	ПараметрыАмортизации.ПараметрВыработкиОС.ГодоваяНормаВыработки КАК ГодоваяНормаВыработки,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Подразделение,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации,
	|	ГруппыОС.ГруппаОС,
	|	ГруппыОС.СпособНачисленияАмортизации,
	|	СпособыОтраженияРасходов.СпособыОтраженияРасходовПоАмортизации,
	|	ПараметрыАмортизации.КорректирующийКоэффициент
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизации КАК ПараметрыАмортизации
	|		ПО ОсновнаяТаблица.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО ОсновнаяТаблица.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ОсновнаяТаблица.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыОС КАК ГруппыОС
	|		ПО ОсновнаяТаблица.ОсновноеСредство = ГруппыОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|		ПО ОсновнаяТаблица.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
	|ГДЕ
	|	ОсновнаяТаблица.СтоимостьНачальныйОстаток - ОсновнаяТаблица.АмортизацияНачальныйОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СгруппированнаяТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОсновнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МестонахождениеОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СчетаУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппыОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СпособыОтраженияРасходов";

	
	
	Результат= Запрос.Выполнить();
	ВыборкаПоОС = Результат.Выбрать();

	//ТаблицаГрафиков = ПолучитьТаблицуГрафиков();
	Выработка=ПолучитьВыработкуДляНачисленияАмортизацииОС(Организация,НачалоМесяца(ДатаРасчета),КонецМесяца(ДатаРасчета));

	
	//Если Месяц(ДатаРасчета)=1 Тогда
		СписокОС=Результат.Выгрузить();
		СписокОС.Свернуть("ОсновноеСредство","");
		
		ЗапросПоПереоценке=новый Запрос;
		ЗапросПоПереоценке.Текст=
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет01)
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Переоценка01,
		|	ХозрасчетныйОбороты.Субконто1 КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет02)
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Переоценка02
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет В ИЕРАРХИИ (&Счет01)
		|				ИЛИ Счет В ИЕРАРХИИ (&Счет02),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС),
		|			КорСчет = &Счет8510,
		|			) КАК ХозрасчетныйОбороты";
		
		ЗапросПоПереоценке.УстановитьПараметр("Организация",           Организация);
		ЗапросПоПереоценке.УстановитьПараметр("НачалоПериода",         НачалоМесяца(НачалоГода(ДатаРасчета)));
		ЗапросПоПереоценке.УстановитьПараметр("КонецПериода",          КонецМесяца(НачалоГода(ДатаРасчета)));
		ЗапросПоПереоценке.УстановитьПараметр("Счет8510", ПланыСчетов.Хозрасчетный.А8510);
		ЗапросПоПереоценке.УстановитьПараметр("Счет01", ПланыСчетов.Хозрасчетный.НайтиПоКоду("0100"));
		ЗапросПоПереоценке.УстановитьПараметр("Счет02", ПланыСчетов.Хозрасчетный.НайтиПоКоду("0200"));
		ЗапросПоПереоценке.УстановитьПараметр("СписокОС", СписокОС.ВыгрузитьКолонку("ОсновноеСредство"));
		
		ТаблицаПереоценки=ЗапросПоПереоценке.Выполнить().Выгрузить();
		ТаблицаПереоценки.Свернуть("ОсновноеСредство","Переоценка01,Переоценка02");
	
	//КонецЕсли; 
	
	Срез=РегистрыСведений.КоэффициентДляРасчетаИзносаОС.СрезПоследних(КонецМесяца(ДатаРасчета));
	Коэффициент=1;
	
	Если Срез.Количество()>0 Тогда
		
		Коэффициент=срез[0].Коэффициент;		
	
	КонецЕсли; 

	Пока ВыборкаПоОС.Следующий() Цикл
		
		Переоценка01=0;
		Переоценка02=0;
		
		Если Месяц(ДатаРасчета)=1 
			или ВыборкаПоОС.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			СтрокаТаблицыПереоценки= ТаблицаПереоценки.Найти(ВыборкаПоОС.ОсновноеСредство);
			
			Если СтрокаТаблицыПереоценки<>Неопределено Тогда
				Переоценка01=СтрокаТаблицыПереоценки.Переоценка01;
				Переоценка02=СтрокаТаблицыПереоценки.Переоценка02;
			КонецЕсли; 
		КонецЕсли;
		
		//Сообщить(ВыборкаПоОС.ОсновноеСредство);
		//Сообщить(Переоценка);
			
		Если НЕ ((ВыборкаПоОС.АмортизацияОборот-Переоценка02) = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан способ отражения расходов");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНачальныйОстаток+  Переоценка01) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		//Если ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
		//	Если ВыдаватьСообщения Тогда
		//		СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " срок использования равен 0");
		//	КонецЕсли; 
		//	Продолжить;
		//КонецЕсли;

		Если ВыборкаПоОС.НачислятьАмортизацию И НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент амортизации равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.ПараметрВыработкиОС) Тогда
				
				Если ВыдаватьСообщения Тогда
					СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не задан параметр выработки");
				КонецЕсли; 
				Продолжить;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		СуммаАмортизации = 0;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			
			СуммаАмортизации = Коэффициент*(ВыборкаПоОС.СтоимостьНачальныйОстаток + Переоценка01)* ВыборкаПоОС.КоэффициентАмортизации/1200;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			
			СтоимостьДляРасчета=0;
			
			Если ВыборкаПоОС.СтоимостьНаНачалоГода<>0 Тогда
				СтоимостьДляРасчета=ВыборкаПоОС.СтоимостьНаНачалоГода-ВыборкаПоОС.АмортизацияНаНачалоГода;
			Иначе
				СтоимостьДляРасчета=ВыборкаПоОС.СтоимостьНачальныйОстаток;//-ВыборкаПоОС.АмортизацияНачальныйОстаток;
			КонецЕсли;
				
			СуммаАмортизации = Коэффициент*(СтоимостьДляРасчета + Переоценка01)* ВыборкаПоОС.КоэффициентАмортизации/1200;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации=Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			
			Если ЗначениеЗаполнено(ВыборкаПоОС.ГодоваяНормаВыработки) Тогда 
				
				СтрокаВыработка=Выработка.Найти(ВыборкаПоОС.ПараметрВыработкиОС);
				
				Если СтрокаВыработка<>Неопределено Тогда
					
					СуммаАмортизации = Коэффициент*(ВыборкаПоОС.СтоимостьНачальныйОстаток + Переоценка01)* ВыборкаПоОС.КоэффициентАмортизации/100;
					СуммаАмортизации = СуммаАмортизации/ВыборкаПоОС.ГодоваяНормаВыработки*СтрокаВыработка.Выработка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		Если НЕ ВыборкаПоОС.КорректирующийКоэффициент = 0 Тогда
			СуммаАмортизации = СуммаАмортизации*ВыборкаПоОС.КорректирующийКоэффициент;
		КонецЕсли;	
		
		Если (ВыборкаПоОС.СтоимостьНачальныйОстаток-ВыборкаПоОС.АмортизацияНачальныйОстаток)=0 Тогда
			
			СуммаАмортизации = 0;
		
		КонецЕсли; 

		ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;
		СуммаАмортизации     = Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;
	  //СтрокаАмортизации.ПереоценкаБух          = ВыборкаПоОС.ПереоценкаКонечныйОстаток;
  		СтрокаАмортизации.Мол                    = ВыборкаПоОС.Мол;
   		СтрокаАмортизации.Подразделение          = ВыборкаПоОС.Подразделение;
   		СтрокаАмортизации.ГруппаОС               = ВыборкаПоОС.ГруппаОС;

	КонецЦикла;

	//ТаблицаАмортизации.Свернуть("ОС,СчетУчетаБУ,СчетАмортизацииБУ,ИмяСубконто,НаправлениеАмортизации,Бух,ПереоценкаБух,Мол,Подразделение,ГруппаОС","");
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Расчитывает сумму износа по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать износ.
//  ДатаРасчета                                 - Дата - Дата расчета износаю
//                                                Износ рассчитывается помесячно с начала года по заданную дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Список ОС с суммой рассчитонного износа
//
Функция РасчетИзносаБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт
	
	// Запрос определяет, являются ли объекты, перечисленные в параметре ОсновноеСредство, 
	// подлежащими начислению износа, и вычисляет их остаточную стоимость на дату расчета.
	//  В результате возвращается список только тех из переданных ОС, 
	// на которые действительно должен быть начислен износ на дату расчета.
	//
	//  Если параметр ОсновноеСредство не задан, возвращается список всех ОС,
	// у которых ПорядокПогашенияСтоимости = НачислениеИзноса и есть остаточная стоимость на дату расчета
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("КонецПериода", ДатаРасчета);
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса);
	Запрос.УстановитьПараметр("Состояние",                 Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство",          ОсновноеСредство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода,
	|																			ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости 
	|																			И Организация = &Организация
	|                                                                           " + ?(НЕ ЗначениеНеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, 
	|																				  Организация = &Организация
	|																				  " + ?(НЕ ЗначениеНеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , ,
	|																	 Организация = &Организация
	|																	 " + ?(НЕ ЗначениеНеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК ВосстановительнаяСтоимость
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета        = ВосстановительнаяСтоимость.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , ,
	|																	 Организация = &Организация
	|																	 " + ?(НЕ ЗначениеНеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК Износ
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство          = Износ.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = Износ.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) > 0
	|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство НЕ В 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство
	|		 ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
	|		 ГДЕ
	|			СостоянияОСОрганизацийБухгалтерскийУчет.Состояние      = &Состояние
	|			И
	|			СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния <= &КонецПериода)
	|" +
	?(НЕ ЗначениеНеЗаполнено(ОсновноеСредство), 
	  " И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство В (&ОсновноеСредство)",
	  "");
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МассивОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	// Строим соответствие ОС -> ОстаточнаяСтоимость
	ОстаточнаяСтоимостьОС = Новый Соответствие();
	Для Каждого СтрокаОС из ТаблицаОС Цикл
		ОстаточнаяСтоимостьОС.Вставить(СтрокаОС.ОсновноеСредство, СтрокаОС.ОстаточнаяСтоимость);
	КонецЦикла;
	
	// Формируем запрос, собирающий параметры для расчета износа
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", МассивОС);
	
	Для НомерМесяца = 1 По Месяц(ДатаРасчета) Цикл
		
		НомерМесяцаСтр = СокрЛП(НомерМесяца);
		
		Запрос.УстановитьПараметр("НачалоМесяца" + НомерМесяцаСтр, ДобавитьМесяц(НачалоГода(ДатаРасчета), НомерМесяца - 1));

		Запрос.Текст = Запрос.Текст + ?(НомерМесяца > 1, 
		                                "ОБЪЕДИНИТЬ ВСЕ
		                                |",
		                                "") +
										
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство                КАК ОсновноеСредство,
		|	ПервоначальныеСведения.ОсновноеСредство.Представление  КАК ОсновноеСредствоПредставление,
		|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации     КАК СчетНачисленияИзноса,		
		|	ВЫРАЗИТЬ(&НачалоМесяца" + НомерМесяцаСтр + " КАК ДАТА) КАК НачалоМесяца,
		|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
		|	ПараметрыАмортизации.КоэффициентАмортизации            КАК НормаАмортизации
		|	ПараметрыАмортизации.КорректирующийКоэффициент         КАК КорректирующийКоэффициент
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ",
		|																			Организация = &Организация
		|																		    И ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости
		|																		    И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																				  Организация = &Организация
		|																				  И ОсновноеСредство В (&ОсновноеСредство)) КАК СчетаБухгалтерскогоУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоМесяца" + НомерМесяцаСтр + ", , ,
		|																	 Организация = &Организация
		|																	 И Субконто1 В (&ОсновноеСредство)) КАК ВосстановительнаяСтоимость
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетУчета        = ВосстановительнаяСтоимость.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки (&НачалоМесяца" + НомерМесяцаСтр + ", , ,
		|																	  Организация = &Организация
		|																	  И Субконто1 В (&ОсновноеСредство)) КАК Износ
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство          = Износ.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации = Износ.Счет
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																							   Организация = &Организация
		|																							   И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																									 Организация = &Организация 
		|																									 И ОсновноеСредство В (&ОсновноеСредство)
		|																									 И НачислятьАмортизацию = ИСТИНА) КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|";
		
	КонецЦикла;
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();

	ТаблицаОС.Колонки.Добавить("Износ");
	
	// Расчет износа по объектам ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если ЗначениеНеЗаполнено(СтрокаОС.НормаАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				СообщитьОбОшибке("Бух. расчет износа: для основного средства " + СтрокаОС.ОсновноеСредствоПредставление + " на " + Формат(СтрокаОС.НачалоМесяца, "ДФ=dd.MM.yyyy")  + " не определена годовая норма аморт. отчислений");
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОС.Износ = СтрокаОС.ВосстановительнаяСтоимость * СтрокаОС.НормаАмортизации / 1200;
		
		Если НЕ СтрокаОС.КорректирующийКоэффициент = 0 Тогда
			СтрокаОС.Износ = СтрокаОС.Износ * СтрокаОС.КорректирующийКоэффициент;
		КонецЕсли;	
		
	КонецЦикла;
	
	// Сворачиваем таблицу по ОС и счету начисления износа
	ТаблицаОС.Свернуть("ОсновноеСредство, СчетНачисленияИзноса", "Износ");
	
	// Проверяем, не превышает ли рассчитанный износ остаточную стоимость ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаОС.Износ = Мин(СтрокаОС.Износ, ОстаточнаяСтоимостьОС[СтрокаОС.ОсновноеСредство]);
		
	КонецЦикла;
	
	Возврат ТаблицаОС;
	 
КонецФункции

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА
//Получает список НМА, учитываемых в указанной организации
//НМА включается в список если последняя организация, в которой он учитывался соответсвует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Орагнизация - СправочникСсылка.Орагнизации
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни обин объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрганизации(Период, Организация, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период,"+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|
		|ГДЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Нет подходящих объектов
		Возврат Новый массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

//Функция получает таблицу значений с указанием списка ОС или НМА и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, ТипУчета, НомерЖурнала, ТекстПроводки = Неопределено) Экспорт

	ДатаРасчета = ДокОбъект.Дата;

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("Мол");
	ТабЗатрат.Колонки.Добавить("Подразделение");
	ТабЗатрат.Колонки.Добавить("ГруппаОС");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.Сумма=0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " не указаны способы отражения расходов по амортизации",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения затрат по амортизации нет записей",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения расходов по амортизации не проставлены коэффициенты",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			СообщитьОбОшибке("Для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации есть нулевые коэффициенты",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				НоваяСтрока = ТабЗатрат.Добавить();
				НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
				НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
				НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
				НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
				НоваяСтрока.МОЛ                      = СтрокаТЗ.МОЛ;
				НоваяСтрока.Подразделение            = СтрокаТЗ.Подразделение;
				НоваяСтрока.ГруппаОС                 = СтрокаТЗ.ГруппаОС;
				НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
				НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
				НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;

				НоваяСтрока.Сумма                    = МассивСумм[СтрокаНапр.НомерСтроки - 1];
		КонецЦикла;

	КонецЦикла;

	Если ТипУчета = "Бух" Тогда

		ДопПараметры = Новый Структура;
		
		//формирование проводок
		Проводки = ДокОбъект.Движения.Хозрасчетный;

		Для каждого СтрокаЗатрат из ТабЗатрат Цикл

			Если ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();

			Проводка.Период       = ДатаРасчета;
			Проводка.Содержание   = ?(ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаЗатрат.Сумма;

			Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
			УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
			УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
			УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
			Если НЕ Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения) = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Проводка.СубконтоДт.Подразделения) Тогда
					УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, "Подразделения", СтрокаЗатрат.Подразделение);
				КонецЕсли;
			КонецЕсли;
			
			Если НомерЖурнала="НМА" Тогда
				Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
				
				Проводка.СубконтоКт.НематериальныеАктивы=СтрокаЗатрат.ОбъектУчета;
			Иначе
				Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
				
				Проводка.СубконтоКт.ОсновныеСредства=СтрокаЗатрат.ОбъектУчета;
				Проводка.СубконтоКт.МОЛ=СтрокаЗатрат.МОЛ;
				Проводка.СубконтоКт.Подразделения=СтрокаЗатрат.Подразделение;
				Проводка.СубконтоКт.ГруппыОС=СтрокаЗатрат.ГруппаОС;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
 
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

Функция ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Период) Экспорт

        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("Организация", Организация);
        Запрос.УстановитьПараметр("СписокОС", СписокОС);
        Запрос.УстановитьПараметр("НачалоПериода", Период);
        Запрос.УстановитьПараметр("ДатаНачалаПериода", ?(ТипЗнч(Период) = Тип("МоментВремени"), 
                                                       Период.Дата, 
                                                                                                   Период));
        Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
        Запрос.УстановитьПараметр("СнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
        
        Запрос.УстановитьПараметр("СчетПереоценкиОС_БУ",ПланыСчетов.Хозрасчетный.А8510);
        
        
        Запрос.Текст = 
                "ВЫБРАТЬ
                |	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
                |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
                |	ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
                |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
                |	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокДт, 0) КАК ИзносБУ,
                |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
                |	ВЫБОР
                |		КОГДА ОС_СнятыеСУчетаБУ.ОсновноеСредство ЕСТЬ NULL 
                |			ТОГДА ЛОЖЬ
                |		ИНАЧЕ ИСТИНА
                |	КОНЕЦ КАК СнятоСУчетаБУ,
                |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
                |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
                |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ,
                |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МестонахождениеОСДляГНИ,
				|	ЕСТЬNULL(ПереоценкаОс_БУ.СуммаОстатокКт, 0) КАК ПереоценкаБУ,
                |	ОС_БУ.СчетУчета КАК СчетУчетаБУ,
                |	ОС_БУ.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
                |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ГруппаОС,
                |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
                |ИЗ
                |	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
                |			&НачалоПериода,
                |			Организация = &Организация
                |				И ОсновноеСредство В (&СписокОС)) КАК ОС_БУ
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
                |				&НачалоПериода,
                |				,
                |				&СубконтоОС,
                |				Организация = &Организация
                |					И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
                |		ПО ОС_БУ.ОсновноеСредство = СтоимостьОС_БУ.Субконто1
                |			И ОС_БУ.СчетУчета = СтоимостьОС_БУ.Счет
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
                |				&НачалоПериода,
                |				,
                |				&СубконтоОС,
                |				Организация = &Организация
                |					И Субконто1 В (&СписокОС)) КАК АмортизацияОС_БУ
                |		ПО ОС_БУ.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
                |			И ОС_БУ.СчетНачисленияАмортизации = АмортизацияОС_БУ.Счет
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
                |				&НачалоПериода,
                |				Организация = &Организация
                |					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
                |		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
                |			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
                |		ИЗ
                |			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследних
                |		ГДЕ
                |			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаНачалаПериода
                |			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
                |			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(&СписокОС)
                |			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчетаБУ
                |		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчетаБУ.ОсновноеСредство
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
                |				&НачалоПериода,
                |				Организация = &Организация
                |					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
                |		ПО ОС_БУ.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
                |				&НачалоПериода,
                |				Организация = &Организация
                |					И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
                |		ПО ОС_БУ.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
                |				&НачалоПериода,
                |				Счет = &СчетПереоценкиОС_БУ,
                |				&СубконтоОС,
                |				Организация = &Организация
                |					И Субконто1 В (&СписокОС)) КАК ПереоценкаОс_БУ
                |		ПО ОС_БУ.ОсновноеСредство = ПереоценкаОс_БУ.Субконто1";
        ТЗ = Запрос.Выполнить().Выгрузить();

        Возврат ТЗ;

КонецФункции


// Функция расчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьПР
// - СтоимостьПРХоз
// - СтоимостьВР
// - СтоимостьВРХоз
//
Функция РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВБухгалтерскомУчете,
                                               СчетУчетаБУВнеоборотногоАктива,
                                               ОбъектСтроительства,
                                               Организация,
                                               Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаБУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("Период",              Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.Субконто2 КАК ВидЗатратПоСтроительству
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = &ТекСчетБУ,
	|			,
	|			Субконто1 = &ОбъектСтроительства
	|				И Организация = &ТекОрганизация) КАК ХозрасчетныйОстатки";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", 	Состояние);
	Запрос.УстановитьПараметр("ОС",             ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизацийБухгалтерскийУчет.Регистратор КАК Документ,
		|	СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
		|
		|ГДЕ
		|	СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизацийБухгалтерскийУчет.Организация = &Организация И
		|	СостоянияОСОрганизацийБухгалтерскийУчет.Состояние = &СостояниеОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияНМАОрганизацийБухгалтерскийУчет.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизацийБухгалтерскийУчет КАК СостоянияНМАОрганизацийБухгалтерскийУчет
	|ГДЕ
	|	СостоянияНМАОрганизацийБухгалтерскийУчет.НематериальныйАктив = &НМА
	|	И СостоянияНМАОрганизацийБухгалтерскийУчет.Организация = &Организация
	|	И СостоянияНМАОрганизацийБухгалтерскийУчет.Состояние = &СостояниеНМА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияНМАОрганизацийБухгалтерскийУчет.Регистратор.Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Функция ПолучитьПоследнееСостояниеОСБухгалтерскийУчет(Период,ОсновноеСредство, Организация) Экспорт

	ДанныеОСостоянии = Новый Структура("СостояниеОС,Дата,Документ,Событие,НазваниеДокумента,НомерДокумента");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ОС",          ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.Регистратор КАК Документ,
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.Состояние КАК СостояниеОС,
	|	СобытияОСОрганизацийБухгалтерскийУчет.Событие,
	|	СобытияОСОрганизацийБухгалтерскийУчет.НазваниеДокумента,
	|	СобытияОСОрганизацийБухгалтерскийУчет.НомерДокумента
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизацийБухгалтерскийУчет КАК СобытияОСОрганизацийБухгалтерскийУчет
	|		ПО СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.Регистратор =      СобытияОСОрганизацийБухгалтерскийУчет.Регистратор 
	|       И  СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.ДатаСостояния =    СобытияОСОрганизацийБухгалтерскийУчет.Период 
	|       И  СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.Организация =      СобытияОСОрганизацийБухгалтерскийУчет.Организация 
	|       И  СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.ОсновноеСредство = СобытияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство
	|
	|ГДЕ
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.ОсновноеСредство = &ОС И
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.Организация = &Организация И
	|	СостоянияОСОрганизацийБухгалтерскийУчетБухгалтерскийУчет.ДатаСостояния <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДоков = РезультатЗапроса.Выгрузить();

		ПоследняяЗаписьИндекс = ВыборкаДоков.Количество() - 1;
		
		ДанныеОСостоянии.Вставить("СостояниеОС"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].СостояниеОС);
		ДанныеОСостоянии.Вставить("Дата"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Дата);
		ДанныеОСостоянии.Вставить("Документ"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].Документ);
		ДанныеОСостоянии.Вставить("Событие"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Событие);
		ДанныеОСостоянии.Вставить("НазваниеДокумента" , ВыборкаДоков[ПоследняяЗаписьИндекс].НазваниеДокумента);
		ДанныеОСостоянии.Вставить("НомерДокумента"	  , ВыборкаДоков[ПоследняяЗаписьИндекс].НомерДокумента);

	КонецЕсли;
		
	Возврат ДанныеОСостоянии;
КонецФункции 

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

// Процедура выполняет стандартные действия при начале выбора состояния ОС в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытийОС(ЭлементФормы, ВидыСобытий=Неопределено, СтандартнаяОбработка, ЗаблокироватьПолученныеВидыСобытий = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий<>Неопределено Тогда

		Если ЗаблокироватьПолученныеВидыСобытий тогда
			// Удалим из выбора "неправильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеРавно;
			КонецЕсли;
		Иначе
			// Оставим в выборе только "правильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
        КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Процедура выполняет стандартные действия при начале выбора способов отражения расходов по амортизации формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация=Неопределено, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если Организация<>Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Поцедура проверяет дублирование состояний ОС. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийОС(Организация, ТаблицаЗаписей,Отказ,Заголовок) Экспорт

	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	ОС_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.СостоянияОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство,
			|	СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния,
			|	СостоянияОСОрганизацийБухгалтерскийУчет.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
			|
			|ГДЕ
			|	СостоянияОСОрганизацийБухгалтерскийУчет.Организация = &Организация И
			|	СостоянияОСОрганизацийБухгалтерскийУчет.Состояние = &Состояние И
			|	СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство В(&ОсновныеСредства)";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",ОС_ПоСостояниям[А-1]);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОшибкаПриПроведении("Для основного средства <"+Строка(Выборка.ОсновноеСредство)+"> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.ДатаСостояния,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

Функция ОпределитьСтоимостьПоСпискуНМА(Организация, СписокНМА,Период) Экспорт

	СубконтоНМА = Новый массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СписокНМА",     СписокНМА);
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(?(ТипЗнч(Период) = Тип("МоментВремени"),Период.Дата, Период)));
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ?(ТипЗнч(Период) = Тип("МоментВремени"),Период.Дата, Период));
	Запрос.УстановитьПараметр("СубконтоНМА",   СубконтоНМА);
	Запрос.УстановитьПараметр("СнятоСУчета",       Перечисления.ВидыСостоянийНМА.Списан);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НМА_БУ.НематериальныйАктив,
	|	НМА_БУ.СчетУчета КАК СчетУчетаБУ,
	|	НМА_БУ.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	ЕСТЬNULL(АмортизацияНМА_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(СтоимостьНМА_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	ВЫБОР
	|		КОГДА НМА_СнятыеСУчетаБУ.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчетаБУ
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК НМА_БУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоПериода,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	|			И НМА_БУ.СчетУчета = СтоимостьНМА_БУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоМесяца,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	|			И НМА_БУ.СчетНачисленияАмортизации = АмортизацияНМА_БУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияНМАОрганизацийБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив
	|		ИЗ
	|			РегистрСведений.СостоянияНМАОрганизацийБухгалтерскийУчет КАК СостоянияНМАОрганизацийБухгалтерскийУчет
	|		ГДЕ
	|			СостоянияНМАОрганизацийБухгалтерскийУчет.ДатаСостояния <= &ДатаНачалаПериода
	|			И СостоянияНМАОрганизацийБухгалтерскийУчет.Организация = &Организация
	|			И СостоянияНМАОрганизацийБухгалтерскийУчет.НематериальныйАктив В(&СписокНМА)
	|			И СостоянияНМАОрганизацийБухгалтерскийУчет.Состояние = &СнятоСУчета) КАК НМА_СнятыеСУчетаБУ
	|		ПО НМА_БУ.НематериальныйАктив = НМА_СнятыеСУчетаБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО НМА_БУ.Организация = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация
	|			И НМА_БУ.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	ЧисловыеКолонки = Новый Структура("СтоимостьБУ,АмортизацияБУ");

	Для каждого СтрокаТЗ из ТЗ цикл

		Для каждого Колонка из ЧисловыеКолонки цикл

			Если СтрокаТЗ[Колонка.Ключ] = Null тогда
				СтрокаТЗ[Колонка.Ключ] = 0;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;

КонецФункции


// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНМА(ДатаРасчета, Организация, НематериальныйАктив = Неопределено, ВыдаватьСообщения = Истина) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("НематериальныйАктив",    Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ПолучитьОписаниеТиповСтроки(20));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    ПолучитьОписаниеТиповЧисла(15,2));
	 //ТаблицаАмортизации.Колонки.Добавить("ПереоценкаБух",          ПолучитьОписаниеТиповЧисла(15,2));
	 //ТаблицаАмортизации.Колонки.Добавить("Мол");
	 // ТаблицаАмортизации.Колонки.Добавить("Подразделение");
	//ТаблицаАмортизации.Колонки.Добавить("УжеНачислялась",         ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",          КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериодаДляОстатков",          КонецМесяца(ДатаРасчета)+1);
	Запрос.УстановитьПараметр("Период",                ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",           Перечисления.ВидыСостоянийНМА.Списан);

	Если НематериальныйАктив = Неопределено Тогда
		ТекстУсловия = "";
	Иначе
		Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
		ТекстУсловия =           " И НематериальныйАктив В (&НематериальныйАктив)";
	Конецесли;

	СубконтоНМА = Новый Массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СубконтоНМА", СубконтоНМА);
	
	//" + ТекстУсловия + "
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтоимостьНМАНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМАКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМАКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМАОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				"+ТекстУсловия+") КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					"+ТекстУсловия+") КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					"+ТекстУсловия+") КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоНМА, Организация = &Организация) КАК СтоимостьНМАНачалоПериода
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМАНачалоПериода.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМАНачалоПериода.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаДляОстатков, , &СубконтоНМА, Организация = &Организация) КАК СтоимостьНМАКонецПериода
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМАКонецПериода.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМАКонецПериода.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаДляОстатков, , &СубконтоНМА, Организация = &Организация) КАК АмортизацияНМАКонецПериода
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМАКонецПериода.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМАКонецПериода.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &СубконтоНМА, Организация = &Организация) КАК СтоимостьНаНачалоГода
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНаНачалоГода.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНаНачалоГода.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, , &СубконтоНМА, Организация = &Организация, , ) КАК АмортизацияНМАОбороты
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМАОбороты.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМАОбороты.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &СубконтоНМА, Организация = &Организация) КАК АмортизацияНаНачалоГода
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНаНачалоГода.Субконто1
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНаНачалоГода.Счет
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию";

	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоНМА.Следующий() Цикл

		//Если не ВыборкаПоНМА.НачислятьАмортизацию Тогда
		//	Прод
		//КонецЕсли;
		
		Если НЕ (ВыборкаПоНМА.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (НематериальныйАктив = Неопределено) Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для нематериального актива " + ВыборкаПоНМА.НематериальныйАктив + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если ЗначениеНеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для нематериального актива " + ВыборкаПоНМА.НематериальныйАктив + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для нематериального актива " + ВыборкаПоНМА.НематериальныйАктив + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоНМА.СтоимостьНачальныйОстаток) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для нематериального актива " + ВыборкаПоНМА.НематериальныйАктив + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВыборкаПоНМА.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибке("Бух. расчет амортизации: для нематериального актива " + ВыборкаПоНМА.НематериальныйАктив + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		
		СуммаАмортизации = 0;
		
		СуммаАмортизации = окр(ВыборкаПоНМА.СтоимостьНачальныйОстаток/ВыборкаПоНМА.СрокПолезногоИспользования,2);


		ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьКонечныйОстаток - ВыборкаПоНМА.АмортизацияКонечныйОстаток;
		СуммаАмортизации     = Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.НематериальныйАктив    = ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоНМА.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоНМА.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "НематериальныеАктивы";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНМА.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()


// Поцедура проверяет дублирование состояний НМА. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМА(Организация, Период, ТаблицаЗаписей,Отказ,Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	НМА_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияНМАОрганизаций.НематериальныйАктив,
			|	СостоянияНМАОрганизаций.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияНМАОрганизацийБухгалтерскийУчет КАК СостоянияНМАОрганизаций
			|ГДЕ
			|	СостоянияНМАОрганизаций.Состояние = &Состояние
			|	И СостоянияНМАОрганизаций.ДатаСостояния <= &Период
			|	И СостоянияНМАОрганизаций.НематериальныйАктив В(&НематериальныеАктивы)
			|	И (НЕ СостоянияНМАОрганизаций.Регистратор = &ТекущийРегистратор)
			|	И СостоянияНМАОрганизаций.Организация = &Организация";
			
			//"ВЫБРАТЬ
			//|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
			//|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
			//|ИЗ
			//|	РегистрСведений.СостоянияНМАОрганизацийБухгалтерскийУчет.СрезПоследних(
			//|		&Период,
			//|		Организация = &Организация
			//|		    И НематериальныйАктив В (&НематериальныеАктивы)
			//|		    И Состояние = &Состояние
			//|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);
			Запрос.УстановитьПараметр("Период",Период-1);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОшибкаПриПроведении("Для НМА <"+Строка(Выборка.НематериальныйАктив)+"> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.Регистратор.Дата,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО ОС

// Процедура проверяет наличие одних и тех же основных средств в табличной
// части "Основные средства" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ОсновноеСредство", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаТаблицыДублей.ОсновноеСредство));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части ""Основные средства"" указано одно и то же основное средство.";
								   
		КонецЦикла;
														  
		ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиОС()

// Процедура проверяет наличие одинаковых инвентарных номеров основных средств 
// в табличной части "Основные средства" и выдает сообщение об ошибке при 
// проведении.
//
Процедура ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Удаляем лишние пробелы из полей, в которых хранятся инвентарные номера.
	Для Каждого СтрокаТаблицыОС Из ТаблицаПоОС Цикл
		СтрокаТаблицыОС.ИнвентарныйНомер = СокрЛП(СтрокаТаблицыОС.ИнвентарныйНомер);
	КонецЦикла;
	
	// Проверка повторения инвентарных номеров.
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ИнвентарныйНомер", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ИнвентарныйНомер", СтрокаТаблицыДублей.ИнвентарныйНомер));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части ""Основные средства"" указан одинаковый инвентарный номер.";
			
		КонецЦикла;
														  
		ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиИнвентарныхНомеровОС()


