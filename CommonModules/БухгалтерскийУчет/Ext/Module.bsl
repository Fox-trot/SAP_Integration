
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

Процедура ПереоценкаСчетаРегл(СтруктураШапкиДокумента,ПроводкиБУ,СчетПереоценки, ВалютаРегламентированногоУчета="",ВставитьПервой=Истина,РассчитыватьОстатки=Истина, Заголовок = Неопределено,СчетаСОсобымПорядкомПереоценкиБУ = Неопределено) экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	СтатьяПрочихДоходовРасходов    = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;

	Организация     = СтруктураШапкиДокумента.Организация;
	ДатаДока        = СтруктураШапкиДокумента.Дата;
	
	Ссылка 			= СтруктураШапкиДокумента.Ссылка;
	Если Заголовок = Неопределено Тогда
		Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли; 
	МоментДокумента = Новый МоментВремени( ДатаДока,Ссылка);
	
	ВалютаДокумента = Неопределено;

	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента);
	Если ВалютаДокумента = ВалютаРегламентированногоУчета тогда
		ВалютаДокумента = Неопределено;
	КонецЕсли;

	//Получение списка и аналитики счетов для переоценки
	ТекСчет = "";

	СчетПереоценки.Свойство("Счет", ТекСчет);
	Если СчетПереоценки.Свойство("СуммаПереоценкиРегл") = Неопределено Тогда
		СчетПереоценки.Вставить("СуммаПереоценкиРегл", 0);
	КонецЕсли;

	СуммаПереоценкиРегл = 0;
	
	Если ЗначениеНеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;

	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;

	Если СчетаСОсобымПорядкомПереоценкиБУ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
		|ИЗ
		|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ";
		
		СчетаСОсобымПорядкомПереоценкиБУ = Новый списокЗначений();
		СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	КонецЕсли; 
	
	Если не СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекСчет) = Неопределено тогда
		Возврат;
	КонецЕсли;

	//получение остатков, переоценка валютных счетов
	ОстатокВалРегУчета = 0;
	ОстатокИнаяВал     = 0;

	Если РассчитыватьОстатки тогда

		СтруктураОтбора = Новый Структура("Счет",ТекСчет);
		СтруктураОтбора.Вставить("Организация", Организация);

		Реквизиты    = "Счет,Валюта";
		ВидыСубконто = Новый массив();

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл

			Если Не(ТекВидСубконто.ТолькоОбороты) тогда

				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты = Реквизиты + ",Субконто" + (ВидыСубконто.ВГраница() + 1);
				ТекЗначениеФильтра = "";

				Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
					СтруктураОтбора.Вставить("Субконто" + (ВидыСубконто.ВГраница() + 1),ТекЗначениеФильтра);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		РеестрОстатков = РегистрыБухгалтерии.Хозрасчетный.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		Для каждого Стр из РеестрОстатков цикл
			Если ЗначениеНеЗаполнено(Стр.Валюта) Тогда
				СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится."+Символы.ПС
				+ "   - счет: "+ТекСчет.код + " <"+ТекСчет.Наименование+">";
				Для НомерСубконто = 1 по ВидыСубконто.Количество() Цикл
					СтрокаСообщения=СтрокаСообщения+ Символы.ПС+ "    - субконто <"+ВидыСубконто[НомерСубконто-1].Наименование+"> : """+ Стр["Субконто"+НомерСубконто]+"""";
				КонецЦикла; 
				СообщитьОбОшибке(СтрокаСообщения,,Заголовок);
				Продолжить;
			КонецЕсли;  

			Если (ЗначениеНеЗаполнено(ВалютаДокумента)) или не(ВалютаДокумента = Стр.Валюта) тогда
				ДанныеОВалютеОстатка = ПолучитьКурсВалюты(Стр.Валюта,ДатаДока);
			Иначе
				ДанныеОВалютеОстатка = Новый Структура("Курс,Кратность",СтруктураШапкиДокумента.КурсДокумента,СтруктураШапкиДокумента.КратностьДокумента);
			КонецЕсли;

			ОстатокВалРегУчета = Стр.СуммаОстатокДт - Стр.СуммаОстатокКт;
			ОстатокИнаяВал     = Стр.ВалютнаяСуммаОстатокДт - Стр.ВалютнаяСуммаОстатокКт;
			РасчетныйОстатокВалРегУчета = ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
			                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность,1);

			Если ОстатокВалРегУчета = РасчетныйОстатокВалРегУчета тогда
				Продолжить;
			КонецЕсли;

			РасчетныйОстатокВалРегУчета = РасчетныйОстатокВалРегУчета-число(ОстатокВалРегУчета);
			Если РасчетныйОстатокВалРегУчета=0 тогда
				Продолжить;
			КонецЕсли;

			СуммаПереоценкиРегл = СуммаПереоценкиРегл + РасчетныйОстатокВалРегУчета;
			
			Проводка = ?(ВставитьПервой, ПроводкиБУ.Вставить(0), ПроводкиБУ.Добавить());

			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валюты";

			Если РасчетныйОстатокВалРегУчета < 0 тогда

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А9620;
				//Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
				Проводка.СчетКт = ТекСчет;

				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоКт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;

				Проводка.ВалютаКт = Стр.Валюта;
				Проводка.Сумма    = -РасчетныйОстатокВалРегУчета;

			Иначе

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А9540;
				//Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
				Проводка.СчетДт = ТекСчет;

				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоДт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;

				Проводка.ВалютаДт = Стр.Валюта;
				Проводка.Сумма    = РасчетныйОстатокВалРегУчета;

			КонецЕсли;


		КонецЦикла;

		СчетПереоценки.Вставить("СуммаПереоценкиРегл", СуммаПереоценкиРегл);
		
		Возврат;

	Иначе

		СчетПереоценки.Свойство("РублевыйОстаток", ОстатокВалРегУчета);
		СчетПереоценки.Свойство("ВалютныйОстаток", ОстатокИнаяВал);

	КонецЕсли;

	ДанныеОВалютеОстатка = ПолучитьКурсВалюты(ВалютаДокумента,ДатаДока);

	РасчетныйОстатокВалРегУчета = ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
	                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность, 1);

	Если ОстатокВалРегУчета = РасчетныйОстатокВалРегУчета тогда
		возврат;
	КонецЕсли;

	РасчетныйОстатокВалРегУчета = РасчетныйОстатокВалРегУчета - Число(ОстатокВалРегУчета);
	СуммаПереоценкиРегл = СуммаПереоценкиРегл + РасчетныйОстатокВалРегУчета;
	ФильтрСубконто = Неопределено;

	Если РасчетныйОстатокВалРегУчета < 0 тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Переоценка валюты";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;

		Проводка.СчетКт = ТекСчет;
		ТекВидСубконто  = ТекСчет.ВидыСубконто;

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоКт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;

		Проводка.ВалютаКт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.Сумма           = -РасчетныйОстатокВалРегУчета;

	ИначеЕсли РасчетныйОстатокВалРегУчета>0 тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Переоценка валюты";

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А9540;
		//Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;

		Проводка.СчетДт = ТекСчет;
		ТекВидСубконто  = ТекСчет.ВидыСубконто;

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл

			НомерСубконто = ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоДт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;

		КонецЦикла;

		Проводка.ВалютаДт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.Сумма           = РасчетныйОстатокВалРегУчета;

	КонецЕсли;
	
	СчетПереоценки.Вставить("СуммаПереоценкиРегл", СуммаПереоценкиРегл);

КонецПроцедуры // ПереоценкаСчетаРегл

// Формирует по проводкам документа список валютных счетов для переоценки, запускает переоценку.
//
// Параметры
// 	Объект          		- ДокументОбъект        	- Документ для которого выполняется процедура.
// 	ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  	 	Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		Валюта				- СправочникСсылка.Валюты	- ссылка на валюту документа
//		Курс				- Число
//		Кратность			- Число
//
//  ИспользоватьКурсИзСправочника - Булево				- Для передачи в процедуру переоценки,
//													 	 определяет режим выбора курса при переоценке.
//															Ложь - курс берется из документа.
//															Истина - курс берется из справочника "Валюты".
//															Значение по умолчанию: Ложь.
//
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Функция ПереоценкаСчетовДокументаРегл(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета="",Отказ) экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ПроводкиБУ      = ДокументОбъект.Движения.Хозрасчетный;
	ВалютаДокумента = СтруктураШапкиДокумента.ВалютаДокумента;

	Если ПроводкиБУ.Количество() = 0 тогда // (ВалютаДокумента = ВалютаРегламентированногоУчета) ИЛИ
		Возврат Истина;
	КонецЕсли;


	//Подготовка таблицы значений для формирования списка счетов для переоценки
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("Субконто1");
	ТаблицаСчетов.Колонки.Добавить("Субконто2");
	ТаблицаСчетов.Колонки.Добавить("Субконто3");
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС1", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС2", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС3", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("СуммаПереоценкиРегл", ПолучитьОписаниеТиповЧисла(15,2));

   	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
	|ИЗ
	|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ";
	
	СчетаСОсобымПорядкомПереоценкиБУ = Новый списокЗначений();
	СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
    	
	//Формирование списка счетов для переоценки
	Для каждого ТекПроводка из ПроводкиБУ Цикл

		Если ТекПроводка.СчетКт.Валютный тогда

			Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетКт)= Неопределено тогда

				ТекСчет = ТекПроводка.СчетКт;
				ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
				ТекЗаписьТаблицы.Счет = ТекСчет;

				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

					ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
					ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

		Если ТекПроводка.СчетДт.Валютный тогда

			Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетДт)=Неопределено тогда

				ТекСчет = ТекПроводка.СчетДт;
				ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
				ТекЗаписьТаблицы.Счет = ТекСчет;

				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

					ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
					ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТаблицаСчетов.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ИспользованиеС1,ИспользованиеС2,ИспользованиеС3", "СуммаПереоценкиРегл");
    ЕстьПереоценкаСобственныхЦенностей = Ложь;
	//Запуск процедуры переоценки для каждого счета
	Для каждого ТекСчет из ТаблицаСчетов цикл

		СчетДляПереоценки = новый структура("Счет",ТекСчет.Счет);

		Для Индекс = 1 по 3 Цикл

			Если ТекСчет.Получить(Индекс + 3) тогда
				СчетДляПереоценки.Вставить("Субконто" + Индекс, ТекСчет.Получить(Индекс));
			КонецЕсли;

		КонецЦикла;

		ПереоценкаСчетаРегл(СтруктураШапкиДокумента, ПроводкиБУ, СчетДляПереоценки, ВалютаРегламентированногоУчета, Истина,,,СчетаСОсобымПорядкомПереоценкиБУ);
		
		СуммаПереоценкиРегл = 0;
		СчетДляПереоценки.Свойство("СуммаПереоценкиРегл", СуммаПереоценкиРегл);
		ТекСчет.СуммаПереоценкиРегл = СуммаПереоценкиРегл;
		
		Если ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А5000) ИЛИ
			ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А5100) ИЛИ
			ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А5200) ИЛИ
			ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А5500) ИЛИ
			ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А5700) Тогда
					
		    ЕстьПереоценкаСобственныхЦенностей = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ПереоценкаСчетовДокументаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт

	Возврат ?(Счет.Пустая(), 0, ?(Счет.Количественный, Количество, 0));

КонецФункции // КоличествоВПроводку()


// Функция возвращает список вышестоящих групп указанной номенклатуры.
// 
// Переметры:
//  Номенклатура - Номенклатура, для которой ищется родитель
//  СписокГрупп  - Список, куда передаются группы.
//
// Возвращаемое значение
//  Список вышестояших групп
//
Процедура ПолучитьСписокВышестоящихГрупп(СписокГрупп, Номенклатура)

	Если ЗначениеНеЗаполнено(Номенклатура.Родитель) тогда
		Возврат;
	Иначе
		СписокГрупп.Добавить(Номенклатура.Родитель);
		ПолучитьСписокВышестоящихГрупп(СписокГрупп, Номенклатура.Родитель);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокВышестоящихГрупп()

// Функция возвращает истину, если на указанном складе ведется розничная
// торговля. Используется при определении счетов учета номенклатуры,
// выполняемом при заполнении документов.
//
Функция НаСкладеВедетсяРозничнаяТорговля(Склад) Экспорт
	
	ВедетсяРозничнаяТорговля = Ложь;
	Если Склад <> Неопределено Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			Если (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) или
				 (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				 
				ВедетсяРозничнаяТорговля = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВедетсяРозничнаяТорговля;

КонецФункции // НаСкладеВедетсяРозничнаяТорговля()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено) Экспорт

	СтруктураВозврата = Новый Структура("
							|СчетУчетаБУ, СчетУчетаНДС, СчетУчетаНДСПродажи, СчетНДСТаможни,
							|СчетУчетаДавСырья,               СчетПередачиБУ, СчетУчетаДоп,   СчетПередачиЗабБУ,
							|СчетДоходовБУ, СчетРасходовБУ");
							
	СтруктураВозврата.СчетУчетаБУ         = Номенклатура.СчетУчетаБУ;

	
	//СтруктураВозврата.СчетУчетаНДС        = СведенияОСчетах.СчетУчетаНДСПоПриобретеннымЦенностям;
	//СтруктураВозврата.СчетУчетаНДСПродажи = СведенияОСчетах.СчетУчетаНДСПоРеализации;
	//СтруктураВозврата.СчетНДСТаможни      = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
	//СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
	//СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
	//СтруктураВозврата.СчетДоходовБУ       = СведенияОСчетах.СчетДоходовОтРеализацииБУ;
	//СтруктураВозврата.СчетПередачиБУ      = СведенияОСчетах.СчетУчетаПередачиБУ;
	//СтруктураВозврата.СчетПередачиЗабБУ   = СведенияОСчетах.СчетУчетаПередачиЗабалансовыйБУ;
	//СтруктураВозврата.СчетРасходовБУ      = СведенияОСчетах.СчетРасходовОтРеализацииБУ;
							
	Возврат СтруктураВозврата;
							


КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                             ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если Не ЗначениеНеЗаполнено(Организация) 
	   И Не ЗначениеНеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда

	//	СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

#Если Клиент тогда

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	//ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

	//	СтандартнаяОбработка = Ложь;
	//	ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
	//	ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
	//	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

Процедура ОткрытьЖурналПроводок(Ссылка, Регистр = "БУ") Экспорт

	Если Регистр = "БУ" Тогда

		ФормаСписка = РегистрыБухгалтерии.Хозрасчетный.ПолучитьФорму("ФормаСписка",,Новый УникальныйИдентификатор());
		
		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.РегистрБухгалтерииСписок.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Получает сумму списания активов для заполнения печатных форм документов
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции

#КонецЕсли

// Создание структуры таблицы для хранения данных об отборе по субконто каждой корреспонденции
Функция СоздатьТаблицуДляХраненияОтбора(Знач ДобавлятьКолонкуИспользования = Ложь) Экспорт
	
	ТаблицаОтбора = Новый ТаблицаЗначений();
		
	ТаблицаОтбора.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеС");
	ТаблицаОтбора.Колонки.Добавить("ЗначениеПо");
	
	Если ДобавлятьКолонкуИспользования Тогда
		ТаблицаОтбора.Колонки.Добавить("Использование");
	КонецЕсли;
	
	Возврат ТаблицаОтбора;
	
КонецФункции
