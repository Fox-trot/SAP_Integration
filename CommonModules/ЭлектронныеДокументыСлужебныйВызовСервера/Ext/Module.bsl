////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. эту функцию в модуле ЭлектронныеДокументыСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
	Знач ИдентификаторФормы = Неопределено,
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(
	ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев = Неопределено, МассивСсылокНаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не МассивСсылокНаВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
		Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	ИначеЕсли Не МассивСсылокНаЭД = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК СсылкаНаЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивСсылокНаЭД);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

//<Raxx

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура venkonОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			venkonОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.venkonОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент, ВерсияФорматаПакета,
	ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
	
	СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, НаправлениеЭД, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СвойстваЭД.ВладелецФайла);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		НоваяЗаписьНабора.СсылкаНаОбъект = СвойстваЭД.ВладелецФайла;
		НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
		НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СвойстваЭД.ВладелецФайла;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
		НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, СтруктураПараметров = Неопределено, ОписаниеОшибки = "", НовыйСтатусЭД = "") Экспорт
	
	ЭлектронныеДокументыВнутренний.venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, СтруктураПараметров, ОписаниеОшибки, НовыйСтатусЭД);
	
КонецПроцедуры
//Raxx>

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
		СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
		СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	//<Raxx
	//Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Создан Тогда
	//	НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
	//	НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	//КонецЕсли;
	//Raxx>
	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыВнутренний.venkonВернутьМассивДвоичныхДанныхПакета(ПакетЭД);

КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	
	// Библиотека стандартных подсистем
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", 		"ИспользоватьЭлектронныеЦифровыеПодписи");
	СоответствиеФО.Вставить("ИспользоватьДополнительныеОтчетыИОбработки", 	"ИспользоватьДополнительныеОтчетыИОбработки");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД", 				"ИспользоватьОбменЭД");
		
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьСсылкуНаЭДПоОтбору(Параметры) Экспорт
	
	Ссылка = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
	
	Выборка = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Параметры);
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

//<Raxx

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//  ФайлыПакета - Соответствие - Содержит данные файлов пакета
//    * Ключ - Строка - Имя файла
//    * Значение - Строка - Ссылка на временное хранилище двоичных данных файла
//
Функция venkonДобавитьДанныеПоПакетуЭД(ПакетЭД,
	ДанныеРаспаковки,
	ФлагОшибки = Ложь,
	Статус = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ПрофильНастроекЭДО, 
	|Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
	
	МассивДобавленныхФайлов = Новый Массив;
	
	Попытка
		
		НачатьТранзакцию();
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("dec", ПакетЭД.Ссылка.УникальныйИдентификатор());
		
		ФайлСДанными = ДанныеРаспаковки.ФайлДанных;
		ОписаниеОшибки = "";
		ДанныеФайлаЭД = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ФайлСДанными.ПолноеИмя, ОписаниеОшибки);
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		СтруктураФайлаЭД = Новый Структура;
		ЭлектронныеДокументыВнутренний.venkonПрочитатьШапкуФайлаCMLпоXDTO(ПакетЭД, ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
		venkonДополнитьСтруктуруПараметров(ПакетЭД, СтруктураФайлаЭД);
		ЭлектронныеДокументыВнутренний.venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, СтруктураФайлаЭД, ОписаниеОшибки, , Статус);
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
		
		// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами
		СтруктураФайлаЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
		СтруктураФайлаЭД.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
		
		СтруктураПараметров = Новый Структура;
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлСДанными.ПолноеИмя);
		ФайлСДаннымиСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		СтруктураПараметров.Вставить("ФайлДанныхСсылка", ФайлСДаннымиСсылка);
		ОбъектВладелец = ПакетЭД;
		
		Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.Контрагент, "Партнер");
			СтруктураФайлаЭД.Вставить("Партнер", Партнер);
		КонецЕсли;
		
		Если ОбъектВладелец <> Неопределено Тогда
			СтруктураПараметров.Вставить("ВладелецЭД", ОбъектВладелец);
		КонецЕсли;
		СтруктураЭД = ЭлектронныеДокументыВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
		
		НовыйДокумент = Неопределено;
		Если НЕ (СтруктураЭД.Свойство("ВладелецЭД", НовыйДокумент) И ЗначениеЗаполнено(НовыйДокумент)) Тогда
			ФлагОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ФлагОшибки Тогда
			ОбъектВладелец = ?(ЗначениеЗаполнено(ОбъектВладелец), ОбъектВладелец, НовыйДокумент);
			НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(НовыйДокумент.Номер);
			НаборЗаписей.Прочитать();
			МассивЗаписейКУдалению = Новый Массив;
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
				Если ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ПроизвольныйЭД") И ЗначениеЗаполнено(ДокументПотомок) Тогда
					Попытка
						ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
						ДокументОбъект.ДокументОснование = ОбъектВладелец;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
					Исключение
						ЗаписьРегистра.ОснованиеПолучено = Истина;
						ЗаписьРегистра.ДокументОснование = ОбъектВладелец;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
				НаборЗаписей.Удалить(ЗаписьРегистра);
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			
			// Добавим информацию о присоединенном файле в документ пакета электронных документов
			Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
				
				НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
				НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
				НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
				
			КонецЦикла;
			
			ПакетЭДОбъект.Записать();
			
		КонецЕсли;
		
		Если ФлагОшибки Тогда
			ОтменитьТранзакцию();
			МассивДобавленныхФайлов = Неопределено;
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'При распаковке пакетаЭД: ""%1"" возникла ошибка:
		|%2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		ПакетЭД, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
		ТекстСообщения);
		ФлагОшибки = Истина;
		МассивДобавленныхФайлов = Неопределено;
	КонецПопытки;
	
	//УдалитьФайлы(ПапкаДляРасшифровки);
	
	Возврат МассивДобавленныхФайлов;
	
КонецФункции

Функция venkonИзменитьЭДПоСтруктуреПараметровВызовСервера(ПакетЭД, СтатусВДидокс) Экспорт
	
	ЭлектронныеДокументыВнутренний.venkonИзменитьЭДПоСтруктуреПараметров(ПакетЭД, , , , СтатусВДидокс);
	
КонецФункции

Процедура venkonДополнитьСтруктуруПараметров(ПакетЭД, СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПрофильНастроекЭДО", 	ПакетЭД.ПрофильНастроекЭДО);
	СтруктураПараметров.Вставить("ОтправительЭД", 		ПакетЭД.Отправитель);
	СтруктураПараметров.Вставить("ПолучательЭД", 		ПакетЭД.Получатель);
	
КонецПроцедуры

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция venkonТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		ТекущееСостояниеЭДО = venkonСостояниеВерсииЭД(СсылкаНаВладельца);
		Результат = Строка(ТекущееСостояниеЭДО);
		
		Гиперссылка = Истина;
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Гиперссылка = Ложь;
			Результат = НСтр("ru = 'ЭДО не начат'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура venkonОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВнешнийУИД, ПрофильНастроекЭДО, Организация");
	ПрофильНастроекЭДО = ПараметрыЭД["ПрофильНастроекЭДО"];
	Если ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка() Тогда
		ПрофильНастроекЭДО = ЭлектронныеДокументыВнутренний.ОпределитьПрофильПоОрганизации(ПараметрыЭД["Организация"]);
		Если ПрофильНастроекЭДО = Неопределено Тогда
			ТекстСообщения = ""; 
			ПодробноеПредставлениеОшибки = "Ошибка при определении профиля ЭДО!";
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	ОтветСервера = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьИнформациюОбЭД(ПрофильНастроекЭДО, Соединение, ПараметрыЭД["ВнешнийУИД"]);
	JSON_ИнформацияОбЭД = "";
	Если ОтветСервера = Неопределено Тогда
		ТекстСообщения = ""; 
		ПодробноеПредставлениеОшибки = "Ошибка при при работе с сервером ЭДО!";
		ВидОперации = НСтр("ru = 'проверка электронной подписи'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат;
	Иначе
		JSON_ИнформацияОбЭД = ОтветСервера.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Если JSON_ИнформацияОбЭД = "[]" Тогда
		ТекстСообщения = ""; 
		ПодробноеПредставлениеОшибки = "Не получены данные из сервера ЭДО!";
		ВидОперации = НСтр("ru = 'проверка электронной подписи'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СоответствиеJSON = ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(JSON_ИнформацияОбЭД, Истина);
	ПолеSignature = СоответствиеJSON.Получить("signature");
	Если ТипЗнч(ПолеSignature) = Тип("Null") ИЛИ ПолеSignature = Неопределено  Тогда
		ТекстСообщения = ""; 
		ПодробноеПредставлениеОшибки = "Нет данных по статусам подписей!";
		ВидОперации = НСтр("ru = 'проверка электронной подписи'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивПодписей = ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(ПолеSignature, Истина);
	
	Если ТипЗнч(МассивПодписей) <> Тип("Массив") Тогда
		ТекстСообщения = ""; 
		ПодробноеПредставлениеОшибки = "Нет данных по статусам подписей!";
		ВидОперации = НСтр("ru = 'проверка электронной подписи'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбъектЭД = ЭД.ПолучитьОбъект();

	Для каждого СтрокаЭП Из ОбъектЭД.ЭлектронныеЦифровыеПодписи Цикл
		
		ПодписьВерна = Ложь;
		
		Для каждого СоответсиеПодписей Из МассивПодписей Цикл
			
			Если СоответсиеПодписей.Получить("success") = Неопределено 
				ИЛИ СоответсиеПодписей.Получить("success") = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			pkcs7Info = СоответсиеПодписей.Получить("pkcs7Info");
			
			Если pkcs7Info = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			signers =  pkcs7Info.Получить("signers");
			
			Если signers = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПодписьВерна = venkonПроверитьПодпись(СтрокаЭП.СерийныйНомер, signers);
			Если ПодписьВерна Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаЭП.ПодписьВерна = ПодписьВерна;
		
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

Функция venkonПроверитьПодпись(СерийныйНомерКлюча, signers)
	
	Для каждого signer Из signers Цикл
		
		signerId = signer.Получить("signerId");
		
		Если signerId = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		subjectSerialNumber = signerId.Получить("subjectSerialNumber");
		
		Если subjectSerialNumber = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СерийныйНомерКлюча = subjectSerialNumber Тогда
			
			verified = signer.Получить("verified");
			certificateValidAtSigningTime = signer.Получить("certificateValidAtSigningTime");
			
			Если verified = Истина И certificateValidAtSigningTime = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура venkonПерезагрузитьПодписи(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	ПакетЭД = ЭД.ВладелецФайла;
	
	ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка);
	МассивДанныхПодписей = Неопределено;
	Если ДанныеРаспаковки <> Неопределено И ДанныеРаспаковки.Свойство("МассивДанныхПодписей", МассивДанныхПодписей)
		И ТипЗнч(МассивДанныхПодписей) = Тип("Массив") Тогда 
		Для каждого ДанныеПодписи Из МассивДанныхПодписей Цикл
			Для каждого Подпись Из ДанныеПодписи Цикл
				ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭД, Подпись);
				ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(ЭД);
			КонецЦикла
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
// СертификатПодписи  - ссылка - ссылка на элемент справочника Сертификаты ЭП.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, Организация, НаправлениеЭД, Расширение, ТипЭлементаВерсииЭД");
		
		Если Найти(ПараметрыЭД.Расширение, "xml") > 0 Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыЭД.Расширение);
			ДвоичныеДанныеЭД.Записать(ИмяФайла);
			
		ИначеЕсли Найти(ПараметрыЭД.Расширение, "zip") > 0 Тогда
			
			ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
			ДвоичныеДанныеЭД.Записать(ИмяАрхива);
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяАрхива);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("signature", СсылкаНаЭД.УникальныйИдентификатор());
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если Не ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"),
				ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			ЗИПЧтение.Закрыть();
			
			ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Если ФайлыЭД.Количество() > 0 Тогда
				ИмяФайла = ФайлыЭД[0].ПолноеИмя;
			КонецЕсли;
			
			УдалитьФайлы(ИмяАрхива);
		КонецЕсли;
		
		ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
		
	КонецЕсли;
		
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция venkonВыполнитьДействияПоЭДСформировать(Знач МассивСсылокНаОбъект,
	Знач Действия,
	ДопПараметры = "",
	Знач ЭД = Неопределено) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// +aldo
	ЭтоПроизвольныйЭД = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ВидЭД") И ДопПараметры.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Если ЭД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДопПараметры.Вставить("Вложения", ЭД[0]);
		ДопПараметры.Вставить("Владелец", МассивСсылокНаОбъект);
		ЭтоПроизвольныйЭД = Истина;
	КонецЕсли;
	// -aldo
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", Истина);
	СтруктураВозврата.Вставить("СообщенияПользователюЭД", Новый Массив);
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	// +aldo
	Если (ЭД = Неопределено ИЛИ ЭтоПроизвольныйЭД) И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
	// -aldo

		УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			//ВидЭД = "";
			//Если ЗначениеЗаполнено(ДопПараметры) Тогда
			//	ДопПараметры.Свойство("ВидЭД", ВидЭД);
			//КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.venkonОпределитьНастройкиОбменаЭД(СсылкаНаОбъект, ДопПараметры);
			// Проверим, что в полученных настройках используются действующие форматы
			ЭлектронныеДокументыСлужебный.АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, 
			СтруктураВозврата.СообщенияПользователюЭД);
			
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект.ВладелецФайла";
		
		//Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
		//	
		//	ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
		//	ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
		//	|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
		//	|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))
		//	|ИЛИ (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		//	|		И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен)
		//	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)))";
		//	
		//Иначе
		//	
		//	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		//	"СчетФактураВыданныйВМетаданных");
		//	
		//	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		//		
		//		ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
		//		|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
		//		|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
		//		|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
		//		|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
		//		|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
		//		|	ИНАЧЕ ИСТИНА
		//		|КОНЕЦ)";
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Метаданные.РегистрыСведений.СостоянияЭД.Измерения.СсылкаНаОбъект.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		// Счета фактуры из ТЗ_ЭД переместим в новую таблицу значений
		// чтобы при формировании с.ф. были ссылки на ЭД документа основания
		ТЗ_ЭД_СФ = Новый ТаблицаЗначений;
		ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СчетФактураВыданныйВМетаданных");
		
		Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
			
			ТЗ_ЭД_СФ = ТЗ_ЭД.СкопироватьКолонки();
			н = 0;
			Пока н < ТЗ_ЭД.Количество() Цикл
				
				СтрокаТЗ = ТЗ_ЭД[н];
				Если ТипЗнч(СтрокаТЗ.ВладелецЭД) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
					НоваяСтрока = ТЗ_ЭД_СФ.Добавить();
					НоваяСтрока.ВладелецЭД = СтрокаТЗ.ВладелецЭД;
					
					ТЗ_ЭД.Удалить(СтрокаТЗ);
				Иначе 
					н = н +1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивНовыхЭД = Новый Массив;
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																							НастройкиОбъектов,
																							ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		
		// Если с.ф. формировались отдельно, занесем их в общий массив ЭД
		// для дальнейшей обработки.
		Если ТЗ_ЭД_СФ.Количество() > 0 Тогда
			МассивНовыхСФ = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД_СФ.ВыгрузитьКолонку("ВладелецЭД"),
																							НастройкиОбъектов,
																							ДопПараметры);
			КолНовыхСФ = МассивНовыхСФ.Количество();
			
			КолНовыхЭД = КолНовыхЭД + КолНовыхСФ;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхЭД, МассивНовыхСФ);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
		
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
		(КолНовыхЭД) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция venkonВыполнитьДействияПоЭДОтправить(Знач МассивСсылокНаОбъект,
	Знач Действия,
	ДопПараметры = "",
	Знач ЭД = Неопределено) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// +aldo
	ЭтоПроизвольныйЭД = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ВидЭД") И ДопПараметры.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Если ЭД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДопПараметры.Вставить("Вложения", ЭД[0]);
		ДопПараметры.Вставить("Владелец", МассивСсылокНаОбъект);
		ЭтоПроизвольныйЭД = Истина;
	КонецЕсли;
	// -aldo
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", Истина);
	СтруктураВозврата.Вставить("СообщенияПользователюЭД", Новый Массив);
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	
	Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
		МассивСсылокЭД = Новый Массив;
		МассивСсылокЭД.Добавить(ЭД);
	Иначе
		МассивСсылокЭД = ЭД;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	ТекстОсновногоЗапроса = ПолучитьТекстОсновногоЗапросаДействийЭД(ЭД);

	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящийЭД", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
		
	// Отправка ЭД:
	
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью, САвторизацией, САвторизациейЛогинПароль",
	Новый Массив, Новый Массив, Новый Соответствие, Новый Соответствие);
	
	КолОтправленных = 0;
	КолПодготовленных = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД";
		
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		
		ИспользоватьЭЦП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
		
		Запрос.УстановитьПараметр("НаправлениеВходящий",        Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭЦП",            ИспользоватьЭЦП);
		
		Запрос.Текст = ТекстОсновногоЗапроса 
		+ "
		|;
		|//////////
		|" + ТекстЗапроса;
		
		Тз_Эд_КОтправке = Запрос.Выполнить().Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если Тз_Эд_КОтправке.Количество() > 0 Тогда
			
			ВремТз = Тз_Эд_КОтправке.Скопировать();
			МассивПодписанныхЭДКОтправке = ВремТз.ВыгрузитьКолонку("СсылкаНаЭД");
			Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
				СтруктураКОтправке.СПодписью.Добавить(Элемент);
			КонецЦикла;
			
			// +aldo
			ВремТз = Тз_Эд_КОтправке.Скопировать();
			ТзПрофилейНастроекЭДО = ВремТз.Скопировать();
			ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
			МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
			
			Если ЭтоПроизвольныйЭД Тогда
				ДопПараметры.Вставить("ПрофилиНастроекЭДО", МассивПрофилейНастроекЭДО);
			КонецЕсли;
			// -aldo
			
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи, ДопПараметры, ЭтоПроизвольныйЭД); // Raxx
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
				МассивЭД = Новый Массив;
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивЭД);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураКОтправке.Вставить("САвторизациейЛогинПароль", СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
		
		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
		(КолПодготовленных + КолОтправленных) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция venkonВыполнитьДействияПоЭДОтказать(Знач МассивСсылокНаОбъект,
	Знач Действия,
	ДопПараметры = "",
	Знач ЭД = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", Истина);
	СтруктураВозврата.Вставить("СообщенияПользователюЭД", Новый Массив);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", Новый Соответствие);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией", Новый Соответствие);
		
	Отказано = 0;
	Если ТипЗнч(ЭД) = Тип("Массив") Тогда	
		Для каждого Элемент Из ЭД Цикл
			
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда	
				
				ПакетЭД = Элемент.ВладелецФайла;
				СтруктураПакетаЭД 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ВнешнийУИД, Получатель, ПрофильНастроекЭДО");
				ПрофильНастроекЭДО 	= СтруктураПакетаЭД.ПрофильНастроекЭДО;
				ИДПолучателя       	= СтруктураПакетаЭД.Получатель;
				ИДДокумента        	= СтруктураПакетаЭД.ВнешнийУИД;
				
				ТекущийСтатус = 0;
				ТекущийСтатус = ЭлектронныеДокументыВнутренний.venkonОтказатьЭД(ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
				Отказано = Отказано + ТекущийСтатус;
				
				Если ТекущийСтатус = 1 Тогда
					venkonИзменитьСостояниеЭДДокументовОснования(ПакетЭД, "Отказать");
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("КолОтказанных", Отказано);
		
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
		(Отказано) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция venkonВыполнитьДействияПоЭДУдалить(Знач МассивСсылокНаОбъект,
	Знач Действия,
	ДопПараметры = "",
	Знач ЭД = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", Истина);
	СтруктураВозврата.Вставить("СообщенияПользователюЭД", Новый Массив);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", Новый Соответствие);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией", Новый Соответствие);
		
	Удаление = 0;
	Если ТипЗнч(МассивСсылокНаОбъект) = Тип("Массив") Тогда	
		Для каждого Элемент Из МассивСсылокНаОбъект Цикл
			
			ПакетЭД = Документы.ПакетЭД.ПустаяСсылка();
			
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда	
				
				ПакетЭД = Элемент.ВладелецФайла;
				СтруктураПакетаЭД 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ВнешнийУИД, Получатель, ПрофильНастроекЭДО");
				ПрофильНастроекЭДО 	= СтруктураПакетаЭД.ПрофильНастроекЭДО;
				ИДПолучателя       	= СтруктураПакетаЭД.Получатель; //
				ИДДокумента        	= СтруктураПакетаЭД.ВнешнийУИД;
				
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.ПакетЭД") Тогда
				
				ПакетЭД = Элемент;
				СтруктураПакетаЭД 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ВнешнийУИД, Отправитель, ПрофильНастроекЭДО");
				ПрофильНастроекЭДО 	= СтруктураПакетаЭД.ПрофильНастроекЭДО;
				ИДПолучателя       	= СтруктураПакетаЭД.Отправитель; //
				ИДДокумента        	= СтруктураПакетаЭД.ВнешнийУИД;
				
			КонецЕсли;
			
			Если Не ПакетЭД.Пустая() Тогда
				
				ТекущийСтатус = ЭлектронныеДокументыВнутренний.venkonУдалитьЭД(ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента);
				Удаление = Удаление + ТекущийСтатус;
				
				Если ТекущийСтатус = 1 Тогда
					venkonИзменитьСостояниеЭДДокументовОснования(ПакетЭД, "Удалить");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("КолУдаленных", Удаление);
			
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
		(Удаление) > 0);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьТекстОсновногоЗапросаДействийЭД(ЭД)
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
		|	ЭДПрисоединенныеФайлы.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылокЭД)
		|";
	Иначе
		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
		|	ЭДПрисоединенныеФайлы.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
		|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|	И НЕ(ЭДПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
	|И (Выбор Когда ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеВходящийЭД
	|		И ЭДПрисоединенныеФайлы.ВидЭД В (&МассивИсключаемыхВидовЭД)
	|	Тогда Ложь
	|	Иначе Истина
	|	Конец)";
	
	Возврат ТекстОсновногоЗапроса;
	
КонецФункции

Функция ПолучитьСоответствиеАктуальныхСертификатовДляПодписи(МассивСсылокНаОбъект, ЭД) Экспорт
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	
	Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
		МассивСсылокЭД = Новый Массив;
		МассивСсылокЭД.Добавить(ЭД);
	Иначе
		МассивСсылокЭД = ЭД;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	
	ТекстОсновногоЗапроса = ПолучитьТекстОсновногоЗапросаДействийЭД(ЭД);

	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящийЭД", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	
	//Основной запрос - выборка из временных таблиц:
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ЭД.Организация,
	|	ВТ_ЭД.Контрагент,
	|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат,
	|	ВТ_ЭД.ПрофильНастроекЭДО
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка
	|ИТОГИ ПО
	|	СсылкаНаЭД";
	
	
	Запрос.Текст = ТекстОсновногоЗапроса
	+ ";
	|////////////////
	|" + ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылкаНаЭД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Соответствие = Новый Соответствие;
	Пока ВыборкаСсылкаНаЭД.Следующий() Цикл
		МассивСертификатов = Новый Массив;
		ВыборкаПоСертификатам = ВыборкаСсылкаНаЭД.Выбрать();
		Пока ВыборкаПоСертификатам.Следующий() Цикл
			МассивСертификатов.Добавить(ВыборкаПоСертификатам.Сертификат);
		КонецЦикла;
		Соответствие.Вставить(ВыборкаСсылкаНаЭД.СсылкаНаЭД, МассивСертификатов);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции
//Raxx>

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		Или ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов", 0);
	
	Обновления = ЭлектронныеДокументыСлужебный.venkonПолучитьОбновленияЭД();
												
	СтруктураВозврата.Вставить("НовыеДокументы", Обновления);
			
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
	ВидКонтрагента = Неопределено,
	ВидАдреса = Неопределено,
	ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтр");
	СтруктураАдреса.Вставить("АдрТекст");
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
	ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//                Неопределено - есть организаций нет или несколько
//
Процедура ОпределитьОрганизацию(Организация) Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник."+НазваниеСправочникаОрганизации+" КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
	ИдОбъекта = "",
	ДополнительныеРеквизиты = Неопределено,
	ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
	ИдОбъекта,
	ДополнительныеРеквизиты,
	ИДЭД);
	
КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
	АдресВоВременномХранилище,
	ИдентификаторФормы);
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "ДОПОЛНИТЕЛЬНЫЕОТЧЕТЫИОБРАБОТКИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности прямого обмена с банком через дополнительную обработку
			|необходимо в настройках системы включить опцию использования дополнительных отчетов и обработок.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки системы.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция venkonПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект.ВладелецФайла КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект.ВладелецФайла В (&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
конецПроцедуры

// Проверяет будет ли пользователю показываться оповещение о наличии новых эд в сервисе 1С-ЭДО
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция ОповещатьОНовыхЭД() Экспорт
	
	Оповещать = Ложь;
	Если ЕстьПравоОбработкиЭД(Ложь) Тогда
		Оповещать = Истина;
	КонецЕсли;
	
	Возврат Оповещать;
	
КонецФункции

// Только для внутреннего использования
Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//<Raxx

Функция venkonСостояниеВерсииЭД(СсылкаНаВладельца) Экспорт
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД =  ЭлектронныеДокументыСлужебный.venkonПолучитьСостояниеЭДИзРегистра(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		
		ВозвращаемоеЗначение = СтруктураВерсииЭД.СостояниеВерсииЭД;
		
	КонецЕсли;
	
	// +aldo
	// Для произвольных документов старых версий состояние хранится в реквизите СтатусДокумента.
	Если ПустаяСтрока(Строка(СтруктураВерсииЭД.СостояниеВерсииЭД)) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
		ВозвращаемоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаВладельца, "СтатусДокумента");
	КонецЕсли;
	// -aldo
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция venkonПолучитьСостояниеЭДИзРегистра(СсылкаНаОбъект) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.venkonПолучитьСостояниеЭДИзРегистра(СсылкаНаОбъект);
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент)
	
	ФлагПодписанПолностью = Истина;
	
	// +aldo
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	// -aldo
	
	// Массив отпечатков всех установленных ЭЦП на ЭД
	МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
	
	// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
	// совпадающие с сертификатами установленных ЭЦП.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
	|	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
	Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
	
	ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И ВЫБОР
	|			КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|				ТОГДА СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
	|						И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|			ИНАЧЕ НЕ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД В 
	|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован), 
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден),  
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан))
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, СтатусЭД, НаправлениеЭД, ВерсияРегламентаЭДО,
	|ПрофильНастроекЭДО, ЭлектронныйДокументВладелец, ВладелецФайла, ТребуетсяИзвещение, ТребуетсяПодтверждение,
	|ТипЭлементаВерсииЭД");
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
	Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
			Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИПОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИППолучен",        Ложь);
			СтруктураФлагов.Вставить("ИППДОПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
						Или Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППолучен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППДОПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или (СтруктураФлагов.ПДППолучен 
					И НЕ СтруктураФлагов.ИППДПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (НЕ СтруктураФлагов.ПДППолучен 
					Или (НЕ СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)
					Или (НЕ СтруктураФлагов.ИППолучен И ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен)
					Или ((ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) 
					И (НЕ СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение))
					Или (НЕ СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение)
					Или (СтруктураФлагов.ИППДОПолучен И НЕ СтруктураФлагов.ИППДОИПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен)
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или (СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение И НЕ СтруктураФлагов.ПДОИППолучен)
					Или (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен)
					Или (СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение И НЕ СтруктураФлагов.ИППДОПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (Не СтруктураФлагов.ПДППолучен 
					Или (Не СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
			Иначе
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли СтруктураФлагов.ПДОПолучен И Не СтруктураФлагов.ИППДООтправлен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Не СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение)  Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен 
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или СтруктураФлагов.ИПЭСФОтправлен И Не СтруктураФлагов.ПДОИППолучен
					Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И Не СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору 
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				
				СостояниеЭД = Неопределено;
				Если ЭлектронныеДокументыСлужебный.ЕстьНеотправленноеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ЭлектронныеДокументыСлужебный.ЕстьНепринятоеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
				Или ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Получает рекурсивно все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)
	
	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
		Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

// Устанавливает статус электронного документа Отклонен и добавляет ПричинуОтклонения
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭдПрисоединенныеФайлы> - ссылка на электронный документ
//  <ПричинаОтклонения>  - строка - причина отклонения ЭД
//
Процедура ОтклонитьЭДБезФормированияУОУ(ЭД, ПричинаОтклонения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ПричинаОтклонения);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина - чтение данных пакета возможно, иначе - Ложь.
//
Функция ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД)
	
	ЧтениеПакетаВозможно = Истина;
	ЭлектронныеДокументыПереопределяемый.ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно);
	
	Возврат ЧтениеПакетаВозможно;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		МассивОтбора.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|				И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПлатежИсполнен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|			ИЛИ &СчетФактура
	|			ИЛИ &ПлатежноеПоручение)";
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
	"СчетФактураВыданныйВМетаданных");
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&СчетФактура",
		"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СчетФактура", "ЛОЖЬ");
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
	"ПлатежноеПоручениеВМетаданных");
	Если ИмяПлатежногоПоручения <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПлатежноеПоручение",
		"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяПлатежногоПоручения + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПлатежноеПоручение", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		
		ТекстСообщения = НСтр("ru = 'Обработка %1.
		|Не требуется выполнения действий с электронным документом.'");

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с криптографией

//<Raxx

//Raxx>

// Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса;
//
// Возвращаемый параметр:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

// Только для внутреннего использования
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();

	Возврат ЕстьПраво;
	
КонецФункции

// Создает новый элемент справочника "СертификатыЭЦП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.СертификатыЭЦП.СоздатьЭлемент();
	//НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДатаОкончания = СтруктураСертификата.ДействителенДо;
	НовыйЭлемент.ДолжностьПоСертификату = СтруктураСертификата.Должность;
	
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураСертификата); 	
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Помечает на удаление элементы справочника ЭДПрисоединенныеФайлы с отбором по владельцу
//
// Параметры: 
//  Ссылка -  ссылка на объект.
//
Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Ссылка, Знач ПометкаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПометкаУдаленияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления <> ПометкаУдаления Тогда
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ФайлОбъект.Заблокировать();
			Исключение
				Шаблон = НСтр("ru = 'Не удалось заблокировать объект %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ФайлОбъект);
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = Нстр("ru = 'Пометка на удаление электронных документов'");
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 5);
				Продолжить;
			КонецПопытки;
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			ФайлОбъект.Разблокировать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
			|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Возвращает массив документов, которые могут быть проведены
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив документов, которые можно проводить
//
Функция МассивПроводимыхДокументов(МассивДокументов) Экспорт
	
	МассивПроводныхДокументов = Новый Массив;
	МассивТиповНеПроводныхДокументов = Новый Массив;
	Для каждого Элемент из МассивДокументов Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНеПроводныхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНеПроводныхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводныхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНеПроводногоДокумента Из МассивТиповНеПроводныхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводныхДокументов, ТипНеПроводногоДокумента);
	КонецЦикла;
	
	Возврат МассивПроводныхДокументов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Перед формированием служебных ЭД (извещений о получении ЭД), из массива ЭД удаляются
// те ЭД, для которых извещения формироваться не должны (например, при получении ТОРГ-12
// титул покупателя при обмене по регламенту 2.0).
//
// Параметры:
//  МассивЭД - Массив электронных документов, на основании которых должны быть сформированы извещения.
//
Процедура УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД) Экспорт
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВерсияРегламентаЭДО, ВидЭД");
	Для Каждого Элемент Из РеквизитыОбъектов Цикл
		Значение = Элемент.Значение;
		
		Если (Значение.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			И (Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)) Тогда
			
			МассивЭД.Удалить(МассивЭД.Найти(Элемент.Ключ));
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение реквизитов объектов

// Позволяет получить значения реквизитов сертификата ЭЦП.
//
// Параметры:
//  Сертификат ЭП - справочник-ссылка - ссылка на элемент справочника "Сертификаты ЭП".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция РеквизитыСертификата(СертификатЭП) Экспорт
	
	ПараметрыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатЭП,
	"ЗапомнитьПарольКСертификату, ПарольПользователя, Отозван, Отпечаток, ДатаОкончания, ОповещенОСрокеДействия,
	|Фамилия, Имя, Отчество, ДолжностьПоСертификату, Организация, Назначение, ФайлСертификата,
	|Наименование, ОграничитьДоступКСертификату, ПометкаУдаления");
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата", ПараметрыСертификата.ФайлСертификата.Получить());
	ПараметрыСертификата.Вставить("ВыбранныйСертификат", СертификатЭП);
	ПараметрыСертификата.Вставить("ПарольПолучен", ПараметрыСертификата.ЗапомнитьПарольКСертификату);
	
	// В БСП методах необходим параметр
	ПараметрыСертификата.Вставить("Комментарий", "");
	
	Если Не ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
		ПараметрыСертификата.ПарольПользователя = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСертификата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение значений реквизитов объектов

Функция ВидИВладелецЭД(СсылкаНаЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
	
КонецФункции

//<Raxx

Процедура venkonИзменитьСостояниеЭДДокументовОснования(ПакетЭД, Действие = "")
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
	"ПрофильНастроекЭДО, АдресРесурсаКонтрагента, ЭлектронныеДокументы, ВнешнийУИД");
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Действие = "Отказать" Тогда
		Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "НаправлениеЭД"); 
				НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
				СтруктураЭД = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураЭД, Ложь); 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Действие = "Удалить" Тогда
		Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				ЭлектронныеДокументыСлужебный.ПроверитьНаличиеИУдалитьСостояниеДокумента(ЭлектронныйДокумент);
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "НаправлениеЭД"); 
				Если СтруктураРеквизитов.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отправлен;
					СтруктураЭД = Новый Структура;
					СтруктураЭД.Вставить("ВладелецФайла", ПакетЭД);
					СтруктураЭД.Вставить("СтатусЭД", НовыйСтатусЭД);
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураЭД, Ложь); 
				Иначе
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Подписан;
					СтруктураЭД = Новый Структура;
					СтруктураЭД.Вставить("ВладелецФайла", ПакетЭД);
					СтруктураЭД.Вставить("СтатусЭД", НовыйСтатусЭД);
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураЭД, Ложь); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Raxx>

// Выполняет добавление ЭЦП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭЦП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		НачатьТранзакцию();
		ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				Перечисления.СтатусыЭД.ПолностьюПодписан,
				ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				Перечисления.СтатусыЭД.Подписан,
				ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			
		Иначе
			
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭЦП отлично от 0.
			//<Raxx
			ДокументИнтеркампаниЧастичноПодписан = ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0; //(ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
																	//И ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0);
			//Raxx>														
			ЭтоЭДПлатежноеПоручение = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
			
			Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоЭДПлатежноеПоручение Тогда
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
				Перечисления.СтатусыЭД.ЧастичноПодписан,
				ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", АвторизованныйПользователь());
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы, Знач ПризнакПодписи, ДопПараметры = Неопределено, ЭтоПроизвольныйЭД = Ложь) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи, ДопПараметры);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
				МассивПЭД = Новый Массив;
				МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД);  // Raxx
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, ЭтоПроизвольныйЭД = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		НачатьТранзакцию();
		
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
		Перечисления.СтатусыПакетовЭД.Отправлен,
		ТекущаяДатаСеанса());
		Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
		"ПрофильНастроекЭДО, Контрагент, АдресРесурсаКонтрагента, ЭлектронныеДокументы, ВнешнийУИД");
		
		Попытка
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				УдалитьФайлы(АдресКаталогаОтправки);
				Продолжить;
			КонецЕсли;
			
			//<Raxx
			ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
			КоличествоКОтправке = ФайлыОтправки.Количество();
			
			КоличествоОтправленных = ЭлектронныеДокументыВнутренний.venkonОтправитьЭД(
												РеквизитыПакетаЭД.ВнешнийУИД,
												АдресКаталогаОтправки,
												РеквизитыПакетаЭД.ПрофильНастроекЭДО,
												РеквизитыПакетаЭД.Контрагент); // Raxx
			
			Если КоличествоОтправленных <> КоличествоКОтправке Тогда
				ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				УдалитьФайлы(АдресКаталогаОтправки);
				Продолжить;
			Иначе
				РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
			КонецЕсли;
			
			venkonИзменитьСостояниеЭДДокументовОснования(ПакетЭД);
			// Записываем внешний УИД
			ОбъектПакетЭД = ПакетЭД.ПолучитьОбъект();
			ОбъектПакетЭД.ВнешнийУИД = РеквизитыПакетаЭД.ВнешнийУИД;
			ОбъектПакетЭД.Записать();
			//Raxx>
			
			
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета
			|%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,  
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонВидаОперации);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
			ОтменитьТранзакцию();
		КонецПопытки;
		
		Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
			УдалитьФайлы(АдресКаталогаОтправки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, КодСобытия);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПроверятьОбязательныеРеквизиты = Истина) Экспорт
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД, ПроверятьОбязательныеРеквизиты);
	
КонецПроцедуры

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	Если Не ЭлектронныеДокументыСлужебный.ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
		ПервыйТитул = Неопределено;
	Иначе
		ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	КонецЕсли;
	
	Возврат ПервыйТитул;
	
КонецФункции

Функция ПолучитьПрисоединенныйФайлПакетаЭДВызовСервера(ПакетЭД) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ПолучитьПрисоединенныйФайлПакетаЭД(ПакетЭД);
	
КонецФункции

Функция venkonПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи, ЭтоПодтверждение = Ложь, МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	СтатусПодключения = ОбработчикиDidoxEImzoСервер.ПроверитьРегистрациюКомпонентыЭО();
	Если СтатусПодключения <> 2 Тогда
		ТекстСообщения = ""; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	ВключениеСертификатовВПодпись = Истина;													
	keyId = ОбработчикиDidoxEImzoСервер.ПолучитьЗагрузитьIDКлюча(СертификатПодписи);													
	Если keyId = Неопределено Тогда													
		Возврат 0;
	КонецЕсли;
	
	КоличествоПодписанныхЭД = 0;
	
	Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
		
		Попытка
			ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
			// 13293Fix
			ВерсияСоставаЭД = ЭлектронныеДокументыСлужебный.ПолучитьВерсиюДокументаНовая(ДвоичныеДанныеФайла);
			ЕстьИнтеграция = Перечисления.ВерсииСоставаЭД.ЕстьОпцияВВерсии(ВерсияСоставаЭД, "Интеграция");
			//
			ДанныеПодписи = venkonСформироватьДанныеПодписи(ТекДокумент, ДвоичныеДанныеФайла, СертификатПодписи, keyId, ЭтоПодтверждение, ЕстьИнтеграция);
			Подпись = Неопределено;
			
			Если НЕ ДанныеПодписи.Свойство("Подпись", Подпись) Или Подпись = Неопределено Тогда
				ВызватьИсключение "Произошла ошибка при подписании файла";
			КонецЕсли;
			
			ДобавитьПодпись(ТекДокумент, ДанныеПодписи); //
			КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
			venkonОпределитьСтатусыПодписей(ТекДокумент);  //
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
			|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'установка подписи ЭП'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
			МассивНеПодписанныхЭД.Добавить(ТекДокумент);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

Функция venkonСформироватьДанныеПодписи(ОбъектДляПодписиСсылка, ДвоичныеДанные, СтруктураПараметровПодписи, keyId, ЭтоПодтверждение = Ложь, ЕстьИнтеграция = Ложь) Экспорт

	ДатаПодписи = Дата('00010101');
	
	serialNumber = "";
	
	НоваяПодписьДвоичныеДанные = venkonПодписать(ДвоичныеДанные, keyId, СтруктураПараметровПодписи, serialNumber, ОбъектДляПодписиСсылка.ПрофильНастроекЭДО, ЭтоПодтверждение, ЕстьИнтеграция);
	
	Если НоваяПодписьДвоичныеДанные = Неопределено Тогда
		ВызватьИсключение "Произошла ошибка при подписании файла!";
	КонецЕсли;
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Отпечаток);
	КомуВыданСертификат = СтруктураПараметровПодписи.Наименование; //ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СтруктураПараметровПодписи);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.ФайлСертификата.Получить(); //СтруктураПараметровПодписи.Выгрузить();
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка",               ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("Отпечаток",                  Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДата());
	ДанныеПодписи.Вставить("Комментарий",                ""); //СтруктураПараметровПодписи.Комментарий);
	ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
	ДанныеПодписи.Вставить("КомуВыданСертификат",        КомуВыданСертификат);
	ДанныеПодписи.Вставить("АдресФайла",                 "");
	ДанныеПодписи.Вставить("Подпись",                    НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Сертификат",                 ДвоичныеДанныеСертификата);
	ДанныеПодписи.Вставить("СерийныйНомер",              serialNumber);
	
	Возврат ДанныеПодписи;
	
КонецФункции

Функция venkonПодписать(ДвоичныеДанные, keyId, СертификатЭЦП = Неопределено, serialNumber = "", ПрофильНастроекЭДО = Неопределено, ЭтоПодтверждение = Ложь, ЕстьИнтеграция = Ложь)
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ИДДокумента = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(ДвоичныеДанные);  
	
	// ИНТЕГРАЦИЯ ГНК
	Если ПрофильНастроекЭДО <> Неопределено 
		И ЕстьИнтеграция Тогда
		Если НЕ ЭтоПодтверждение Тогда
			
			// Получаем и подписываем JSON строку
			// Считываем из файла
			темп = новый ТекстовыйДокумент;
			темп.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
			value_xml = темп.ПолучитьТекст();
			
			Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
			СтруктураРезультата = ЭлектронноеВзаимодействиеССерверомDidox.КонвертироватьXMLВJSON(ПрофильНастроекЭДО, Соединение, value_xml);
			
		Иначе
			
			// Получаем и подписываем строку подписи
			Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
			СтруктураРезультата = ЭлектронноеВзаимодействиеССерверомDidox.ПолучитьПоследнююПодписьДокумента(ПрофильНастроекЭДО, Соединение, ИДДокумента);
			
		КонецЕсли;
		
		Если СтруктураРезультата.Успешно Тогда
			ФайлРезультатКода = ОбработчикиDidoxEImzoСервер.ПодписатьФайл(, СтруктураРезультата.Результат, keyId, СертификатЭЦП, serialNumber, ЭтоПодтверждение, ЕстьИнтеграция);
		Иначе
			ФайлРезультатКода = ОбработчикиDidoxEImzoСервер.ПодписатьФайл(ИмяФайла, СтруктураРезультата.Результат, keyId, СертификатЭЦП, serialNumber, ЭтоПодтверждение, ЕстьИнтеграция);
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		
	Иначе
		
		ФайлРезультатКода = ОбработчикиDidoxEImzoСервер.ПодписатьФайл(ИмяФайла, , keyId, СертификатЭЦП, serialNumber);
		
	КонецЕсли;
	
	ДД = Неопределено;
	Если ФайлРезультатКода <> Неопределено Тогда
		ДД = Новый ДвоичныеДанные(ФайлРезультатКода);
	КонецЕсли;
	
	Возврат ДД;
	
КонецФункции
