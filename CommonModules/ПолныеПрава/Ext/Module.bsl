// Функция проверяет установлены ли у пользователя роли,
// с которыми можно запускать конфигурацию
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		ЕстьДоступнаяРоль = Истина;	
		
	Иначе
		ЕстьДоступнаяРоль = Ложь;
		МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Для каждого РольПользователя Из ТекущийПользователь.Роли Цикл
			Если МетаданныеНабораПрав.Найти(РольПользователя.Имя) <> Неопределено Тогда
				ЕстьДоступнаяРоль = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьДоступнаяРоль;
		
КонецФункции

Функция ЕстьВозможностьРедактированияСправочников() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ПланыОбмена.Полный.ЭтотУзел() = ПланыОбмена.ГлавныйУзел() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьПараметрыСеанса(ТекущийПользователь) Экспорт
	
	// Установка параметров сеанса, неизменяемых пользователем
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	ПараметрыСеанса.Организация = ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация");
	
	ПараметрыСеанса.ЭтоЦентральнаяБаза = ЕстьВозможностьРедактированияСправочников();
	
	// Установка параметров сеанса, изменяемых пользователем
	УстановитьИзменяемыеПараметрыСеансаПользователя();
	
КонецПроцедуры

Процедура УстановитьИзменяемыеПараметрыСеансаПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	// ГруппыТекущегоПользователя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.ГруппыПользователей.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ГруппыПользователей
	|ГДЕ
	|	Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь
	|";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	Массив.Добавить(ПараметрыСеанса.ТекущийПользователь);
	ПараметрыСеанса.ГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
	
	// *Запрет
	Если РольДоступна("ДоступВЗакрытыйПериод") Тогда
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА (Границы.Организация) ЕСТЬ NULL  ТОГДА &ПустаяОрганизация ИНАЧЕ Границы.Организация КОНЕЦ КАК Организация,
	|	МИНИМУМ(ВЫБОР КОГДА (Границы.ГраницаЗапретаИзменений) ЕСТЬ NULL  ТОГДА ДАТАВРЕМЯ(1, 1, 1) ИНАЧЕ Границы.ГраницаЗапретаИзменений КОНЕЦ) КАК ГраницаЗапретаИзменений
	|ИЗ
	|	Перечисление.НаборПравПользователей КАК НаборыПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
	|		ПО Границы.Роль = НаборыПрав.Ссылка
    | 
	|ГДЕ
	|	(НаборыПрав.Ссылка В (&СписокДоступныхРолей))
    |
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА (Границы.Организация) ЕСТЬ NULL  ТОГДА &ПустаяОрганизация ИНАЧЕ Границы.Организация КОНЕЦ";
	
	Запрос.УстановитьПараметр("СписокДоступныхРолей", ПолучитьСписокНабораПрав());
	Запрос.УстановитьПараметр("ПустаяОрганизация", ПараметрыСеанса.ПустаяОрганизация);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений) Тогда
				Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
			КонецЕсли;
		КонецЦикла;
		ЕСли Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецПроцедуры

Функция ЗарегистрироватьПраваПользователя(СсылкаНового, Отказ = Ложь, Очистить = Ложь) Экспорт

	ТаблицаДобавленныхЗаписей = Неопределено;
	
	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено И НЕ Очистить Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ОбъектДоступа.Значение      = СсылкаНового;
	НаборЗаписей.Отбор.ОбъектДоступа.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение       = ПараметрыСеанса.ТекущийПользователь;
	НаборЗаписей.Отбор.Пользователь.Использование  = Истина;
	
	Если НЕ Очистить Тогда
	
		СписокПравПользователя = ПолучитьСписокНабораПрав();
		Для каждого ЭлементСписка Из СписокПравПользователя Цикл
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектДоступа    = СсылкаНового;
			НоваяЗапись.ОбластьДанных    = ЭлементСписка.Значение;
			НоваяЗапись.Пользователь     = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗапись.Запись           = Истина;
			НоваяЗапись.НастройкаДоступа = Истина;
			
			НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		
		КонецЦикла
	
	КонецЕсли; 
	
	Попытка
		НаборЗаписей.Записать();
		ТаблицаДобавленныхЗаписей = НаборЗаписей.Выгрузить();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать права доступа к объекту!");
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТаблицаДобавленныхЗаписей;

КонецФункции

// Функция возвращает набор ролей пользователя
//
// Параметры
//  Пользователь  – Элемент справочника "Пользователи"
//
// Возвращаемое значение:
//   Список значений  - Элементы перечисления НаборПравПользователей 
//
Функция НаборРолейПользователя(Пользователь) Экспорт

	 НаборРолей = новый СписокЗначений;
	 НаборРолейПеречисление = новый СписокЗначений;
	 
	 Для каждого ЭлементПеречисления из Перечисления.НаборПравПользователей Цикл
		НаборРолейПеречисление.Добавить(ЭлементПеречисления,Строка(ЭлементПеречисления),)	 
	 КонецЦикла;
	 
	
	 МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	 Для каждого ПользовательСистемы из МассивПользователей Цикл
		 Если ПользовательСистемы.Имя = Пользователь.Наименование Тогда
			РолиЭтогоПользователя = ПользовательСистемы.Роли;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	
	 
	 Если РолиЭтогоПользователя <> неопределено тогда
		 Для каждого РольИзНабора из РолиЭтогоПользователя Цикл
		 	СтрокаРоли = строка (РольИзНабора);
	 
			 // Сопоставим 
			 Для каждого РольИзПеречисления из НаборРолейПеречисление Цикл
				СтрокаРолиПеречисления = РольИзПеречисления.Представление;
				СтрокаРолиСокаращенная = Лев(СтрокаРоли,СтрДлина(СтрокаРолиПеречисления));
				
				Если СтрокаРолиПеречисления = СтрокаРолиСокаращенная Тогда
					НаборРолей.Добавить(РольИзПеречисления);	
				КонецЕсли;
				
			 КонецЦикла;
			
		 КонецЦикла
	 КонецЕсли;
	 
	 Возврат НаборРолей

КонецФункции // НаборРолейПользователя()

Процедура ЗаписатьПраваДоступа(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт

	НаборПрав = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	НаборПрав.Загрузить(ТаблицаНабораПрав);
	
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		
		// Проверим набор на корректность установленных отборов
		Если НЕ НаборПрав.Отбор.Пользователь.Использование
		   И НЕ НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
			Отказ = Истина;
			СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
		Если НаборПрав.Отбор.Пользователь.Использование Тогда
			Если ЗначениеНеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
				Отказ = Истина;
				СообщитьОбОшибке(ШапкаОшибки);
				Возврат;
			КонецЕсли;
		Иначе //НаборПрав.Отбор.ОбъектДоступа.Использование = ИСТИНА
			Если ЗначениеНеЗаполнено(НаборПрав.Отбор.ОбъектДоступа.Значение) Тогда
				Отказ = Истина;
				СообщитьОбОшибке(ШапкаОшибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Определим по каким областям данных нет надобности контролировать раздачу прав
		МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		// Начнем собирать изменения, которые были сделаны в текущем
		// наборе, относительно считанного из БД. Проверяем только те записи
		// в которых нет областей данных, для которых пользователь
		// может редактировать записи без ограничения
		СтарыйНабор = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		ТаблицаРазличияЗаписей = СтарыйНабор.Выгрузить();
		СтарыйНабор.Отбор.Пользователь.Использование  = НаборПрав.Отбор.Пользователь.Использование;
		СтарыйНабор.Отбор.Пользователь.Значение       = НаборПрав.Отбор.Пользователь.Значение;
		СтарыйНабор.Отбор.ОбъектДоступа.Использование = НаборПрав.Отбор.ОбъектДоступа.Использование;
		СтарыйНабор.Отбор.ОбъектДоступа.Значение      = НаборПрав.Отбор.ОбъектДоступа.Значение;
		
		СтарыйНабор.Прочитать();
		
		ТаблицаСтарогоНабора = СтарыйНабор.Выгрузить();
		ТаблицаНовогоНабора  = НаборПрав.Выгрузить();
		
		МассивИзмерений = Новый Массив;
		МассивРесурсовИРеквизитов = Новый Массив;
		МетаданныеРегистра = Метаданные.РегистрыСведений.ПраваДоступаПользователей;
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			МассивИзмерений.Добавить(Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			МассивРесурсовИРеквизитов.Добавить(Ресурс.Имя);
		КонецЦикла;
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			МассивРесурсовИРеквизитов.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Проверим удаленные и измененные записи
		Для каждого СтрокаСтарогоНабора Из ТаблицаСтарогоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаСтарогоНабора[Измерение]);
			КонецЦикла; 
			
			НайденныеСтроки = ТаблицаНовогоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
				КонецЦикла; 
			Иначе
				Для каждого СтрокаНовогоНабора Из НайденныеСтроки Цикл
					Для каждого РесурсРеквизит Из МассивРесурсовИРеквизитов Цикл
						Если СтрокаНовогоНабора[РесурсРеквизит] <> СтрокаСтарогоНабора[РесурсРеквизит] Тогда
							НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
							Для каждого Измерение Из МассивИзмерений Цикл
								НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
							КонецЦикла; 
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		// Проверим добавленные строки
		Для каждого СтрокаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаНовогоНабора[Измерение]);
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаСтарогоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаНовогоНабора[Измерение];
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
		ТаблицаРазличияЗаписей.Свернуть("ОбъектДоступа, ОбластьДанных");
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГруппыТекущегоПользователя", ПараметрыСеанса.ГруппыТекущегоПользователя);
		
		Запрос.Текст = "";
		
		ИндексСтроки = 0;
		Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
			
			Если ИндексСтроки > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ
				|";
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ВЫБРАТЬ
			|	" + ИндексСтроки + " КАК ИндексСтроки,
			|	ПраваДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
			|ИЗ
			|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
			|ГДЕ
			|	ПраваДоступаПользователей.ОбъектДоступа = &ОбъектДоступа" + ИндексСтроки + "
			|	И
			|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных" + ИндексСтроки + "
			|	И
			|	ПраваДоступаПользователей.НастройкаДоступа = ИСТИНА
			|	И
			|	ПраваДоступаПользователей.Пользователь В(&ГруппыТекущегоПользователя)
			|";
			
			Запрос.УстановитьПараметр(("ОбъектДоступа" + ИндексСтроки), СтрокаТаблицы.ОбъектДоступа);
			Запрос.УстановитьПараметр(("ОбластьДанных" + ИндексСтроки), СтрокаТаблицы.ОбластьДанных);
		
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		ЗаписьРазрешена = Истина;
		ТекстЗапрещенияЗаписи = "";
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
			СтрокаТаблицыЗапроса = ТаблицаЗапроса.Найти(ТаблицаРазличияЗаписей.Индекс(СтрокаТаблицы), "ИндексСтроки");
			Если СтрокаТаблицыЗапроса = Неопределено Тогда
				ЗаписьРазрешена = Ложь;
				ТекстЗапрещенияЗаписи = Символы.ПС + ТекстЗапрещенияЗаписи + "Запрещено редактировать права доступа для объекта """ + Строка(СтрокаТаблицы.ОбъектДоступа) + """ и области данных """ + Строка(СтрокаТаблицы.ОбластьДанных) + """";
			КонецЕсли; 
		КонецЦикла; 
	
		Если НЕ ЗаписьРазрешена Тогда
			Отказ = Истина;
			СообщитьОбОшибке(("Нарушение прав доступа:" + ТекстЗапрещенияЗаписи),, ШапкаОшибки);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	Попытка
		НаборПрав.Записать();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура УстановитьПараметрСеансаУчетнаяПолитикаПоПерсоналу(глУчетнаяПолитикаПоПерсоналуОрганизации) Экспорт
	ПараметрыСеанса.УчетнаяПолитикаПоПерсоналуОрганизации = Новый ХранилищеЗначения(глУчетнаяПолитикаПоПерсоналуОрганизации, 
																					Новый СжатиеДанных(0));
КонецПроцедуры
																				
Процедура ОпределитьФактИспользованияРИБ() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Полный.Ссылка
	               |ИЗ
	               |	ПланОбмена.Полный КАК Полный
	               |ГДЕ
	               |	Полный.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Полный.ЭтотУзел());
	ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
КонецПроцедуры

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции
