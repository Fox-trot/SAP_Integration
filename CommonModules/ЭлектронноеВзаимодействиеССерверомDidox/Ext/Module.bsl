
// В МОДУЛЕ ОПИСАНЫ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С СЕРВЕРОМ VENKON ЭДО

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ //

Функция СоздатьДокументНаСервере(ВладелецФайла, Соединение, ТипДокумента = "", ЭтоПроизвольныйЭД = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успешно", Истина);
	
	Организация = ВладелецФайла.Организация;
	Контрагент  = ВладелецФайла.Контрагент;
	
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН");
	
	ПрофильНастроекЭДО = ЭлектронныеДокументыВнутренний.ОпределитьПрофильПоОрганизации(Организация);
	
	Если ПрофильНастроекЭДО = Неопределено Тогда
		ТекстСообщения = "Невозможно определить профиль ЭДО";
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Определение профиля ЭДО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		СтруктураВозврата.Вставить("Успешно", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	Если Токен = "" Тогда
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
	КонецЕсли;
	
	// Если не получили токен
	Если Токен = "" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации("Получение токена",
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		СтруктураВозврата.Вставить("Успешно", Ложь);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ДанныеExtra = ПолучитьДопДанныеДокумента(ВладелецФайла, ЭтоПроизвольныйЭД);
	
	ОтображаемоеИмяЭД = ПолучитьОтображаемоеИмяЭлектронногоДокумента(ВладелецФайла, ТипДокумента);
	
	СтрокаJSON = ПолучитьСтрокуJSON("CreateDocument", ОтображаемоеИмяЭД, ДанныеОрганизации.ИНН, ДанныеКонтрагента.ИНН, ДанныеExtra);
	
	ОтветСервера = CreateDocument(Соединение, Токен, СтрокаJSON);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Создание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при получении токена";
			ТекстСообщения = "Пользователь не зарегистрирован в системе";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОтветСервера = CreateDocument(Соединение, Токен, СтрокаJSON);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Создание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при создании документа на сервере";
			ТекстСообщения = "Невозможно создать документ на сервере";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим ИД созданного документа из ответа сервера
	ИДДокумента = ОтветСервера.ПолучитьТелоКакСтроку();
	СтруктураВозврата.Вставить("ИДДокумента", ИДДокумента);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция venkonПередатьПакетЭД(ИДДокумента, Файл, Соединение, ПрофильНастроекЭДО, Контрагент) Экспорт
	
	ПараметрВозврата = 0;
	
	// 2. Если это новый документ, то создаем документ на сервере
	Если ПустаяСтрока(ИДДокумента) Тогда
		Возврат ПараметрВозврата;	
		
	КонецЕсли;
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	Если Токен = "" Тогда
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
	КонецЕсли;
	
	// Если не получили токен
	Если Токен = "" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации("Получение токена",
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		Возврат ПараметрВозврата;
		
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН");
	
	// 2. Отправляем строку подписи
	// ИНТЕГРАЦИЯ ГНК
	СтрокаПодписи = ПолучитьСтрокуПодписи(Файл);
	ОтветСервера = PutSignatureRaw(Соединение, Токен, ИДДокумента, СтрокаПодписи);	
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Создание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при получении токена";
			ТекстСообщения = "Пользователь не зарегистрирован в системе";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
		
		ОтветСервера = PutSignatureRaw(Соединение, Токен, ИДДокумента, СтрокаПодписи);	
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Выгрузка подписи на сервер";
			ПодробныйТекстОшибки = "Произошли ошибки при выгрузке подписи на сервер";
			ТекстСообщения = "Невозможно выгрузить подпись на сервер";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
	КонецЕсли;
	
	// 3. Получаем S3 upload request для данного документа
	ОтветСервера = GetS3UploadRequest(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Создание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при получении токена";
			ТекстСообщения = "Пользователь не зарегистрирован в системе";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
		
		ОтветСервера = GetS3UploadRequest(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Получение пути для выгрузки документа";
			ПодробныйТекстОшибки = "Произошли ошибки при получении пути для выгрузки документа";
			ТекстСообщения = "Невозможно выгрузить документ на сервер";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
	КонецЕсли;
	
	UploadRequest = ОтветСервера.ПолучитьТелоКакСтроку();
	
	// 4. Выгружаем файл в S3
	ОтветСервера = UploadDocument(Файл, UploadRequest);
	Если НЕ ОтветСервера Тогда
		//ВидОперации = "Выгрузка документа";
		//ПодробныйТекстОшибки = "Произошли ошибки при выгрузки документа";
		//ТекстСообщения = "Невозможно выгрузить документ на сервер";
		//
		//ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		
		Возврат ПараметрВозврата;
	КонецЕсли;
	
	// 5. Подписываем файл (поменять статус документа на сервере)
	ОтветСервера = SignDocument(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Создание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при получении токена";
			ТекстСообщения = "Пользователь не зарегистрирован в системе";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
		
		ОтветСервера = SignDocument(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
		
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			ВидОперации = "Подписание документа на сервере";
			ПодробныйТекстОшибки = "Произошли ошибки при подписании документа на сервере";
			ТекстСообщения = "Невозможно подписать документ на сервере";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВозврата = 1;
	
	// Добавляем xml-строку в поле Extra
	//ИнформацияОбЭД = ПолучитьИнформациюОбЭД(ПрофильНастроекЭДО, Соединение, ИДДокумента);
	
	XMLСтрока = ПолучитьXMLСтрокуИзПакета(Файл);
	Если Не ПустаяСтрока(XMLСтрока) Тогда
		ОтветСервера = PutExtraData(Соединение, Токен, ИДДокумента, XMLСтрока);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
			
			Если Найти(Токен, "tax id") Тогда
				ВидОперации = "Добавление xml-строки в поле Extra";
				ПодробныйТекстОшибки = "Произошли ошибки при получении токена";
				ТекстСообщения = "Пользователь не зарегистрирован в системе";
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
				
				Возврат ПараметрВозврата;
				
			КонецЕсли;
			
			ОтветСервера = PutExtraData(Соединение, Токен, ИДДокумента, XMLСтрока);
			
			
			Если ОтветСервера.КодСостояния >= 400 Тогда
				
				ВидОперации = "Добавление xml-строки в поле Extra";
				ПодробныйТекстОшибки = "Произошли ошибки при добавлении xml-строки в поле Extra";
				ТекстСообщения = "";
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
				
				Возврат ПараметрВозврата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ПараметрВозврата;
	
КонецФункции

Функция venkonОтказОтПодписи(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента, СтрокаПодписи = "") Экспорт
	
	ПараметрВозврата = 0;
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	Если Токен = "" Тогда
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
	КонецЕсли;
	
	// Если не получили токен
	Если Токен = "" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации("Получение токена",
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		Возврат ПараметрВозврата;
		
	КонецЕсли;
	
	СтрокаJSON = ПолучитьСтрокуJSON("RejectDocument", "Комментарий", СтрокаПодписи);
	
	ОтветСервера = RejectDocument(Соединение, Токен, ИДПолучателя, ИДДокумента, СтрокаJSON);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Отказ от подписи";
			ПодробныйТекстОшибки = "";
			ТекстСообщения = "Пользователь не зарегистрирован в системе";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
		
		ОтветСервера = RejectDocument(Соединение, Токен, ИДПолучателя, ИДДокумента, СтрокаJSON);
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			ВидОперации = "Отказ от подписи";
			ПодробныйТекстОшибки = "";
			ТекстСообщения = "Невозможно выполнить операцию";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		Иначе
			ПараметрВозврата = 1;
		КонецЕсли;
	Иначе
		ПараметрВозврата = 1;
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

Функция venkonУдалитьЭД(Соединение, ПрофильНастроекЭДО, ИДПолучателя, ИДДокумента) Экспорт
	
	ПараметрВозврата = 0;
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	Если Токен = "" Тогда
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
	КонецЕсли;
	
	// Если не получили токен
	Если Токен = "" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации("Получение токена",
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		Возврат ПараметрВозврата;
		
	КонецЕсли;
	
	ОтветСервера = DeleteDocument(Соединение, Токен, ИДПолучателя, ИДДокумента);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Удаление документа";
			ПодробныйТекстОшибки = "";
			ТекстСообщения = "Пользователь не зарегистрирован в системе. Ответ сервера: " + ОтветСервера.ПолучитьТелоКакСтроку();
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		КонецЕсли;
		
		ОтветСервера = DeleteDocument(Соединение, Токен, ИДПолучателя, ИДДокумента);
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			ВидОперации = "Удаление документа";
			ПодробныйТекстОшибки = "";
			ТекстСообщения = "Невозможно выполнить операцию. Ответ сервера: " + ОтветСервера.ПолучитьТелоКакСтроку();
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			Возврат ПараметрВозврата;
		Иначе
			ПараметрВозврата = 1;
		КонецЕсли;
	Иначе
		ПараметрВозврата = 1;
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

// Получает обновления от сервера для профиля настроек ЭДО
Функция venkonПолучитьСписокЭД(ПрофильНастроекЭДО, Соединение, ДатаВремяЗапроса) Экспорт
	
	ОтветСервера = Неопределено;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	Попытка
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
		ОтветСервера = GetUpdates(Соединение, Токен, ДанныеОрганизации.ИНН, ?(ДатаВремяЗапроса = "", "0", ДатаВремяЗапроса));
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
			
			ОтветСервера = GetUpdates(Соединение, Токен, ДанныеОрганизации.ИНН, ?(ДатаВремяЗапроса = "", "0", ДатаВремяЗапроса));
			Если ОтветСервера.КодСостояния >= 400 Тогда
				
				ВидОперации = "Получение обновлений.";
				ПодробныйТекстОшибки = "Произошли ошибки при получении обновлений с сервера.";
				ТекстСообщения = "Ошибка при получении обновлений с сервера ЭДО.";
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
				
				ОтветСервера = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ВидОперации = "Получение обновлений.";
		ПодробныйТекстОшибки = "Произошли ошибки при получении обновлений с сервера.";
		ТекстСообщения = "Ошибка при получении обновлений с сервера ЭДО.";
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		
		ОтветСервера = Неопределено;
		
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ПолучитьЭД(ПрофильНастроекЭДО, Соединение, ИДДокумента) Экспорт
	
	ИмяФайлаРезультата = Неопределено;
	ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	Попытка
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
		ОтветСервера = GetS3DownloadRequest(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
			
			ОтветСервера = GetS3DownloadRequest(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
			
			Если ОтветСервера.КодСостояния >= 400 Тогда
				ВидОперации = "Создание документа на сервере";
				ПодробныйТекстОшибки = "Произошли ошибки при создании документа на сервере";
				ТекстСообщения = "Невозможно создать документ на сервере";
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
				
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		DownloadRequest = ОтветСервера.ПолучитьТелоКакСтроку();
		
		ОтветСервера = DownloadDocument(DownloadRequest, ИмяФайлаРезультата, ИДДокумента);
		
		Если НЕ ОтветСервера Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецПопытки;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция ПолучитьИнформациюОбЭД(ПрофильНастроекЭДО, Соединение, ИДДокумента) Экспорт
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	Попытка
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
		ОтветСервера = GetDocument(Соединение, Токен, ИДДокумента);
		
		Если ОтветСервера.КодСостояния >= 400 Тогда
			
			Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
			
			ОтветСервера = GetDocument(Соединение, Токен, ИДДокумента);
			
			Если ОтветСервера.КодСостояния >= 400 Тогда
				ВидОперации = "Получение информации об ЭД";
				ПодробныйТекстОшибки = "Произошли ошибки при получении информации об ЭД";
				ТекстСообщения = "";
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
				
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		//УдалитьФайлы(ИмяФайлаРезультата);
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция КонвертироватьXMLВJSON(ПрофильНастроекЭДО, Соединение, СтрокаXML) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успешно", Истина);
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	// Если не получили токен
	Если Токен = "0" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение токена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		СтруктураВозврата.Вставить("Успешно", Ложь);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ОтветСервера = ConvertXMLToJSON(Соединение, Токен, СтрокаXML);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОтветСервера = ConvertXMLToJSON(Соединение, Токен, СтрокаXML);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим ИД созданного документа из ответа сервера
	JSONСтрока = ОтветСервера.ПолучитьТелоКакСтроку();
	СтруктураВозврата.Вставить("Результат", JSONСтрока);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьПоследнююПодписьДокумента(ПрофильНастроекЭДО, Соединение, ИДДокумента) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успешно", Истина);
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	// Если не получили токен
	Если Токен = "0" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение токена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		СтруктураВозврата.Вставить("Успешно", Ложь);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ОтветСервера = GetSignature(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОтветСервера = GetSignature(Соединение, Токен, ДанныеОрганизации.ИНН, ИДДокумента);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим ИД созданного документа из ответа сервера
	СтрокаПодписи = ОтветСервера.ПолучитьТелоКакСтроку();
	СтруктураВозврата.Вставить("Результат", СтрокаПодписи);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьJSONСтрокуСуществующегоДокумента(ПрофильНастроекЭДО, Соединение, ИДДокумента) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успешно", Истина);
	
	// 1. Получаем токен
	Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО);
	
	// Если не получили токен
	Если Токен = "0" Тогда
		
		ТекстСообщения = "Невозможно получить токен";
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение токена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		СтруктураВозврата.Вставить("Успешно", Ложь);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	ОтветСервера = GetJSONStringOfExistingDocument(Соединение, Токен, ИДДокумента, ДанныеОрганизации.ИНН);
	
	// Проверка ответа сервера
	Если ОтветСервера.КодСостояния >= 400 Тогда
		
		Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
		
		Если Найти(Токен, "tax id") Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОтветСервера = GetJSONStringOfExistingDocument(Соединение, Токен, ИДДокумента, ДанныеОрганизации.ИНН);
		Если ОтветСервера.КодСостояния >= 400 Тогда
			ВидОперации = "Получение JSON-строки";
			ПодробныйТекстОшибки = "Произошли ошибки при получении JSON-строки";
			ТекстСообщения = "Невозможно конвертировать строку в JSON";
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			
			СтруктураВозврата.Вставить("Успешно", Ложь);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим ИД созданного документа из ответа сервера
	JSONСтрока = ОтветСервера.ПолучитьТелоКакСтроку();
	СтруктураВозврата.Вставить("Результат", JSONСтрока);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ //

Функция ПолучитьТокенПрофиля(ПрофильНастроекЭДО, ЭтоЗапросНаСервер = Ложь)
	
	Токен = "";
	
	Если ЭтоЗапросНаСервер Тогда
		
		// Запрос в ЦЛ для получения токена профиля
		Токен = ПолучитьАктуальныйТокенПрофиляЭДО(ПрофильНастроекЭДО);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТокеныПрофилейНастроекЭДОСрезПоследних.Токен
		|ИЗ
		|	РегистрСведений.ТокеныПрофилейНастроекЭДО.СрезПоследних(&Период, ПрофильНастроекЭДО = &ПрофильНастроекЭДО) КАК ТокеныПрофилейНастроекЭДОСрезПоследних";
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Токен = ВыборкаДетальныеЗаписи.Токен;
			
		Иначе
			
			Токен = ПолучитьТокенПрофиля(ПрофильНастроекЭДО, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция ПолучитьАдресРесурса(Действие, Параметр1 = Неопределено, Параметр2 = Неопределено)
	
	АдресРесурса = "waltz/goodsign/0.0.1/";
	
	Если Действие = "CreateUser" Тогда
	    АдресРесурса = АдресРесурса + "user";
	ИначеЕсли Действие = "GetUser" Тогда
	    АдресРесурса = АдресРесурса + "user/" + Параметр1;
	ИначеЕсли Действие = "UpdateUser" Тогда
	    АдресРесурса = АдресРесурса + "user/" + Параметр1;
	ИначеЕсли Действие = "CreateDocument" Тогда
	    АдресРесурса = АдресРесурса + "document";
	ИначеЕсли Действие = "GetS3UploadRequest" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/uploadRequest?taxId=" + Параметр2;
	ИначеЕсли Действие = "SignDocument" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/sign?taxId=" + Параметр2;
	ИначеЕсли Действие = "RejectDocument" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/reject?taxId=" + Параметр2;
	ИначеЕсли Действие = "GetUpdates" Тогда
	    АдресРесурса = АдресРесурса + "document/findByParty?taxId=" + Параметр1 + "&timestamp=" + Параметр2 + "&all";
	ИначеЕсли Действие = "GetS3DownloadRequest" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/downloadRequest?taxId=" + Параметр2;
	ИначеЕсли Действие = "DeleteDocument" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "?taxId=" + Параметр2;
	ИначеЕсли Действие = "GetDocument" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1;
	ИначеЕсли Действие = "GetUserToken" Тогда
	    АдресРесурса = АдресРесурса + "user/" + Параметр1 + "/token";
	ИначеЕсли Действие = "PutExtraData" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/extra";
	ИначеЕсли Действие = "ConvertXMLToJSON" Тогда	
	    АдресРесурса = АдресРесурса + "document/toCreate";
	ИначеЕсли Действие = "GetJSONStringOfExistingDocument" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/toReject?taxId=" + Параметр2;
	ИначеЕсли Действие = "GetSignature" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/toAccept?taxId=" + Параметр2;
	ИначеЕсли Действие = "PutSignatureRaw" Тогда
	    АдресРесурса = АдресРесурса + "document/" + Параметр1 + "/signatureRaw";
	КонецЕсли;	
	
	Возврат АдресРесурса;	
	
КонецФункции

Функция ПолучитьСтрокуJSON(Действие, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено)
	
	СтрокаJSON = "";	
	
	Если Действие = "CreateDocument" Тогда
		
		СтруктураJSON = Новый Структура;
		
		СтруктураJSON.Вставить("name", Параметр1);
		
		parties = Новый Массив;
		
		party1 = Новый Структура;
		party1.Вставить("users_taxId", Параметр2);
		party1.Вставить("owner", Истина);
		
		party2 = Новый Структура;
		party2.Вставить("users_taxId", Параметр3);
		
		parties.Добавить(party1);
		parties.Добавить(party2);
		
		СтруктураJSON.Вставить("parties", parties);
		
		Extra = Новый Структура;
		Extra.Вставить("number",   Параметр4["Номер"]);
		Extra.Вставить("contract", Параметр4["ДоговорКонтрагента"]);
		Extra.Вставить("amount",   Параметр4["СуммаДокумента"]);
		Extra.Вставить("currency", Параметр4["ВалютаДокумента"]);
		
		СтрокаExtra = ЗаписатьВСтрокуJSON(Extra);
		
		СтруктураJSON.Вставить("extra", СтрокаExtra);
		
		СтрокаJSON = ЗаписатьВСтрокуJSON(СтруктураJSON);
		
	ИначеЕсли Действие = "RejectDocument" Тогда
		СтруктураJSON = Новый Структура;
		
		СтруктураJSON.Вставить("comment", Параметр1);
		Если НЕ ПустаяСтрока(Параметр2) Тогда
			СтруктураJSON.Вставить("signature", Параметр2);
		КонецЕсли;
		
		СтрокаJSON = ЗаписатьВСтрокуJSON(СтруктураJSON);
		
	ИначеЕсли Действие = "DeleteDocument" Тогда
		СтруктураJSON = Новый Структура;
		
		СтруктураJSON.Вставить("comment", Параметр1);
		
		СтрокаJSON = ЗаписатьВСтрокуJSON(СтруктураJSON);
		
	ИначеЕсли Действие = "SignDocument" Тогда
		СтруктураJSON = Новый Структура;
		
		СтруктураJSON.Вставить("signature", Параметр1);
		
		СтрокаJSON = ЗаписатьВСтрокуJSON(СтруктураJSON);
		
	КонецЕсли;	
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция ПолучитьApiКлючСервера()
	
	Возврат "67ae7302-42a1-40d6-b9be-778b0285b99a";
	
КонецФункции

Функция ПолучитьДопДанныеДокумента(ДокументУчета, ЭтоПроизвольныйЭД = Ложь)
	
	Если ЭтоПроизвольныйЭД Тогда
		
		РеквизитыДокументаУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУчета, "Номер");
			
	Иначе
		
		РеквизитыДокументаУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУчета, "Номер, ДоговорКонтрагента, СуммаДокумента, ВалютаДокумента");
		
		РеквизитыДокументаУчета["ДоговорКонтрагента"] = РеквизитыДокументаУчета["ДоговорКонтрагента"].Наименование;
		РеквизитыДокументаУчета["ВалютаДокумента"] = РеквизитыДокументаУчета["ВалютаДокумента"].Наименование;
		РеквизитыДокументаУчета["СуммаДокумента"] = Строка(РеквизитыДокументаУчета["СуммаДокумента"]);
	
	КонецЕсли;
	
	Возврат РеквизитыДокументаУчета;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЗАИМОДЕЙСТВИЯ С СЕРВЕРОМ //

Функция CreateUser(Структура) Экспорт // POST
	
	// Получим настройки подключения к серверу ЭДО
	HTTPСоединение  = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	АдресРесурса 	= ПолучитьАдресРесурса("CreateUser");
	
	// Получим текущий токен для работы с сервером ЭДО
	Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен(Ложь, ?(Структура.Свойство("ПортПодключения"), Структура.ПортПодключения, ""));
	
	// Сформируем HTTP-запрос с данными в формате JSON
	СтрокаJSON = ЗаписатьВСтрокуJSON(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	// Выполняем POST-запрос к серверу ЭДО
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	
	Если HTTPОтвет.КодСостояния >= 400 Тогда
		
		// Возникла ошибка при выполнении запроса. Попытаемся обновить токен и повторить запрос.
		Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен(Истина, ?(Структура.Свойство("ПортПодключения"), Структура.ПортПодключения, ""));
		
		HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
		
	КонецЕсли;
	
	// Получаем ответ сервера ЭДО как строку
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСтрокой;
	
КонецФункции

Функция GetUser(taxId) Экспорт// GET
	
	// Получим настройки подключения к серверу ЭДО
	HTTPСоединение  = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	АдресРесурса 	= ПолучитьАдресРесурса("GetUser", taxId);
	
	// Получим текущий токен для работы с сервером ЭДО
	Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен();
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 	ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 	Токен);

	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Если HTTPОтвет.КодСостояния >= 400 Тогда
		
		Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен(Истина);
		HTTPЗапрос.Заголовки.Вставить("user-key", 	Токен);
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
		
	КонецЕсли;
	
	// Получаем ответ сервера ЭДО как строку
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСтрокой;
	
КонецФункции

Функция GetUserToken(Структура, taxId) Экспорт // POST
	
	// Получим настройки подключения к серверу ЭДО
	HTTPСоединение  = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	АдресРесурса 	= ПолучитьАдресРесурса("GetUserToken", taxId);
	
	// Удаляем служебные данные
	Структура.Удалить("ПортПодключения");
	
	// Сформируем HTTP-запрос с данными в формате JSON
	СтрокаJSON = ЗаписатьВСтрокуJSON(Структура);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	// Выполняем POST-запрос к серверу ЭДО
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	
	// Получаем ответ сервера ЭДО как строку
	ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСтрокой;
	
КонецФункции

Функция UpdateUser(Структура) Экспорт // PUT
	
	// Получим настройки подключения к серверу ЭДО
	HTTPСоединение  = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	АдресРесурса 	= ПолучитьАдресРесурса("UpdateUser", Структура["taxId"]);
	
	// Получим текущий токен для работы с сервером ЭДО
	Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен();
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	СтрокаJSON = ЗаписатьВСтрокуJSON(Структура);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = HTTPСоединение.Записать(HTTPЗапрос); // PUT
	
	Если Ответ.КодСостояния >= 400 Тогда
		
		Токен = РегистрыСведений.ТокеныЭДО.ПолучитьТекущийТокен(Истина);
		HTTPЗапрос.Заголовки.Вставить("user-key", 	Токен);
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
		
	КонецЕсли;
	
	ОтветJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Возврат ОтветJSON;
	
КонецФункции

// Группа функция для создания документа на сервере ЭДО
Функция CreateDocument(HTTPСоединение, Токен, СтрокаJSON) // POST
	
	АдресРесурса = ПолучитьАдресРесурса("CreateDocument");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	// Тело запроса, JSON
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetS3UploadRequest(HTTPСоединение, Токен, taxId, ИД_Документа) // GET
	
	АдресРесурса = ПолучитьАдресРесурса("GetS3UploadRequest", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	
	ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Возврат ОтветСервера;
	
КонецФункции

Функция SignDocument(HTTPСоединение, Токен, taxId, ИД_Документа) // PUT
	
	АдресРесурса = ПолучитьАдресРесурса("SignDocument", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки("", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ОтветСервера =  HTTPСоединение.Записать(HTTPЗапрос); // PUT
	
	Возврат ОтветСервера;
	
КонецФункции

Функция RejectDocument(HTTPСоединение, Токен, taxId, ИД_Документа, СтрокаJSON) // PUT
	
	АдресРесурса = ПолучитьАдресРесурса("RejectDocument", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	ОтветСервера =  HTTPСоединение.Записать(HTTPЗапрос); // PUT
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetUpdates(HTTPСоединение, Токен, taxId, timestamp) // GET
	
	АдресРесурса = ПолучитьАдресРесурса("GetUpdates", taxId, timestamp);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 	ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 	Токен);
	
	ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetS3DownloadRequest(HTTPСоединение, Токен, taxId, ИД_Документа) // GET
	
	АдресРесурса = ПолучитьАдресРесурса("GetS3DownloadRequest", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	
	ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Возврат ОтветСервера;
	
КонецФункции

Функция UploadDocument(Файл, UploadRequest)
	
	Попытка
		
		ИнтернетПрокси 	= Новый ИнтернетПрокси;
		СтруктураURL 	= РазделитьURL(UploadRequest);
		
		Если Найти(СтруктураURL.Протокол, "https") > 0 Тогда
			HTTPСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, 443,,, ИнтернетПрокси,, Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			HTTPСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, 80,,, ИнтернетПрокси);
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURL.ПустьКФайлуНаСервере);
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		HTTPЗапрос.Заголовки.Вставить("content-type", "multipart/form-data");
		
		HTTPОтвет = HTTPСоединение.Записать(HTTPЗапрос);
		
		Если Не HTTPОтвет.КодСостояния = 200 Тогда

			ВидОперации = "Выгрузка документа на сервер ЭДО";
			ПодробныйТекстОшибки = "Произошли ошибки при выгрузке документа на сервер";
			ТекстСообщения = "Невозможно выгрузить документ на сервер. Файл: " + Файл.Имя + ", код состояния:" + HTTPОтвет.КодСостояния;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			ЗаписьЖурналаРегистрации("UploadDocument", УровеньЖурналаРегистрации.Ошибка,,, HTTPОтвет.ПолучитьТелоКакСтроку());
			Возврат Ложь;
		
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("UploadDocument", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция DownloadDocument(DownloadRequest, ИмяФайлаРезультата, ИДДокумента)
	
	Результат = Ложь;
	
	Попытка
		
		ИнтернетПрокси 	= Новый ИнтернетПрокси;
		СтруктураURL 	= РазделитьURL(DownloadRequest);
		
		Если Найти(СтруктураURL.Протокол, "https") > 0 Тогда
			HTTPСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, 443,,, ИнтернетПрокси,, Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			HTTPСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, 80,,, ИнтернетПрокси);
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURL.ПустьКФайлуНаСервере);
		
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда

			ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			ДвоичныеДанные.Записать(ИмяФайлаРезультата);
			
			Результат = Истина;
			
		Иначе
			
			ВидОперации = "Загрузка документа с сервера ЭДО";
			ПодробныйТекстОшибки = "Произошли ошибки при загрузке документа с сервера";
			ТекстСообщения = "Невозможно загрузить документ с сервера. ИД документа: " + ИДДокумента + ", код состояния:" + HTTPОтвет.КодСостояния;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			ЗаписьЖурналаРегистрации("DownloadDocument", УровеньЖурналаРегистрации.Ошибка,,, HTTPОтвет.ПолучитьТелоКакСтроку());
		
		КонецЕсли;
		
	Исключение
		
		ВидОперации = "Загрузка документа с сервера ЭДО";
		ПодробныйТекстОшибки = "Произошли ошибки при загрузке документа с сервера";
		ТекстСообщения = "Невозможно загрузить документ с сервера. ИД документа: " + ИДДокумента;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		ЗаписьЖурналаРегистрации("DownloadDocument", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция DeleteDocument(HTTPСоединение, Токен, taxId, ИД_Документа)
	
	АдресРесурса = ПолучитьАдресРесурса("DeleteDocument", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	ОтветСервера = HTTPСоединение.Удалить(HTTPЗапрос); // PUT 
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetDocument(HTTPСоединение, Токен, ИД_Документа)
	
	АдресРесурса = ПолучитьАдресРесурса("GetDocument", ИД_Документа);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", 		"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Возврат ОтветСервера;
	
КонецФункции

Функция PutExtraData(HTTPСоединение, Токен, ИД_Документа, СтрокаXML) // PUT
	
	АдресРесурса = ПолучитьАдресРесурса("PutExtraData", ИД_Документа);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("content-type", 	"application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key", 		ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", 		Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаXML);
	
	ОтветСервера =  HTTPСоединение.Записать(HTTPЗапрос); // PUT 
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ConvertXMLToJSON(HTTPСоединение, Токен, СтрокаXML) // POST
	
	АдресРесурса = ПолучитьАдресРесурса("ConvertXMLToJSON");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	//HTTPЗапрос.Заголовки.Вставить("accept", "application/json");
	//HTTPЗапрос.Заголовки.Вставить("content-type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	
	// Тело запроса, JSON
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаXML, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать); //ИспользованиеByteOrderMark.НеИспользовать
	
	ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	
	//ОтветСервера = ОтветСервера.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetSignature(HTTPСоединение, Токен, taxId, ИД_Документа) // GET
	
	АдресРесурса = ПолучитьАдресРесурса("GetSignature", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("accept", "application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	
	ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос); // GET
	
	Возврат ОтветСервера;
	
КонецФункции

Функция GetJSONStringOfExistingDocument(HTTPСоединение, Токен, ИД_Документа, taxId) // POST
	
	АдресРесурса = ПолучитьАдресРесурса("GetJSONStringOfExistingDocument", ИД_Документа, taxId);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	HTTPЗапрос.Заголовки.Вставить("accept", "application/json");
	
	//HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаXML, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	
	Возврат ОтветСервера;
	
	
КонецФункции

Функция PutSignatureRaw(HTTPСоединение, Токен, ИД_Документа, СтрокаПодписи) // PUT
	
	АдресРесурса = ПолучитьАдресРесурса("PutSignatureRaw", ИД_Документа);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("content-type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("api-key",  ПолучитьApiКлючСервера());
	HTTPЗапрос.Заголовки.Вставить("user-key", Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПодписи);
	
	ОтветСервера =  HTTPСоединение.Записать(HTTPЗапрос); // PUT 
	
	Возврат ОтветСервера;
	
КонецФункции

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

Функция ПроверкаНаличияНовыхЭлектронныхДокументов() Экспорт
	
	ЕстьНовыеЭД = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ЕСТЬNULL(СостоянияОбменовЭДЧерезОператоровЭДО.timestamp, ""0"") КАК ДатаВремяЗапроса
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
		|		ПО ПрофилиНастроекЭДО.Ссылка = СостоянияОбменовЭДЧерезОператоровЭДО.ПрофильНастроекЭДО
		|ГДЕ
		|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ЕстьНовыеЭД Тогда
				Прервать;
			КонецЕсли;
			
			ОтветСервера = venkonПолучитьСписокЭД(ВыборкаДетальныеЗаписи.ПрофильНастроекЭДО, Соединение, ВыборкаДетальныеЗаписи.ДатаВремяЗапроса);
			
			СписокЭД_JSON = "";
			Если ОтветСервера = Неопределено Тогда
				Продолжить;
			Иначе
			    СписокЭД_JSON = ОтветСервера.ПолучитьТелоКакСтроку();
			КонецЕсли;
			
			СписокЭД = ПрочитатьСтрокуJSON(СписокЭД_JSON);
			
			Для каждого ЭД Из СписокЭД Цикл
				
				status = ЭД.Получить("status");
				
				// Документы со стаусом "Удален" не учитываем
				Если status <> 5 Тогда
					ЕстьНовыеЭД = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьНовыеЭД;
		
КонецФункции

Функция ПолучитьОтображаемоеИмяЭлектронногоДокумента(ВладелецФайла, ТипДокумента)
	
	ИмяЭД = "";
	
	Номер = ОбщегоНазначения.ПолучитьНомерНаПечатьЭД(ВладелецФайла);
	Дата = Формат(ВладелецФайла.Дата, "ДФ=dd.MM.yyyy");
	
	Если ТипДокумента = "001" ИЛИ ТипДокумента = "002" Тогда
		
		ИмяЭД = "Счет-фактура № " + Номер + " от " + Дата;
		
	ИначеЕсли ТипДокумента = "000" Тогда
		
		ИмяЭД = "Произвольный документ № " + Номер + " от " + Дата;
		
	Иначе
		
		ИмяЭД = "Электронный документ № " + Номер + " от " + Дата;
		
	КонецЕсли;
	
	Возврат ИмяЭД;
	
КонецФункции

Функция ПолучитьXMLСтрокуИзПакета(Файл)
	
	СтрокаXML = "";
	
	СтрукутраФайловПакета = ЭлектронныеДокументыВнутренний.venkonВернутьМассивДвоичныхДанныхПакета(, Ложь, Файл.ПолноеИмя);
	
	Если СтрукутраФайловПакета <> Неопределено И СтрукутраФайловПакета.Свойство("ДвоичныеДанныеДокумента") Тогда
		
		ДД = СтрукутраФайловПакета.ДвоичныеДанныеДокумента;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
		ДД.Записать(ИмяВременногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, "UTF-8");
		СтрокаXML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат СтрокаXML;	
	
КонецФункции

Функция ПолучитьСтрокуПодписи(Файл)
	
	СтрокаПодписи = "";
	
	СтрукутраФайловПакета = ЭлектронныеДокументыВнутренний.venkonВернутьМассивДвоичныхДанныхПакета(, Истина, Файл.ПолноеИмя, Ложь);
	МассивДанныхПодписей = Новый Массив;
	Если СтрукутраФайловПакета <> Неопределено И СтрукутраФайловПакета.Свойство("МассивДанныхПодписей", МассивДанныхПодписей) Тогда
		Если МассивДанныхПодписей.Количество() > 0 Тогда
			
			ДанныеПодписи = МассивДанныхПодписей[МассивДанныхПодписей.Количество() - 1];
			СтрокаПодписи = ДанныеПодписи[ДанныеПодписи.Количество() - 1].СтрокаПодписи;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаПодписи;	
	
КонецФункции

Функция ПодключитьсяКЭДО(ПрофильНастроекЭДО, СертификатКриптографии) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ошибки", Новый Массив);
	СтруктураДанных.Вставить("СообщитьПользователю", "");
	СтруктураДанных.Вставить("Подключено", Ложь);
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");

	ДанныеОрганизации = ЭлектронныеДокументыПереопределяемый.ПолучитьСведенияОЮрФизЛице(Организация); // Типовой механизм. Можно переопределить.
	
	Запрос = Новый Структура("Наименование, ИНН, Email, Телефон, Пароль, Имя, Фамилия");
	Запрос.Вставить("Пароль", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Пароль"));
	
	ЗаполнитьЗначенияСвойств(Запрос, ДанныеОрганизации);
	
	РеквизитыСертификатаКриптографии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатКриптографии, "Имя, Фамилия");
	ЗаполнитьЗначенияСвойств(Запрос, РеквизитыСертификатаКриптографии);
	
	//Для разработки
	Запрос.Вставить("ПортПодключения", Константы.ПортПодключения.Получить());
	
	// Проверка на заполненность полей
	Для Каждого КлючИЗначение Из Запрос Цикл
		Если Не (ЭтоНеобязательноеПолеПриПодключенииКЭДО(КлючИЗначение.Ключ) ИЛИ ЗначениеЗаполнено(КлючИЗначение.Значение)) Тогда
			СтруктураДанных.Ошибки.Добавить("Не заполнено обязательное поле """ + КлючИЗначение.Ключ + """ организации");
		КонецЕсли;
	КонецЦикла;

	Если СтруктураДанных.Ошибки.Количество() > 0 Тогда
		СтруктураДанных.СообщитьПользователю = Нстр("ru = 'Ошибка подключения к сервису ЭДО. Не заполнены необходимые поля для регистрации'");
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("taxId", 			СокрЛП(Запрос.ИНН));
	Структура.Вставить("company", 			Запрос.Наименование);
	Структура.Вставить("firstName", 		Запрос.Имя);
	Структура.Вставить("lastName", 			Запрос.Фамилия);
	Структура.Вставить("phone", 			Запрос.Телефон);
	Структура.Вставить("email", 			Запрос.Email);
	Структура.Вставить("password", 			Запрос.Пароль);
	Структура.Вставить("ПортПодключения", 	Запрос.ПортПодключения);
	
	ОтветСервера = CreateUser(Структура);
	
	Если ОтветСервера = "OK" Тогда
		СтруктураДанных.Вставить("Подключено", Истина);
	Иначе
		СтруктураДанных.Вставить("СообщитьПользователю", ОтветСервера);
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции

Функция ИзменитьПарольПрофиляЭДО(ПрофильНастроекЭДО, НовыйПароль) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ошибки", Новый Массив);
	СтруктураДанных.Вставить("СообщитьПользователю", "");
	СтруктураДанных.Вставить("Успешно", Ложь);
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");

	ДанныеОрганизации = ЭлектронныеДокументыПереопределяемый.ПолучитьСведенияОЮрФизЛице(Организация); // Типовой механизм. Можно переопределить.
	
	Запрос = Новый Структура("Наименование, ИНН, Email, Телефон, Пароль");
	Запрос.Вставить("Пароль", НовыйПароль);
	
	ЗаполнитьЗначенияСвойств(Запрос, ДанныеОрганизации);
	
	//Для разработки
	Запрос.Вставить("ПортПодключения", Константы.ПортПодключения.Получить());
	
	// Проверка на заполненность полей
	Для Каждого КлючИЗначение Из Запрос Цикл
		Если Не (ЭтоНеобязательноеПолеПриПодключенииКЭДО(КлючИЗначение.Ключ) ИЛИ ЗначениеЗаполнено(КлючИЗначение.Значение)) Тогда
			СтруктураДанных.Ошибки.Добавить("Не заполнено обязательное поле """ + КлючИЗначение.Ключ + """ организации");
		КонецЕсли;
	КонецЦикла;

	Если СтруктураДанных.Ошибки.Количество() > 0 Тогда
		СтруктураДанных.СообщитьПользователю = Нстр("ru = 'Ошибка подключения к сервису ЭДО. Не заполнены необходимые поля для регистрации'");
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("taxId", 			СокрЛП(Запрос.ИНН));
	Структура.Вставить("company", 			Запрос.Наименование);
	Структура.Вставить("phone", 			Запрос.Телефон);
	Структура.Вставить("email", 			Запрос.Email);
	Структура.Вставить("password", 			Запрос.Пароль);
	Структура.Вставить("ПортПодключения", 	Запрос.ПортПодключения);
	
	ОтветСервера = UpdateUser(Структура);
	
	Если ОтветСервера = "OK" Тогда
		СтруктураДанных.Вставить("Успешно", Истина);
	Иначе
		СтруктураДанных.Вставить("СообщитьПользователю", ОтветСервера);
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции

Функция ПолучитьАктуальныйТокенПрофиляЭДО(ПрофильНастроекЭДО) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ошибки", Новый Массив);
	СтруктураДанных.Вставить("СообщитьПользователю", "");
		
	Запрос = Новый Структура;
	Запрос.Вставить("Пароль", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Пароль"));
	
	//Для разработки
	Запрос.Вставить("ПортПодключения", Константы.ПортПодключения.Получить());
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "Организация");
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");

	Токен = "";
	
	Структура = Новый Структура;	
	Структура.Вставить("password", 			Запрос.Пароль);
	Структура.Вставить("ПортПодключения", 	Запрос.ПортПодключения);
	
	ОтветСервера = GetUserToken(Структура, ИНН);
	Токен = СтрЗаменить(ОтветСервера, """", "");
	
	Если ЗначениеЗаполнено(Токен) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ТокеныПрофилейНастроекЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.Токен = Токен;
		МенеджерЗаписи.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
	
		МенеджерЗаписи.Записать();
		
	КонецЕсли;

	Возврат Токен;

КонецФункции

Функция ЭтоНеобязательноеПолеПриПодключенииКЭДО(ИмяПоля)
	
	Если ИмяПоля = "ПортПодключения" 
		ИЛИ ИмяПоля = "Имя"
		ИЛИ ИмяПоля = "Фамилия" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция СтруктураНастроекЭДО() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("АдресВебСервиса", "api.goodsign.biz");
	СтруктураНастроек.Вставить("ПортПодключения", "443");
	Возврат СтруктураНастроек;
	
КонецФункции

// Разделяем URL по составным частям (протокол, сервер и путь)
// Параметры:
// URL           - строка - правильный url к ресурсу в Интернет
//
// Возвращаемое значение:
// структура с полями:
// протокол   - строка - протокол доступа к ресурсу
// ИмяСервера - строка - сервер на котором располагается ресурс
// ПустьКФайлуНаСервере - строка - пусть к файлу на сервере
//
Функция РазделитьURL(знач URL) Экспорт
	
	Результат = Новый Структура;

	// протокол по умолчанию
	Протокол = "http";
	
	URL = СокрЛП(URL);
	
	Если Лев(URL, 5) = "ftp://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 7);
	КонецЕсли;
	
	Если Лев(URL, 7) = "http://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 7);
		Протокол = "http";
	КонецЕсли;
	
	Если Лев(URL, 8) = "https://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 8);
		Протокол = "https";
	КонецЕсли;

	Индекс = 1;
	ИмяСервера = "";
	
	Пока Индекс < СтрДлина(URL) Цикл
		_Символ = Сред(URL, Индекс, 1);
		Если _Символ = "/" Тогда
			Прервать;
		КонецЕсли;
		ИмяСервера = ИмяСервера + _Символ;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПустьКФайлу = Прав(URL, СтрДлина(URL) - Индекс);
	
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("ПустьКФайлуНаСервере", ПустьКФайлу);
	Результат.Вставить("Протокол", Протокол);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьВСтрокуJSON(КонвертируемыеДанные) Экспорт
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина, ЭкранированиеСимволовJSON.СимволыВнеASCII);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, КонвертируемыеДанные);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции 

Функция ПрочитатьСтрокуJSON(СтрокаJSON, ВСоответствие = Ложь, ИменаСвойствСоЗначениямиДата = "") Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ВСоответствие, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO);
	
КонецФункции
