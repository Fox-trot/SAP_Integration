////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛицаЭД(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрокЭД(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	ЗначениеВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(НаименованиеФО);
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
// СчетФактура - СсылкаНаДокумент - ссылка на счет-фактуру исходящую в прикладном решении.
//
// Возвращаемое значение:
//  ДатаВыставления - дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ДатаВыставления = Результат.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭД.Ссылка КАК ЭД,
	|	ЭД.СуммаДокумента,
	|	ЭД.ДатаДокументаОтправителя,
	|	ВЫБОР
	|		КОГДА ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|			ТОГДА 1
	|		КОГДА ЭД.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЭД.НомерВерсииЭД
	|		ИНАЧЕ ЭД.ДатаФормированияЭДОтправителем
	|	КОНЕЦ КАК Версия,
	|	ЭД.ВидЭД,
	|	ЭД.НаправлениеЭД,
	|	ЭД.Организация,
	|	ЭД.Контрагент,
	|	ЭД.ПрофильНастроекЭДО,
	|	ЭД.СтатусЭД,
	|	ЭД.Изменил
	|ПОМЕСТИТЬ ЭДНаПодпись
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
	|	ИЗ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	|	ГДЕ
	|		СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭДПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|			ПО (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|	ГДЕ
	|		ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|		И ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|		И ВЫБОР
	|				КОГДА СостоянияЭД.СостояниеВерсииЭД ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
	|			КОНЕЦ) КАК СостоянияЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД
	|		ПО СостоянияЭДО.ЭлектронныйДокумент = ЭД.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭД.Организация,
	|	ЭД.ВидЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	ЭДНаПодпись КАК ЭДНаПодпись
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|			ПО СертификатыЭЦПВидыДокументов.Ссылка = СертификатыЭЦП.Ссылка
	|		ПО ЭДНаПодпись.ВидЭД = СертификатыЭЦПВидыДокументов.ВидДокумента
	|			И ЭДНаПодпись.Организация = СертификатыЭЦПВидыДокументов.Ссылка.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
	|		ПО ЭДНаПодпись.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификаты.Ссылка
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.СписокПользователей.Пользователь = &ТекущийПользователь
	|		ИЛИ НЕ СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату)
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.Ссылка = ПрофилиНастроекЭДОСертификаты.Сертификат
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЭД_ЭП.Отпечаток
	|				ИЗ
	|					Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭД_ЭП
	|				ГДЕ
	|					ЭД_ЭП.Ссылка = ЭДНаПодпись.ЭД)";
	
	Если ДляРабочегоСтола Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	СертификатыЭЦП.Отпечаток КАК Отпечаток,
			|	СертификатыЭЦП.Представление КАК Сертификат,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭЦП.Ссылка) КАК ЗначениеПоказателя
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|	СертификатыЭЦП.Отпечаток,
			|	СертификатыЭЦП.Представление";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
			|	ЭДНаПодпись.СуммаДокумента,
			|	ЭДНаПодпись.Версия,
			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
			|	СертификатыЭЦПВидыДокументов.Ссылка КАК Сертификат
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет владельца электронного документа
//
// Параметры:
//   ЭД         - СправочникСсылка - ссылка на  электронный документ.
//   ВладелецЭД - ссылка на владельца электронного документа.
//
Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД) Экспорт
	
	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
		ПодробныйТекстОшибки, ТекстСообщения, КодСобытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				
				ЮридическийДо = ЮридическиЗначимый;
				
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					
					Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
						ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(КолонкаТЗ.Имя, "", ДоступноСимволов);
					КонецЦикла;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
				КонецЦикла;
				
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый);
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции
