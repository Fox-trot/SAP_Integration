
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭЦП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
			ПодписываемыйОбъектСсылка,
			НоваяПодписьДвоичныеДанные,
			Отпечаток,
			ДатаПодписи,
			Комментарий,
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			ДвоичныеДанныеСертификата,
			УникальныйИдентификатор = Неопределено,
			СерийныйНомер = "") Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ПодписываемыйОбъект.Заблокировать();
	Иначе
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка;
	КонецЕсли;
	
	Если ДатаПодписи = Дата('00010101') Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
	
	НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
	НоваяЗапись.ДатаПодписи         = ДатаПодписи;
	НоваяЗапись.ИмяФайлаПодписи     = ИмяФайлаПодписи;
	НоваяЗапись.Комментарий         = Комментарий;
	НоваяЗапись.Отпечаток           = Отпечаток;
	НоваяЗапись.Подпись             = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные, Новый СжатиеДанных(9));
	НоваяЗапись.УстановившийПодпись = ТекущийПользователь();
	НоваяЗапись.Сертификат          = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
	НоваяЗапись.СерийныйНомер       = СерийныйНомер;
	
	
	ПодписываемыйОбъект.ПодписанЭЦП = Истина;
	ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		ПодписываемыйОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Получает все подписи файла
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПолноеИмяОбъектаСЭЦП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЭлектронныеЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
					|	ЭлектронныеЦифровыеПодписи.Подпись             КАК Подпись,
					|	ЭлектронныеЦифровыеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
					|ИЗ
					|	[ПолноеИмяОбъектаСЭЦП].ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
					|ГДЕ
					|	ЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭЦП]", ПолноеИмяОбъектаСЭЦП);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи",
											АдресПодписи,
											ВыборкаЗапроса.КомуВыданСертификат,
											ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция venkonСсылкаНаСертификат(Знач Плагин, Знач alias, Знач serialNumber) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК Сертификаты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Плагин = ЗНАЧЕНИЕ(Перечисление.ПлагиныСертификатовЭлектроннойПодписи.pfx)
	|				ТОГДА Сертификаты.alias = &alias
	|			ИНАЧЕ Сертификаты.serialNumber = &serialNumber
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Плагин",       Плагин);
	Запрос.УстановитьПараметр("alias",        alias);
	Запрос.УстановитьПараметр("serialNumber", serialNumber);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;


КонецФункции

Функция venkonЗаписатьСертификатВСправочник(Форма, Сертификат = Неопределено, ДанныеСертификата = Неопределено,  СертификатНаименование = "", СертификатПользователь = "", СертификатОрганизация = "", ДопСвойства = Неопределено) Экспорт

	СертификатСсылка = Неопределено;

	Если Сертификат = Справочники.СертификатыЭЦП.ПустаяСсылка() Тогда
		// Создаем новый элемент справочника
		СертификатОбъект = Справочники.СертификатыЭЦП.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СертификатОбъект, ДанныеСертификата);
		Если ДопСвойства <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СертификатОбъект, ДопСвойства);
		КонецЕсли;
		//СертификатОбъект.Добавил = ПользователиКлиентСервер.АвторизованныйПользователь();
		СертификатОбъект.Наименование = СертификатНаименование;
		СертификатОбъект.Пользователь = СертификатПользователь;
		СертификатОбъект.Организация = СертификатОрганизация;
		// Получаем ДД сертификата
		ИмяФайла = ДанныеСертификата["disk"] + ДанныеСертификата["path"];
		Слэш = ?(Прав(ИмяФайла, 1) = "\", "", "\");
		Если ДанныеСертификата["Плагин"] = Перечисления.ПлагиныСертификатовЭлектроннойПодписи.pfx Тогда
			ИмяФайла = ИмяФайла + Слэш + ДанныеСертификата["file_name"] + ".pfx";
		Иначе
			ИмяФайла = ИмяФайла + Слэш + ДанныеСертификата["name"] + ".cer";
		КонецЕсли;
		ДДСертификата = Новый ДвоичныеДанные(ИмяФайла);
		СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДДСертификата, Новый СжатиеДанных(9));
		
		СертификатОбъект.Записать();
		СертификатСсылка =  СертификатОбъект.Ссылка;
	Иначе
		СертификатОбъект = Сертификат.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СертификатОбъект, ДанныеСертификата);
		Если ДопСвойства <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СертификатОбъект, ДопСвойства);
		КонецЕсли;
		//СертификатОбъект.Добавил = ПользователиКлиентСервер.АвторизованныйПользователь();
		СертификатОбъект.Наименование = СертификатНаименование;
		СертификатОбъект.Пользователь = СертификатПользователь;
		СертификатОбъект.Организация = СертификатОрганизация;
		// Получаем ДД сертификата
		ИмяФайла = ДанныеСертификата["disk"] + ДанныеСертификата["path"];
		Слэш = ?(Прав(ИмяФайла, 1) = "\", "", "\");
		Если ДанныеСертификата["Плагин"] = Перечисления.ПлагиныСертификатовЭлектроннойПодписи.pfx Тогда
			ИмяФайла = ИмяФайла + Слэш + ДанныеСертификата["file_name"] + ".pfx";
		Иначе
			ИмяФайла = ИмяФайла + Слэш + ДанныеСертификата["name"] + ".cer";
		КонецЕсли;
		ДДСертификата = Новый ДвоичныеДанные(ИмяФайла);
		СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДДСертификата, Новый СжатиеДанных(9));
		
		СертификатОбъект.Записать();
		СертификатСсылка =  СертификатОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СертификатСсылка;
	
КонецФункции

Функция venkonПоисксертификатаВСправочнике(ДанныеСертификата) Экспорт
	
	СертификатСсылка = venkonСсылкаНаСертификат(ДанныеСертификата.Плагин, ДанныеСертификата.alias, ДанныеСертификата.serialNumber);
	
	Возврат СертификатСсылка;
	
КонецФункции

Процедура venkonОбновитьСписокСертификатов(Сертификаты, СвойстваСертификатовНаКлиенте, КромеУжеДобавленных,
				Личные, Ошибка, БезОтбора) Экспорт
				
	ТаблицаСвойствСертификатов = Новый ТаблицаЗначений;
	ТаблицаСвойствСертификатов.Колонки.Добавить("Отпечаток", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	ТаблицаСвойствСертификатов.Колонки.Добавить("КемВыдан");
	ТаблицаСвойствСертификатов.Колонки.Добавить("Представление");
	ТаблицаСвойствСертификатов.Колонки.Добавить("НаКлиенте",        Новый ОписаниеТипов("Булево"));
	ТаблицаСвойствСертификатов.Колонки.Добавить("НаСервере",        Новый ОписаниеТипов("Булево"));
	ТаблицаСвойствСертификатов.Колонки.Добавить("ЭтоЗаявление",     Новый ОписаниеТипов("Булево"));
	ТаблицаСвойствСертификатов.Колонки.Добавить("ВОблачномСервисе", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойствСертификатов.Колонки.Добавить("Плагин",           Новый ОписаниеТипов("ПеречислениеСсылка.ПлагиныСертификатовЭлектроннойПодписи"));
	ТаблицаСвойствСертификатов.Колонки.Добавить("disk");
	ТаблицаСвойствСертификатов.Колонки.Добавить("path");
	ТаблицаСвойствСертификатов.Колонки.Добавить("file_name");
	ТаблицаСвойствСертификатов.Колонки.Добавить("name");
	ТаблицаСвойствСертификатов.Колонки.Добавить("alias");
	ТаблицаСвойствСертификатов.Колонки.Добавить("serialNumber");
	ТаблицаСвойствСертификатов.Колонки.Добавить("plugin");
	
	Для Каждого СвойстваСертификата Из СвойстваСертификатовНаКлиенте Цикл
		НоваяСтрока = ТаблицаСвойствСертификатов.Добавить();
		НоваяСтрока["Представление"] = СвойстваСертификата.Получить("ПредставлениеКлюча");
		СтруктураКлюча = СвойстваСертификата.Получить("СтруктураКлюча");
		issuerName = "";
		КемВыдан = "";
		Если СтруктураКлюча.Свойство("issuerName", issuerName) Тогда
			issuerName = СтруктураКлюча["issuerName"];
			CN = Найти(issuerName, "CN=");
			issuerName = Сред(issuerName, CN);
			Если CN <> 0 Тогда
				ПозицияЗапятой = Найти(issuerName, ",");
				КемВыдан = Сред(issuerName, CN + 3, ПозицияЗапятой - 4);
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока["КемВыдан"] = КемВыдан;
		Плагин = НРег(СтруктураКлюча["plugin"]);
		Если Плагин = "pfx" Тогда
			НоваяСтрока["Плагин"]     = Перечисления.ПлагиныСертификатовЭлектроннойПодписи.pfx;
			НоваяСтрока["disk"]       = СтруктураКлюча["disk"];
			НоваяСтрока["path"]       = СтруктураКлюча["path"];
			НоваяСтрока["file_name"]  = СтруктураКлюча["file_name"];
			НоваяСтрока["alias"]      = СтруктураКлюча["alias"];
			НоваяСтрока["plugin"]     = "pfx";
		Иначе
			НоваяСтрока["Плагин"]        = Перечисления.ПлагиныСертификатовЭлектроннойПодписи.certkey;
			НоваяСтрока["disk"]          = СтруктураКлюча["disk"];
			НоваяСтрока["path"]          = СтруктураКлюча["path"];
			НоваяСтрока["name"]          = СтруктураКлюча["name"];
			НоваяСтрока["serialNumber"]  = СтруктураКлюча["serialNumber"];
			НоваяСтрока["plugin"]        = "certkey";
		КонецЕсли;
		НоваяСтрока.НаКлиенте = Истина;
	КонецЦикла;
	
	Сертификаты.Очистить();
	Для каждого СвойстваСертификата Из ТаблицаСвойствСертификатов Цикл
		Строка = Сертификаты.Добавить();
		ОбновитьЗначение(Строка.Представление,      СвойстваСертификата.Представление);
		ОбновитьЗначение(Строка.КемВыдан,           СвойстваСертификата.КемВыдан);
		ОбновитьЗначение(Строка.НаКлиенте,          СвойстваСертификата.НаКлиенте);
		ОбновитьЗначение(Строка.НаСервере,          СвойстваСертификата.НаСервере);
		ОбновитьЗначение(Строка.ЭтоЗаявление,       СвойстваСертификата.ЭтоЗаявление);
		ОбновитьЗначение(Строка.ВОблачномСервисе,   СвойстваСертификата.ВОблачномСервисе);
		ОбновитьЗначение(Строка.Плагин,             СвойстваСертификата.Плагин);
		ОбновитьЗначение(Строка.disk,               СвойстваСертификата.disk);
		ОбновитьЗначение(Строка.path,               СвойстваСертификата.path);
		ОбновитьЗначение(Строка.name,               СвойстваСертификата.name);
		ОбновитьЗначение(Строка.serialNumber,       СвойстваСертификата.serialNumber);
		ОбновитьЗначение(Строка.file_name,          СвойстваСертификата.file_name);
		ОбновитьЗначение(Строка.alias,              СвойстваСертификата.alias);
		ОбновитьЗначение(Строка.plugin,             СвойстваСертификата.plugin);
	КонецЦикла;
				
КонецПроцедуры 

// Для процедуры ЗаписатьСертификатВСправочник.
Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение, ПропускатьНеопределенныеЗначения = Ложь)
	
	Если НовоеЗначение = Неопределено И ПропускатьНеопределенныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура  venkonЗаписатьСертификатВСправочникЭкспорт(Форма, Сертификат = Неопределено, ДанныеСертификата = Неопределено, СертификатНаименование = "", СертификатПользователь = "", СертификатОрганизация = "", ДопСвойства = Неопределено) Экспорт
	
	Форма.Сертификат = venkonЗаписатьСертификатВСправочник(Форма, Сертификат, 
		ДанныеСертификата, СертификатНаименование, СертификатПользователь, СертификатОрганизация, ДопСвойства);
	
КонецПроцедуры

 