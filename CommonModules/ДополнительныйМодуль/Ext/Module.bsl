
Процедура ЗаполнитьТаблицуОстатковМатериалов(ТаблицаОстатков,ДокументОбъект, Склад,Организация,МоментВремени=неопределено,Счет=неопределено,ИмяТабличнойЧастиДокумента="Материалы") Экспорт
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	ИмяРегистра="Хозрасчетный";
	ИмяСчетаУчета="Счет";
	
	
	Запрос = новый Запрос;
	
	Условие="";
	
	Если Счет=неопределено Тогда
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Счет
		|ИЗ
		|	Документ."+ИмяДокумента+"."+ИмяТабличнойЧастиДокумента+" КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяДокумента+" КАК Документ
		|		ПО ТаблицаДокумента.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Счет";
		Запрос.УстановитьПараметр("ДокументСсылка",ДокументОбъект.Ссылка);  
		
		Счета=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
		Условие=" Счет В (&Счета) ";
	
		Запрос.УстановитьПараметр("Счета",Счета);
	Иначе
		Условие=" Счет=&Счет ";
		Запрос.УстановитьПараметр("Счет",Счет);
	КонецЕсли; 
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт,
	|	Остатки.Счет,
	|	ТаблицаДокумента.Счет
	|ИЗ
	|	Документ."+ИмяДокумента+"."+ИмяТабличнойЧастиДокумента+" КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяДокумента+" КАК Документ
	|		ПО ТаблицаДокумента.Ссылка = Документ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,"+Условие+" , , Субконто2=&Склад И Организация = &ВыбОрганизация) КАК Остатки
	|		ПО ТаблицаДокумента.Номенклатура = Остатки.Субконто1
	|			И ТаблицаДокумента.Счет = Остатки.Счет
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";
	
	Если МоментВремени=неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени",ДокументОбъект.МоментВремени());
	Иначе
		Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДокументСсылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ЗаполнитьТаблицуОстатковНоменклатуры(ТаблицаОстатков,ДокументОбъект, Склад,Организация) Экспорт
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	ИмяРегистра="Хозрасчетный";
	ИмяСчетаУчета="СчетУчетаБУ";
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК "+ИмяДокумента+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,, &ВидыСубконто , Субконто2=&Склад И Организация=&ВыбОрганизация) КАК Остатки
	|		ПО Остатки.Субконто1 = "+ИмяДокумента+".Номенклатура.Номенклатура
	|		И Остатки.Счет = "+ИмяДокумента+".Номенклатура."+ИмяСчетаУчета+"
	|ГДЕ "+ИмяДокумента+".Ссылка=&ДокументСсылка
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",ДокументОбъект.МоментВремени());
	Запрос.УстановитьПараметр("ДокументСсылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	ВидыСубконто=новый СписокЗначений;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ЗаполнитьТаблицуОстатковНоменклатурыПродаж(ТаблицаОстатков,ДокументОбъект, Склад,Организация,ИмяСчетаУчета="Счет",ИмяТаблицы="Номенклатура",ДокументРезервирования=Неопределено) Экспорт
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	Если не ЗначениеЗаполнено(ИмяСчетаУчета) Тогда
		ИмяСчетаУчета="Счет";
	КонецЕсли;	
	
	ИмяРегистра="Хозрасчетный";
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Счет,
	|	Остатки.Субконто1,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК "+ИмяДокумента+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,,&ВидыСубконто , Субконто2=&Склад И Организация=&ВыбОрганизация) КАК Остатки
	|		ПО Остатки.Субконто1 = "+ИмяДокумента+"."+ИмяТаблицы+".Номенклатура
	|		И Остатки.Счет = "+ИмяДокумента+"."+ИмяТаблицы+"."+ИмяСчетаУчета+"
	|ГДЕ "+ИмяДокумента+".Ссылка=&ДокументСсылка
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",ДокументОбъект.МоментВремени());
	Запрос.УстановитьПараметр("ДокументСсылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	ВидыСубконто=новый СписокЗначений;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатураПродаж);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Колонки.Добавить("Резерв",Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,3)));
	
    //резервы
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервыНоменклатурыПродажОстатки.Номенклатура,
	|	РезервыНоменклатурыПродажОстатки.КоличествоОстаток КАК Резерв
	|ИЗ
	|	РегистрНакопления.РезервыНоменклатурыПродаж.Остатки(
	|			&МоментВремени,
	|			Организация = &ВыбОрганизация
	|				И Склад = &Склад
	|				И Номенклатура В (&Номенклатура)
	|				И ДокументРезервирования <> &ДокументРезервирования) КАК РезервыНоменклатурыПродажОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаОстатков.ВыгрузитьКолонку("Субконто1"));
	Запрос.УстановитьПараметр("ДокументРезервирования",ДокументРезервирования);
	
	Если ДокументРезервирования=Неопределено Тогда
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"И ДокументРезервирования <> &ДокументРезервирования","");
		
	КонецЕсли;	

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицаОстатков=ТаблицаОстатков.Найти(Выборка.Номенклатура);
		
		Если СтрокаТаблицаОстатков<>Неопределено Тогда
			СтрокаТаблицаОстатков.Резерв=Выборка.Резерв;
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры	 

Процедура ЗаполнитьТаблицуОстатковМатериаловНаЗабалансе(ТаблицаОстатков,ДокументОбъект, Склад,Организация,МоментВремени=неопределено) Экспорт
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	ИмяРегистра="Хозрасчетный";
	ИмяСчетаУчета="Счет";
 
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.Субконто3 КАК ДатаПоступления,
	|   Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК "+ИмяДокумента+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,Счет В ИЕРАРХИИ(&Счет) , , ) КАК Остатки
	|		ПО Остатки.Субконто1 = "+ИмяДокумента+".Материалы.Номенклатура
	|		И Остатки.Счет = "+ИмяДокумента+".Материалы."+ИмяСчетаУчета+"
	|ГДЕ Остатки.Субконто2=&Склад
	|  И Остатки.Организация=&ВыбОрганизация
	|  И "+ИмяДокумента+".Ссылка=&ДокументСсылка
	|";
	
	Если МоментВремени=Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени",ДокументОбъект.МоментВремени());
	Иначе
		Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДокументСсылка",ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Счет",ПланыСчетов.Хозрасчетный.А014);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ПолучитьОстаткиМатериалов(ТаблицаОстатков,МоментВремени,Склад,СчетУчета,Организация) Экспорт
	
	ИмяРегистра="Хозрасчетный";
	ИмяСчетаУчета="Счет";
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1,"+?(СчетУчета=ПланыСчетов.Хозрасчетный.НайтиПоКоду("014"),"Остатки.Субконто3,","")+"
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,Счет=&Счет, , ) КАК Остатки
	|ГДЕ Остатки.Субконто2=&Склад
	|  И Остатки.Организация=&ВыбОрганизация
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Счет",СчетУчета);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ПолучитьОстаткиНоменклатурыПродаж(ТаблицаОстатков,МоментВремени,Склад,СчетУчета,Организация) Экспорт
	
	ИмяРегистра="Хозрасчетный";
	ИмяСчетаУчета="Счет";
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,Счет=&Счет, , ) КАК Остатки
	|ГДЕ Остатки.Субконто2=&Склад
	|  И Остатки.Организация=&ВыбОрганизация
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Счет",СчетУчета);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ПроверитьОстаткиМатериалов(Отказ,ДокументОбъект,ТаблицаМатериалы, Склад,Организация,ИмяТабличнойЧастиДокумента="Материалы") Экспорт
	
	ТаблицаОстатков=новый таблицазначений;
	ЗаполнитьТаблицуОстатковМатериалов(ТаблицаОстатков,ДокументОбъект,Склад,Организация,,,ИмяТабличнойЧастиДокумента);
	
	ИмяСчетаУчета="Счет";
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаМатериалы  Цикл
		Если СтрокаНоменклатуры.Количество<=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаОстатков = ТаблицаОстатков.Найти(СтрокаНоменклатуры.Номенклатура,"Субконто1");
		Если СтрокаОстатков = неопределено Тогда    			
			Сообщить("Нет остатков материала """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаОстатков.КоличествоОстатокДт < СтрокаНоменклатуры.Количество Тогда
			Сообщить("Недостаточно остатков номенклатуры ("+СтрокаНоменклатуры.Номенклатура.Код+") """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Сообщить("В остатке: "+Строка(СтрокаОстатков.КоличествоОстатокДт)+" "+СтрокаНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения,СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
	КонецЦикла; 
	Если ЕстьПравоНаСписаниеНоменклатурыБезПроверкиОстатков() и Отказ Тогда
		Отказ=Ложь;
	КонецЕсли;

КонецПроцедуры	 

Процедура ПроверитьОстаткиНоменклатуры(Отказ,ДокументОбъект,ТаблицаМатериалы, Склад,Организация,ИмяСчетаУчета="") Экспорт
	
	ТаблицаОстатков=новый таблицазначений;
	ЗаполнитьТаблицуОстатковНоменклатуры(ТаблицаОстатков,ДокументОбъект,Склад,Организация);
	
	Если ИмяСчетаУчета="" Тогда
		ИмяСчетаУчета="Счет";
	КонецЕсли; 
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаМатериалы  Цикл
		Если СтрокаНоменклатуры.Количество<=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаОстатков = ТаблицаОстатков.Найти(СтрокаНоменклатуры.Номенклатура,"Субконто1");
		Если СтрокаОстатков = неопределено Тогда    			
			Сообщить("Нет остатков номенклатуры """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаОстатков.КоличествоОстатокДт < СтрокаНоменклатуры.Количество Тогда
			Сообщить("Недостаточно остатков номенклатуры ("+СтрокаНоменклатуры.Номенклатура.Код+") """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Сообщить("В остатке: "+Строка(СтрокаОстатков.КоличествоОстатокДт)+" "+СтрокаНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения,СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
	КонецЦикла; 
	Если ЕстьПравоНаСписаниеНоменклатурыБезПроверкиОстатков() и Отказ Тогда
		Отказ=Ложь;
	КонецЕсли;
	
КонецПроцедуры	 

Процедура ПроверитьОстаткиНоменклатурыПродаж(Отказ,ДокументОбъект,ТаблицаНоменклатурыПродаж, Склад,Организация,ИмяСчетаУчета="",ДокументРезервирования=Неопределено) Экспорт
	
	КоличествоВРазныхЕдиницахИзмерения=ложь;
	
	Если ДокументОбъект.Метаданные().Имя="РеализацияНоменклатурыПродаж" Тогда
		КоличествоВРазныхЕдиницахИзмерения=Истина;
	КонецЕсли;	
	
	ТаблицаОстатков=Новый ТаблицаЗначений;
	ЗаполнитьТаблицуОстатковНоменклатурыПродаж(ТаблицаОстатков,ДокументОбъект,Склад,Организация,ИмяСчетаУчета,,ДокументРезервирования);
	
	Если ИмяСчетаУчета="" Тогда
		ИмяСчетаУчета="Счет";
	КонецЕсли; 
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатурыПродаж  Цикл
		
		Если КоличествоВРазныхЕдиницахИзмерения Тогда
			Количество=ПеревестиКоличествоВЕдиницуХраненияОстатка(СтрокаНоменклатуры.Количество,СтрокаНоменклатуры.Номенклатура,СтрокаНоменклатуры.ЕдиницаИзмерения);
		Иначе
			Количество=СтрокаНоменклатуры.Количество;
		КонецЕсли;
		
		Если Количество<=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаОстатков = ТаблицаОстатков.Найти(СтрокаНоменклатуры.Номенклатура,"Субконто1");
		Если СтрокаОстатков = неопределено Тогда    			
			Сообщить("Нет остатков номенклатуры """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
		Если (СтрокаОстатков.КоличествоОстатокДт-СтрокаОстатков.Резерв) < Количество Тогда
			Сообщить("Недостаточно свободных остатков номенклатуры ("+СтрокаНоменклатуры.Номенклатура.Код+") """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Сообщить("В остатке: "+Строка(СтрокаОстатков.КоличествоОстатокДт)+" "+СтрокаНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения,СтатусСообщения.Важное);
			Сообщить("В резерве: "+Строка(СтрокаОстатков.Резерв)+" "+СтрокаНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения,СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли; 
		
	КонецЦикла; 
	Если ЕстьПравоНаСписаниеНоменклатурыБезПроверкиОстатков() и Отказ Тогда
		Отказ=Ложь;
	КонецЕсли;
КонецПроцедуры	 

Процедура ПроверитьОстаткиМатериаловНаЗабалансе(Отказ,ДокументОбъект,ТаблицаМатериалы, Склад,Организация) Экспорт
	
	ТаблицаОстатков=новый таблицазначений;
	ЗаполнитьТаблицуОстатковМатериаловНаЗабалансе(ТаблицаОстатков,ДокументОбъект,Склад,Организация);
	
	ИмяСчетаУчета="Счет";
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаМатериалы  Цикл
		Если СтрокаНоменклатуры.Количество<=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаНоменклатуры.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Константы.ВестиАналитическийУчетПоСчетуУчетаНоменклатурыВЭксплуатацииВРазрезахДатПоступления.Получить() Тогда
			Отбор=Новый Структура("Субконто1,ДатаПоступления",СтрокаНоменклатуры.Номенклатура,СтрокаНоменклатуры.ДатаПоступления);
		Иначе
			Отбор=Новый Структура("Субконто1",СтрокаНоменклатуры.Номенклатура);
		КонецЕсли; 
		
		Строки= ТаблицаОстатков.НайтиСтроки(Отбор);
		
		Если Строки.Количество()>0 Тогда
			СтрокаОстатков=Строки[0];
			
			Если СтрокаОстатков.КоличествоОстатокДт < СтрокаНоменклатуры.Количество Тогда
				Сообщить("Недостаточно остатков материала """+СтрокаНоменклатуры.Номенклатура+""", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
				Сообщить("В остатке: "+Строка(СтрокаОстатков.КоличествоОстатокДт)+" "+СтрокаНоменклатуры.ЕдиницаИзмерения,СтатусСообщения.Важное);
				Отказ=Истина;
				Продолжить;
			КонецЕсли; 
		Иначе
			Сообщить("Нет остатков материала """+СтрокаНоменклатуры.Номенклатура+""", дата поступления: "+Формат(СтрокаНоменклатуры.ДатаПоступления,"ДФ=dd.MM.yyyy")+", счет учета "+СтрокаНоменклатуры[ИмяСчетаУчета].Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Отказ=Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ЕстьПравоНаСписаниеНоменклатурыБезПроверкиОстатков() и Отказ Тогда
		Отказ=Ложь;
	КонецЕсли;
	
КонецПроцедуры	 

Функция СчетУчетаМатериаловНаЗабалансе(Счет) Экспорт  
	
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("014");
	
	//Если Счет=ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.40") Тогда
	//	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("014.4");
	//ИначеЕсли Счет=ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.80") Тогда
	//	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("014.0");
	//Иначе
	//	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("014.1");
	//КонецЕсли;
	
КонецФункции	

Функция Квартал(Дата) Экспорт
	Месяц=Месяц(Дата);
	Возврат Окр((Месяц+1)/3);
КонецФункции	

Функция ДнейВПериоде(НачПериода,КонПериода)  Экспорт
	Дней=День(КонецМесяца(НачПериода))-День(НачПериода);
	Для н=2 по Месяц(КонПериода)-Месяц(НачПериода)-1 Цикл
		Дней = Дней + День(КонецМесяца(НачПериода));
	КонецЦикла;
	Дней = Дней + День(КонПериода);
	Возврат Дней; 
КонецФункции

Функция МесяцевВПериоде(НачПериода,КонПериода)  Экспорт
	Результат=0;
	Для Итер=1 по Год(КонПериода)-Год(НачПериода) Цикл
		Результат=Результат+(Месяц(КонецГода(НачПериода))-Месяц(НачПериода)+1);
	КонецЦикла;
	Если Год(КонПериода)=Год(НачПериода) Тогда
		Результат=Результат+(Месяц(КонПериода)-Месяц(НачПериода)+1);
	ИначеЕсли Год(КонПериода)>Год(НачПериода) Тогда
		Результат=Результат+Месяц(КонПериода);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СчетУчетаВыручки(Номенклатура) Экспорт
	
	Если не Номенклатура.пустая() Тогда
		
		Если Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Продукция Тогда
			Возврат ПланыСчетов.Хозрасчетный.А9010;
		ИначеЕсли Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Товар Тогда
			Возврат ПланыСчетов.Хозрасчетный.А9020;
		ИначеЕсли Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Услуга Тогда
			Возврат ПланыСчетов.Хозрасчетный.А9030;
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
КонецФункции	

Процедура НастроитьШапкуКолонкуДляЛинейногоОтчета(МакетПостроителя,ТекстШапки,ИмяПараметра,ШиринаКолонки=15,ФорматКолонки="ЧДЦ=2",ГоризонтальноеПоложение,ШрифтШапки=Неопределено,ШрифтДанных=Неопределено)Экспорт
	
	ТекущаяОбласть=Неопределено;
	ШиринаКолонкиНеУстановлена=истина;
	Пока Истина Цикл
		ТекущаяОбласть=МакетПостроителя.НайтиТекст(ТекстШапки, ТекущаяОбласть, МакетПостроителя.Область(), Истина, Истина,Истина, Ложь);
		
		Если ТекущаяОбласть  <> Неопределено Тогда
			Если ТекущаяОбласть.Параметр <>  ИмяПараметра  Тогда
				Если  ШиринаКолонкиНеУстановлена Тогда
					ТекущаяОбласть.ШиринаКолонки = ШиринаКолонки;
					ШиринаКолонкиНеУстановлена = Ложь;
				КонецЕсли; 
				ТекущаяОбласть.ГоризонтальноеПоложение=ГоризонтальноеПоложение;
				//ТекущаяОбласть.АвтоВысотаСтроки=Истина;
				//ТекущаяОбласть.ВысотаСтроки=200;
				
				Если ШрифтШапки<>Неопределено Тогда
					ТекущаяОбласть.Шрифт=ШрифтШапки;		
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			Прервать;	
		КонецЕсли; 
		
	КонецЦикла; 
	
	//
	//ТекущаяОбласть=Неопределено;
	//Пока Истина Цикл
	//	ТекущаяОбласть=МакетПостроителя.НайтиТекст(ИмяПараметра, ТекущаяОбласть, МакетПостроителя.Область(), Истина, Истина,Истина, Ложь);
	//	
	//	Если ТекущаяОбласть  <> Неопределено Тогда
	//		Если ТекущаяОбласть.Параметр =  ИмяПараметра  Тогда
	//			ТекущаяОбласть.Формат  =  ФорматКолонки;
	//			ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение;
	//			
	//			Если ШрифтДанных<>Неопределено Тогда
	//				ТекущаяОбласть.Шрифт=ШрифтДанных;		
	//			КонецЕсли; 
	//		КонецЕсли;
	//	Иначе
	//		Прервать;	
	//	КонецЕсли; 
	//	
	//КонецЦикла; 
КонецПроцедуры

Процедура НастроитьКолонкуДляЛинейногоОтчета(МакетПостроителя,ИмяПараметра,ФорматКолонки="ЧДЦ=2",ГоризонтальноеПоложение,ШрифтШапки=Неопределено,ШрифтДанных=Неопределено)Экспорт
	
	
	ТекущаяОбласть=Неопределено;
	Пока Истина Цикл
		ТекущаяОбласть=МакетПостроителя.НайтиТекст(ИмяПараметра, ТекущаяОбласть, МакетПостроителя.Область(), Истина, Истина,Истина, Ложь);
		
		Если ТекущаяОбласть  <> Неопределено Тогда
			Если ТекущаяОбласть.Параметр =  ИмяПараметра  Тогда
				ТекущаяОбласть.Формат  =  ФорматКолонки;
				ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение;
				
				Если ШрифтДанных<>Неопределено Тогда
					ТекущаяОбласть.Шрифт=ШрифтДанных;		
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Прервать;	
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ЭтоСчетГруппа(Счет) Экспорт
	
	//Выборка=ПланыСчетов.Хозрасчетный.Выбрать(Счет);
	//	
	//Если Выборка.Следующий() Тогда
	//	Возврат Истина;
	//КонецЕсли; 
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет";
	
	
	Запрос.УстановитьПараметр("Счет",Счет);
	
	Выборка=Запрос.Выполнить().Выгрузить();
	
	
	Если Выборка.Количество()>0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура ПроверитьНахождениеБазы() Экспорт
	//Сообщить(1);
КонецПроцедуры

Функция ИнформацияОБанковскомСчете(БанковскийСчет) Экспорт
	
	Инфо="";
	
	Если БанковскийСчет<>Неопределено Тогда
		
		Инфо=БанковскийСчет.Наименование+" № "+ БанковскийСчет.НомерСчета+ " в " +БанковскийСчет.Банк.Наименование+" МФО "+БанковскийСчет.Банк.Код;
		
	КонецЕсли; 
	
	Возврат Инфо;
	
КонецФункции	

Функция СовпадаетАналитикаПоСчетам(Счет1,Счет2) Экспорт

	Если ЗначениеНеЗаполнено(Счет1) или ЗначениеНеЗаполнено(Счет2) Тогда
		Возврат ложь;
	Иначе
		Если Счет1.ВидыСубконто.Количество()<>Счет2.ВидыСубконто.Количество() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Для н=0 По Счет1.ВидыСубконто.Количество()-1 Цикл
			Если Счет1.ВидыСубконто[н].ВидСубконто<>Счет1.ВидыСубконто[н].ВидСубконто Тогда
				Возврат ложь;
			КонецЕсли;	
		КонецЦикла; 
		Возврат Истина;
	КонецЕсли; 
	Возврат ложь;

КонецФункции // СовпадаетАналитикаПоСчетам()

Процедура Провести(СтруктураШапкиДокумента,Проводки,Выборка,СчетПриемник,Дата) Экспорт
	КоличествоСубконто=0;
	Для н=1 По Выборка.Счет.ВидыСубконто.Количество() Цикл
		Если Выборка.Счет.ВидыСубконто[н-1].ТолькоОбороты Тогда
			продолжить;
		КонецЕсли; 
		
		КоличествоСубконто=КоличествоСубконто+1;
	КонецЦикла; 
	
	Если не СтруктураШапкиДокумента.Сторно Тогда
		Если Выборка.Счет.Валютный Тогда
			ВыборкаВалюта = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВалюта.Следующий() Цикл
				
				Если ВыборкаВалюта.Счет.Вид=ВидСчета.Активный Тогда
					Проводка = Проводки.Добавить();
					Проводка.Период = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Активность = Истина;
					Проводка.СчетДт = СчетПриемник;
					Если СчетПриемник.Валютный Тогда
						Проводка.ВалютаДТ = ВыборкаВалюта.Валюта;
						Проводка.ВалютнаяСуммаДТ = ВыборкаВалюта.ВалютнаяСуммаДт-ВыборкаВалюта.ВалютнаяСуммаКт;
					КонецЕсли; 
					
					Если СчетПриемник.Количественный Тогда
						Проводка.КоличествоДТ = ВыборкаВалюта.КоличествоДТ-ВыборкаВалюта.КоличествоКТ;
					КонецЕсли; 

					
					Проводка.СчетКт = ВыборкаВалюта.Счет;
					Для н=1 По КоличествоСубконто Цикл
						УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, ВыборкаВалюта.Получить(н));
						УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, ВыборкаВалюта.Получить(н));
					КонецЦикла; 
					Проводка.ВалютаКТ = ВыборкаВалюта.Валюта;
					Проводка.ВалютнаяСуммаКТ = ВыборкаВалюта.ВалютнаяСуммаДт-ВыборкаВалюта.ВалютнаяСуммаКт;
					
					Если ВыборкаВалюта.Счет.Количественный Тогда
						Проводка.КоличествоКТ = ВыборкаВалюта.КоличествоДТ-ВыборкаВалюта.КоличествоКТ;
					КонецЕсли; 

					Проводка.Сумма = ВыборкаВалюта.СуммаДт - ВыборкаВалюта.СуммаКт;
				Иначе
					Проводка = Проводки.Добавить();
					Проводка.Период = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Активность = Истина;
					Проводка.СчетКт = СчетПриемник;
					Если СчетПриемник.Валютный Тогда
						Проводка.ВалютаКТ = ВыборкаВалюта.Валюта;
						Проводка.ВалютнаяСуммаКТ = ВыборкаВалюта.ВалютнаяСуммаКт-ВыборкаВалюта.ВалютнаяСуммаДт;
					КонецЕсли; 
					Если СчетПриемник.Количественный Тогда
						Проводка.КоличествоКТ = ВыборкаВалюта.КоличествоКТ-ВыборкаВалюта.КоличествоДТ;
					КонецЕсли; 
					
					Проводка.СчетДт = ВыборкаВалюта.Счет;
					Для н=1 По КоличествоСубконто Цикл
						УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, ВыборкаВалюта.Получить(н));
						УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, ВыборкаВалюта.Получить(н));
					КонецЦикла; 
					Проводка.ВалютаДТ = ВыборкаВалюта.Валюта;
					Проводка.ВалютнаяСуммаДТ = ВыборкаВалюта.ВалютнаяСуммаКт-ВыборкаВалюта.ВалютнаяСуммаДт;
					
					Если ВыборкаВалюта.Счет.Количественный Тогда
						Проводка.КоличествоДТ = ВыборкаВалюта.КоличествоКТ-ВыборкаВалюта.КоличествоДТ;
					КонецЕсли; 
					
					Проводка.Сумма = ВыборкаВалюта.СуммаКт - ВыборкаВалюта.СуммаДт;
				КонецЕсли; 
				
			КонецЦикла;	
		Иначе
			
			Если Выборка.Счет.Вид=ВидСчета.Активный Тогда
				Проводка = Проводки.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Активность = Истина;
				Проводка.СчетДт = СчетПриемник;
				
				Если СчетПриемник.Количественный Тогда
					Проводка.КоличествоДТ = Выборка.КоличествоДТ-Выборка.КоличествоКТ;
				КонецЕсли; 
				
				Проводка.СчетКт = Выборка.Счет;
				Для н=1 По КоличествоСубконто Цикл
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, Выборка.Получить(н));
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, Выборка.Получить(н));
				КонецЦикла; 
				
				Если Выборка.Счет.Количественный Тогда
					Проводка.КоличествоКТ = Выборка.КоличествоДТ-Выборка.КоличествоКТ;
				КонецЕсли; 
				
				Проводка.Сумма = Выборка.СуммаДт - Выборка.СуммаКт;
			Иначе
				Проводка = Проводки.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Активность = Истина;
				Проводка.СчетКт = СчетПриемник;
				
				Если СчетПриемник.Количественный Тогда
					Проводка.КоличествоКТ = Выборка.КоличествоКТ-Выборка.КоличествоДТ;
				КонецЕсли; 
				
				Проводка.СчетДт = Выборка.Счет;
				Для н=1 По КоличествоСубконто Цикл
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, Выборка.Получить(н));
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, Выборка.Получить(н));
				КонецЦикла; 
				
				Если Выборка.Счет.Количественный Тогда
					Проводка.КоличествоДТ = Выборка.КоличествоКТ-Выборка.КоличествоДТ;
				КонецЕсли;
				
				Проводка.Сумма = Выборка.СуммаКт - Выборка.СуммаДт;
			КонецЕсли; 
			
		КонецЕсли; 
	Иначе
		
		Если Выборка.Счет.Валютный Тогда
			ВыборкаВалюта = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВалюта.Следующий() Цикл
				
				Если ВыборкаВалюта.Счет.Вид=ВидСчета.Пассивный Тогда
					Проводка = Проводки.Добавить();
					Проводка.Период = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Активность = Истина;
					Проводка.СчетДт = СчетПриемник;
					Если СчетПриемник.Валютный Тогда
						Проводка.ВалютаДТ = ВыборкаВалюта.Валюта;
						Проводка.ВалютнаяСуммаДТ = ВыборкаВалюта.ВалютнаяСуммаДт-ВыборкаВалюта.ВалютнаяСуммаКт;
					КонецЕсли; 
					
					Проводка.СчетКт = ВыборкаВалюта.Счет;
					Для н=1 По КоличествоСубконто Цикл
						УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, ВыборкаВалюта.Получить(н));
						УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, ВыборкаВалюта.Получить(н));
					КонецЦикла; 
					Проводка.ВалютаКТ = ВыборкаВалюта.Валюта;
					Проводка.ВалютнаяСуммаКТ = ВыборкаВалюта.ВалютнаяСуммаДт-ВыборкаВалюта.ВалютнаяСуммаКт;
					Проводка.Сумма = ВыборкаВалюта.СуммаДт - ВыборкаВалюта.СуммаКт;
				Иначе
					Проводка = Проводки.Добавить();
					Проводка.Период = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Активность = Истина;
					Проводка.СчетКт = СчетПриемник;
					Если СчетПриемник.Валютный Тогда
						Проводка.ВалютаКТ = ВыборкаВалюта.Валюта;
						Проводка.ВалютнаяСуммаКТ = ВыборкаВалюта.ВалютнаяСуммаКт-ВыборкаВалюта.ВалютнаяСуммаДт;
					КонецЕсли; 
					
					Проводка.СчетДт = ВыборкаВалюта.Счет;
					Для н=1 По КоличествоСубконто Цикл
						УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, ВыборкаВалюта.Получить(н));
						УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, ВыборкаВалюта.Получить(н));
					КонецЦикла; 
					Проводка.ВалютаДТ = ВыборкаВалюта.Валюта;
					Проводка.ВалютнаяСуммаДТ = ВыборкаВалюта.ВалютнаяСуммаКт-ВыборкаВалюта.ВалютнаяСуммаДт;
					Проводка.Сумма = ВыборкаВалюта.СуммаКт - ВыборкаВалюта.СуммаДт;
				КонецЕсли; 
				
			КонецЦикла;	
		Иначе
			
			Если Выборка.Счет.Вид=ВидСчета.Пассивный Тогда
				Проводка = Проводки.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Активность = Истина;
				Проводка.СчетДт = СчетПриемник;
				
				Проводка.СчетКт = Выборка.Счет;
				Для н=1 По КоличествоСубконто Цикл
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, Выборка.Получить(н));
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, Выборка.Получить(н));
				КонецЦикла; 
				Проводка.Сумма = Выборка.СуммаДт - Выборка.СуммаКт;
			Иначе
				Проводка = Проводки.Добавить();
				Проводка.Период = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Активность = Истина;
				Проводка.СчетКт = СчетПриемник;
				
				Проводка.СчетДт = Выборка.Счет;
				Для н=1 По КоличествоСубконто Цикл
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, н, Выборка.Получить(н));
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, н, Выборка.Получить(н));
				КонецЦикла; 
				Проводка.Сумма = Выборка.СуммаКт - Выборка.СуммаДт;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
КонецПроцедуры	

Процедура ЗакрытьСчет(СтруктураШапкиДокумента,Проводки,СчетИсточник,СчетПриемник,ДатаОстатков,ДатаПроводки) Экспорт
	
//	КоличествоСубконто=СчетИсточник.ВидыСубконто.Количество();
	КоличествоСубконто=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,";
	
	сс="";
	Для н=1 По СчетИсточник.ВидыСубконто.Количество() Цикл
		Если СчетИсточник.ВидыСубконто[н-1].ТолькоОбороты Тогда
			продолжить;
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст+"ХозрасчетныйОстатки.Субконто"+строка(н)+" КАК Субконто"+строка(н)+",";
		сс=сс+"Субконто"+строка(н)+",";
		КоличествоСубконто=КоличествоСубконто+1;
	КонецЦикла; 
	
	
	Запрос.Текст = Запрос.Текст+
	"	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаДт,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаКт,
	|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаДт,
	|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаКт,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоДт,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокКт) КАК КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата,Счет=&Счет,,Организация=&Организация) КАК ХозрасчетныйОстатки
	|СГРУППИРОВАТЬ ПО Счет,"+сс+"Валюта
	|ИТОГИ
	|	СУММА(СуммаДт),
	|	СУММА(СуммаКт),
	|	СУММА(ВалютнаяСуммаДт),
	|	СУММА(ВалютнаяСуммаКт),
	|	СУММА(КоличествоДт),
	|	СУММА(КоличествоКт)
	|ПО
	|	Счет,"+сс+"Валюта";

	Запрос.УстановитьПараметр("Дата",ДатаОстатков);
	Запрос.УстановитьПараметр("Счет",СчетИсточник);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Результат = Запрос.Выполнить();

	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСчет.Следующий() Цикл
		//КоличествоСубконто=ВыборкаСчет.Счет.ВидыСубконто.Количество();
		Если КоличествоСубконто>0 Тогда
			ВыборкаСубконто1 = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСубконто1.Следующий() Цикл
				Если КоличествоСубконто>1 Тогда
					ВыборкаСубконто2 = ВыборкаСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСубконто2.Следующий() Цикл
						Если КоличествоСубконто>2 Тогда
							ВыборкаСубконто3 = ВыборкаСубконто2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаСубконто3.Следующий() Цикл
								Провести(СтруктураШапкиДокумента,Проводки,ВыборкаСубконто3,СчетПриемник,ДатаПроводки);
							КонецЦикла;
						Иначе
							Провести(СтруктураШапкиДокумента,Проводки,ВыборкаСубконто2,СчетПриемник,ДатаПроводки);
						КонецЕсли; 
					КонецЦикла;
				Иначе
					Провести(СтруктураШапкиДокумента,Проводки,ВыборкаСубконто1,СчетПриемник,ДатаПроводки);
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Провести(СтруктураШапкиДокумента,Проводки,ВыборкаСчет,СчетПриемник,ДатаПроводки);
		КонецЕсли; 
	КонецЦикла;


КонецПроцедуры

Процедура ЗаполнитьТаблицуОстатковДляФормыВыбора(ТаблицаОстатков,Учет="БУ", Склад,Организация,МоментВремени=неопределено,Счет=неопределено) Экспорт
	
	Если Учет="БУ" Тогда
		ИмяРегистра="Хозрасчетный";
		ИмяСчетаУчета="Счет";
	КонецЕсли; 
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1 КАК номенклатура,
	|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,Счет В (&Счета) , , ) КАК Остатки
	|ГДЕ Остатки.Субконто2=&Склад
	|  И Остатки.Организация=&ВыбОрганизация
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Счета=новый массив;
	Если не Счет.Пустая() Тогда
		счета.Добавить(Счет);
	Иначе
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0700,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А1000,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0820,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А5920,Счета);
		//ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А014,Счета);
	КонецЕсли; 
	
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	 

Процедура ЗаполнитьСчетВМассив(ИмяПланаСчетов,СчетРодитель,МассивСчетов) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПС.Ссылка КАК Счет,
	             |	ПС.Код КАК Код,
				 |	ПС.Наименование КАК Наименование
	             |ИЗ
	             |	ПланСчетов."+ИмяПланаСчетов+" КАК ПС
	             |
	             |ГДЕ
	             |	ПС.Ссылка В ИЕРАРХИИ(&Родитель)
				 |  И
	             |	(НЕ(ПС.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	СчетРодитель.Родитель ИЗ ПланСчетов."+ИмяПланаСчетов+" КАК СчетРодитель ГДЕ 	НЕ(СчетРодитель.Родитель = НЕОПРЕДЕЛЕНО) ))) 
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Код";
				 
	Запрос.УстановитьПараметр("Родитель",СчетРодитель);
    Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		МассивСчетов.Добавить(Результат.Счет);
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьОстатокНоменклатуры(Номенклатура,Склад,Организация,МоментВремени=неопределено,Счет,ДатаПоступления=Неопределено) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК номенклатура,
	|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&Счета),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Номенклатура
	|				И Субконто2 = &Склад "+?(ДатаПоступления<>Неопределено," И Субконто3=&ДатаПоступления","")+") КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	Если ДатаПоступления<>Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаПоступления",ДатаПоступления);
	КонецЕсли;
	
	Счета=новый массив;
	Если Счет<>неопределено Тогда
		счета.Добавить(Счет);
	Иначе
		
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0700,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А1000,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0820,Счета);
	Конецесли;
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	
	Остаток=новый Структура("Количество,Сумма");
	
	Если ТаблицаОстатков.Количество()<>0 Тогда
		
		
		Остаток.Количество=	ТаблицаОстатков[0].Количество;	
		Остаток.Сумма=	ТаблицаОстатков[0].Сумма;	
	
	КонецЕсли; 
	
	Возврат остаток;
	
КонецФункции	 

Функция ПолучитьОстаткиНоменклатурыПоСписку(СписокНоменклатуры,Склад,Организация,МоментВремени=неопределено,Счета=неопределено,ДатаПоступления=Неопределено) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество,
	|	Остатки.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&Счета),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&СписокНоменклатуры)
	|				И Субконто2 = &Склад "+?(ДатаПоступления<>Неопределено," И Субконто3=&ДатаПоступления","")+") КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	Запрос.УстановитьПараметр("Склад",Склад);
	Если ДатаПоступления<>Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаПоступления",ДатаПоступления);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	 

Функция ПолучитьОстатокНоменклатурыНаПереработке(Номенклатура,Контрагент,Договор,Организация,МоментВремени=неопределено,Счет=неопределено) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК номенклатура,
	|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет = &Счет,
	|			,
	|			Организация = &Организация
	|				И Субконто3 = &Номенклатура
	|				И Субконто1 = &Контрагент И Субконто2 = &Договор ) КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Договор",Договор);
	
	Если Счет<>неопределено Тогда
		Запрос.УстановитьПараметр("Счет",Счет);
	Иначе
		Запрос.УстановитьПараметр("Счет",ПланыСчетов.Хозрасчетный.НайтиПоКоду("1070"));
	Конецесли;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	
	Остаток=новый Структура("Количество,Сумма");
	
	Если ТаблицаОстатков.Количество()<>0 Тогда
		
		
		Остаток.Количество=	ТаблицаОстатков[0].Количество;	
		Остаток.Сумма=	ТаблицаОстатков[0].Сумма;	
	
	КонецЕсли; 
	
	Возврат остаток;
	
КонецФункции	 

Функция ПолучитьДатыПоступленияМБП(Номенклатура,Склад,Организация,МоментВремени) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто3 КАК ДатаПоступления
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&Счета),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Номенклатура
	|				И Субконто2 = &Склад) КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Счета=новый массив;
	ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.НайтиПоКоду("014"),Счета);
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	Список=новый СписокЗначений;
	Для Каждого СтрокаТаблицаОстатков из ТаблицаОстатков Цикл
		Список.Добавить(СтрокаТаблицаОстатков.ДатаПоступления);
	КонецЦикла;

	Возврат Список;
	
КонецФункции	 

Функция ПолучитьОстаткиИОборотыНоменклатуры(Учет="БУ", Номенклатура,Склад,Организация,НачалоПериода,КонецПериода,Счет=неопределено) Экспорт
	Перем  ТаблицаОстатков;
	Если Учет="БУ" Тогда
		ИмяРегистра="Хозрасчетный";
		ИмяСчетаУчета="Счет";
	КонецЕсли; 
	
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Субконто1 КАК номенклатура,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК снд,
	|	ОстаткиИОбороты.СуммаОборотДт КАК до,
	|	ОстаткиИОбороты.СуммаОборотКт КАК ко,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК скд,
	|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК снд3,
	|	ОстаткиИОбороты.КоличествоОборотДт КАК до3,
	|	ОстаткиИОбороты.КоличествоОборотКт КАК ко3,
	|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК скд3
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И Субконто2 = &Склад
	|		    И Субконто1 = &Номенклатура) КАК ОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Счета=новый массив;
	Если Счет<>неопределено Тогда
		счета.Добавить(Счет);
	Иначе
		
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0700,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А1000,Счета);
		ЗаполнитьСчетВМассив("Хозрасчетный",ПланыСчетов.Хозрасчетный.А0820,Счета);
	Конецесли;
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	
	ОстаткиИОбороты=новый Структура("снд,до,ко,скд,снд3,до3,ко3,скд3");
	
	Если ТаблицаОстатков.Количество()<>0 Тогда
		ОстаткиИОбороты.снд=	ТаблицаОстатков[0].снд;	
		ОстаткиИОбороты.до=	    ТаблицаОстатков[0].до;	
		ОстаткиИОбороты.ко=	    ТаблицаОстатков[0].ко;	
		ОстаткиИОбороты.скд=	ТаблицаОстатков[0].скд;	
		ОстаткиИОбороты.снд3=	ТаблицаОстатков[0].снд3;	
		ОстаткиИОбороты.до3=	ТаблицаОстатков[0].до3;	
		ОстаткиИОбороты.ко3=	ТаблицаОстатков[0].ко3;	
		ОстаткиИОбороты.скд3=	ТаблицаОстатков[0].скд3;	
	КонецЕсли; 
	
	Возврат ОстаткиИОбороты;
	
КонецФункции	 

Функция ПолучитьДатуПоступленияНоменклатурыВЭксплуатацию(Номенклатура,Склад,Организация,МоментВремени=неопределено,Счет=неопределено) Экспорт
	
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	МАКСИМУМ(ХозрасчетныйДвиженияССубконто.Период) КАК Период,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СубконтоДт1 = &Номенклатура
	|				И СубконтоДт2 = &Склад
	|				И СчетДт = &Счет) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	
	Запрос.УстановитьПараметр("КонецПериода",МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	Если счет=Неопределено Тогда 
		Запрос.УстановитьПараметр("Счет",ПланыСчетов.Хозрасчетный.НайтиПоКоду("014"));
	Иначе
		Запрос.УстановитьПараметр("Счет",Счет);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаДвижений=Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДвижений.Количество()>0 Тогда
		Если ЗначениеНеЗаполнено(ТаблицаДвижений[ТаблицаДвижений.Количество()-1].СчетКт) Тогда
			Возврат ТаблицаДвижений[ТаблицаДвижений.Количество()-1].Период;
		Иначе
			Строка=  ТаблицаДвижений[ТаблицаДвижений.Количество()-1];
			Возврат ПолучитьДатуПоступленияНоменклатурыВЭксплуатацию(Строка.СубконтоКт1,Строка.СубконтоКт2,Организация,Строка.Период-1,Счет);
		КонецЕсли;
		
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;	
	
КонецФункции	 

Процедура ПолучитьДокументСостоянияСотрудника(Сотрудник, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояние", 	Состояние);
	Запрос.УстановитьПараметр("Сотрудник",  Сотрудник);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаботникиОрганизаций.Регистратор КАК Документ,
		|	РаботникиОрганизаций.Период КАК Дата
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Организация = &Организация
		|	И РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = &Состояние";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, ЦелоеЧисло) Экспорт

	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Функция  ЗаполнитьТаблицуПериодическихРеквизитовОС(Организация, СписокОС, МоментДокумента) Экспорт
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ОСБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизацииБУ,
	|	КоэффициентБУ.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ОСБУ.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОССнятыеСУчетаБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчетаБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПроизводственнаяГруппа,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПротивопожарныеОС,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОСПоОхранеОкружающейСреды,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Состояние,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ГруппаОборудования,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	КоэффициентБУ.ПараметрВыработкиОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ОСБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияБУ
	|		ПО ОСБУ.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство
	|			И ОСБУ.Организация = СпособыОтраженияБУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК КоэффициентБУ
	|		ПО ОСБУ.ОсновноеСредство = КоэффициентБУ.ОсновноеСредство
	|			И ОСБУ.Организация = КоэффициентБУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
	|		ГДЕ
	|			СостоянияОСОрганизацийБухгалтерскийУчет.Организация = &Организация
	|			И СостоянияОСОрганизацийБухгалтерскийУчет.Состояние = &СнятоСУчета
	|			И СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния <= &КонецПериода) КАК ОССнятыеСУчетаБУ
	|		ПО ОСБУ.ОсновноеСредство = ОССнятыеСУчетаБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ОСБУ.Организация = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация
	|			И ОСБУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("КонецПериода",МоментДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("СписокОС",СписокОС);
	Запрос.УстановитьПараметр("СнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	возврат запрос.Выполнить().Выгрузить();			 
	
КонецФункции

Функция ОписаниеБанковскогоСчета(БанковскийСчет) Экспорт
	
	Возврат "Р/с "+сокрлп(БанковскийСчет.НомерСчета)+" в "+сокрлп(БанковскийСчет.Банк.Наименование)+" МФО "+БанковскийСчет.Банк.Код;
	
КонецФункции

Функция СчетУчетаПлатежа(КодПлатежа) Экспорт
	
	Платеж=Справочники.ПлатежиВБюджет.НайтиПоКоду(КодПлатежа);
	Если Платеж.Пустая() Тогда
		Сообщить("Не найден платеж с кодом """+КодПлатежа+"""!",СтатусСообщения.Важное);
		Возврат Справочники.ПлатежиВБюджет.ПустаяСсылка();
	Иначе	
		Если Платеж.СчетУчета.Пустая() Тогда
			Сообщить("Для платежа с кодом """+КодПлатежа+""" не выбран счет учета!",СтатусСообщения.Важное);
		КонецЕсли; 
		Возврат Платеж.СчетУчета;
	КонецЕсли;	
	
КонецФункции	

Функция СчетУчетаАвансаПлатежа(КодПлатежа) Экспорт
	
	Платеж=Справочники.ПлатежиВБюджет.НайтиПоКоду(КодПлатежа);
	Если Платеж.Пустая() Тогда
		Сообщить("Не найден платеж с кодом """+КодПлатежа+"""!",СтатусСообщения.Важное);
		Возврат Справочники.ПлатежиВБюджет.ПустаяСсылка();
	Иначе	
		Если Платеж.СчетУчета.Пустая() Тогда
			Сообщить("Для платежа с кодом """+КодПлатежа+""" не выбран счет учета аванса!",СтатусСообщения.Важное);
		КонецЕсли; 
		Возврат Платеж.СчетУчетаАванса;
	КонецЕсли;	
	
КонецФункции
	
Функция СтавкаПлатежа(КодПлатежа,Дата) Экспорт
	
	Платеж=Справочники.ПлатежиВБюджет.НайтиПоКоду(КодПлатежа).Ссылка;
	
	Отбор=новый Структура("Платеж",Платеж);
	СрезПоследних=РегистрыСведений.СтавкиПоПлатежамВБюджет.СрезПоследних(Дата,Отбор);
	
	Если СрезПоследних.Количество()>0 Тогда
		Возврат СрезПоследних[0].Ставка;
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции	

Функция ЕстьПолныеПрава() Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Для каждого РольПользователя Из ТекущийПользователь.Роли Цикл
		Если РольПользователя.Имя="ПолныеПрава" Тогда
			Возврат Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПравоНаСписаниеНоменклатурыБезПроверкиОстатков() Экспорт
	
	Если РольДоступна("ПравоНаСписаниеНоменклатурыБезПроверкиОстатков") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
 
Функция ПолучитьОстатокПоДоговоруПродажи(Договор,Дата,Документ,Организация) Экспорт
		
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ИсполнениеДоговоровОбороты.ДоговорПродажи,
	|	СУММА(ВЫБОР
	|			КОГДА ИсполнениеДоговоровОбороты.ПланФакт = &План
	|				ТОГДА ИсполнениеДоговоровОбороты.КоличествоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ИсполнениеДоговоров.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И ДоговорПродажи = &ДоговорПродажи) КАК ИсполнениеДоговоровОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнениеДоговоровОбороты.ДоговорПродажи";
	
	//Запрос.УстановитьПараметр("КонецПериода",НачалоДня(НачалоДня(Дата)-1)-1);
	Запрос.УстановитьПараметр("ДоговорПродажи",Договор);
	Запрос.УстановитьПараметр("План",Перечисления.ПланФакт.План);
	//Запрос.УстановитьПараметр("Факт",Перечисления.ПланФакт.Факт);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	остатокПодоговору=Запрос.Выполнить().Выгрузить().Итог("Количество");
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ФактическиеПродажиОбороты.СуммаОборот <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ФактическиеПродажиОбороты.Номенклатура.ВидНоменклатуры = &Продукция
	|						ТОГДА ФактическиеПродажиОбороты.КоличествоОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОперативныеПродажиОбороты.Номенклатура.ВидНоменклатуры = &Продукция
	|					ТОГДА ОперативныеПродажиОбороты.КоличествоОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоПродукцияОборот
	|ИЗ
	|	РегистрНакопления.ОперативныеПродажи.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И ДоговорПродажи = &ДоговорПродажи) КАК ОперативныеПродажиОбороты
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеПродажи.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И ДоговорПродажи = &ДоговорПродажи) КАК ФактическиеПродажиОбороты
	|		ПО ОперативныеПродажиОбороты.Номенклатура = ФактическиеПродажиОбороты.Номенклатура
	|			И ОперативныеПродажиОбороты.ДоговорПродажи = ФактическиеПродажиОбороты.ДоговорПродажи
	|			И ОперативныеПродажиОбороты.ВидОперации = ФактическиеПродажиОбороты.ВидОперации
	|			И ОперативныеПродажиОбороты.СкладПолучатель = ФактическиеПродажиОбороты.СкладПолучатель
	|			И ОперативныеПродажиОбороты.ВидПоставки = ФактическиеПродажиОбороты.ВидПоставки
	|			И ОперативныеПродажиОбороты.Накладная = ФактическиеПродажиОбороты.Накладная";
	
	Запрос.УстановитьПараметр("ДоговорПродажи",Договор);
	Запрос.УстановитьПараметр("Продукция",Перечисления.ВидыНоменклатурыПродаж.Продукция);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ОперативнаяОтгрузка=Запрос.Выполнить().Выгрузить().Итог("КоличествоПродукцияОборот");
	
	
	ЗапросРанееВыписано=новый Запрос;
	ЗапросРанееВыписано.Текст=
	"ВЫБРАТЬ
	|	НакладнаяСамовывозНоменклатура.Количество
	|ИЗ
	|	Документ.НакладнаяСамовывоз.Номенклатура КАК НакладнаяСамовывозНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяСамовывоз КАК НакладнаяСамовывоз
	|		ПО НакладнаяСамовывозНоменклатура.Ссылка = НакладнаяСамовывоз.Ссылка
	|ГДЕ
	|	НакладнаяСамовывоз.Контрагент = &Контрагент
	|	И НакладнаяСамовывоз.ДоговорПродажи = &ДоговорПродажи
	|	И НакладнаяСамовывоз.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НакладнаяСамовывоз.Ссылка <> &Ссылка
	|	И НакладнаяСамовывоз.Организация = &Организация
	|";
	
	ЗапросРанееВыписано.УстановитьПараметр("НачалоПериода",НачалоДня(Дата));
	ЗапросРанееВыписано.УстановитьПараметр("КонецПериода",КонецДня(Дата));
	ЗапросРанееВыписано.УстановитьПараметр("ДоговорПродажи",Договор);
	ЗапросРанееВыписано.УстановитьПараметр("Контрагент",Договор.Контрагент);
	ЗапросРанееВыписано.УстановитьПараметр("Ссылка",Документ.Ссылка);
	ЗапросРанееВыписано.УстановитьПараметр("Организация",Организация);
	
	РанееВыписано=ЗапросРанееВыписано.Выполнить().Выгрузить().Итог("Количество");

	ОСтаток=остатокПодоговору-РанееВыписано-ОперативнаяОтгрузка;
		
	Возврат ?(Остаток>0,Остаток,0);
КонецФункции

Функция УбратьПробелы(Стр) Экспорт
	
	Стр=СтрЗаменить(Стр," ","");
	Стр=СтрЗаменить(Стр,Символ(160),"");
	
	Возврат Стр;
	
КонецФункции	

Функция ДоверенностьПроведена(Док)Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДокументыПоДоверенности.Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыПоДоверенности(&Док) КАК ДокументыПоДоверенности";
	Запрос.УстановитьПараметр("Док",Док);
	
	тз=Запрос.Выполнить().Выгрузить();
	
	Если тз.Количество()>0 тогда
		Возврат истина;
	иначе
		возврат ложь;
	конецесли;	
	
КонецФункции	

Функция ПлатежноеПоручениеПроведено(Док)Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДокументыПоПлатежномуПоручению.Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыПоПлатежномуПоручению(&Док) КАК ДокументыПоПлатежномуПоручению";
	Запрос.УстановитьПараметр("Док",Док);
	
	тз=Запрос.Выполнить().Выгрузить();
	
	Если тз.Количество()>0 тогда
		Возврат истина;
	иначе
		возврат ложь;
	конецесли;	

КонецФункции

Функция ПолучитьНовыйИнвентарныйНомерОС() Экспорт
	
	//Запрос=новый Запрос;
	//Запрос.Текст=
	//"ВЫБРАТЬ
	//|	ИнвентарныеНомера.ИнвентарныйНомер
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		МАКСИМУМ(ОсновныеСредства.ИнвентарныйНомер) КАК ИнвентарныйНомер
	//|	ИЗ
	//|		Справочник.ОсновныеСредства КАК ОсновныеСредства) КАК ИнвентарныеНомера";
	//
	//тз=Запрос.Выполнить().Выгрузить();
	//
	//ИнвентарныйНомер=Строка(число(тз[0].ИнвентарныйНомер)+1);
	//
	Возврат "";//УбратьПробелы(ИнвентарныйНомер);
	
КонецФункции	

// Процедура проверяет наличие одних и тех же нематериальных активов в табличной
// части "НМА" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиНМА(ТаблицаПоНМА, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаПоНМА.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("НематериальныйАктив", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоНМА.НайтиСтроки(Новый Структура("НематериальныйАктив", СтрокаТаблицыДублей.НематериальныйАктив));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части ""Нематериальные активы"" указано оин и тот же нематериальный актив.";
								   
		КонецЦикла;
														  
		ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиОС()

Процедура ПроверитьДоговорКонтрагента(Контрагент,ДоговорКонтрагента) Экспорт
	
	Если ДоговорКонтрагента.Владелец<>Контрагент Тогда
		ДоговорКонтрагента="";	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьСчетЗатратПоЦеху(Цех,СчетЗатрат,Субконто1,Субконто2,Субконто3) Экспорт
	
	Если Цех.ВидЦеха=Перечисления.ВидыЦехов.ОсновныеЦеха Тогда
		СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2520");
		Субконто1=Цех;
		Субконто2=Справочники.СтатьиЗатрат.НайтиПоКоду("2");
	ИначеЕсли Цех.ВидЦеха=Перечисления.ВидыЦехов.ВспомогательныеЦеха Тогда
		СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2320");
		Субконто1=Цех;
		Субконто2=Справочники.СтатьиЗатрат.НайтиПоКоду("2");
	ИначеЕсли Цех.ВидЦеха=Перечисления.ВидыЦехов.ПрочиеВспомогательныеЦеха Тогда
		СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2311");
		Субконто1=Цех;
		Субконто2=Справочники.СтатьиЗатрат.НайтиПоКоду("2");
	ИначеЕсли Цех.ВидЦеха=Перечисления.ВидыЦехов.ОбслуживающиеХозяйства Тогда
		
		Если сокрлп(Цех.Код)="061" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2710");
		ИначеЕсли сокрлп(Цех.Код)="110" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2711");
		ИначеЕсли сокрлп(Цех.Код)="063" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2712");
		ИначеЕсли сокрлп(Цех.Код)="120" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2713");
		ИначеЕсли сокрлп(Цех.Код)="117" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2714");
		ИначеЕсли сокрлп(Цех.Код)="091" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2715");
		ИначеЕсли сокрлп(Цех.Код)="112" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2716");
		ИначеЕсли сокрлп(Цех.Код)="051" Тогда
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2717");
		Иначе
			СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2710");
		КонецЕсли;
		
		Субконто1=Цех;
		Субконто2=Справочники.СтатьиЗатрат.НайтиПоКоду("2");
	КонецЕсли;
	
КонецПроцедуры	

Функция СчетЗатратПоШПЗиЦеху(ШифрПроизводственныхЗатрат,Цех) Экспорт
	
	Если ШифрПроизводственныхЗатрат.СчетЗатрат=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2310") Тогда
		Если Цех.ВидЦеха=Перечисления.ВидыЦехов.ПрочиеВспомогательныеЦеха Тогда
			Возврат  ПланыСчетов.Хозрасчетный.НайтиПоКоду("2311");
		Иначе	
			Возврат  ПланыСчетов.Хозрасчетный.НайтиПоКоду("2310");
		КонецЕсли; 
	Иначе	
		Возврат  ШифрПроизводственныхЗатрат.СчетЗатрат;
	КонецЕсли; 

КонецФункции // ()

Функция ПолучитьФИООтветственного(Ответственный) Экспорт
	
	ФИО=Сокрлп(Ответственный.Наименование);
	
	Фамилия=Лев(ФИО,Найти(ФИО," "));
	Имя=Сред(ФИО,Найти(ФИО," ")+1,1)+".";
	
	Если Фамилия<>"" Тогда
		Возврат Фамилия+" "+Имя;
	Иначе
		Возврат ФИО;
	КонецЕсли; 
	
КонецФункции	

Функция РазбитьФИО(Наименование) Экспорт
	
	ФИО=Сокрлп(Наименование);
	
	Фамилия="";
	Имя="";
	Отчество="";
	
	Если Найти(ФИО," ")>0 Тогда
		Фамилия=Лев(ФИО,Найти(ФИО," ")-1);
		ФИО=СокрЛП(Прав(ФИО,СтрДлина(ФИО)-Найти(ФИО," ")));
	Иначе	
		Фамилия=СокрЛП(ФИО);
		ФИО="";
	КонецЕсли;
	
	Если Найти(ФИО," ")>0 Тогда
		Имя=Лев(ФИО,Найти(ФИО," ")-1);
		ФИО=СокрЛП(Прав(ФИО,СтрДлина(ФИО)-Найти(ФИО," ")));
	Иначе	
		Имя=СокрЛП(ФИО);
		ФИО="";
	КонецЕсли;
	
	Если СокрЛП(ФИО)<>"" Тогда
		Отчество=СокрЛП(ФИО);
	КонецЕсли;
	
	Возврат Новый Структура("Фамилия,Имя,Отчество",Фамилия,Имя,Отчество);
	
КонецФункции	


// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
////
Процедура УстановитьСубконтоВТабличномПоле(Счет, Субконто1,  Субконто2,  Субконто3,  ЧислоАктивныхСубконто=0) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1,  Субконто2,  Субконто3);
	
	Если ЧислоАктивныхСубконто=0 Тогда
		ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	КонецЕсли; 
	
	ЧислоАктивныхСубконто = Мин(ЧислоАктивныхСубконто,3);
	
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		//ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		//
		//Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
		//	ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		//Иначе
		//	ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		//КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		//ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	//Если ЭлементДиалогаСчет <> Неопределено Тогда
	//	ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	//КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

Функция ЭтоЦифра(Буква) Экспорт
	
	Если Буква="1"
	или Буква="2"
	или Буква="3"
	или Буква="4"
	или Буква="5"
	или Буква="6"
	или Буква="7"
	или Буква="8"
	или Буква="9"
	или Буква="0"
		Тогда
	
		Возврат истина;	
	
	КонецЕсли; 
	
	Возврат ложь;	
	
КонецФункции	

		
Функция СоздатьТаблицуДляХраненияПроводок_Хозрасчетный() Экспорт
	
	ТаблицаДвижений=Новый ТаблицаЗначений;
	
	ТаблицаДвижений.Колонки.Добавить("Организация");
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.Колонки.Добавить("Содержание");
	
	ТаблицаДвижений.Колонки.Добавить("СчетДт");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт3");
	ТаблицаДвижений.Колонки.Добавить("СубконтоДт4");
	ТаблицаДвижений.Колонки.Добавить("КоличествоДт");
	ТаблицаДвижений.Колонки.Добавить("КоличествоСзДт");
	
	ТаблицаДвижений.Колонки.Добавить("СчетКт");
	ТаблицаДвижений.Колонки.Добавить("СубконтоКт1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоКт2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоКт3");
	ТаблицаДвижений.Колонки.Добавить("СубконтоКт4");
	ТаблицаДвижений.Колонки.Добавить("КоличествоКт");
	ТаблицаДвижений.Колонки.Добавить("КоличествоСзКт");
	
	ТаблицаДвижений.Колонки.Добавить("Сумма");
	
	Возврат ТаблицаДвижений;
	
КонецФункции	

Процедура СвернутьТаблицуДляХраненияПроводок_Хозрасчетный(ТаблицаДвижений) Экспорт
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
			
			Если не ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
				
				Строка[Колонка.Имя]=Неопределено;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТаблицаДвижений.Свернуть("Организация,Период,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоДт4,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СубконтоКт4","КоличествоДт,КоличествоСзДт,КоличествоКт,КоличествоСзКт,Сумма");
	
	СтрокиКУдалению=Новый СписокЗначений;
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Если не ЗначениеЗаполнено(Строка.КоличествоДт) 
		и не ЗначениеЗаполнено(Строка.КоличествоСзДт)
		и не ЗначениеЗаполнено(Строка.КоличествоКт)
		и не ЗначениеЗаполнено(Строка.КоличествоСзКт)
		и не ЗначениеЗаполнено(Строка.Сумма) Тогда
		
			СтрокиКУдалению.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		
		ТаблицаДвижений.Удалить(Строка.Значение); 		
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СкорректироватьТаблицуДляХраненияПроводок_Хозрасчетный(ТаблицаДвижений,Организация,ДатаРасчета,ВидДокумента,ДатаДокумента) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	&ДатаДокумента КАК Период,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт4,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт4,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	-ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоСЗДт КАК КоличествоСЗДт,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоСЗКт КАК КоличествоСЗКт,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
	|	-ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.Регистратор ССЫЛКА Документ."+ВидДокумента+"
	|	И ХозрасчетныйДвиженияССубконто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ХозрасчетныйДвиженияССубконто.Организация = &Организация
	|	И ХозрасчетныйДвиженияССубконто.Активность";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка=ТаблицаДвижений.Добавить();	
		ЗаполнитьЗначенияСвойств(Строка,Выборка);
		
	КонецЦикла;	
	
	СвернутьТаблицуДляХраненияПроводок_Хозрасчетный(ТаблицаДвижений);
	
КонецПроцедуры	

Процедура ЗаписатьВРегистрТаблицуДляХраненияПроводок_Хозрасчетный(ПроводкиБУ,ТаблицаДвижений) Экспорт
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Проводка=ПроводкиБУ.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка,Строка);
		
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СубконтоДт1);
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СубконтоДт2);
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СубконтоДт3);
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 4, Строка.СубконтоДт4);
		
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.СубконтоКт1);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.СубконтоКт2);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.СубконтоКт3);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 4, Строка.СубконтоКт4);
		
	КонецЦикла;
	
КонецПроцедуры	

//Функции для работы с бух.итогами
Функция СНД(Счет,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

Возврат Итог;

КонецФункции // СНД()

Функция СНК(Счет,БИ)Экспорт

Перем Итог;

Возврат БИ.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

Возврат Итог;

КонецФункции // СНК()

Функция СКД(Счет,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

Возврат Итог;

КонецФункции // СКД()

Функция СКК(Счет,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

Возврат Итог;

КонецФункции // СКК()

Функция ДО(Счет,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

Возврат Итог;

КонецФункции // ДО()

Функция КО(Счет,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

Возврат Итог;

КонецФункции // КО()

Функция ОБ(СчетД, СчетК,БИ)Экспорт

Перем Итог;

Итог = БИ.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

Возврат Итог;

КонецФункции // ОБ()

Функция ЭтоСчетСАналитикойПоКонтрагентамИДоговорам(Счет) Экспорт
	
	Если Счет.ВидыСубконто.Количество()>1 Тогда
		Если Счет.ВидыСубконто[0].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		и    Счет.ВидыСубконто[1].ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
			Возврат истина;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ложь;
	
КонецФункции	

ПРоцедура УдалитьСтрокиСНулевымКоличеством(Документ,ИмяТаблицы)Экспорт
	
	УдаляемыеСтроки=Новый СписокЗначений;
	
	
	Для Каждого Строка из Документ[ИмяТаблицы] Цикл
		Если Строка.Количество=0 Тогда
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для н=1 по УдаляемыеСтроки.Количество() Цикл
		Документ[ИмяТаблицы].Удалить(УдаляемыеСтроки.Получить(н-1).Значение);	
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструДатыПоступленияОборудованияИПриобретенныхОС(Документ,СписокНоменклатуры) Экспорт
	
	Для Каждого СтрокаНоменклатуры Из СписокНоменклатуры Цикл
		
		Если СтрокаНоменклатуры.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Оборудование 
		или  СтрокаНоменклатуры.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.ПриобретенныеОсновныеСредства
			Тогда
			
			Движение = Документ.Движения.ДатыПоступленияОборудованияИПриобретенныхОС.Добавить();
			//Движение.Период      = Документ.Дата;
			Движение.ДатаПоступления = Документ.Дата;
			Движение.Организация = Документ.Организация;
			Движение.Номенклатура = СтрокаНоменклатуры.Номенклатура; 
			
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПроверитьНаличиеСсылокНаЕдиницуИзмерения(ВладелецЕдиницыИзмерения) Экспорт
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", ВладелецЕдиницыИзмерения);

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет.Продукция
	|ГДЕ
	|	Продукция = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ВыпускПродукции.Продукция
	|ГДЕ
	|	Продукция = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПокупателей.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПоставщикам.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗатратыНаВыпускПродукции.Продукция
	|ГДЕ
	|	Продукция = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗатратыНаВыпускПродукции.Затрата
	|ГДЕ
	|	Затрата = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Продукция
	|ГДЕ
	|	Продукция = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Затрата
	|ГДЕ 
	|	Затрата = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.МатериалыВПроизводстве.Затрата
	|ГДЕ
	|	Затрата = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.НезавершенноеПроизводство.Затрата
	|ГДЕ
	|	Затрата = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Затрата
	|ГДЕ
	|	Затрата = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ОборотыБюджетов.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровНаСкладах.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровПереданные.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	 РегистрНакопления.ПланыЗакупок.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланыПотребностейПроизводстваПоСменам.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланыПотребностейПроизводстваПоСменам.КонечнаяПродукция
	|ГДЕ
	|	КонечнаяПродукция = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланыПродаж.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланыПроизводства.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.Продажи.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПродажиСебестоимость.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыПолученные.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыВНТТ.Номенклатура
	|ГДЕ
	|	Номенклатура = &ТекущийВладелец";

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ПеревестиОстатокВЕдиницуИзмерения(Количество,Номенклатура,ЕдиницаИзмерения) Экспорт
	
	Если ЕдиницаИзмерения.Коэффициент=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Номенклатура.ЕдиницаХраненияОстатков=ЕдиницаИзмерения Тогда
		Возврат Количество;
	Иначе
		КоличествоВБазовойЕдинице=Количество*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Возврат КоличествоВБазовойЕдинице/ЕдиницаИзмерения.Коэффициент;
	КонецЕсли;	
	
КонецФункции	

Функция ПеревестиКоличествоВЕдиницуХраненияОстатка(Количество,Номенклатура,ЕдиницаИзмерения) Экспорт
	
	Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Номенклатура.ЕдиницаХраненияОстатков=ЕдиницаИзмерения Тогда
		Возврат Количество;
	Иначе
		КоличествоВБазовойЕдинице=Количество*ЕдиницаИзмерения.Коэффициент;
		Возврат КоличествоВБазовойЕдинице/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьСчетУчетаНоменклатурыПродаж(Номенклатура) Экспорт
	
	Если Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Продукция Тогда
		Возврат ПланыСчетов.Хозрасчетный.А2810;
	//ИначеЕсли Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Полуфабрикат Тогда
	//	Возврат ПланыСчетов.Хозрасчетный.А2110;
	ИначеЕсли Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатурыПродаж.Товар Тогда
		Если Номенклатура.ТипТовара=Перечисления.ТипыТоваров.Собственный Тогда
			Возврат ПланыСчетов.Хозрасчетный.А2910;
		//ИначеЕсли Номенклатура.ТипТовара=Перечисления.ТипыТоваров.ПокупныеИзделия Тогда
		//	Возврат ПланыСчетов.Хозрасчетный.А2910;
		ИначеЕсли Номенклатура.ТипТовара=Перечисления.ТипыТоваров.НаКомиссии Тогда
			Возврат ПланыСчетов.Хозрасчетный.А004;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат "";
	
КонецФункции	

Процедура ПолучитьОстаткиНоменклатурыПродажСУчетомРезервов(ТаблицаОстатков,МоментВремени,Склад,СчетУчета,Организация) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.СуммаОстатокДт,
	|	Остатки.КоличествоОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени,Счет=&Счет, , ) КАК Остатки
	|ГДЕ Остатки.Субконто2=&Склад
	|  И Остатки.Организация=&ВыбОрганизация
	|";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Счет",СчетУчета);
	Запрос.УстановитьПараметр("ВыбОрганизация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	
	//резервы
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервыНоменклатурыПродажОстатки.Номенклатура,
	|	РезервыНоменклатурыПродажОстатки.КоличествоОстаток КАК Резерв
	|ИЗ
	|	РегистрНакопления.РезервыНоменклатурыПродаж.Остатки(
	|			&МоментВремени,
	|			Организация = &ВыбОрганизация
	|				И Склад = &Склад
	|				И Номенклатура В (&СписокНоменклатуры)) КАК РезервыНоменклатурыПродажОстатки";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры",ТаблицаОстатков.ВыгрузитьКолонку("Субконто1"));
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаТз=ТаблицаОстатков.Найти(Выборка.Номенклатура);
		
		Если СтрокаТз<>Неопределено Тогда
			СтрокаТз.КоличествоОстатокДт=СтрокаТз.КоличествоОстатокДт-Выборка.Резерв;	
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	 

Функция ПолучитьОстатокНоменклатурыСУчетомРезерва(Номенклатура,Склад,Организация,МоментВремени=неопределено,Счет=неопределено) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК номенклатура,
	|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет=&Счет,
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Номенклатура
	|				И Субконто2 = &Склад ) КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Счет",Счет);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	ТаблицаОстатков=Запрос.Выполнить().Выгрузить();
	
	
	Остаток=новый Структура("Количество,Сумма,Резерв",0,0,0);
	
	Если ТаблицаОстатков.Количество()<>0 Тогда
		
		
		Остаток.Количество=	ТаблицаОстатков[0].Количество;	
		Остаток.Сумма=	ТаблицаОстатков[0].Сумма;	
	
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервыНоменклатурыПродажОстатки.Номенклатура,
	|	РезервыНоменклатурыПродажОстатки.КоличествоОстаток КАК Резерв
	|ИЗ
	|	РегистрНакопления.РезервыНоменклатурыПродаж.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура =&Номенклатура) КАК РезервыНоменклатурыПродажОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Остаток.Резерв =Выборка.Резерв;	
		
	КонецЕсли;	
	
	Возврат остаток;
	
КонецФункции	 

Функция ПолучитьОстаткиНоменклатурыПоСпискуСУчетомРезервов(СписокНоменклатуры,Склад,Организация,МоментВремени=неопределено,Счета=неопределено,ДатаПоступления=Неопределено) Экспорт
	Перем  ТаблицаОстатков;
	
	Запрос = новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	//|	Остатки.СуммаОстатокДт КАК Сумма,
	|	Остатки.КоличествоОстатокДт КАК Количество,
	|	Остатки.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремени,
	|			Счет В (&Счета),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&СписокНоменклатуры)
	|				И Субконто2 = &Склад "+?(ДатаПоступления<>Неопределено," И Субконто3=&ДатаПоступления","")+") КАК Остатки";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени);
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	Запрос.УстановитьПараметр("Склад",Склад);
	Если ДатаПоступления<>Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаПоступления",ДатаПоступления);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счета",Счета);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	тз = Запрос.Выполнить().Выгрузить();
	
	
	//резервы
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервыНоменклатурыПродажОстатки.Номенклатура,
	|	РезервыНоменклатурыПродажОстатки.КоличествоОстаток КАК Резерв
	|ИЗ
	|	РегистрНакопления.РезервыНоменклатурыПродаж.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура В (&СписокНоменклатуры)) КАК РезервыНоменклатурыПродажОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаТз=тз.Найти(Выборка.Номенклатура);
		
		Если СтрокаТз<>Неопределено Тогда
			СтрокаТз.Количество=СтрокаТз.Количество-Выборка.Резерв;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Тз;
	
КонецФункции	 

Функция РезервированиеМедикаментовПроведено(Док)Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДокументыПоРезервированиеМедикаментов.Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыПоРезервированиеМедикаментов(&Док) КАК ДокументыПоРезервированиеМедикаментов
	|ГДЕ
	|	ДокументыПоРезервированиеМедикаментов.Ссылка.Проведен";
	Запрос.УстановитьПараметр("Док",Док);
	
	тз=Запрос.Выполнить().Выгрузить();
	
	Если тз.Количество()>0 тогда
		Возврат истина;
	иначе
		возврат ложь;
	конецесли;	

КонецФункции


