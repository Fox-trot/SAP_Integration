////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

 // Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Проверяет на использование в прикладном решении библиотеки интернет поддержки пользователей.
//
// Параметры:
//  Использование - булево - признак использования библиотеки МПП..
//
Процедура ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование) Экспорт
	
	Использование = Истина;
	
КонецПроцедуры

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ПоместитьКаталогТоваровВоВременноеХранилище(
													АдресВоВременномХранилище,
													ИдентификаторФормы);
	
КонецПроцедуры

// Выполняет интерактивное проведение документов перед формированием ЭД.
// Если есть непроведенные документы, предлагает выполнить проведение. Спрашивает
// пользователя о продолжении, если какие-то из документов не провелись и имеются проведенные.
//
// Параметры
//  ДокументыМассив - Массив           - ссылки на документы, которые требуется провести перед печатью.
//                                       После выполнения функции из массива исключаются непроведенные документы.
//  ДокументыПроведены - Булево - возвращаемый параметр, признак что документы проведены
//  ФормаИсточник   - УправляемаяФорма - форма, из которой было вызвана команда.
//
// Возвращаемое значение:
//  Булево - есть документы для печати в параметре ДокументыМассив.
//
Процедура ПроверитьДокументыПроведены(ОписаниеОповещения, ДокументыМассив, ДокументыПроведены, ФормаИсточник = Неопределено) Экспорт
	
	ОчиститьСообщения();
	ПроводимыеДокументы = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроводимыхДокументов(ДокументыМассив);
	ДокументыТребующиеПроведение = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ПроводимыеДокументы);
	КоличествоНепроведенныхДокументов = ДокументыТребующиеПроведение.Количество();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ДокументыМассив", ДокументыМассив);
	ДополнительныеПараметры.Вставить("КоличествоНепроведенныхДокументов", КоличествоНепроведенныхДокументов);
	ДополнительныеПараметры.Вставить("ДокументыТребующиеПроведение", ДокументыТребующиеПроведение);
	ДополнительныеПараметры.Вставить("ДокументыПроведены", ДокументыПроведены);
	ДополнительныеПараметры.Вставить("ФормаИсточник", ФормаИсточник);
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьНепроведенныеДокументы", ЭлектронныеДокументыКлиентПереопределяемый, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПроверитьНепроведенныеДокументы(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНепроведенныеДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если Результат <> КодВозвратаДиалога.Да Тогда
			ДополнительныеПараметры.ДокументыПроведены = Ложь;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ДокументыПроведены);
			Возврат;
		КонецЕсли;
		
		ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(ДополнительныеПараметры.ДокументыТребующиеПроведение);
		
		// сообщаем о документах, которые не провелись
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2 Формирование ЭД невозможно.'");
		НепроведенныеДокументы = Новый Массив;
		Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонСообщения,
																	Строка(ИнформацияОДокументе.Ссылка),
																	ИнформацияОДокументе.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнформацияОДокументе.Ссылка);
			НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
		КонецЦикла;
		
		ДополнительныеПараметры.КоличествоНепроведенныхДокументов = НепроведенныеДокументы.Количество();
		
		// Оповещаем открытые формы о том, что были проведены документы
		ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДополнительныеПараметры.ДокументыТребующиеПроведение,
																			НепроведенныеДокументы);
		ТипыПроведенныхДокументов = Новый Соответствие;
		Для Каждого ПроведенныйДокумент Из ПроведенныеДокументы Цикл
			ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
		КонецЦикла;
		Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
			ОповеститьОбИзменении(Тип.Ключ);
		КонецЦикла;
		
		// Если команда была вызвана из формы, то зачитываем в форму актуальную (проведенную) копию из базы.
		Если ТипЗнч(ДополнительныеПараметры.ФормаИсточник) = Тип("УправляемаяФорма") Тогда
			Попытка
				ДополнительныеПараметры.ФормаИсточник.Прочитать();
			Исключение
				// Если метода Прочитать нет, значит сформирование выполнено не из формы объекта.
			КонецПопытки;
		КонецЕсли;
		
		// Обновляем исходный массив документов
		ДополнительныеПараметры.ДокументыМассив = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДополнительныеПараметры.ДокументыМассив, НепроведенныеДокументы);
		
	КонецЕсли;
	
	ЕстьДокументыГотовыеДляФормированияЭД = ДополнительныеПараметры.ДокументыМассив.Количество() > 0;
	
	Отказ = Ложь;
	Если ДополнительныеПараметры.КоличествоНепроведенныхДокументов > 0 Тогда
		
		// Спрашиваем пользователя о необходимости продолжения печати при наличии непроведенных документов
		
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		КнопкиДиалога = Новый СписокЗначений;
		
		Если ЕстьДокументыГотовыеДляФормированияЭД Тогда
			ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?'");
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		Иначе
			КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьНепроведенныеДокументы", ЭлектронныеДокументыКлиентПереопределяемый, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстДиалога, КнопкиДиалога);
		
	Иначе
		ПродолжитьНепроведенныеДокументы(КодВозвратаДиалога.Пропустить, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПродолжитьНепроведенныеДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Пропустить Тогда
		ДополнительныеПараметры.ДокументыПроведены = Ложь;
	Иначе
		ДополнительныеПараметры.ДокументыПроведены = Истина;	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ДокументыПроведены);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// В зависимости от прикладного решения определяет момент открытия формы сопоставления номенклатуры
//
//  Параметры:
//  СопоставлятьНоменклатуру - <Булево> - Истина - открывать форму сопоставления до заполнения документа, Ложь - в обратном порядке
//  Истина для УПП, БП
//  Ложь для УТ
//
Процедура СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуру) Экспорт
	
	СопоставлятьНоменклатуру = Истина;
	
КонецПроцедуры

// Находит элемент номенклатуры поставщика и открывает форму просмотра
//
// Параметры:
//  Идентификатор - уникальный идентификатор объекта
//
Процедура ОткрытьЭлементНоменклатурыПоставщика(Идентификатор) Экспорт
	
	ДополнительныеРеквизиты = Новый Структура;
	ДополнительныеРеквизиты.Вставить("Идентификатор", Идентификатор);
	
	НоменклатураПоставщика = ЭлектронныеДокументыСлужебныйВызовСервера.НайтиСсылкуНаОбъект("НоменклатураПоставщиков",
																						   ,
																						   ДополнительныеРеквизиты);
		
	Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
		ПоказатьЗначение(, НоменклатураПоставщика);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для переопределения стандартной формы выбора номенклатуры в форме сопоставления номенклатуры.
//
// Параметры:
//  Элемент - элемент формы
//  Параметры - Структура параметров, содержит элемент "Контрагент"
//  СтандартнаяОбработка - Булево, необходимо отключать стандартную обработку при переопределении формы выбора
Процедура ОткрытьФормуСопоставленияНоменклатуры(Элемент, Параметры, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Параметры, Элемент);
	
КонецПроцедуры
