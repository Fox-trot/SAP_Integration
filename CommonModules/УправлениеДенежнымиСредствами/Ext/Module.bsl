////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации=Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		ЕстьРасчеты  = Ложь;
	Иначе

		ЕстьРасчеты = (
		    ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		);
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		ЕстьРасчеты  = Ложь;
	Иначе
		ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыПоКредитам()

Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Знач ВидДокумента,ВидОперации = неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	//ВидыДокументовДДС.Вставить("АккредитивПереданный", "Выбытие");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПолученное", "Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее", "Выбытие");
	//ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПолученное", "Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств", "Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер", "Выбытие");
	//ВидыДокументовДДС.Вставить("АккредитивПолученный", "Поступление");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПереданное", "Поступление");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее", "Поступление");
	//ВидыДокументовДДС.Вставить("ПлатежноеТребованиеВыставленное", "Поступление");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств", "Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер", "Поступление");

	ВидыДокументовДДС.Вставить("АвансовыйОтчет", "Выбытие");
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", "Поступление");
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 
	


	Если не ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ВидДокумента="ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

Функция ПодготовитьТаблицуОплат(СтруктураШапкиДокумента) Экспорт

	Перем ВидОперации;

	СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации);
                                      
	Ссылка       = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	ЭтоВозврат   = (ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	//Зафиксируем расчеты-возврат в структуре шапки документа 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",ЭтоВозврат);

	ИмяТабличнойЧасти =?(ВидДокумента="АвансовыйОтчет","ОплатаПоставщикам","РасшифровкаПлатежа");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",     Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
	//Запрос.УстановитьПараметр("ПоРасчетнымДокументам",  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		Тогда
		РассчитатьСуммуВВалютеРеглУчета = Ложь;
	Иначе
		РассчитатьСуммуВВалютеРеглУчета = не (СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	КонецЕсли;
	Запрос.УстановитьПараметр("РассчитатьСуммуВВалютеРеглУчета",РассчитатьСуммуВВалютеРеглУчета);
	
	ВалютнаяСуммаВКолонкеВзаиморасчетов = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты, Ложь, Истина);
	Запрос.УстановитьПараметр("ВалютнаяСуммаВКолонкеВзаиморасчетов",ВалютнаяСуммаВКолонкеВзаиморасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТаблицаПлатежей.ДоговорКонтрагента,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПлатежей.КурсВзаиморасчетов,
	|	ТаблицаПлатежей.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
	|				ИЛИ &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетОплаты,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетАванса,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|							ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|						ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|					КОНЕЦ * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|						ТОГДА ТаблицаПлатежей.СуммаПлатежа
	|					ИНАЧЕ ТаблицаПлатежей.СуммаВзаиморасчетов
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РублеваяСумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|			ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|		КОНЕЦ КАК ЧИСЛО) КАК ВалютнаяСумма,
	|	ВЫРАЗИТЬ(ТаблицаПлатежей.СуммаВзаиморасчетов КАК ЧИСЛО) КАК СуммаВзаиморасчетов,
	|	ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа",Строка(ВидДокумента+"."+ИмяТабличнойЧасти));
	Если ВидДокумента="АвансовыйОтчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаПлатежа","Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств","Неопределено");
	КонецЕсли; 
	
	РеестрПлатежей = Запрос.Выполнить().Выгрузить();
	
	//Дополнение информацией о корр. счете
	РеестрПлатежей.Колонки.Добавить("КоррСчет",Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррСчет,"КоррСчет");
	
	Для НомерСубконто = 1 По 3 Цикл
		РеестрПлатежей.Колонки.Добавить("КоррСубконто"+НомерСубконто);
	КонецЦикла; 

	Для каждого Субконто из СтруктураШапкиДокумента.КоррСчет.ВидыСубконто Цикл

		Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств тогда
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДДС"),"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетОрганизации,"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо,"КоррСубконто"+Субконто.НомерСтроки);
		Иначе
			// СообщитьОбОшибке("Субконто """+Строка(Субконто.ВидСубконто)+""" по счету """+Строка(КоррСчет)+""" не заполнено!",Ложь,"");
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл

		Если ЗначениеНеЗаполнено(СтрокаПлатежа.Сделка) тогда
			СтрокаПлатежа.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;

	Возврат РеестрПлатежей;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

Функция ОграничитьТипыДокументовДляДокументовОплаты(Элемент, БазовоеОписаниеТипа,ЭтоВозврат = Ложь) Экспорт

	УдаляемыеТипыДокументовПоВидуОперации = Новый СписокЗначений();
	СписокТиповКУдалению                  = Новый Массив;
	БазовыеТипыДокументов                 = БазовоеОписаниеТипа.Типы();

	Если ЭтоВозврат тогда
		//Удалить документы приобретения, реализации
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ГТДИмпорт"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	Иначе
		//Удалить документы оплаты и возвратов
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));

		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	КонецЕсли;

	Размерность = БазовыеТипыДокументов.Количество();
	Для НомерЭлемента = 1 по Размерность Цикл
		РезультатПоиска = УдаляемыеТипыДокументовПоВидуОперации.НайтиПоЗначению(БазовыеТипыДокументов[Размерность-НомерЭлемента]);
		Если Не РезультатПоиска = Неопределено тогда
			СписокТиповКУдалению.Добавить(РезультатПоиска.Значение);
		КонецЕсли;
	КонецЦикла;

	//Установка ограничения типов для поля "РасчетныйДокумент"
	ОграниченныйТип = Новый ОписаниеТипов(БазовоеОписаниеТипа,,СписокТиповКУдалению);

	Элемент.ОграничениеТипа = ОграниченныйТип;

	Возврат СписокТиповКУдалению;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

#Если Клиент Тогда

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт

	Для Каждого Страница Из Панель.Страницы Цикл

		Если НЕ Страница.Имя = ИмяСтраницы Тогда
			Страница.Видимость = Ложь;
		Иначе
			Страница.Видимость = Истина;
		КонецЕсли;

	КонецЦикла;

	Панель.ТекущаяСтраница = Панель.Страницы[ИмяСтраницы];

КонецПроцедуры // УстановитьТекущуюСтраницу()

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа, с фильтром по переданному списку.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  СписокИсключения              - список значений перечисления, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперацииФильтр(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, СписокИсключения) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл

		Если СписокИсключения.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда

		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, 
											РасшифровкаПлатежа = "", ТипОперации = "") Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если РасшифровкаПлатежа <> "" Тогда
		Если РасшифровкаПлатежа.Количество()=0 Тогда
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить()
		Иначе
			СтрокаПлатеж = РасшифровкаПлатежа[0];
		КонецЕсли;
	КонецЕсли; 

	// Устанавливаем булевы переменные. Заполнеям их только в том случае, если не указан вид операции (новый объект)

	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) И ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации) Тогда


	КонецЕсли;

	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента)
		И (ЗначениеНеЗаполнено(ДокументОбъект.ФормаОплаты)) Тогда

		Если ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И (ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчетКасса)) Тогда
			ДокументОбъект.БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчетКасса.ВалютаДенежныхСредств;
		КонецЕсли;

		ДокументОбъект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;

	ИначеЕсли ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
		И (ЗначениеНеЗаполнено(ДокументОбъект.Касса)) Тогда
		ДокументОбъект.Касса = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
		ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
	КонецЕсли;

	Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
	   И (ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И ЗначениеНеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (Не ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда

		Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) или ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента тогда
			ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;

	КонецЕсли;

	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		
		ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
		ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
		
		ДокументОбъект.ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами;
		ДокументОбъект.ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам;
	КонецЕсли;

	//Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

	//	Если ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
	//		И ЗначениеНеЗаполнено(ДокументОбъект.СчетКонтрагента)
	//		И НЕ ЗначениеНеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
	//		И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

	//		ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

	//	КонецЕсли;

	//	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И Не ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
	//		
	//		ОсновнойДоговорКонтрагента = ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
	//		
	//		Если НЕ ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда

	//			Если ДокументОбъект.Организация.Пустая() Тогда
	//				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
	//				Организация = ОсновнойДоговорКонтрагента.Организация;
	//			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
	//				ИЛИ ОсновнойДоговорКонтрагента.Организация=ДокументОбъект.Организация Тогда
	//				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
	//			КонецЕсли;

	//		КонецЕсли;

	//		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
	//		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	//		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	//		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	//			И (ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда

	//			ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	//		КонецЕсли;

	//	КонецЕсли; // Договор

	//КонецЕсли; // Контрагент

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДокументОбъект.КурсДокумента) Тогда

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);

		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьПоБУ", МетаданныеДокумента) Тогда 
	  //И (ЗначениеНеЗаполнено(ДокументОбъект.ОтражатьПоБУ)) Тогда
		ДокументОбъект.ОтражатьПоБУ = истина;//не ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВБухгалтерскомУчете");
	КонецЕсли;

	
КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

#КонецЕсли

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Если (НЕ МетаданныеРеквизиты.Найти("СчетДоходовБУ") = Неопределено)
		И (НЕ МетаданныеРеквизиты.Найти("СчетРасходовБУ") = Неопределено) Тогда
		ПроверятьВидДеятельности = Истина;
	Иначе
		ПроверятьВидДеятельности = Ложь;
	КонецЕсли;
	
	КэшСчетов = Новый Соответствие;
	
	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если ДокументОбъект.Метаданные().Имя="ПриходМобильныхКарточек" Тогда
			Если СтрокаТаблицы.Карточка.ЭтоУслуга Тогда
				продолжить
			КонецЕсли;
		КонецЕсли;
		Если ТабличнаяЧасть.Количество() > 1 Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
			
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если ЗначениеНеЗаполнено(Значение) Тогда 

				Если ЗначениеНеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
		
		Если ПроверятьВидДеятельности Тогда
			Если ЗначениеНеЗаполнено(СтрокаТаблицы["СчетДоходовБУ"]) ИЛИ ЗначениеНеЗаполнено(СтрокаТаблицы["СчетРасходовБУ"]) Тогда
				//Один из счетов не заполнен, соответствие не проверяется
			Иначе			
				СчетДоходовБУВСтроке = СтрокаТаблицы["СчетДоходовБУ"];
				СчетДоходовБУЕНВД = КэшСчетов[СчетДоходовБУВСтроке];
				Если СчетДоходовБУЕНВД = Неопределено Тогда
					//СчетДоходовБУЕНВД = ОтноситсяКДеятельностиЕНВД(СчетДоходовБУВСтроке);
					КэшСчетов[СчетДоходовБУВСтроке] = СчетДоходовБУЕНВД;					
				КонецЕсли;
				
				СчетРасходовБУВСтроке = СтрокаТаблицы["СчетРасходовБУ"];
				СчетРасходовБУЕНВД = КэшСчетов[СчетРасходовБУВСтроке];
				Если СчетРасходовБУЕНВД = Неопределено Тогда
					//СчетРасходовБУЕНВД = ОтноситсяКДеятельностиЕНВД(СчетРасходовБУВСтроке);
					КэшСчетов[СчетРасходовБУВСтроке] = СчетРасходовБУЕНВД;
				КонецЕсли;
				
				Если НЕ СчетДоходовБУЕНВД = СчетРасходовБУЕНВД Тогда
					СтрокаСообщения = "Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности!"; 
					ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()
