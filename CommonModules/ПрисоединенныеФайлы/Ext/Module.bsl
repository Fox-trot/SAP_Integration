
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает двоичные данные присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  ДвоичныеДанные.
//
Функция ПолучитьДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ХранимыйФайл.Получить();
		Иначе
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение, Ложь);
		КонецЕсли;
	Иначе
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть)
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Получение файла из тома'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру данных файла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПрисоединенныеФайлы.ХранимыйФайл
			|ИЗ
			|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
			
			Выборка = Запрос.Выполнить().Выбрать();
			ДвоичныеДанные = Неопределено;
			Если Выборка.Следующий() Тогда
				ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			КонецЕсли;
		 
			Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			КонецЕсли;
		Иначе
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
				КонецЕсли;
			Исключение
				СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
					ПрисоединенныйФайл,
					СообщениеОбОшибке);
				
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	ДополнительнаяИнформация.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	ДополнительнаяИнформация.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	ДополнительнаяИнформация.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Наименование",                 ФайлОбъект.Наименование);
	ДополнительнаяИнформация.Вставить("Расширение",                   ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Размер",                       ФайлОбъект.Размер);
	ДополнительнаяИнформация.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	ДополнительнаяИнформация.Вставить("ПодписанЭЦП",                  ФайлОбъект.ПодписанЭЦП);
	ДополнительнаяИнформация.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	ДополнительнаяИнформация.Вставить("ФайлРедактируется",            ФайлОбъект.Редактирует <> Справочники.Пользователи.ПустаяСсылка() );
	ДополнительнаяИнформация.Вставить("ФайлРедактируетТекущийПользователь",
		?(ДополнительнаяИнформация.ФайлРедактируется, ФайлОбъект.Редактирует = ТекущийПользователь(), Ложь) );
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		ДополнительнаяИнформация.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ВладелецФайлов                 - Ссылка - объект, к которому добавляется файл.
//  ИмяБезРасширения               - Строка - имя файла без расширения.
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
//  ВремяИзменения                 - Дата   - (не используется) дата и время изменения файла (местное время).
//  ВремяИзмененияУниверсальное    - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                       - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл              - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                   или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                   справочников, требуется обязательно передать ссылку, иначе будет вызвано исключение.
//                                 - Ссылка на элемент справочника хранения файлов,
//                                   которую следует использовать для добавляемого файла.
//                                   Должна соответствовать одному из типов справочников хранения файлов владельца файлов.
//
// Возвращаемое значение:
//  Ссылка - ссылка на созданный объект.
//
Функция ДобавитьФайл(Знач ВладелецФайлов,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено,
					 НаправлениеЭД = Неопределено) Экспорт
	
	// Если расширение не задано явно, выделяем его из имени файла.
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрокЭД(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
	 ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, "", ЗаголовокОшибки, "НоваяСсылкаНаФайл");
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
		 ИЛИ НЕ ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				           |Ссылка на новый файл не заполнена.'"));
		КонецЕсли;
		
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.ПодписанЭЦП                  = Ложь;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	ПрисоединенныйФайл.ВнешнийУИД                   = ЭлектронныеДокументыСлужебный.ПолучитьИдДокумента(ДвоичныеДанные, , РасширениеБезТочки);
	
	Попытка
	
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайлов, "Организация, Контрагент");
		
		ПрисоединенныйФайл.Организация              = СтруктураРеквизитов.Организация;
		ПрисоединенныйФайл.Контрагент               = СтруктураРеквизитов.Контрагент;
		
	Исключение
	КонецПопытки;
	
	СвояТранзакцияОткрыта = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ПрисоединенныйФайл.Записать();
			СвояТранзакцияОткрыта = Истина;
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			// Добавление в один из томов (где есть свободное место).
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				ПрисоединенныйФайл.ПутьКФайлу,
				ПрисоединенныйФайл.Том,
				ВремяИзмененияУниверсальное,
				"",
				ИмяБезРасширения,
				РасширениеБезТочки,
				ПрисоединенныйФайл.Размер,
				ПрисоединенныйФайл.Зашифрован);
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9));
		
		// Направление ЭД
		Если НаправлениеЭД <> Неопределено Тогда
			ПрисоединенныйФайл.НаправлениеЭД = НаправлениеЭД;
		КонецЕсли;
		
		ПрисоединенныйФайл.Записать();
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с ЭЦП

// Заносит информацию о одной ЭЦП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  ДанныеПодписи      - Структура для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОднойПодписи(Знач ПрисоединенныйФайл, Знач ДанныеПодписи) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитов.Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	ТаблицаЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ЭлектронныеЦифровыеПодписи").Выгрузить();
	Если ЭлектронныеДокументыВнутренний.ЭЦПУжеДобавлена(ТаблицаЗначений, ДанныеПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
		ПрисоединенныйФайл,
		ДанныеПодписи.Подпись,
		ДанныеПодписи.Отпечаток,
		ДанныеПодписи.ДатаПодписи,
		ДанныеПодписи.Комментарий,
		ДанныеПодписи.ИмяФайлаПодписи,
		ДанныеПодписи.КомуВыданСертификат,
		ДанныеПодписи.Сертификат,
		,
		ДанныеПодписи.СерийныйНомер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Функция возвращает идентификатор владельца присоединенного файла.
//
Функция ПолучитьИдентификаторОбъекта(ВладелецФайлов) Экспорт
	
	Возврат "";
	
КонецФункции
