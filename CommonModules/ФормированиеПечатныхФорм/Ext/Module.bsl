
// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ОрганизацияНаименование,ОрганизацияИНН,ОрганизацияОКОНХ,ОрганизацияОКЭД,ОрганизацияЮридическийАдрес,Телефоны,НомерСчета,Банк,МФО";
	КонецЕсли; 
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ОрганизацияНаименование",	" ");
	СоответствиеПараметров.Вставить("ОрганизацияИНН",			" ИНН ");
	СоответствиеПараметров.Вставить("ОрганизацияОКОНХ",			" ОКОНХ ");
	СоответствиеПараметров.Вставить("ОрганизацияОКЭД",			" ОКЭД ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ОрганизацияЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("ОрганизацияНомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("ОрганизацияБанк",               		" в банке ");
	СоответствиеПараметров.Вставить("ОрганизацияМФО",                		" МФО ");
	
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
				
			Исключение
				
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОписаниеОрганизации()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент            - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров  - Число, количество экземпляров на печать,
//  НаПринтер              - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок              - Заголовок окна табличного документа
//  НепосредственнаяПечать - используется только для режи
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", НепосредственнаяПечать = Ложь, ТолькоПросмотр = Истина, ОтображатьЗаголовки = Ложь, ОтображатьСетку = Ложь, Защита = Ложь) Экспорт
	
	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	// Получить необходимое количество копий
	Если КоличествоЭкземпляров > 0 Тогда
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;
	
	Если НЕ ПечДокумент.АвтоМасштаб
		И ЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	Если НаПринтер Тогда
		
		ПечДокумент.Напечатать(НепосредственнаяПечать = Истина);
		
	Иначе
		
		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки = ОтображатьЗаголовки;
		ПечДокумент.ОтображатьСетку     = ОтображатьСетку;
		ПечДокумент.Защита              = Защита;
		ПечДокумент.ТолькоПросмотр      = ТолькоПросмотр;
		
		ПечДокумент.Показать(Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокумент()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
	?(ЗначениеНеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
	?(ЗначениеНеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если Не ЗначениеНеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции // ФорматСумм()

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
		
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
		
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);
	
КонецФункции // КоличествоПрописью()

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которму необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физичского лица
//
Функция ПолучитьПаспорныеДанныеСтрокой(Знач РабочаяДата,Знач ФизЛицо) Экспорт
	
	Если ТипЗнч(ФизЛицо)=Тип("СправочникСсылка.Сотрудники") Тогда
		ФизЛицо=ФизЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "Отсутствуют данные об удостоверении личности."
	КонецЕсли;	
		
	СтруктураПаспортныхДанных = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо",ФизЛицо));
	
	ВидДокумента       = СтруктураПаспортныхДанных.ДокументВид;
	Серия              = СтруктураПаспортныхДанных.ДокументСерия;
	Номер              = СтруктураПаспортныхДанных.ДокументНомер;
	ДатаВыдачи         = СтруктураПаспортныхДанных.ДокументДатаВыдачи;
	КемВыдан           = СтруктураПаспортныхДанных.ДокументКемВыдан;
	НомерПодразделения = СтруктураПаспортныхДанных.ДокументКодПодразделения;
	
	Если НЕ (ЗначениеНеЗаполнено(ДатаВыдачи)
		И ЗначениеНеЗаполнено(ВидДокумента)
		И ЗначениеНеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда
		
		Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
		+ "Серия: "   + Серия + ", № " + Номер 
		+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
		+ КемВыдан    + ?(ЗначениеЗаполнено(НомерПодразделения),"; № подр. " + НомерПодразделения,"");
		
	Иначе
		
		Возврат "Отсутствуют данные об удостоверении личности."
		
	КонецЕсли;
	
КонецФункции // ПолучитьПаспорныеДанныеСтрокой()

Функция РазложитьСтрокуДокументУдостоверяющийЛичность(Стр) Экспорт
	
	Документ = Лев(Стр, Найти(НРег(Стр), "выдан")-1);
	Выдан = Прав(Стр, СтрДлина(Стр)-Найти(НРег(Стр), "выдан")-4);
	
	Возврат Новый Структура("Документ, Выдан", Документ, Выдан);
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

Процедура ОткрытьВОбработкеРаботыСТабличнымДокументом(ТабДокумент,ИмяОтчета=Неопределено,ЗалоговокФормы=Неопределено,ПоказыватьЗаголовок=Истина,ВысотаЗаголовка=0) Экспорт
	
	РаботаСТабличнымДокументом=Обработки.РаботаСТабличнымДокументом.Создать();
	РаботаСТабличнымДокументом.ТабличныйДокумент=ТабДокумент;
	РаботаСТабличнымДокументом.ИмяОтчета=ИмяОтчета;
	ФормаОбработки=РаботаСТабличнымДокументом.ПолучитьФорму("Форма");
	ФормаОбработки.ПоказыватьЗаголовок=ПоказыватьЗаголовок;
	ФормаОбработки.ВысотаЗаголовка=ВысотаЗаголовка;
	ФормаОбработки.Заголовок=ЗалоговокФормы;
	ФормаОбработки.Открыть();
	
КонецПроцедуры		