////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ

//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
Функция ДатаВФайл(Знач ДатавФайл) Экспорт
	Если ЗначениеНеЗаполнено(ДатавФайл) тогда
		Возврат """""";
	Иначе
		Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
	КонецЕсли;
КонецФункции	 

//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"
Функция ДатаИзФайла(Знач ДатаИзФайла) Экспорт
	Число = Сред(ДатаИзФайла,1,2);
	Месяц = Сред(ДатаИзФайла,4,2);
	Год = Сред(ДатаИзФайла,7,4);
	Попытка
		Возврат Дата(Год,Месяц,Число);
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;	
КонецФункции	 

//Преобразует строку в число
Функция ЧислоИзФайла(Знач ЧислоИзФайла) Экспорт
	Попытка
		Возврат Число(ЧислоИзФайла);
	Исключение
		Возврат 0;
	КонецПопытки;	
КонецФункции	

//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101')) тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции	

//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов
Функция РазложитьСтрокуФайлаСведенийПФР(Знач Стр,Разделитель = ",",Ограничитель = """") Экспорт

	//Первый проход: определяем позиции пар ограничителей
	ДлинаСтроки = СтрДлина(Стр);
	МассивПозицииОграничителя = Новый Массив();
	КопияСтр = Стр;
	ТекИндекс =0;
	Пока 1=1 цикл
		//поиск первого ограничетеля
		НачПоз = Найти(КопияСтр,Ограничитель);
		Если НачПоз =0 тогда 
			Прервать;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+НачПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,НачПоз+1);//двигаемся вперед по строке

		//поиск второго ограничителя
		КонПоз = Найти(КопияСтр,Ограничитель);
		Если КонПоз = 0 тогда
			КонПоз = ДлинаСтроки +1;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+КонПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,КонПоз+1);//двигаемся вперед по строке
	КонецЦикла;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;

	//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
	МассивСтрок = Новый Массив();
	ГоловаЭлемента = "";
	ТекИндекс =0;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(ГоловаЭлемента+Стр);
			Прервать;
		КонецЕсли;

		//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
		ВнутриОграничителей = Ложь;
		Для П=0 по КоличествоПарОграничителей-1 цикл
			АбсолютнаяПозиция = ТекИндекс + Поз;
			Если (АбсолютнаяПозиция>МассивПозицииОграничителя[П*2])и(АбсолютнаяПозиция<МассивПозицииОграничителя[П*2+1]) тогда
				ВнутриОграничителей = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ВнутриОграничителей тогда
			ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
			Стр = Сред(Стр,Поз+1);
		Иначе		
			МассивСтрок.Добавить(ГоловаЭлемента+Лев(Стр,Поз-1));
			ГоловаЭлемента = "";
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЕсли;	 

		//Идём дальше по строке
		ТекИндекс = ТекИндекс+Поз;
	КонецЦикла;

	//Убираем ограничители
	Для К=0 по МассивСтрок.Количество()-1 цикл
		Стр = МассивСтрок[К];
		ДлинаСтр = СтрДлина(Стр);
		Если (Лев(Стр,1)=Ограничитель)и(Прав(Стр,1)=Ограничитель) тогда
			МассивСтрок[К] = Сред(Стр,2,ДлинаСтр-2);
		КонецЕсли;	
	КонецЦикла;	

	Возврат МассивСтрок;
КонецФункции	 

//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт

	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

//Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 

	Если ДатаОкончанияПериода >= ДатаНачалаПериода тогда

		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);

		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) тогда
			Дней1		=	День(ДатаОкончанияПериода);
		иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) тогда
			Дней2		=	День(ДатаНачалаПериода);
		иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
		
		Если Дней < 0 Тогда
			Месяцев = Месяцев - 1;
			Дней = Дней + 30;
		КонецЕсли; 
		
		Если Месяцев < 0 Тогда
			Лет = Лет - 1;
			Месяцев = Месяцев + 12;
		КонецЕсли; 
		
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры //ПолучитьСтажЗаПериод

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт

	НомерПачки = "";

	НомерДокумента = СокрП(НомерДокумента);

	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	

	Если НомерПачки <> "" тогда
		Возврат Формат(Число(НомерПачки),"ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции	 

//Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ) Экспорт

	НомерПачки = НомерПачкиДокумента(Документ.Номер);
	РегНомерПФР = Документ.Организация.РегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
	Возврат ИмяФайла;
	
КонецФункции

//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьЗаголовок() Экспорт

	СтрокаВФайл = """ЗГЛВ"",""04.00""," 
	+ """1С:БУХГАЛТЕРИЯ""," // программа подготовки данных
	+ """" + Лев(Константы.НомерВерсииКонфигурации.Получить(),6)+"""";// Версия программы подготовки

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОПачке(НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 ) Экспорт

	СтрокаВФайл = """ПАЧК""," 
	+ НомерПачки + ","	// Номер пачки, присвоенный работодателем
	+ """ОПИСЬ""" + "," // Тип пачки
	+ """ОП61""" + ","	// Тип описи
	+ ДатаВФайл(ДатаСоставленияОписи) + "," 
	+ "1,"				// Число типов документов в пачке
	+ Формат(РасчетныйПериодГод,"ЧГ=0")// Расчетный период:	год
	+ ",""" + Категория + """"	// Код категории застрахованного лица 
	+ ","""""			// Код дополнительного тарифа
	+ ",""" + ТУ + """"	// Территориальные условия (код) 
	+ ",""" + ТипСведений + """"		// Тип сведений
	+ ",""" + ВидКорректировки + """"	// Вид корректировки
	+ ",0"				// Отчетный период квартал
	+ ",0"				// Отчетный период год
	+ ",0.00"			// Всего начислено
	+ ",0.00"			// пособие по временной нетрудоспособности
	+ "," + Формат(СтаховаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на страховую часть
	+ "," + Формат(НакопительнаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на накопительную часть
	+ ",0.00"			// сумма начисленных страховых взносов по дополнительному тарифу
	+ ",0"				// Исходящий номер СПУ:	Код подразделения	
	+ ",0";				// Исходящий номер

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОТипеДокумента(ТипДокумента,КоличествоДокументов) Экспорт

	СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОРаботодателе(Организация, ДатаАктуальности, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|		&ДатаАктуальности,
	|		ФизЛицо В
	|			(ВЫБРАТЬ
	|				Справочник.Организации.ИндивидуальныйПредприниматель
	|			ИЗ
	|				Справочник.Организации
	|			ГДЕ
	|				Справочник.Организации.Ссылка = &Организация)) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда 
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 
			
			Если НЕ РегламентированнаяОтчетность.ИННсоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ОшибкаПриПроведении("Для физического лица-работодателя не верно введен ИНН!", Отказ);
			КонецЕсли;
			
			Если Выборка.Фамилия <> NULL Тогда
				ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество); 
			Иначе	
				ФИО = СокрЛП(Выборка.НаименованиеОрганизации);
			КонецЕсли; 
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0 Тогда
				ОшибкаПриПроведении("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
		
			Если Найти(ФИО, " ")=0 Тогда
				ОшибкаПриПроведении("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = ФИО;
			
		Иначе	
			
			// Для юрлица 
			Если НЕ РегламентированнаяОтчетность.ИННсоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
				ОшибкаПриПроведении("Для организации неверно введен ИНН!", Отказ);
			КонецЕсли; 
			
			Если СтрДлина(Выборка.КПП)<>9 Тогда
				ОшибкаПриПроведении("Для организации не верно введен КПП!", Отказ);
			КонецЕсли;
			
			Если СокрЛП(Выборка.НаименованиеОрганизации) = "" Тогда
				ОшибкаПриПроведении("Для организации должно быть указано сокращенное наименование организации!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
			
		КонецЕсли; 

		Если СокрЛП(Выборка.РегистрационныйНомерПФР) = "" Тогда
			ОшибкаПриПроведении("Для организации не указан регистрационный номер в ПФР !", Отказ);
		КонецЕсли; 
		
		СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";
		
		Возврат Врег(СтрокаВФайл+Символы.ПС);
		
	Иначе
		
		Отказ = Истина;
		Возврат "";  
		
	КонецЕсли;
	

КонецФункции

//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи, 
//выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьМестоРождения(Запись, Знач МестоРождения) Экспорт

	МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
	Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
	Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
	Запись.МестоРожденияРайон = МестоРождения.Район;
	Запись.МестоРожденияОбласть = МестоРождения.Область;
	Запись.МестоРожденияСтрана = МестоРождения.Страна;

КонецПроцедуры

//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет 
//соответствующие поля записи, выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьДокумент(Запись, ТекущиеДанные) Экспорт

	СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
	Если НЕ ЗначениеНеЗаполнено(ТекущиеДанные.ДокументВид) тогда
		Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;		
	иначе
		Запись.ДокументВид = "ПРОЧЕЕ";		
	КонецЕсли;	
	Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;
	Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
	Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
	Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
	Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
	Запись.ДокументКемВыдан = ТекущиеДанные.ДокументКемВыдан;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ

// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа
Функция ПредставлениеПериодаБолезниОтпуска(Месяцы, Дни) Экспорт
	
	Если Месяцы<>0 Тогда
		Представление = "" + Месяцы + " мес. ";
	Иначе	
		Представление = "";
	КонецЕсли; 
	Если Дни<>0 Тогда
		Представление = Представление + Дни + " дн." ;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если (КодОснованияИТС = "ВОДОЛАЗ") Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли (КодОснованияИТС = "СЕЗОН") Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;

КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки)Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
	или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
	или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
	или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
	или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

// Формирует фрагмент выходного файла по работнику и выводит печатную форму СЗВ4.
//
// Параметры:
//		ДокументРезультат	-	ТабличныйДокумент - табличный документ, куда быдет выведена печатная форма
//		ДатаАктуальности	-	дата - дата, на которую формируются данные
//		ФизЛицо				-	Справочники.ФизическиеЛица - физлицо, на которого формируются данные
//		Организация			-	Справочники.Организации - организация, по которой формируются данные
//
Процедура ВыводНаПечатьПоФизЛицу(ДокументРезультат, ДатаАктуальности, ФизЛицо, Организация) Экспорт
	
	ТипФормДокументов = "СЗВ-4-1";
	ТекстФайла = "";

	// Формирование фрагмента файла передачи В ПФР для печати формы "СЗВ-4-1"
	// Запрос по регистру ЗаписиОСтаже и СуммыВзносовДляСЗВ4
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	СуммыВзносовДляСЗВ4.НачисленоНаСтраховуюЧастьПФР,
	|	СуммыВзносовДляСЗВ4.НачисленоНаНакопительнуюЧастьПФР,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейБолезни, 0) КАК ДнейБолезни,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносовДляСЗВ4
	|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносовДляСЗВ4.ФизЛицо
	|			И ЗаписиОСтаже.Год = СуммыВзносовДляСЗВ4.Год
	|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносовДляСЗВ4.ОбособленноеПодразделение
	|ГДЕ
	|	ЗаписиОСтаже.ФизЛицо В(&ФизЛицо)
	|	И ЗаписиОСтаже.Год В(&Год)
	|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&ОбособленноеПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	Год,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	Запрос.УстановитьПараметр("ФизЛицо" , ФизЛицо);
	Запрос.УстановитьПараметр("Год" , Год(ДатаАктуальности));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение" , Организация);
	
	// Сбор данных и формирование фрагмента файла
	ВыборкаПоРаботникиОрганизации	= Запрос.Выполнить().Выбрать();
	Если ВыборкаПоРаботникиОрганизации.Следующий() Тогда
		
		ТипЗаписиИН = "ИН41";
		ДокументФорматЗаписей = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиИН = ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
		Фамилия		= "";
		Имя			= "";
		Отчество	= "";
		ФамилияИнициалыФизЛица(ФизЛицо.Наименование,Фамилия,Имя,Отчество);
		
		// адрес для информирования
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаАктуальности);
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"","" + КонтактнаяИнформация.Поле1 + "","" + КонтактнаяИнформация.Поле2 + "","" + КонтактнаяИнформация.Поле3 + "","" + КонтактнаяИнформация.Поле4 + "","" + КонтактнаяИнформация.Поле5 + "","" + КонтактнаяИнформация.Поле6 + "","" + КонтактнаяИнформация.Поле7 + "","" + КонтактнаяИнформация.Поле8 + "","" + КонтактнаяИнформация.Поле9 КАК АдресИзРегистра
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &ВидАдресаДляИнформирования И
		|	КонтактнаяИнформация.Объект = &Физлицо";
		
		РезультатЗапроса	= Запрос.Выполнить();
		ВыборкаПоРаботнику	= РезультатЗапроса.Выбрать();
		АдресДляИнформирования = ?(ВыборкаПоРаботнику.Следующий(), ВыборкаПоРаботнику.АдресИзРегистра, "");
		Если СокрЛП(СтрЗаменить(АдресДляИнформирования, ",","")) <> "" Тогда
			АдресДляИнформирования = АдресДляИнформирования;
		Иначе	
			АдресДляИнформирования = "";
		КонецЕсли; 
		
		// Подготовка расчетных данных
		ЗаписьИН = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
		ЗаписьИН.ТипЗаписи							= ТипЗаписиИН;
		ЗаписьИН.НомерДокументаВПачке				= 1;
		ЗаписьИН.СтраховойНомер						= ФизЛицо.СтраховойНомерПФР;
		ЗаписьИН.Фамилия							= ВРЕГ(Фамилия);
		ЗаписьИН.Имя								= ВРЕГ(Имя);
		ЗаписьИН.Отчество							= ВРЕГ(Отчество);
		ЗаписьИН.РасчетныйПериодГод					= Год(ДатаАктуальности);
		ЗаписьИН.АдресДляИнформирования				= ВРЕГ(АдресДляИнформирования);
		ЗаписьИН.ДатаЗаполнения						= ДатаАктуальности;
		ЗаписьИН.НачисленоСтраховаяЧасть			= ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
		ЗаписьИН.НачисленоНакопительнаяЧасть		= ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
		ЗаписьИН.ВременнаяНетрудоспособностьМесяцев	= Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
		ЗаписьИН.ВременнаяНетрудоспособностьДней	= ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
		ЗаписьИН.ОтпускМесяцев						= Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
		ЗаписьИН.ОтпускДней							= ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
		
		// Сбор данных о стаже
		ЧислоОсновныхЗаписейОСтаже = 0;					//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
		СтрокиСтажРаботникаОрганизации = "";
		РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;	// Признак наличия у работника основания для льготного стажа
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
			
			ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
			
			//Берем пустую запись "Основная запись о стаже"
			ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
			ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
			ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
			ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
			ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
			ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
			ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
			ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
			ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
			ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
			
			//Переменный для хранения дополнительных записей о стаже
			ЧислоДополнительныхЗаписейОСтаже = 0;
			СтрокиДополнительныеЗаписи = "";
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
					Продолжить;
				КонецЕсли;	
				
				РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				
				//Берем пустую запись "Запись о льготном стаже"
				ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
				ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
				ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
				ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
				ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
				ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
				ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
				ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
				
				//Сохраним запись ЛГОТ
				СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
				СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
			
			//Сохраним запись СТАЖ
			СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
			
			//Добавим записи ЛГОТ
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
			
		КонецЦикла;// Выборка по основным записям о стаже
		
		// Формирование файла
		ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
		
		//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
		СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
		ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
		
	КонецЕсли;
	
	// Вывод печатной формы
	Если ТекстФайла <> "" Тогда
		
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаАктуальности);
		
		Макет = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФормаСЗВ_4_1");
		ФорматЗаписиИН41 = ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
		ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
		ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
		
		// Рабочие области макета
		ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
		ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
		
		// Заполнение данных шапки и подвала
		ОбластьШапка.Параметры.РегНомерПФР = Организация.РегистрационныйНомерПФР;
		ОбластьШапка.Параметры.НаименованиеОрганизации = Организация.Наименование;
		ОбластьШапка.Параметры.Год = Год(ДатаАктуальности);
		
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.Дата				 			= ДатаВОтчет(ДатаАктуальности);
		
		Н=1;//Номер строки первой записи ИН41
		
		//Читаем запись ИН41
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
		Н= Н + 1;
		ЗаписьИН41 = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
		СтрОшибка = "";
		Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
			Возврат;
		КонецЕсли;	
		
		// Данные по физлицу
		ОбластьШапка.Параметры.СтраховойНомерПФР				= ЗаписьИН41.СтраховойНомер;
		ОбластьШапка.Параметры.ФИО							= "" + ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
		ОбластьШапка.Параметры.Адрес						= РегламентированнаяОтчетность.ПредставлениеАдреса(ЗаписьИН41.АдресДляИнформирования, 0, "");
		ОбластьШапка.Параметры.НачисленоСтраховаяЧасть		= ЗаписьИН41.НачисленоСтраховаяЧасть;
		ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
		ОбластьШапка.Параметры.НачисленоДополнительныйТариф	= ЗаписьИН41.НачисленоДополнительныйТариф;
		ОбластьШапка.Параметры.ДнейБолел					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
		ОбластьШапка.Параметры.ДнейГулял					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
		ДокументРезультат.Вывести(ОбластьШапка);
		
		//Цикл по основным записям о стаже
		Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
			
			//Читаем запись СТАЖ
			СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
			Н= Н + 1;
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			СтрОшибка = "";
			Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) тогда
				Возврат;
			КонецЕсли;	
			
			ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
			ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
			ОбластьСтаж.Параметры.ДатаОкончанияПериода		= ЗаписьСТАЖ.ДатаОкончанияПериода;
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьСТАЖ.ТерриториальныеУсловияКод;
			ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
			ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьСТАЖ.КодПозицииСписка;
			
			// Представление параметров ИТС
			ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
			ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
			
			// Представление параметров выслуги лет
			ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
			ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
			
			ДокументРезультат.Вывести(ОбластьСтаж);
			
			//Цикл по дополнительным записям о стаже
			Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
				
				//Читаем запись ЛГОТ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Н= Н + 1;
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				СтрОшибка = "";
				Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) тогда
					Прервать;
				КонецЕсли;	
				
				// Выводим запись ЛГОТ
				ОбластьСтаж.Параметры.НомерПериода				= "";
				ОбластьСтаж.Параметры.ДатаНачалаПериода			= "";
				ОбластьСтаж.Параметры.ДатаОкончанияПериода		= "";
				ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьЛГОТ.ТерриториальныеУсловияКод;
				ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
				ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьЛГОТ.КодПозицииСписка;
				
				// Представление параметров ИТС
				ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
				ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
				
				// Представление параметров выслуги лет
				ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
				ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
				
				ДокументРезультат.Вывести(ОбластьСтаж);
				
			КонецЦикла;//Цикл по дополнительным записям о стаже	
			
		КонецЦикла;// По основным записям о стаже	
		
		// Подвал формы
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ

#Если Клиент Тогда

//Функция разбирает заголовочные строки файла и возвращает информацию о пачке
Функция РазобратьЗаголовокФайла(Знач ТекстФайла,ИнформацияОПачке) Экспорт

	ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
	Если ВсегоСтрокВФайле < 4 тогда
		СообщитьОбОшибке("Неверная структура файла: количество строк должно быть не менее 4!");
		Возврат 0;
	КонецЕсли;

	ИнформацияОРаботодателе = Новый Структура;

	//Обработка записи заголовка "ПАЧК"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
	Если МассивДанныхСтроки.Количество()<>21 тогда
		Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
	ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
	ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
	ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
	ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
	ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
	ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
	ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
	ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
	ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);

	//Обработка записи заголовка "РБТД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
	Если МассивДанныхСтроки.Количество()<>6 тогда
		Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
		Возврат 0;
	КонецЕсли;

	ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
	ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
	ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
	ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);

	//Обработка записи заголовка "ТИПД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
	Если МассивДанныхСтроки.Количество()<>3 тогда
		Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));

	ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);

	Возврат 1;

КонецФункции

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6"
Процедура ВывестиОписьАДВ6(ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица) Экспорт

	//Получим ответственные лица организации и их должности 
	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_1");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");

	СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
	СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
	СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
	СекцияОпись.Параметры.Наименование						= ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;

	Если ИнформацияОПачке.ТипДокумента = "АНКТ" тогда
		СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ОБМН" тогда
		СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ДУБЛ" тогда
		СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "КОНВ" тогда
		СекцияОпись.Параметры.ДокументовСЗВКвПачке			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "ИН41" ИЛИ ИнформацияОПачке.ТипДокумента = "ИН42" тогда
		Если ИнформацияОПачке.ТипДокумента = "ИН41" тогда
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовВПачке;
		Иначе
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовСЗВ4_2вПачке;
		КонецЕсли;
		СекцияОпись.Параметры.ЧислоЗастрахованныхЛицВПачке	= ИнформацияОПачке.ДокументовВПачке;
		СекцияОпись.Параметры.РасчетныйПериод 				= ИнформацияОПачке.РасчетныйПериод;
		СекцияОпись.Параметры.КодКатегорииЗастрахованногоЛица = ИнформацияОПачке.КодКатегорииЗастрахованногоЛица;
		СекцияОпись.Параметры.КодДополнительногоТарифа 		= ИнформацияОПачке.КодДополнительногоТарифа;
		СекцияОпись.Параметры.ТерриториальныеУсловия 		= ИнформацияОПачке.ТерриториальныеУсловия;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыСтраховаяЧасть		= Число(ИнформацияОПачке.ИтогоВзносыСтраховаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыНакопительнаяЧасть	= Число(ИнформацияОПачке.ИтогоВзносыНакопительнаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыПоДопТарифу		= Число(ИнформацияОПачке.ИтогоВзносыПоДопТарифу);
		Исключение
		КонецПопытки;
		
		Если ИнформацияОПачке.ТипСведений = "ИСХД" Тогда
			СекцияОпись.Рисунки.ТипСведений_ИСХД.Текст = "ю";	
		ИначеЕсли ИнформацияОПачке.ТипСведений = "ПЕНС" Тогда
			СекцияОпись.Рисунки.ТипСведений_ПЕНС.Текст = "ю";	
		КонецЕсли; 
		
		Если ИнформацияОПачке.ВидКорректировки = "КОРР" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_КОРР.Текст = "ю";
		ИначеЕсли ИнформацияОПачке.ВидКорректировки = "ОТМН" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_ОТМН.Текст = "ю";
		КонецЕсли;	
	КонецЕсли;	

	СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;

	СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
	СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
	СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);

	ТабличныйДокумент.Вывести(СекцияОпись);

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ

//Возвращает формат записи файла сведений (таблицу с именами и типами полей)
Функция ПолучитьФорматЗаписи(Знач ИмяЗаписи,Знач ДокументФорматЗаписей) Экспорт

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ПолучитьОписаниеТиповЧисла(5));

	ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		//тип поля хранится в 5-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
		Если ИмяПоля <> "" тогда
			//тип поля хранится во 2-ой колонке	
			ТипПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст);
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			НовоеПоле.ТипПоля = ВРЕГ(СокрЛП(ТипПоля));
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

//Возвращает инициализировнную структуру, соответствующую формату записи
Функция ПолучитьСтруктуруЗаписи(Знач ТаблицаФорматаЗаписи) Экспорт
	СтрИменаПолей = "";
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		СтрИменаПолей = СтрИменаПолей +","+Поле.ИмяПоля;
	КонецЦикла;	

	СтрИменаПолей = Сред(СтрИменаПолей,2);//Убрали первую запятую
	Возврат Новый Структура(СтрИменаПолей);
КонецФункции	 

//Формирует строку для файла сведений на основе данных структуры записи
Функция ПолучитьСтрокуПоДаннымЗаписи(Знач Запись,Знач ТаблицаФорматаЗаписи) Экспорт

	Стр = "";

	СтрНули = "0000000000";

	Для Каждого Поле из ТаблицаФорматаЗаписи цикл

		ЗначениеПоля = Запись[Поле.ИмяПоля];

		Если Поле.ТипПоля = "СТРОКА" тогда

			Стр = Стр +","+ """"+СокрЛП(ЗначениеПоля)+"""";

		ИначеЕсли Поле.ТипПоля = "ДАТА" тогда

			Если ЗначениеПоля = Неопределено тогда
				Стр = Стр + ",""""";
			Иначе
				Стр = Стр + ",""" + Формат(ЗначениеПоля, "ДФ='дд/ММ/гггг'") + """";
			КонецЕсли;

		Иначе//Если Поле.ТипПоля = "Число" тогда

			ТипЗнчПоля = ТипЗнч(ЗначениеПоля);

			Если ТипЗнчПоля = Тип("Число") тогда
				//ЗначениеПоля = ЗначениеПоля;
			ИначеЕсли ТипЗнчПоля = Тип("Строка") тогда	
				//ЗначениеПоля = Число(ЗначениеПоля);
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Иначе					
				ЗначениеПоля = 0;
			КонецЕсли;

			//Формируем представление нуля
			РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			//Форматируем значение
			ЗначениеПоля = Формат(ЗначениеПоля,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);

			Стр = Стр + "," + ЗначениеПоля;
		КонецЕсли;	 
	КонецЦикла;	

	Стр = Сред(Стр,2);//Убрали первую запятую

	Возврат Стр;
КонецФункции	 

//Выполняет разбор строки файла на значения элементов структуры записи
Функция РазложитьСтрокуВСтруктуруЗаписи(Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка)Экспорт

	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);

	Если МассивДанныхСтроки[0] <> ТипЗаписи тогда
		СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
		Возврат ложь;
	КонецЕсли;	

	Если МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество() тогда
		СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
		Возврат Ложь;
	КонецЕсли;	

	НомерПоля = 0;
	Для Каждого Поле из ТаблицаФормата цикл
		ЗначениеПоля = МассивДанныхСтроки[НомерПоля];
		Если Поле.ТипПоля = "ДАТА" тогда
			ЗначениеПоля = ДатаИзФайла(ЗначениеПоля);
		ИначеЕсли Поле.ТипПоля = "ЧИСЛО" тогда
			ЗначениеПоля = ЧислоИзФайла(ЗначениеПоля);
		КонецЕсли;	 
		Запись[Поле.ИмяПоля]=ЗначениеПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;	

	Возврат Истина;
КонецФункции	 

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ

// Распечатывает список найденных ошибок с группировкой по физлицу
Процедура ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, ИсточникОшибок) Экспорт

	Таблица = ТаблицаПлохихЗаписей.Скопировать();
	Таблица.Свернуть("ФизЛицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Для каждого ФизЛицо Из МассивФизлиц цикл

			СтруктураПоиска.ФизЛицо = ФизЛицо;
			НайдОшибки = ТаблицаПлохихЗаписей.НайтиСтроки(СтруктураПоиска);

			Если НайдОшибки.Количество() = 0 тогда
				Продолжить;
			КонецЕсли;	 

			СтрОшибкиПоФизЛицу = "--------------------------------------------------------------------------------------------" + Символы.ПС;
			СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" работника " + Физлицо + " обнаружены ошибки:" + Символы.ПС;
			НомерОшибки = 0;
			Для Каждого Ошибка из НайдОшибки цикл
				НомерОшибки = НомерОшибки + 1;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки;
			КонецЦикла;
			ОшибкаПриПроведении(СтрОшибкиПоФизЛицу,Ложь);
		КонецЦикла;
	КонецЕсли;	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	
	ЗаголовокСообщения = "Организация: "+СокрЛП(Запись.ОбособленноеПодразделение);
	ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");

	Если Запись.НомерДополнительнойЗаписи <> 0 тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;

	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;

	Возврат ЗаголовокСообщения;
	
КонецФункции 

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")

	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);

	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;

	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;

КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей)

	Если ЗначениеНеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И ЗначениеНеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И ЗначениеНеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И ЗначениеНеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	Если НЕ ЗначениеНеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	

	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = НЕ ЗначениеНеЗаполнено(Запись.ТерриториальныеУсловия);

	УказаныОсобыеУсловияТруда = НЕ ЗначениеНеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = НЕ ЗначениеНеЗаполнено(Запись.ОснованиеВыслугиЛет);

	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия тогда
		Если  ЗначениеНеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	

	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;

		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;

	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);

	Если ЗначениеНеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) тогда
		Если Найти(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан

		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,");//пустой код допустим

		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);

		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ПроверочнаяСтрокаКодов = "" тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");

			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 

	Возврат Истина;
КонецФункции	 

//Выполняет проверку записи стажа на допустимось значений реквизитов между группами
Функция СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.Год КАК Год,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО Записи.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|			И Записи.Год = ТЧРаботникиОрг.Ссылка.Год
		|			И Записи.ОбособленноеПодразделение = ТЧРаботникиОрг.Ссылка.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
					   
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
					   
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
		Запрос.УстановитьПараметр("МассивЛет", СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений", СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.Год КАК Год,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	Записи.Год В(&МассивЛет)
		|	И Записи.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|	И Записи.ФизЛицо В(&МассивФизлиц)
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
		
	КонецЕсли;	   
		
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение") цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") цикл
			Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) цикл
				Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
						
						СтрокаСообщений = "Комбинация значений реквизитов:";
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
						СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
						
						Если (Выборка.НомерПравила = NULL)
							ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
							ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД") тогда
							СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
							
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							Продолжить;
							
						КонецЕсли;	
						
						//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
						ФОВДопустимо = Ложь;
						
						СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
						
						//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
						Пока Выборка.Следующий() цикл
							
							ФорматФОВ = Выборка.ФорматФОВ;
							СтрокаОшибкиФормата = "";            	
							ПрошлоПроверку = 0;
							СтрокаЗначенияПараметров = "";
							
							Для Н=1 по 2 цикл
								ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
								
								Если Н=1 тогда	
									ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Месяцы";
								Иначе
									ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
									ПсевдонимПараметра = "Дни";
								КонецЕсли;	
								
								ПараметрПрошелПроверку = Ложь;
								
								НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
								
								Если (ФорматПараметра = "_") тогда
									Если (ЗначениеПараметра <> 0) тогда//ПУСТОЕ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Г") тогда
									Если (ЗначениеПараметра > 100) тогда//ГОДЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "М") тогда 
									Если (ЗначениеПараметра > 11) тогда//МЕСЯЦЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "Д") тогда 
									Если (ЗначениеПараметра > 30) тогда//ДНИ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								ИначеЕсли (ФорматПараметра = "ч") тогда//ЧАСЫ 
									ПараметрПрошелПроверку = ИСТИНА;
								ИначеЕсли (ФорматПараметра = "м") тогда 
									Если (ЗначениеПараметра > 59) тогда//МИНУТЫ
										СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
									Иначе	
										ПараметрПрошелПроверку = ИСТИНА;
									КонецЕсли;
								КонецЕсли;	 
								
								Если ПараметрПрошелПроверку тогда
									ПрошлоПроверку = ПрошлоПроверку + 1;
								КонецЕсли;	 
								
								СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
							КонецЦикла;
							
							//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
							Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") тогда//
								ПрошлоПроверку = 0;
								СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
							КонецЕсли;	
							
							Если ПрошлоПроверку = 2 тогда
								ФОВДопустимо = Истина;
								Прервать;
							КонецЕсли;
							
							СтрФорматФОВ = ФорматФОВ;
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
							СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
							СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
							
							СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
							СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
						КонецЦикла;	// по вариантам формата ФОВ
						
						Если НЕ ФОВДопустимо тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
						КонецЕсли;	 
						
					КонецЦикла;// По дополнительным записям	
				КонецЦикла;// По основным записям	
			КонецЦикла;// По физлицам
		КонецЦикла;// По годам	
	КонецЦикла;// По обособленым подразделениям	

КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ4_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "") Экспорт
	
	ПустаяДата = Дата('00010101');
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" ,				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности" ,				СтруктураПараметров.ДатаАктуальности);
		Запрос.УстановитьПараметр("НачалоГода" ,					НачалоГода(СтруктураПараметров.ДатаАктуальности));
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования" ,	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("Организация" ,					СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация" ,			СтруктураПараметров.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство" ,	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("Уволен" ,						Перечисления.ПричиныИзмененияСостояния.Увольнение);
		
		// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ТЧРаботникиОрг.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ЗаписиОСтаже.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|			И ЗаписиОСтаже.Год = ТЧРаботникиОрг.Ссылка.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = ТЧРаботникиОрг.Ссылка.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаАктуальности,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ
		|		        ТЧ.ФизЛицо
		|		    ИЗ
		|		        Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|		    ГДЕ
		|		        ТЧ.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ТЧРаботникиОрг.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Ссылка.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Ссылка.Организация = СуммыВзносов.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РаботникиОрганизации.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&НачалоГода,
		|				Организация = &ГоловнаяОрганизация
		|				    И Физлицо В
		|				        (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				            СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|				        ИЗ
		|				            Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|				        ГДЕ
		|				            СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка)
		|				    И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство
		|				        ИЛИ Приказ.ВидЗанятости ЕСТЬ NULL )) КАК РаботникиОрганизации
		|		ГДЕ
		|			РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
		|			И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РаботникиОрганизаций.Физлицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ГДЕ
		|			РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|			И РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
		|			И РаботникиОрганизаций.Период МЕЖДУ &НачалоГода И &ДатаАктуальности
		|			И РаботникиОрганизаций.Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|					ИЗ
		|						Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|					ГДЕ
		|						СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка)
		|			И (РаботникиОрганизаций.Приказ.ВидЗанятости <> &ВнутреннееСовместительство
		|					ИЛИ РаботникиОрганизаций.Приказ.ВидЗанятости ЕСТЬ NULL )) КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрг.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
		Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 			  
	ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение") Цикл
		
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Год") Цикл
			
			Год = ВыборкаЗаписей.Год;
			
			Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) Цикл
				
				Если ВыборкаЗаписей.НомерОсновнойЗаписи = NULL Тогда
					Продолжить;//Физлицо не имеет сведений
				КонецЕсли; 
				
				ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				
				ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				
				//Список значений группы реквизитов территориальные условия одной основной записи
				СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				
				//Список значений кодов условий труда одной основной записи
				СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				
				//Список значений кодов выслуги лет основной записи
				СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				
				ПредыдущийНомерОсновнойЗаписи = 0;
				ПредыдущийНомерДополнительнойЗаписи = 0;
				
				Пока ВыборкаЗаписей.Следующий() Цикл
					
					Запись = ВыборкаЗаписей;
					
					//Организация, физлицо и год должны быть заполнены обязательно
					Если Запись.ОбособленноеПодразделение.Пустая() тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					КонецЕсли;	
					Если Запись.ФизЛицо.Пустая() тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					КонецЕсли;	
					Если Запись.Год < 2002 тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
					КонецЕсли;	
					
					
					// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
					
					//По умолчанию считаем, что запись основная
					ЭтоОсновнаяЗапись = Истина;
					
					//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
					ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					
					//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
					Если (Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
						Если ДополнительнаяЗаписьВозможна тогда
							ЭтоОсновнаяЗапись = Ложь;
						Иначе
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
						КонецЕсли;	
					ИначеЕсли (Запись.ДатаНачалаПериода = ПустаяДата) тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
					ИначеЕсли (Запись.ДатаОкончанияПериода = ПустаяДата) тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
					Иначе//Обе даты заполнены
						
						//Дата начала периода не должна быть ранее 01.01.ГГГГ
						Если Запись.ДатаНачалаПериода < Дата(Год, 01, 01)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее 01.01." + Год + "!");
						КонецЕсли;	 
						
						//Дата окончания периода не должна быть позднее 31.12.ГГГГ
						Если Запись.ДатаОкончанияПериода > Дата(Год, 12, 31)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31.12." + Год + "!");
						КонецЕсли;	 
						
						// Начало периода не должно быть позже окончания периода 
						Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
						КонецЕсли;
						
					КонецЕсли;	 
					
					//Проверка только для основной записи о стаже
					Если ЭтоОсновнаяЗапись тогда
						
						//Проверка на хронологический порядок записей
						Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено тогда
							Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							КонецЕсли;	 
						КонецЕсли;
						
						//Переустановка текущей основной записи
						ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						ТекущаяОсновнаяЗапись.Год = Год;
						ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						
						СписокТерриториальныеУсловияЗаписи.Очистить();
						СписокУсловияТрудаЗаписи.Очистить();
						СписокВыслугаЛетЗаписи.Очистить();
					КонецЕсли;	 
					
					// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
					
					//Проверка нумерации основных и дополнительных записей
					Если (ЭтоОсновнаяЗапись) тогда
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
						КонецЕсли;
					Иначе
						ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
						Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
						КонецЕсли;
					КонецЕсли;
					
					
					//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
					
					//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
					УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					
					//Признаки заполнения реквизитов группы "Особые условия труда"
					УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					
					//Признаки заполнения реквизитов группы "Исчисляемый стаж"
					УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					
					//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
					УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
					УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
					ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					
					//Признаки заполнения реквизитов группы "ВыслугаЛет"
					УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					
					
					//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
					
					Если НЕ ЭтоОсновнаяЗапись тогда
						СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					КонецЕсли;	 
					
					// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
					
					Если УказаныТерриториальныеУсловия тогда
						ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаныОсобыеУсловияТруда тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаноОснованиеВыслугиЛет тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	
					
					//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
					
					КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					
					//Определим, к какому списку принадлежит код позиции
					НазваниеСписка ="";
					Если УказанКодПозицииСписка тогда 
						
						Если НЕ УказаныОсобыеУсловияТруда тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
						
						ДлинаКПС = СтрДлина(КПС);
						
						Если (ДлинаКПС=8)или(ДлинаКПС=14) тогда
							
							Первые2СимволаКПС = Лев(КПС,2);
							Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") тогда
								НазваниеСписка = "Список№1";
							ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") тогда
								НазваниеСписка = "Список№2";
							Иначе	
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли (ДлинаКПС=5) тогда
							НазваниеСписка = "ПрочиеСписки";
						Иначе	
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;//УказанКодПозицииСписка	 
					
					Если УказаныОсобыеУсловияТруда тогда
						
						//Проверки на возможные коды списков для конкретных условий труда
						
						КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Первые8СимволовКПС = Лев(КПС,8);
						НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						
						Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 тогда
							Если (НазваниеСписка <> "Список№1") тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 тогда
							
							Если (НЕ УказанКодПозицииСписка) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если (НазваниеСписка = "Список№1") тогда
								Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  тогда
									СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
								КонецЕсли;	
							ИначеЕсли (НазваниеСписка <> "Список№2") тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						Иначе
							//Для остальных кодов условий труда КПС указываться не должен
							Если УказанКодПозицииСписка тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;//УказаныОсобыеУсловияТруда	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
					
					УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					
					Если УказаноОснованиеВыслугиЛет тогда
						
						КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						
						УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						
						//Медицинские работники
						Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) тогда
							
							Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ УказанТолькоТретийПараметр тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Педагогические работники	
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД тогда
							
							Если УказанПараметр2 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК тогда
							
							Если (УказанПараметр2) или (УказанПараметр3) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Летчики
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)тогда
							
							Если  УказанПараметр3 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
							КонецЕслИ;	
							
							//Парашютисты	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) тогда	
							
							Если (УказанПараметр2) ИЛИ (УказанПараметр3) тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Управление воздушным движением и  инженерно-технический состав 	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) тогда
							
							Если  УказанПараметр3 тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							//Прочие коды выслуги лет	
						Иначе
							Если ПараметрыУказаны тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
					Иначе
						Если ПараметрыУказаны тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
					
					Если УказанТретийПараметрИсчисляемогоСтажа тогда
						Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						Иначе
							Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
								| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							Если (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") И ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
								|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли; 
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
					
					Если ЗаданаГруппаФОВ тогда
						Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)  тогда
							СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						КонецЕсли;	
						
						Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ тогда
							
							Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 тогда
								СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 тогда
								СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							
							Лет = 0;
							Месяцев = 0;
							Дней = 0;
							ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
							ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
							
							Если (ФОВДляСравнения > КалендарноеВремя) тогда
								СтрОшибка = "Указанное фактически-отработаннное время превышает календарное время!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	
						КонецЕсли;	 
						
					КонецЕсли;	 
					
					//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
					
					//Запомним для следующей итерации
					ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
					
				КонецЦикла;//Цикл по записям стажа текущего физлица за год
				
			КонецЦикла;//Цикл по физлицам
		КонецЦикла;//Цикл по годам 
	КонецЦикла;//Цикл по обособленным подразделениям
	
	//Структура
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет авторасчет стажа для формы СЗВ4
Функция СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, Год, СписокФизЛицТекст = "", МассивФизЛиц = Неопределено) Экспорт

	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода);
	Запрос.УстановитьПараметр("КонецГода", КонецГода);
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода + 1);
	Запрос.УстановитьПараметр("Организация", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ПустыеУсловияТруда", Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	
	// ПериодыПостоянстваНазначенийТекст
	// Выборка периодов постоянства назначения физлица в организации
	
	ПериодыПостоянстваНазначенийТекст = "
	|ВЫБРАТЬ
	|	ДатыНазначений1.ФизЛицо,
	|	ДатыНазначений1.ПодразделениеОрганизации,
	|	ДатыНазначений1.Должность,
	|	ДатыНазначений1.Период КАК ДатаС,
	|	МИНИМУМ(ЕСТЬNULL(ДатыНазначений2.Период,&НачалоСледующегоГода)) КАК ДатаПо
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацииСрезПоследних.ФизЛицо КАК ФизЛицо,
	|		&НачалоГода КАК Период,
	|		РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|		РаботникиОрганизацииСрезПоследних.Приказ КАК Приказ,
	|		РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		РаботникиОрганизацииСрезПоследних.Должность КАК Должность
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоГода, Организация = &ГоловнаяОрганизация И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ Приказ.ВидЗанятости ЕСТЬ NULL) " + СписокФизЛицТекст + ") КАК РаботникиОрганизацииСрезПоследних
	|	
	|	ГДЕ
	|		РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация И 
	|		РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> &Увольнение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|		РаботникиОрганизации.Период,
	|		РаботникиОрганизации.Организация,
	|		РаботникиОрганизации.Приказ,
	|		РаботникиОрганизации.ПодразделениеОрганизации,
	|		РаботникиОрганизации.Должность
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	
	|	ГДЕ
	|		(РаботникиОрганизации.Приказ.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ РаботникиОрганизации.Приказ.ВидЗанятости ЕСТЬ NULL) " + ?(ПустаяСтрока(СписокФизЛицТекст),"",СтрЗаменить(СписокФизЛицТекст,"ФизЛицо","РаботникиОрганизации.ФизЛицо")) + " И
	|		РаботникиОрганизации.Организация = &ГоловнаяОрганизация И
	|		РаботникиОрганизации.ОбособленноеПодразделение = &Организация И 
	|		РаботникиОрганизации.Период > &НачалоГода И
	|		РаботникиОрганизации.Период < &НачалоСледующегоГода И
	|		(РаботникиОрганизации.ПричинаИзмененияСостояния <> &Увольнение)) КАК ДатыНазначений1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|		ПО ДатыНазначений2.Физлицо = ДатыНазначений1.ФизЛицо И ДатыНазначений2.Организация = ДатыНазначений1.Организация И ДатыНазначений2.Приказ = ДатыНазначений1.Приказ И ДатыНазначений2.Период > ДатыНазначений1.Период И ДатыНазначений2.Период < &НачалоСледующегоГода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНазначений1.ФизЛицо,
	|	ДатыНазначений1.ПодразделениеОрганизации,
	|	ДатыНазначений1.Должность,
	|	ДатыНазначений1.Период";
	
	// Добавим условия труда из штатного расписания и терреториальные условия организаций к периодам постоянства
	ДанныеСтажаТекст = "
	|ВЫБРАТЬ 
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ПериодыПостоянства.ДатаС КАК ДатаНачалаПериода, 
	|	ДОБАВИТЬКДАТЕ(ПериодыПостоянства.ДатаПо , День, -1) КАК ДатаОкончанияПериода, 
	|	ПериодыПостоянства.ПодразделениеОрганизации.Владелец.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловия
	|ИЗ 
	|	( " + ПериодыПостоянстваНазначенийТекст + ") КАК ПериодыПостоянства
	|
	|УПОРЯДОЧИТЬ ПО ФизЛицо, ДатаНачалаПериода
	|";
	
	Запрос.Текст = ДанныеСтажаТекст;

	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи непрерывны (идут друг за другом по времени)
			// и совподают параметры стажа
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия  
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли; 
		Н = Н - 1;	
	КонецЦикла; 
	
	Возврат ТаблицаСтажа;
	
КонецФункции

