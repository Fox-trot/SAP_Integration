// Выполняется списание номенклатуры по налоговому и бухгалтерскому учетам.
//
// Параметры
//  ТаблицаДокумента - таблица с данными, которые необходимы для выполнения списания номенклатуры.
//  ОтражатьВБухгалтерскомУчете – определяет должно ли выполнятся списания для целей бухгалтерского учета.
//
Процедура ДвижениеПартийТоваров(ТаблицаДокумента = Неопределено, ОтражатьПоБУ = Истина,  Отказ = Ложь, Партия = Неопределено, Содержание = "Списаны ТМЦ") Экспорт

	ТаблицаСписания = ТаблицаДокумента;

	Если ТаблицаДокумента.Количество() > 0 Тогда

		ДокументМоментВремени = Новый МоментВремени(ТаблицаДокумента[0].Регистратор.Дата, ТаблицаДокумента[0].Регистратор.Ссылка);

		ВыполнитьСписание(ТаблицаСписания, ДокументМоментВремени, ОтражатьПоБУ,   Отказ, Партия, Содержание);

	КонецЕсли;

КонецПроцедуры // ДвижениеПартийТоваров()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров,  Отказ)

	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладахБУ"];
	
	// Переменная определяет списывать номенклатуру исходя из стоимости остатка
	// номенклатуры на счете или по указанной в параметрах стоимости.
	СписыватьПоУказаннойСтоимости = Ложь;
	УказаннаяСтоимость = 0;

	СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	СтрокаДокумента.СписанныеПартииБУ = ПустаяТаблицаСписанныхПартий();
	ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартииБУ;
		
	// Если стоимость списания указана, то списывать надо по указанной стоимости.
	СписыватьПоУказаннойСтоимости = СтрокаДокумента.СписыватьПоУказаннойСтоимости;
	
	Если СписыватьПоУказаннойСтоимости Тогда
		УказаннаяСтоимость = СтрокаДокумента.СуммаБезНДС;
	КонецЕсли; 


	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;

	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда

		// Если указана конкретная партия и на счете учета ведется
		// партионный учет, то в структура отбора добавим партию.
		ОтборПоДокументуОприходования = Неопределено;
		Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
			Если (НаСчетеВедетсяПартионныйУчет(СчетУчета) И ВедетсяПартионныйУчет(ПолучитьПараметрыУчетнойПолитики(СтрокаДокумента.ДокументОприходования.Дата, Отказ, СтрокаДокумента.Организация)))
				Тогда
				ОтборПоДокументуОприходования = СтрокаДокумента.ДокументОприходования;
			КонецЕсли;
		КонецЕсли;

		// Если указан конкретный договор и на счете учета ведется
		// партионный учет, то в структуру отбора добавим договор поставщика.
		ОтборПоДоговоруПостащика = Неопределено;
		Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДоговорПоставщика) Тогда
			Если (НаСчетеВедетсяПартионныйУчет(СчетУчета) И ВедетсяПартионныйУчет(ПолучитьПараметрыУчетнойПолитики(СтрокаДокумента.Регистратор.Дата, Отказ, СтрокаДокумента.Организация)))
				Тогда
				ОтборПоДоговоруПостащика = СтрокаДокумента.ДоговорПоставщика;
			КонецЕсли;
		КонецЕсли;
		
		СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБУ"];


		// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		ПрямойОбход =  СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБУ"];
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);

		Для индекс = 0 по ПартийПоСтроке Цикл
			
			Если ПрямойОбход Тогда
				СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			Иначе
				СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
			КонецЕсли;
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтборПоДокументуОприходования <> Неопределено Тогда
				Если СтрокаПартии.ДокументОприходования <> ОтборПоДокументуОприходования Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если (ОтборПоДоговоруПостащика <> Неопределено) И (НЕ ЗначениеНеЗаполнено(СтрокаПартии.ДокументОприходования)) Тогда
				МетаданныеДокумента = СтрокаПартии.ДокументОприходования.Метаданные();
				Если ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) 
					И (НЕ ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
					Если СтрокаПартии.ДокументОприходования.ДоговорКонтрагента <> ОтборПоДоговоруПостащика Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 

			// Склад, если ведется суммовой учет по складам
			Если ВедетсяСуммовойУчетПоСкладам(СчетУчета) Тогда

				Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
				   И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам

					Продолжить;

				КонецЕсли;

			КонецЕсли;

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			Количество = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Стоимость  = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			
			Если СписыватьПоУказаннойСтоимости Тогда // списывать по стоимост, указанной в параметрах
				Стоимость = Окр(УказаннаяСтоимость  * Количество / КоличествоОсталосьПогасить,2,1);
				УказаннаяСтоимость = УказаннаяСтоимость - Стоимость;
				
			Иначе  // списывать исходы из стоиммостного остатка номенклатуры на складе
			//	Стоимость = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;

			СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Стоимость;
		

			Если СтрокаДокумента.КорСчетСписанияБУ.Родитель<>ПланыСчетов.Хозрасчетный.НайтиПоКоду("0100") Тогда
				Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
				Проводка.СчетКт = СчетУчета;
				
				// Балансовый счет учета не может корреспондировать с забалансовым
				Если СтрокаДокумента.КорСчетСписанияБУ.Забалансовый = СчетУчета.Забалансовый Тогда
					Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
					
					Если НаСчетеВедетсяПартионныйУчет(Проводка.СчетДт) Тогда
						Проводка.СубконтоДт.Партии = СтрокаПартии.ДокументОприходования;
					КонецЕсли;
					//Если НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетДт) Тогда
					//	Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
					//КонецЕсли;
					
				КонецЕсли;
				
				ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
				СтрокаДокумента.КорСубконтоСписанияБУ1,
				СтрокаДокумента.КорСубконтоСписанияБУ2,
				СтрокаДокумента.КорСубконтоСписанияБУ3,
				СтрокаПартии.ДокументОприходования,,);
				
				//Если НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетКт) Тогда
				//	Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
				//КонецЕсли;
				Проводка.Сумма = Стоимость;
				
				Если Проводка.СчетДт.Количественный Тогда
					Проводка.КоличествоДт = Количество;
				КонецЕсли;
				
				Если Проводка.СчетКт.Количественный Тогда
					Проводка.КоличествоКт = Количество;
				КонецЕсли;
				
				Если Проводка.СчетДт.Валютный Тогда
					Если СтрокаДокумента.Сумма = СтрокаДокумента.СуммаВал Тогда
						Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
						Проводка.ВалютнаяСуммаДт = Стоимость;
					Иначе
						Если (НЕ ЗначениеНеЗаполнено(СтрокаДокумента.ДоговорКонтрагента)) И (ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							Проводка.ВалютаДт = СтрокаДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = ?(СтрокаДокумента.Сумма = 0, Стоимость, Стоимость * СтрокаДокумента.СуммаВал / СтрокаДокумента.Сумма);
						Конецесли;
					КонецЕсли;
				КонецЕсли;
				
				
				Если Проводка <> Неопределено Тогда
					Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
					Проводка.Организация = СтрокаДокумента.Организация;
				КонецЕсли;
			Иначе
				
				//Дт 0820
				Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
				Проводка.СчетКт = СчетУчета;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("0820");
				Проводка.КоличествоДт = Количество;
				
				ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
				СтрокаДокумента.КорСубконтоСписанияБУ1,
				СтрокаДокумента.КорСубконтоСписанияБУ2,
				СтрокаДокумента.КорСубконтоСписанияБУ3,
				СтрокаПартии.ДокументОприходования,,);
				
				Проводка.Сумма = Стоимость;
				
				Если Проводка.СчетКт.Количественный Тогда
					Проводка.КоличествоКт = Количество;
				КонецЕсли;
				
				Если Проводка <> Неопределено Тогда
					Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
					Проводка.Организация = СтрокаДокумента.Организация;
				КонецЕсли;
				
				
				//Кт 0820
				Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("0820");
				Проводка.КоличествоКт = Количество;
				
				// Балансовый счет учета не может корреспондировать с забалансовым
				Если СтрокаДокумента.КорСчетСписанияБУ.Забалансовый = СчетУчета.Забалансовый Тогда
					Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
				КонецЕсли;
				
				ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
				СтрокаДокумента.КорСубконтоСписанияБУ1,
				СтрокаДокумента.КорСубконтоСписанияБУ2,
				СтрокаДокумента.КорСубконтоСписанияБУ3,
				СтрокаПартии.ДокументОприходования,,);
				
				Проводка.Сумма = Стоимость;
				
				Если Проводка.СчетДт.Количественный Тогда
					Проводка.КоличествоДт = Количество;
				КонецЕсли;
				
				Если Проводка <> Неопределено Тогда
					Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
					Проводка.Организация = СтрокаДокумента.Организация;
				КонецЕсли;
			КонецЕсли;
		
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			СтрокаСписаннаяПартия.Количество    = Количество;
			СтрокаСписаннаяПартия.СуммаСписания = Стоимость;
			//СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);

			СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;

		КонецЦикла;

	КонецЕсли;
	
	// Не списанное количесвто добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
		//СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);
		
		СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;

	КонецЕсли;

	ОтключитьКонтрольОстатков = СтруктураПараметров.ОтключитьКонтрольОстатков;
	
	Если ((КоличествоОсталосьПогасить > 0) И (ОтключитьКонтрольОстатков) И (НЕ СтрокаДокумента.СчетУчетаБУ.Забалансовый)) или 
		(НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета) Тогда
		
		Количество = КоличествоОсталосьПогасить;
		
		Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
		Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
		Проводка.СчетКт = СчетУчета;
		
		Если СчетУчета.Забалансовый = СтрокаДокумента.КорСчетСписанияБУ.Забалансовый Тогда
			Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
		СтрокаДокумента.КорСубконтоСписанияБУ1,
		СтрокаДокумента.КорСубконтоСписанияБУ2,
		//СтрокаДокумента.КорСубконтоСписанияБУ3,
		,,);
		
		Проводка.Сумма = 0;
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = Количество;
		КонецЕсли;
		
		
		Если Проводка <> Неопределено Тогда
			Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
			Проводка.Организация = СтрокаДокумента.Организация;
		КонецЕсли;
		
	//ИначеЕсли КоличествоОсталосьПогасить > 0 И НЕ ((Учет = "Нал") И (СтрокаДокумента.СчетУчетаБУ.Забалансовый)) Тогда

	//	СообщитьОбОшибке(""+Учет+". учет. Строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
	//	+ "Не списано " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения 
	//	+ " товара " + СтрокаДокумента.Номенклатура + ", счет учета " + СчетУчета, "");

	//	Отказ = Истина;

	КонецЕсли;
		
КонецПроцедуры // СписаниеСоСклада()

//Процедура формирует проводки по партионному учету
//
Процедура ВыполнитьСписание(ТаблицаСписания, МоментКон, ОтражатьПоБУ = Истина,  Отказ, Партия, Содержание) Экспорт

	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);                           	
	СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(СтруктураПараметров.Организация, СтруктураПараметров.МоментКон));	
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", ПроводитьДокументПоРазделуУчета(СтруктураПараметров.Организация, Перечисления.РазделыУчета.ОценкаМПЗ, СтруктураПараметров.МоментКон.Дата));
	
	Если ОтражатьПоБУ Тогда
		СтруктураПараметров.Вставить("СпособОценкиБУ", Строка(УчетнаяПолитика("СпособОценкиМПЗ", "БУ", СтруктураПараметров.Организация, СтруктураПараметров)));
	КонецЕсли;

	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);

	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаБУ");
	УдалитьПовторяющиесяЭлементы(МассивСчетовУчетаБУ);


	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	УдалитьПовторяющиесяЭлементы(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	УдалитьПовторяющиесяЭлементы(МассивОрганизаций);

	ДоговорКонтрагент = ТаблицаСписания[0].ДоговорКонтрагента;
	Если ЗначениеНеЗаполнено(ДоговорКонтрагент) Тогда
		Контрагент = Неопределено;
		СтрокаТаблицыСписания = ТаблицаСписания[0];
		Для Индекс = 1 По 3 Цикл
			Если НЕ ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
				Если ТипЗнч(СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)]) = Тип("СправочникСсылка.Контрагенты") 
					И НЕ ЗначениеНеЗаполнено(СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)]) Тогда
					Контрагент = СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Контрагент = ДоговорКонтрагент.Владелец;
	КонецЕсли; 

	Если ОтражатьПоБУ Тогда
		СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладахБУ", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров,  МассивОрганизаций, МассивСчетовУчетаБУ, МассивНоменклатуры, МассивСкладов, Контрагент, Партия, ДоговорКонтрагент));
		
		// Добавим колонку в которой будут отражаться списанные по БУ партии
		Если ТаблицаСписания.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("СписанныеПартииБУ");
		КонецЕсли;
		
		// Добавим колонку с договором поставщика
		Если ТаблицаСписания.Колонки.Найти("ДоговорПоставщика") = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("ДоговорПоставщика");
		КонецЕсли;
	КонецЕсли;
	

	СтруктураПараметров.Вставить("УчетнаяПолитика",    ПолучитьУчетнуюПолитику(ТаблицаСписания[0].Организация, МоментКон));
	СтруктураПараметров.Вставить("Контрагент",         Контрагент);
	СтруктураПараметров.Вставить("СодержаниеПроводки", Содержание);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ТаблицаСписания[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ОтключитьКонтрольОстатков",   Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить());

	// Проверим - все ли нужные нам колонки есть на месте.
	Для Индекс = 1 По 3 Цикл

		Если ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("КорСубконтоСписанияБУ" + Индекс);
		КонецЕсли;
	КонецЦикла;

	
	Если ТаблицаСписания.Колонки.Найти("СписыватьПоУказаннойСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписыватьПоУказаннойСтоимости", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл

		СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет повторяющиеся значения из массива
//
// Параметры:
//	Массив
//
Процедура УдалитьПовторяющиесяЭлементы(Массив) Экспорт
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		ОписаниеТиповСправочники = Справочники.ТипВсеСсылки();
		ОписаниеТиповДокументы = Документы.ТипВсеСсылки();
		ОписаниеТиповПВХ = ПланыВидовХарактеристик.ТипВсеСсылки();
		ОписаниеТиповПланыСчетов = ПланыСчетов.ТипВсеСсылки();
		ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки();
		БылоНеопределено = Ложь;
		
		Если ТипЗнч(Массив) = Тип("Массив") Тогда
			
			УжеВМасссиве = Новый Соответствие;
			
			КолвоЭлементовВМассиве = Массив.Количество();
			
			Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
				ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс];
				
				Если ЭлементМассива = Неопределено Тогда
					Если БылоНеопределено Тогда
						Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
					Иначе
						БылоНеопределено = Истина;					
					КонецЕсли;
					Продолжить;
				КонецЕсли;				
				
				ТипЭлемента = ТипЗнч(ЭлементМассива);


				
				Если (ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)
					ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)
					ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)
					ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)
					ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента)) Тогда
					
					ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

				Иначе
					
					ИДЭлемента = ЭлементМассива;
					
				КонецЕсли;
				
				Если УжеВМасссиве[ИДЭлемента] = Истина Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					УжеВМасссиве.Вставить(ИДЭлемента, Истина);
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяПолитика(ИмяПараметра, Учет, Организация, СтруктураПараметров)

	СтрокаУП  = Неопределено;
	Результат = Ложь;

	СтрокаУП = СтруктураПараметров.УчетнаяПолитика.Найти(Организация);

	Если СтрокаУП <> Неопределено Тогда
		Результат = СтрокаУП[ИмяПараметра + Учет];

	Иначе
		СообщитьОбОшибке("Не задан параметр учетной политики """ + ИмяПараметра + """ "+ Учет + " учета " + Организация + "!");
		СтруктураПараметров.Вставить("Отказ", Истина);

	КонецЕсли;

	Возврат Результат;

КонецФункции // УчетнаяПолитика()

Функция ПолучитьУчетнуюПолитику(Организация, МоментКон) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МоментКон",   МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.СпособОценкиМПЗ КАК СпособОценкиМПЗБУ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет.СрезПоследних(&МоментКон, Организация = &Организация) КАК УчетнаяПолитикаБухгалтерскийУчетСрезПоследних
	|		ПО (УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Организация = Организации.Ссылка)
	|ГДЕ
	|	Организации.Ссылка = &Организация";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьУчетнуюПолитику()

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = СтрокаВидаСубконто.Суммовой;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	ПартионныйУчет = Ложь;
	
	Если ЗначениеЗаполнено(Счет) Тогда
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партия, "ВидСубконто");
		Если СтрокаВидаСубконто <> Неопределено Тогда
			ПартионныйУчет = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // НаСчетеВедетсяПартионныйУчет()

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет)

	УчетПоКонтрагентам = Ложь;
	
	Если ЗначениеНеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоКонтрагентам = Истина;
		КонецЕсли;

		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоНалоговыеУСН.Контрагенты, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоКонтрагентам = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат УчетПоКонтрагентам;

КонецФункции // НаСчетеВедетсяУчетПоКонтрагентам()

Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, ЗначениеСубконто2, ЗначениеСубконто3)

	Если НЕ ЗначениеНеЗаполнено(ЗначениеСубконто1) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто1)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);

	ИначеЕсли НЕ ЗначениеНеЗаполнено(ЗначениеСубконто2) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто2)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);

	ИначеЕсли НЕ ЗначениеНеЗаполнено(ЗначениеСубконто3) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто3)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);

	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура ЗаполнитьСубконто(Проводка, СтрокаДокумента, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено) Экспорт

	// Заполняем дебет:
	Если НЕ ЗначениеНеЗаполнено(Проводка.СчетДт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				Если НЕ ЗначениеНеЗаполнено(СтрокаДокумента.Склад) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СубконтоДт1, СубконтоДт2, СубконтоДт3);

		КонецЦикла;

	КонецЕсли;

	// Заполняем кредит
	Если НЕ ЗначениеНеЗаполнено(Проводка.СчетКт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеНеЗаполнено(СубконтоДт1) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт1);
				ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеНеЗаполнено(СубконтоДт2) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт2);
				ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеНеЗаполнено(СубконтоДт3) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт3);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СубконтоКт1, СубконтоКт2, СубконтоКт3);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконто()

// Выполняется сортировка списка счетов на счета, по которм вдется разный)
// суммовой учет (в части аналитики).
//
// Параметры
//  СчетаУчета  – Список значений - список счетов, который необходимо рассортировать.
//  СчетаУчетаН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет только по номенклатуре.
//  СчетаУчетаНС – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по складам.
//  СчетаУчетаНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по партиям.
//  СчетаУчетаНСП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, складам и партиям.
//  СчетаУчетаКН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и контрагентам.
//  СчетаУчетаКНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, контрагентам и партиям.
//
Процедура СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНС, СчетаУчетаНП, СчетаУчетаНСП)//, СчетаУчетаКН, СчетаУчетаКНП, СчетаУчетаНПО)

	Для каждого Счет Из СчетаУчета Цикл

		Если ВедетсяСуммовойУчетПоСкладам(Счет) И НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНСП.Добавить(Счет);

		ИначеЕсли ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС.Добавить(Счет);

		ИначеЕсли НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНП.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует запрос по остаткам партий товаров на конец рабочего  периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров,  Организации, СчетаУчета, Номенклатура = Неопределено, Склады = Неопределено, Контрагент = Неопределено, Партия = Неопределено, Договор = Неопределено) Экспорт

	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;
	
	// Сортировка счетов учета
	СчетаУчетаН   = Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНСП = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, складам и партиям
	//СчетаУчетаКН  = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, и номенклатуре
	//СчетаУчетаКНП = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, номенклатуре и партиям
	//СчетаУчетаНПО = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре партиям и отгрузкам

	СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНС, СчетаУчетаНП, СчетаУчетаНСП);//, СчетаУчетаКН, СчетаУчетаКНП, СчетаУчетаНПО);

	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоПартии       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
		//ВидСубконтоОтгрузки     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;


	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ВидСубконтоНоменклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНС.Добавить(ВидСубконтоСклады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНП.Добавить(ВидСубконтоПартии);
	
	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНСП.Добавить(ВидСубконтоПартии);
	ВидысубконтоНСП.Добавить(ВидСубконтоСклады);
	




	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон",       СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("СчетаУчетаН",     СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",    СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",    СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНСП",   СчетаУчетаНСП);
	Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
	Запрос.УстановитьПараметр("Склады",          Склады);
	Запрос.УстановитьПараметр("ВидысубконтоН",   ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",  ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",  ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидысубконтоНСП", ВидысубконтоНСП);
	Запрос.УстановитьПараметр("ПустойСклад",     Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",    Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",  "");
	Запрос.УстановитьПараметр("Контрагент",      Контрагент);
	Запрос.УстановитьПараметр("Договор",	     Договор);
	Запрос.УстановитьПараметр("Партия",      	 Партия);
	Запрос.УстановитьПараметр("ПустаяДата",      Дата("00010101"));

	Текст = "";

	Если СчетаУчетаН.Количество() > 0 Тогда

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,";

		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость";
	

		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаН), &ВидыСубконтоН,";
		

		Текст = Текст + "Субконто1 В (&Номенклатура) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,";

		Текст = Текст + "
		|	Остатки.Организация";
	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,";

		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость";


		Текст = Текст + "
    	|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС,";

		Текст = Текст + "Субконто1 В (&Номенклатура) И Субконто2 В (&Склады) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,";

		Текст = Текст + "
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто2.Дата КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,";

		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость";

		Текст = Текст + "
	    |ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП,";

		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(ЗначениеНеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2.Дата,
		|	Остатки.Субконто2,";

		Текст = Текст + "
		|	Остатки.Организация";

	КонецЕсли;
	
	Если СчетаУчетаНСП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто2.Дата КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,";

		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость";

		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНСП), &ВидысубконтоНСП,";

		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(ЗначениеНеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Склады) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2.Дата,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,";

		Текст = Текст + "
		|	Остатки.Организация";

	КонецЕсли;
	
	Запрос.Текст = Текст;
    
	СпособОценки = СтруктураПараметров["СпособОценкиБУ"];
	Если СпособОценки = "ЛИФО" Тогда
		НапрДата = "Убыв";
	ИначеЕсли СпособОценки = "ФИФО" Тогда
		НапрДата = "Возр";
	Иначе
		НапрДата = "";
	КонецЕсли; 
	
	Запрос.Текст = Текст + "		
	|УПОРЯДОЧИТЬ ПО Номенклатура, ДокументОприходованияДата " + НапрДата + "
	|ИТОГИ ПО Номенклатура";
    
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьТаблицуПартийНаСкладах()

// Создается пустая таблица, в которую будут в дальнейшем записыватся списанные партии.
//
Функция ПустаяТаблицаСписанныхПартий() Экспорт

	ТаблицаСписанныхПартий = Новый ТаблицаЗначений;
	ТаблицаСписанныхПартий.Колонки.Добавить("Партия");
	ТаблицаСписанныхПартий.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписания", ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаСписанныхПартий.Колонки.Добавить("СчетУчетаБУ");
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции // ПустаяТаблицаСписанныхПартий()

Функция ПолучитьОбъектПоТипу(ТипСтр, Субконто1, Субконто2, Субконто3) Экспорт

	ИскомыйТип = Тип(ТипСтр);
	ИскомыйОбъект = Неопределено;
	
	Если ТипЗнч(Субконто1) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто1;
		
	ИначеЕсли ТипЗнч(Субконто2) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто2;
		
	ИначеЕсли ТипЗнч(Субконто3) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто3;
	КонецЕсли; 	
	
	Возврат ИскомыйОбъект;

КонецФункции // ПолучитьОбъектПоТипу()

Процедура ВыполнитьПереоценку(ТаблицаСписания) Экспорт
	
	МоментКон = Новый МоментВремени(ТаблицаСписания[0].Регистратор.Дата, ТаблицаСписания[0].Регистратор.Ссылка);
	
	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Бух = Истина;
	
	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);                           	
	СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(СтруктураПараметров.Организация, СтруктураПараметров.МоментКон));	
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", ПроводитьДокументПоРазделуУчета(СтруктураПараметров.Организация, Перечисления.РазделыУчета.ОценкаМПЗ, СтруктураПараметров.МоментКон.Дата));
	
	СтруктураПараметров.Вставить("СпособОценкиБух", Строка(УчетнаяПолитика("СпособОценкиМПЗ", "Бух", СтруктураПараметров.Организация, СтруктураПараметров)));
	
	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);

	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаБУ");
	УдалитьПовторяющиесяЭлементы(МассивСчетовУчетаБУ);

	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	УдалитьПовторяющиесяЭлементы(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	УдалитьПовторяющиесяЭлементы(МассивОрганизаций);

	СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладахБух", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, МассивОрганизаций, МассивСчетовУчетаБУ, МассивНоменклатуры, МассивСкладов, , , ));
		
	// Добавим колонку в которой будут отражаться списанные по БУ партии
	Если ТаблицаСписания.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписанныеПартииБУ");
	КонецЕсли;

	СтруктураПараметров.Вставить("УчетнаяПолитика",    ПолучитьУчетнуюПолитику(ТаблицаСписания[0].Организация, МоментКон));
		
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл

		// Списание со склада
		ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров);

	КонецЦикла;
КонецПроцедуры

Процедура ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров)

	Учет = "Бух";
	
	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладах"];
	
	СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	СтрокаДокумента.СписанныеПартииБУ = ПустаяТаблицаСписанныхПартий();
	ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартииБУ;

	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;

	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда

		// Полученную таблицу отсортируем в соответствии со стратегией
		//Если КомиссионныйТовар(СчетУчета) Тогда
		//	// Для товаров, принятых на комиссию, в качестве стратегиии
		//	// списания устанавливается стратегия - ФИФО.
		//	СпособОценкиМПЗ = "ФИФО";
		//	
		//Иначе
			СпособОценкиМПЗ = СтруктураПараметров["СпособОценки" + Учет];

		//КонецЕсли;

		// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		ПрямойОбход =  СпособОценкиМПЗ = СтруктураПараметров["СпособОценки" + Учет];
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);

		Для индекс = 0 по ПартийПоСтроке Цикл
			
			Если ПрямойОбход Тогда
				СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			Иначе
				СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
			КонецЕсли;
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 

			// Склад, если ведется суммовой учет по складам
			Если ВедетсяСуммовойУчетПоСкладам(СчетУчета) Тогда

				Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
				   И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам

					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			Количество = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Стоимость  = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
            СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Стоимость;
		
			//Формирование проводок Бух
			
			СуммаПереоценки = (Количество * СтрокаДокумента.ЦенаВРознице) - Стоимость;
			
			Если СуммаПереоценки <> 0 Тогда
				Проводка 			 = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
				Проводка.Организация = СтрокаДокумента.Организация;
				Проводка.Содержание  = "Переоценка товаров в рознице";
				
				Проводка.СчетДт      = СчетУчета;
				Проводка.СчетКт      = СтрокаДокумента.КорСчетСписанияБУ;
				
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтрокаДокумента.Склад);
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтрокаДокумента.Склад);
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  СтрокаПартии.ДокументОприходования);
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  СтрокаПартии.ДокументОприходования);
				
				Проводка.Сумма       = СуммаПереоценки;
			КонецЕсли;
			
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			СтрокаСписаннаяПартия.Количество    = Количество;
			СтрокаСписаннаяПартия.СуммаСписания = Стоимость;
			//СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);

			СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
						
		КонецЦикла;

	КонецЕсли;
	
	// Не списанное количесвто добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
		//СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);
		
		СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
		
	КонецЕсли;
    	
КонецПроцедуры // СписаниеСоСклада()

Функция ТорговаяНаценкаНТТ(ДокументСсылка, Склад, РазделятьПоСтавкамНДС) Экспорт
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			ДокументСсылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Счет90", 			ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТН,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПС,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ОБ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2","")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиТН.Субконто2","")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТорговаяНаценкаАТТ(ДокументСсылка, Склад, Номенклатура) Экспорт
	
	РазделятьПоПартиям = НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			ДокументСсылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Счет90", 			ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТН,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПС,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ОБ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыДтКт.СубконтоКт3", "")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиТН.Субконто3", "")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
