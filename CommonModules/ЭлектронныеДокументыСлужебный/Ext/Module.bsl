////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - объект - владелец присоединенного файла,
//  Отказ           - булево - признак отказа от записи,
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа,
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление (снимем пометку) электронные документы, связанные с владельцем.
	Если Не Источник.ЭтоНовый() Тогда
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник.Ссылка, Источник.ПометкаУдаления);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ Не Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		МассивПакетовЭД = ПолучитьМассивПакетовЭД(Источник.Ссылка);
		Для каждого ПакетЭД Из МассивПакетовЭД Цикл
			ПроверитьНаличиеИУдалитьСостояниеДокумента(ПакетЭД);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ Не Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") Тогда
		РедактированиеРазрешено = Истина;
		ЭлектронныеДокументыПереопределяемый.ПроверитьВозможностьРедактированияОбъекта(Источник.Ссылка,
			РедактированиеРазрешено);
		Если НЕ РедактированиеРазрешено Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

Функция ПолучитьМассивПакетовЭД(Владелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПакетовЭД = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.ВладелецФайла = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПакетовЭД.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  	
	КонецЦикла;
	
	Возврат МассивПакетовЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", venkonОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Если Источник.Ссылка.Ответственный <> Источник.Ответственный ИЛИ Источник.Ссылка.Описание <> Источник.Описание Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 ИЛИ Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = venkonОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	
	ВерсияЭДОбновлена = Ложь;
	ПринудительнаяСменаСостоянияВерсии = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ВерсияФорматаПакета = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ОтклонениеАннулирования = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);

	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
		
		ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД
			И Не ЭтоОтветныйТитул(Источник.Ссылка);
			
		Если ОбновитьВерсию Тогда
			ВерсияЭДОбновлена = Истина;
			ЭлектронныеДокументыСлужебныйВызовСервера.venkonОбновитьВерсиюЭД(Источник.Ссылка, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

//<Raxx

// Только для внутреннего использования
Процедура venkonСохранитьВместеСЭЦП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	РезервноеИмяФайлаПодписи = "";
	ПолноеИмяФайла = venkonСохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, РезервноеИмяФайлаПодписи);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		venkonСохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			РезервноеИмяФайлаПодписи);
	КонецЕсли;

	// Подготовим превью ЭД
	Справочники.ЭДПрисоединенныеФайлы.ПолучитьПревьюЭД(ПрисоединенныйФайл, АдресКаталога, "preview");
	
КонецПроцедуры

//Raxx>

// Только для внутреннего использования
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  ПрофильНастроекЭДО - справочник-ссылка - ссылка на профиль настроек ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО = Неопределено) Экспорт
	
	Если Не ЭлектронныеДокументыПереопределяемый.ЕстьПравоПодписанияЭД() Тогда 
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("Ссылка");
		ПустаяТаблица.Колонки.Добавить("Отпечаток");
		Возврат ПустаяТаблица;	
	КонецЕсли;

	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = СертификатыЭЦП.Ссылка
		|ГДЕ
		|	ПрофильНастроекЭДОСертификаты.Ссылка = &ПрофильНастроекЭДО";
		ЗапросПоСертификатам.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ
		|	Истина";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|	И (СертификатыЭЦП.СписокПользователей.Пользователь = &ТекущийПользователь
		|			ИЛИ НЕ СертификатыЭЦП.ОграничитьДоступКСертификату)
		|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков))
		|	И НЕ СертификатыЭЦП.Отозван
		|	И НЕ СертификатыЭЦП.ПометкаУдаления";
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
		
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);

			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				
				ЗнакСравнения = "В";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
				
				
			Иначе
				
				ЗнакСравнения = "=";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
				
			КонецЕсли;
			
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД,
	|	СостоянияЭД.Комментарий
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	КомментарийРС = "";
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
		КомментарийРС     = ВыборкаПоРегистру.Комментарий;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество() > 0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);
	СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

Функция venkonПолучитьСостояниеЭДИзРегистра(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ";
	
	
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПакетЭД") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	СостоянияЭД.СсылкаНаОбъект = &ВладелецФайла";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	(СостоянияЭД.СсылкаНаОбъект.ВладелецФайла = &ВладелецФайла
		|		ИЛИ СостоянияЭД.СсылкаНаОбъект.ДокументУчета = &ВладелецФайла)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВладелецФайла", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураВерсииЭД.Вставить("СсылкаНаОбъект",     ВыборкаДетальныеЗаписи.СсылкаНаОбъект);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД",  ВыборкаДетальныеЗаписи.СостояниеВерсииЭД);
		СтруктураВерсииЭД.Вставить("ЭлектронныйДокумент", ВыборкаДетальныеЗаписи.ЭлектронныйДокумент);
		СтруктураВерсииЭД.Вставить("ДействияСНашейСтороны",    ВыборкаДетальныеЗаписи.ДействияСНашейСтороны);
		СтруктураВерсииЭД.Вставить("ДействияСоСтороныДругогоУчастника",  ВыборкаДетальныеЗаписи.ДействияСоСтороныДругогоУчастника);
		
	КонецЦикла;
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции


// Только для внутреннего использования
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			//<Raxx
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован; // НеСформирован
			//Raxx>
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Если СтрокиДействующихФорматов.Количество() Тогда
		Результат = СтрокиДействующихФорматов[СтрокиДействующихФорматов.Количество() - 1].ИдентификаторФормата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру сведений о формате.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ИдентификаторФормата	 - Строка - формат электронного документа.
// 
// Возвращаемое значение:
//  Структура - содержит данные о формате. Состав и типы ключей описываются в макете
//              Обработка.ЭлектронныеДокументы.ВерсииФорматовЭД.
//
Функция СведенияОФормате(ВидЭлектронногоДокумента, ИдентификаторФормата) Экспорт

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	ПараметрыОтбора.Вставить("ИдентификаторФормата", ИдентификаторФормата);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидаЭлектронногоДокумента.Количество() Тогда
		СтрокаФормата = СтрокиВидаЭлектронногоДокумента[СтрокиВидаЭлектронногоДокумента.Количество() - 1];
		
		Результат = Новый Структура;
		Для Каждого Колонка Из ТаблицаФорматов.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаФормата[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок описаны в макете Обработка.ЭлектронныеДокументы.ВерсииФорматовЭД.
//                    Дополняется служебной колонкой "Действует" типа Булево.
//
Функция ФорматыЭлектронныхДокументов() Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Результат = ЭлектронныеДокументыПовтИсп.СведенияОФорматахЭлектронныхДокументов();
	Если Результат.Колонки.Найти("Действует") = Неопределено Тогда
		Результат.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаФормата Из Результат Цикл
		// Проставим признак действия формата
		Если (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаНачалаДействия) 
				ИЛИ СтрокаФормата.ДатаНачалаДействия <= ТекущаяДата)
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаОкончанияДействия) 
				ИЛИ КонецДня(СтрокаФормата.ДатаОкончанияДействия) >= ТекущаяДата) Тогда
			СтрокаФормата.Действует = Истина;
		Иначе
			СтрокаФормата.Действует = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Проверяет форматы электронных документов в настройках на актуальность и при необходимости актуализирует их.
//
// Параметры:
//  НастройкиОбмена			 - Структура - см. функцию ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику;
//  СообщенияПользователю	 - Массив - содержит элементы типа СообщениеПользователю, которые нужно вывести по результатам
//                                      работы процедуры
//
Процедура АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, СообщенияПользователю = Неопределено) Экспорт

	Если НастройкиОбмена <> Неопределено И ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		ВидЭД = Неопределено;
		ВерсияФормата = Неопределено;
		
		Если НастройкиОбмена.Свойство("ВидЭД", ВидЭД) И НастройкиОбмена.Свойство("ВерсияФормата", ВерсияФормата) 
				И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(ВерсияФормата) Тогда
			ТаблицаФорматов = ФорматыЭлектронныхДокументов();
			СведенияОФормате = ТаблицаФорматов.НайтиСтроки(
				Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, ВерсияФормата));
				
			Если СведенияОФормате.Количество() И Не СведенияОФормате[0].Действует Тогда
				ПредставлениеСтарогоФормата = СведенияОФормате[0].ПредставлениеФормата;
				
				АктуальныйФормат = АктуальнаяВерсияФорматаЭД(ВидЭД);
				СведенияОНовомФормате = ТаблицаФорматов.НайтиСтроки(
					Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, АктуальныйФормат));
				ПредставлениеНовогоФормата = СведенияОНовомФормате[0].ПредставлениеФормата;
				
				НастройкиОбмена.Вставить("ВерсияФормата", АктуальныйФормат);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи, ДопПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТЗ_ПЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД,
		|ВладелецФайла, ТипЭлементаВерсииЭД, ТребуетсяИзвещение");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
						 
		// Поиск настройки ЭДО для исходящего пакета ЭД.
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
		ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
		КонецЕсли;
			
		Попытка
			Если Не ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
				ШаблонСообщения = НСтр("ru = 'В информационной базе не найдена настройка ЭДО с реквизитами:
				|идентификатор отправителя: %1;
				|идентификатор получателя:  %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			// Дополним параметры настройки ЭДО реквизитами 
			ПараметрыНастройкиЭДО.Вставить("ТипЭлементаВерсииЭД", РеквизитыЭД.ТипЭлементаВерсииЭД);
			ПараметрыНастройкиЭДО.Вставить("НаправлениеЭД", РеквизитыЭД.НаправлениеЭД);
			
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыНастройкиЭДО, РеквизитыЭД.ТребуетсяИзвещение);
			ПЭД.ВнешнийУИД = ЭД.ВнешнийУИД;
			//venkonСкопироватьГУИД(ПЭД, РеквизитыЭД.ВладелецФайла);
			ПЭД.ВладелецФайла = ЭД.ВладелецФайла;
			НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец      = РеквизитыЭД.ВладелецФайла;
			
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД, , ДопПараметры);
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

Функция НайтиПакетЭДПоВнешнемуУИДу(УИД, ПроверкаНаличияЭД = Ложь) Экспорт
	
	ПакетЭД = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.ВнешнийУИД = &УИД";
	
	Запрос.УстановитьПараметр("УИД", УИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПакетЭД = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если ПроверкаНаличияЭД И ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
			ПакетЭД = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПакетЭД;
	
КонецФункции

// Только для внутреннего использования
Функция venkonПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера, СтарыйФайлЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
												Конверт,
												Файл.ИмяБезРасширения,
												СтрЗаменить(Файл.Расширение,".", ""),
												ТекущаяДатаСеанса(),
												ТекущаяДатаСеанса(),
												АдресВоВременномХранилище,
												Неопределено,
												,
												Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
												
	Если СтарыйФайлЭД <> Неопределено Тогда
		СтруктураЭД = Новый Структура;									
		СтруктураЭД.Вставить("ВидЭД", СтарыйФайлЭД.ВидЭД);
		СтруктураЭД.Вставить("НаправлениеЭД", СтарыйФайлЭД.НаправлениеЭД);
		СтруктураЭД.Вставить("СуммаДокумента", СтарыйФайлЭД.СуммаДокумента);
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД, Ложь);
		
		// Скопируем подписи
		СкопироватьПодписи(ДобавленныйФайл, СтарыйФайлЭД);
		
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

Процедура СкопироватьПодписи(ЭДПриемник, ЭДИсточник)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	ТЧИсточник = ЭДИсточник.ЭлектронныеЦифровыеПодписи;
	
	Если ТЧИсточник.Количество() > 0 Тогда
		
		ОбъектПриемник = ЭДПриемник.ПолучитьОбъект(); 
		ТЧПриемник = ОбъектПриемник.ЭлектронныеЦифровыеПодписи;
		
		Для каждого СтрИсточник Из ТЧИсточник Цикл
			СтрПриемник = ТЧПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПриемник, СтрИсточник);
		КонецЦикла;
		
		ОбъектПриемник.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ЭлектронныеДокументы""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.venkonОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		
		// +aldo
		ЭД = ПакетЭД.ЭлектронныеДокументы[0];
		Если ТипЗнч(ЭД.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД")
			И ЭД.ЭлектронныйДокумент.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = ЭД.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий
					И ЭД.ЭлектронныйДокумент.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		// -aldo
		
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция НемедленнаяОтправкаЭД() Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОтправителя – строка с уникальный идентификатор отправителя,
//  ИДПолучателя - строка с уникальный идентификатор получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьПрофильНастроекЭДОПоОрганизации(Организация) Экспорт
	
	ПрофильНастроекЭДО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПрофильНастроекЭДО = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ПрофильНастроекЭДО;
	
КонецФункции

Функция НайтиКонтрагентаПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД,
			"ВидЭД,  Контрагент, Организация, ЭлектронныйДокументВладелец");
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, , СвойстваДокумента.ВидЭД);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = СвойстваДокумента.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = СвойстваДокумента.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = СвойстваДокумента.ВидЭД;
		КонецЕсли;
		
		Если СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СвойстваДокумента.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ВидЭДВладельца =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ЭлектронныйДокументВладелец, "ВидЭД");

			Если ВидЭДВладельца = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ ВидЭДВладельца = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭДВладельца = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				
				ВладелецДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ЭлектронныйДокументВладелец,
					"ЭлектронныйДокументВладелец");
					
				ВидЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецДокументВладелец,
					"ВидЭД");
				
			КонецЕсли;
			
			ПараметрыЭД.Вставить("ВидЭДВладельца", ВидЭДВладельца);
			
		КонецЕсли;
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОтправителя – строка с уникальный идентификатор отправителя,
//  ИДПолучателя - строка с уникальный идентификатор получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Организация,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭД,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30) КАК ВерсияФорматаПакета,
	|	ИСТИНА КАК ТребуетсяИзвещениеОПолучении
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА ПрофилиНастроекЭДО.Организация.ИНН = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА Контрагенты.ИНН = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
	|	И НЕ Контрагенты.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НомерВерсииЭД, ДатаФормированияЭДОтправителем,
		|НаправлениеЭД, ДатаСоздания, ДатаДокументаОтправителя, ВидЭД, НомерДокументаОтправителя, ТипЭлементаВерсииЭД");
	
	Версия = РеквизитыЭД.НомерВерсииЭД;
	Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И ЗначениеЗаполнено(РеквизитыЭД.ДатаФормированияЭДОтправителем) Тогда
		Версия = РеквизитыЭД.ДатаФормированияЭДОтправителем;
	ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И ЗначениеЗаполнено(РеквизитыЭД.ДатаСоздания) Тогда
		Версия = РеквизитыЭД.ДатаСоздания;
	КонецЕсли;
	ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
	ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" от " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
	ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		Представление = "" + РеквизитыЭД.ТипЭлементаВерсииЭД + ТекстДаты;
	ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
	ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		Представление = "" + РеквизитыЭД.ВидЭД+" от " + Формат(РеквизитыЭД.ДатаСоздания,"ДЛФ=D");
	ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Представление = "" + РеквизитыЭД;
	Иначе
		Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

//<Raxx

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция venkonОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Или СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВладелецФайла, ВидЭД");
		
		ТекущийСтатус = ПараметрыЭД.СтатусЭД;
		
		Если ТекущийСтатус = Перечисления.СтатусыЭД.Сформирован Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Сформирован;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отправлен;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Подписан Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Подписан;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Получен Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Получен;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Удален Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Удален;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Raxx>

// Определяет возможно ли без ошибки извлечь файлы из архива
// Проверяется максимальная длина полного имени файла в 255 символов
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив
//  ПапкаРаспаковки - папка, в которую будут извлечены данные
//  ИмяСоздаваемогоФайла - имя файла, который не может быть извлечен
//
// Возвращаемое значение:
//  Булево 
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

//<Raxx

// Выполняет получение новых электронных документов
// на основе заведенных соглашений об обмене.
//
Функция venkonПолучитьОбновленияЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПараметрыРаспаковки", Новый Массив);
	СтруктураВозврата.Вставить("МассивВозврата", Новый Массив);
	СтруктураВозврата.Вставить("ВызватьОповещение", Ложь);
	СтруктураВозврата.Вставить("Профили", Новый Массив);
	СтруктураВозврата.Вставить("ДанныеПоОтказаннымДокументам", Новый Массив);
	
	СтруктураВозврата.Вставить("КоличествоНовыхДокументов", 0);
	СтруктураВозврата.Вставить("КоличествоОбновленныхДокументов", 0);
	
	Профили = СтруктураВозврата.Профили;
	
	МассивВозврата = Новый Массив;
	
	СтруктураВозврата.МассивВозврата = МассивВозврата;
	
	//<Raxx
	ЭлектронныеДокументыВнутренний.ПолучитьОбновленияЭДVenkonЭДО(СтруктураВозврата);
	//Raxx>
		
	Если СтруктураВозврата.Свойство("ИдентификаторыЭДО") Тогда
		СтруктураВозврата.Вставить("ОбновитьНаличиеЭД", Истина);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

//Raxx>

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//  Контрагент или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Источник.Направление;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Организации")
		Или ТипИсточника = Тип("СправочникОбъект.Организации") Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		ДополнитьПараметрыЭД(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД)
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
	
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
	
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Если ПоверятьОбязательныеРеквизиты Тогда
		ТекстОшибки = "";
		СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД");
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			СтруктураОбязательныхПолей.Удалить("Контрагент");
		КонецЕсли;
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = Неопределено;
			Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Текст = НСтр("ru = 'Значение параметра <%1> не заполнено!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Не передан обязательный параметр <%1>!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа!
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	ПринудительнаяСменаСостоянияВерсии = Ложь;
	
	Если СтруктураЭД.Свойство("Автор") Тогда
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВерсияРегламентаЭДО") Тогда
		ФайлОбъект.ВерсияРегламентаЭДО = СтруктураЭД.ВерсияРегламентаЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВидЭД") Тогда
		ФайлОбъект.ВидЭД = СтруктураЭД.ВидЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда
		ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
		ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
		ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
		ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
		ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
		ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
		Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
			ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
			ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
	КонецЕсли;
	
	ИдентификаторыОснований = Неопределено;
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований", ИдентификаторыОснований) Тогда
		ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Очистить();
		Для Каждого СтрокаИдентификатора Из ИдентификаторыОснований Цикл
			НоваяСтрока = ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИдентификатора);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Изменил") Тогда
		ФайлОбъект.Изменил = СтруктураЭД.Изменил;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Контрагент") Тогда
		ФайлОбъект.Контрагент = СтруктураЭД.Контрагент;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Наименование") Тогда
		ФайлОбъект.Наименование = СтруктураЭД.Наименование;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
		ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
	ИначеЕсли СтруктураЭД.Свойство("ВладелецЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда
		ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерЭД") Тогда 
		ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Описание") Тогда
		ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
	Иначе
		ФайлОбъект.Описание = "";
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Организация") Тогда
		ФайлОбъект.Организация = СтруктураЭД.Организация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Ответственный") Тогда
		ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
		ФайлОбъект.Ответственный = АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
		ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
		ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
		ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
		ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ПричинаОтклонения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
		ФайлОбъект.ПрофильНастроекЭДО = СтруктураЭД.ПрофильНастроекЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Расширение") Тогда
		ФайлОбъект.Расширение = СтруктураЭД.Расширение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СтатусЭД") Тогда
		Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
			ПринудительнаяСменаСостоянияВерсии = Истина;
		КонецЕсли;
		ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОбновитьСостояниеЭД = Неопределено;
	Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
		И Не ОбновитьСостояниеЭД = Неопределено Тогда
		ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
	КонецЕсли;
	
	ОтклонениеАннулирования = Ложь;
	Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
		ОтклонениеАннулирования = Истина;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СуммаДокумента") И ЗначениеЗаполнено(СтруктураЭД.СуммаДокумента) Тогда
		ФайлОбъект.СуммаДокумента = СтруктураЭД.СуммаДокумента;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ТекстУточнения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
		ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УдалитьЭП") Тогда
		ФайлОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
		ФайлОбъект.ПодписанЭЦП = Ложь;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИД") Тогда
		ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
		ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
		ФайлОбъект.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
		ФайлОбъект.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
		ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		СтруктураЭД.Вставить(
				"СуммаДокумента",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ЭлектронныйДокументВладелец, "СуммаДокумента"));
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаВыпискиБанка") Тогда
		ФайлОбъект.ДатаВыпискиБанка = СтруктураЭД.ДатаВыпискиБанка;
	КонецЕсли;
	
	//<Raxx
	Если СтруктураЭД.Свойство("ВладелецФайла") Тогда
		ФайлОбъект.ВладелецФайла = СтруктураЭД.ВладелецФайла;
	КонецЕсли;
	//Raxx>
	
	ВерсияФорматаПакета = Неопределено;
	СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
	ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);
	
	// Обновляем файлы
	Если СтруктураЭД.Свойство("ИмяБезРасширения") Тогда
		ИмяБезРасширения = СтруктураЭД.ИмяБезРасширения;
		РасширениеБезТочки = СтруктураЭД.РасширениеБезТочки;
		ДвоичныеДанные = СтруктураЭД.ДвоичныеДанные;
		СвояТранзакцияОткрыта = Ложь;
		Попытка
			Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				НачатьТранзакцию();
				ФайлОбъект.Записать();
				СвояТранзакцияОткрыта = Истина;
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ДобавленныйФайл, ДвоичныеДанные);
				ФайлОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлОбъект.ПутьКФайлу = "";
			Иначе
				// Добавление в один из томов (где есть свободное место).
				ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				ФайлОбъект.ПутьКФайлу,
				ФайлОбъект.Том,
				ТекущаяУниверсальнаяДата(),
				"",
				ИмяБезРасширения,
				РасширениеБезТочки,
				ФайлОбъект.Размер,
				ФайлОбъект.Зашифрован);
			КонецЕсли;
			
			ФайлОбъект.Записать();
			
			Если СвояТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если СвояТранзакцияОткрыта Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЕсли;
	
	ФайлОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значениеэлемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка, соответствует значению реквизита элемента справочника НаименованиеФайла.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВидЭД, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			НаименованиеСкорректированно = Истина;
		ИначеЕсли СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			СтрокаУИД = СтруктураПараметров.УникальныйИД;
			Наименование = ДанныеФайла.Наименование;
			ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
			Если ПозицияУИД > 0 Тогда
				ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запись событий в журнал регистрации. Обработка ошибок

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаиможействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией:
//  Электронное взаимодействие
//  |_ Ошибка
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//  |_ Информация
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//
// Параметры:
//   ОписаниеСобытия - Строка - описание содержания события, которое требуется записать в журнал регистрации.
//   КодСобытия - Число - код события, используется для стандартизации иерархии событий.
//               Может принимать значения: 0 - Общая подсистема, 1 - Обмен с банками, 2 - Обмен с контрагентами.
//                                         3 - Обмен с сайтами, 4 - Регламентные задания
//   УровеньВажности - УровеньЖурналаРегистрации - один из доступных уровней журнала регистрации (Ошибка, Информация, ...).
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому относится событие.
//   ДанныеСсылка - Произвольный - данные, с которыми связано событие. Рекомендуется указывать ссылки на объекты данных
//                  (элементы справочников, документы, к которым относится событие).
//   РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - указывает отношение записи к текущей транзакции.
//
Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия, КодСобытия = 0, УровеньВажности = Неопределено,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено) Экспорт
	
	Подсистема = "Общая подсистема";
	Если КодСобытия = 1 Тогда Подсистема = НСтр("ru = 'Обмен с банками'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 2 Тогда Подсистема = НСтр("ru = 'Обмен с контрагентами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 3 Тогда Подсистема = НСтр("ru = 'Обмен с сайтами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = 4 Тогда Подсистема = НСтр("ru = 'Регламентные задания'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Подсистема);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция DidoxИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ЭлектронныеДокументыПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сообщения пользователю

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник) Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = Нстр("ru = 'Обработка %1.
								 |Операция не выполнена!
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	ЭтоПлатежноеПоручение = Ложь;
	Если ПараметрыЭД.Свойство("ВидЭД") И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ЭтоПлатежноеПоручение = Истина;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Если ЭтоПлатежноеПоручение И (ТекПараметр.Ключ = "ДоговорКонтрагента"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "ВидЭД") Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = "Способ обмена";
					СтрокаПараметров.Значение = "через оператора ЭДО";
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				Если ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Банк";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				
				Попытка
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
						ТекстОшибки, ТекстСообщения);
					ЗИПЧтение.Закрыть();
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								ЭД.НаправлениеЭД,
																								ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				Прервать; // должен быть только один файл данных
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		// +aldo
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			РеквизитыЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД,
				"ВидЭД, НаправлениеЭД, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ПодписанЭЦП, ВладелецФайла, ТребуетсяПодтверждение, ТребуетсяИзвещение, ТипЭлементаВерсииЭД");
		КонецЕсли;
		// -aldo
		
			
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			
			НастройкиОбмена.Вставить("Направление",           РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                 РеквизитыЭД.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись",   РеквизитыЭД.ПодписанЭЦП);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции", Ложь);
			НастройкиОбмена.Вставить("ТребуетсяПодтверждение", РеквизитыЭД.ТребуетсяПодтверждение);
			НастройкиОбмена.Вставить("ТребуетсяИзвещение",     РеквизитыЭД.ТребуетсяИзвещение);
			НастройкиОбмена.Вставить("ТипЭлементаВерсииЭД",    РеквизитыЭД.ТипЭлементаВерсииЭД);

			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",   РеквизитыЭД.ВерсияРегламентаЭДО);
			
			ВерсияФорматаПакета = ВерсияПакетаЭД(СсылкаНаЭД);
			НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			
			ЭтоСлужебныйЭД = Ложь;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
				ЭтоСлужебныйЭД = Истина;
				ЭДВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
			КонецЕсли;
			
			Если ЭтоСлужебныйЭД Тогда
				НастройкиОбмена.ТребуетсяПодтверждение = ЭДВладелец.ТребуетсяПодтверждение;
				НастройкиОбмена.ТребуетсяИзвещение     = ЭДВладелец.ТребуетсяИзвещение;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Только для внутреннего использования
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	ТипЭД = "";
	СтруктураПараметров.Свойство("ТипЭД", ТипЭД);
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = "_" + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = "_" + Формат(ЗначениеСвойства, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И ВидЭД <> Перечисления.ВидыЭД.ПлатежноеПоручение И ВидЭД <> Перечисления.ВидыЭД.Квитанция
		И ВидЭД <> Перечисления.ВидыЭД.ЗапросВыписки И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = ' (версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация покупателя'");
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		ТекстВидЭД = НСтр("ru = 'Счет-фактура'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ТекстВидЭД = НСтр("ru = 'Корректировочный счет-фактура'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = НСтр("ru = 'ТОРГ-12'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = НСтр("ru = 'Акт'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = НСтр("ru = 'Счет'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ЗаказТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = НСтр("ru = 'ОтветНаЗаказ'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = НСтр("ru = 'ПрайсЛист'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = НСтр("ru = 'КаталогТоваров'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ОтчетОПродажахКомиссионногоТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ОтчетОСписанииКомиссионногоТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru = 'ПередачаТоваров'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru = 'ВозвратТоваров'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = НСтр("ru = 'Подтверждение'");
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			 ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " даты получения";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " даты отправки";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ТекстВидЭД = НСтр("ru = 'Платежное поручение'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ТекстВидЭД = НСтр("ru = 'Квитанция'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ДопДанные Тогда
		ТекстВидЭД = НСтр("ru = 'Схема данных'");
	// +aldo
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
	// -aldo
	КонецЕсли;
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	Результат = "";
	
	Соответствие = ЭлектронныеДокументыПовтИсп.СоответствиеКириллицыИЛатиницы();
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // поиск соответствия без учета регистра
		Если СимволЛатиницей = Неопределено Тогда
			// другие символы остаются "как есть"
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция предназначена для проверки имени файла на наличие некорректных символов
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки
// Возвращаемое значение:
//  Строка - имя файла
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < > №";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - Вложенный каталог первого уровня (не используется, оставлено для совместимости)
//  КлючУникальности - Строка - Вложенный каталог второго уровня (не используется, оставлено для совместимости)
Функция РабочийКаталог(Знач Подкаталог = "", КлючУникальности = "") Экспорт
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + ОбщегоНазначенияКлиентСервер.РазделительПути();
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		ИмяКаталога = ИмяКаталога + Подкаталог + ОбщегоНазначенияКлиентСервер.РазделительПути();
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючУникальности) Тогда
		ИмяКаталога = ИмяКаталога + КлючУникальности + ОбщегоНазначенияКлиентСервер.РазделительПути();
	КонецЕсли;
	
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			ТекущийСтатус = СсылкаНаЭД.СтатусДокумента;
		Иначе
			СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ТребуетсяПодтверждение");
			ТекущийСтатус = СвойстваДокумента.СтатусЭД;
		КонецЕсли;
		
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
			
		ИначеЕсли НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			
			ТребуетсяПодтверждение = СвойстваДокумента.ТребуетсяПодтверждение;
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение
				Или ЗначениеЗаполнено(ВторойТитулДокумента(СсылкаНаЭД))
				Или ТребуетсяПодтверждение Тогда
				ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
				
			Иначе
				ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован;
			КонецЕсли;

		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			Если НастройкиОбмена <> Неопределено Тогда
			
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока Найти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ФлагДействующиеСоглашения = Истина) Экспорт
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция venkonОпределитьНастройкиОбменаЭД(ВладелецЭД, ДопПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Новый Структура;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если ВладелецЭД <> Неопределено Тогда
		
		РеквизитыВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Организация, Контрагент");
		
		ПрофильНастроекЭДО = ЭлектронныеДокументыВнутренний.ОпределитьПрофильПоОрганизации(РеквизитыВладельцаЭД.Организация);
		
		Если ПрофильНастроекЭДО = Неопределено Тогда
			Возврат НастройкиОбменаЭД;
		КонецЕсли;
		
		НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		НастройкиОбменаЭД.Вставить("Организация", РеквизитыВладельцаЭД.Организация);
		НастройкиОбменаЭД.Вставить("Контрагент", РеквизитыВладельцаЭД.Контрагент);
		НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыВладельцаЭД.Организация, "ИНН"));
		НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыВладельцаЭД.Контрагент, "ИНН"));
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Для каждого КлючЗначение Из ДопПараметры Цикл
				НастройкиОбменаЭД.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Вид ЭД
		Если НЕ НастройкиОбменаЭД.Свойство("ВидЭД", ВидЭД) ИЛИ ВидЭД = "" Тогда
			Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ИначеЕсли ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			НастройкиОбменаЭД.Вставить("ВидЭД", ВидЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = venkonСформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ВладелецЭД,
								Нстр("ru = 'Дополнительные файлы'"),
								"zip",
								ВремяСозданияЭД,
								ВремяСозданияЭД,
								АдресАрхива,
								Неопределено,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("ВладелецЭД", СтруктураОбмена.СтруктураЭД.ВладелецЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
				
		Если Не СтруктураОбмена.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			Если СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			Иначе
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			КонецЕсли;
			
			СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		КонецЕсли;
		
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
		Если СтруктураОбмена.СтруктураЭД.Свойство("МассивПервичныхДокументовУПДУКД") Тогда
			Для каждого Документ Из СтруктураОбмена.СтруктураЭД.МассивПервичныхДокументовУПДУКД Цикл
				
				ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Документ, ДобавленныйФайл, Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

//<Raxx

// Только для внутреннего использования
Функция venkonСформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		venkonСформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

//Raxx>

// Добавляет в форму элементы условного оформления, необходимые для оформления таблицы исходящих документов.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма настроек. Должна содержать таблицу параметров обработки исходящих
//                                                        документов. В таблице обязательно должны присутствовать колонки,
//                                                        содержащая вид электронного документа и версию формата.
//  ИмяЭлементаВерсияФормата		 - Строка - имя элемента формы, отображающего версию формата.
//  ПолноеИмяПоляВерсияФормата		 - Строка - имя поля, содержащего версию формата.
//  ПолноеИмяПоляИсходящийДокумент	 - Строка - имя поля, содержащего вид электронного документа.
//
Процедура УстановитьУсловноеОформлениеФорматов(Форма, ИмяЭлементаВерсияФормата = "ИсходящиеДокументыВерсияФормата",
	ПолноеИмяПоляВерсияФормата = "Объект.ИсходящиеДокументы.ВерсияФормата", 
	ПолноеИмяПоляИсходящийДокумент = "Объект.ИсходящиеДокументы.ИсходящийДокумент") Экспорт
	
	ТаблицаФорматов = ЭлектронныеДокументыСлужебный.ФорматыЭлектронныхДокументов();
	
	Для Каждого СтрокаФормата Из ТаблицаФорматов Цикл
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВерсияФормата);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляВерсияФормата);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ИдентификаторФормата;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляИсходящийДокумент);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ВидЭлектронногоДокумента;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаФормата.ПредставлениеФормата);
		Если Не СтрокаФормата.Действует Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Только для внутреннего использования
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		venkonСохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога);
		
	КонецЦикла;
	
	// Записываем файл превью для произвольного ЭД,
	// также для с-ф с нестандартной печатной формой (для нового ЭД)
	Если ДопПараметры <> Неопределено И
		
		ДопПараметры.Свойство("ПутьКФайлу") Тогда
		
		ПутьКФайлу = ДопПараметры.ПутьКФайлу;
		
		Попытка
			// Определяем расширение файла
			ДопФайл = Новый Файл(ПутьКФайлу);
			РасширениеФайла = ДопФайл.Расширение;
			НовоеИмяФайла =  АдресКаталога + "preview" + РасширениеФайла;
			
			КопироватьФайл(ПутьКФайлу, НовоеИмяФайла);
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		УдалитьФайлы(АдресКаталога);
		Возврат ;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	
	ЗипКонтейнер.Записать();
	СтарыйФайлЭД = Неопределено;
	Если ПодготовленныеДокументы.Количество() > 0 Тогда
		СтарыйФайлЭД = ПодготовленныеДокументы[0];
	КонецЕсли;
	
	НовыйЭД = venkonПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip", СтарыйФайлЭД);
	
	ДобавитьЭДВТабЧастьПакета(Конверт, НовыйЭД, Истина);	
	
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

Процедура ДобавитьЭДВТабЧастьПакета(ПакетЭД, НовыйЭД, ОчиститьТЧ = Ложь)
	
	ОбъектПакетаЭД = ПакетЭД.ПолучитьОбъект();
	ТЧ = ОбъектПакетаЭД.ЭлектронныеДокументы;
	
	Если ОчиститьТЧ Тогда
		
		ТЧ.Очистить();
		
	КонецЕсли;
	
	СтрТЧ = ТЧ.Добавить();
	СтрТЧ.ЭлектронныйДокумент = НовыйЭД;
	СтрТЧ.ОбъектВладелец = ПакетЭД;
	
	ОбъектПакетаЭД.Записать();
	
	
КонецПроцедуры

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	// +aldo
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	// -aldo
	Возврат Ложь;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

//<Raxx

Процедура venkonСохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,
							МассивСтруктурПодписей,
							АдресКаталога,
							РезервноеИмяФайлаПодписи = "")
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	МассивИмен.Добавить(ОсновнойФайл.Имя);
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если НЕ ПустаяСтрока(РезервноеИмяФайлаПодписи) Тогда
				ИмяФайлаПодписи = РезервноеИмяФайлаПодписи + "-" + Сч + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

//Raxx>

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//<Raxx

Функция venkonСохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						РезервноеИмяФайлаПодписи)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	ПолныйПутьКФайлу = ИмяКаталога + ИмяПолучаемогоФайла;
    Файл = Новый Файл(ПолныйПутьКФайлу);
	// Если это архив сохраняем только основной файл
	Если Файл.Расширение = ".zip" Тогда
		ПутьРаспаковки = ИмяКаталога + Файл.ИмяБезРасширения;
		
		Файл = Новый Файл(ПутьРаспаковки);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(ПутьРаспаковки);
		КонецЕсли;
		Файл = Неопределено;
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ПолныйПутьКФайлу);
		ЗИПЧтение.ИзвлечьВсе(ПутьРаспаковки);
		
		МассивФайлов = НайтиФайлы(ПутьРаспаковки, "*.xml");
		Если МассивФайлов.Количество() > 0 Тогда
			Для каждого Элемент Из МассивФайлов Цикл
				Если Элемент.ИмяБезРасширения <> "packageDescription" Тогда
					УдалитьФайлы(ПолныйПутьКФайлу);
					
					ПолныйПутьКФайлу = ИмяКаталога + Элемент.Имя;
					ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Элемент.ПолноеИмя);
					ДвоичныеДанныеФайла.Записать(ПолныйПутьКФайлу);
					
					РезервноеИмяФайлаПодписи = Элемент.ИмяБезРасширения;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		УдалитьФайлы(ПутьРаспаковки);
		
	КонецЕсли;
	
	Возврат ПолныйПутьКФайлу;
	
КонецФункции

//Raxx>

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

//<Raxx

Процедура venkonСформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.venkonСформироватьПередачаТоваровПродавец(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура ИЛИ ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактураБезАкта Тогда
			
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.venkonСформироватьСчетФактуруГост(ОбъектДляВыгрузки, НастройкиОбменаЭД);
						
		// +aldo	
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.venkonСформироватьПроизвольныйЭД(ОбъектДляВыгрузки, НастройкиОбменаЭД, , ДопПараметры);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактураФарм Тогда
			
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.venkonСформироватьСчетФактуруФарм(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		// -aldo
	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбменаЭД.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			СтруктураВозврата.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			СтруктураВозврата.СтруктураЭД.Вставить("ТребуетсяПодтверждение", ?(НастройкиОбменаЭД.Свойство("ТребуетсяПодтверждение"),
				НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь));

			СтруктураВозврата.СтруктураЭД.Вставить("ТребуетсяИзвещение", ?(НастройкиОбменаЭД.Свойство("ТребуетсяИзвещение"),
				НастройкиОбменаЭД.ТребуетсяИзвещение, Ложь));

			
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИдДокумента(ДвоичныеДанныФайла = Неопределено, ДанныеФайлаЭД = Неопределено, Расширение = "xml") Экспорт
	
	ИДДокумента = "";
	ОписаниеОшибки = "";
	Если ДвоичныеДанныФайла <> Неопределено Тогда
		
		Если Найти(НРег(Расширение), "zip") > 0 Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".zip");
			ДвоичныеДанныФайла.Записать(ИмяВременногоФайла);
			
			Файл = Новый Файл(ИмяВременногоФайла);
			
			КаталогДанных = Файл.Путь + Файл.ИмяБезРасширения;
			СоздатьКаталог(КаталогДанных);
			
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяВременногоФайла);
			ЧтениеZIP.ИзвлечьВсе(КаталогДанных);
			
			МассивФайлов = НайтиФайлы(КаталогДанных, "*.xml");
			Если МассивФайлов.Количество() > 0 Тогда
				ИмяВременногоФайла = МассивФайлов[0].ПолноеИмя;
			Иначе
				Возврат ИДДокумента;
			КонецЕсли;
			
		Иначе
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
			ДвоичныеДанныФайла.Записать(ИмяВременногоФайла);
			
		КонецЕсли;
		
		ПространствоИменФНС = Неопределено;
		ДанныеФайлаЭД = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ИмяВременногоФайла, ОписаниеОшибки, ПространствоИменФНС);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеФайлаЭД) = Тип("ОбъектXDTO") Тогда
		Попытка
			Header = ДанныеФайлаЭД.Header;
			Если ДанныеФайлаЭД.Header.Свойства().Получить("docId") <> Неопределено Тогда
				ИДДокумента =  Header.docId;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИДДокумента;
	
КонецФункции

Функция ПолучитьВерсиюДокументаНовая(ДвоичныеДанныФайла = Неопределено, ДанныеФайлаЭД = Неопределено, Расширение = "xml") Экспорт
	
	ВерсияСоставаЭД = "";
	ОписаниеОшибки = "";
	Если ДвоичныеДанныФайла <> Неопределено Тогда
		
		Если Найти(НРег(Расширение), "zip") > 0 Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".zip");
			ДвоичныеДанныФайла.Записать(ИмяВременногоФайла);
			
			Файл = Новый Файл(ИмяВременногоФайла);
			
			КаталогДанных = Файл.Путь + Файл.ИмяБезРасширения;
			СоздатьКаталог(КаталогДанных);
			
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяВременногоФайла);
			ЧтениеZIP.ИзвлечьВсе(КаталогДанных);
			
			МассивФайлов = НайтиФайлы(КаталогДанных, "*.xml");
			Если МассивФайлов.Количество() > 0 Тогда
				ИмяВременногоФайла = МассивФайлов[0].ПолноеИмя;
			Иначе
				Возврат ВерсияСоставаЭД;
			КонецЕсли;
			
		Иначе
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
			ДвоичныеДанныФайла.Записать(ИмяВременногоФайла);
			
		КонецЕсли;
		
		ПространствоИменФНС = Неопределено;
		ДанныеФайлаЭД = ЭлектронныеДокументыВнутренний.ДанныеФайлаЭД(ИмяВременногоФайла, ОписаниеОшибки, ПространствоИменФНС);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеФайлаЭД) = Тип("ОбъектXDTO") Тогда
		// В версиях 1 и 2
		СвойствоXDTOВерсияСостава = ДанныеФайлаЭД.Expansion.Свойства().Получить("ВерсияСостава");
		// Начиная с версии 3
		СвойствоXDTOVersion = ДанныеФайлаЭД.Expansion.Свойства().Получить("Version");
		
		Если СвойствоXDTOVersion <> Неопределено Тогда
			ВерсияСоставаЭД = ДанныеФайлаЭД.Expansion.Version;
			Если ВерсияСоставаЭД = "1" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия10;
			ИначеЕсли ВерсияСоставаЭД = "2" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия20;
			ИначеЕсли ВерсияСоставаЭД = "3" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия30;
			ИначеЕсли ВерсияСоставаЭД = "4" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия40;
			ИначеЕсли ВерсияСоставаЭД = "5" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия50;
			КонецЕсли;
		ИначеЕсли СвойствоXDTOВерсияСостава <> Неопределено Тогда
			ВерсияСоставаЭД = ДанныеФайлаЭД.Expansion.ВерсияСостава;
			Если ВерсияСоставаЭД = "1" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия10;
			ИначеЕсли ВерсияСоставаЭД = "2" Тогда
				Возврат Перечисления.ВерсииСоставаЭД.Версия20;
			КонецЕсли;
		Иначе
			Возврат Перечисления.ВерсииСоставаЭД.Версия10;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияСоставаЭД;
	
КонецФункции

Функция ПолучитьВерсиюДокумента(ДанныеФайлаЭД) Экспорт
	
	// В версиях 1 и 2
	СвойствоXDTOВерсияСостава = ДанныеФайлаЭД.Expansion.Свойства().Получить("ВерсияСостава");
	// Начиная с версии 3
	СвойствоXDTOVersion = ДанныеФайлаЭД.Expansion.Свойства().Получить("Version");
	
	Если СвойствоXDTOVersion <> Неопределено Тогда
		ВерсияСоставаЭД = ДанныеФайлаЭД.Expansion.Version;
		Если ВерсияСоставаЭД = "1" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия10;
		ИначеЕсли ВерсияСоставаЭД = "2" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия20;
		ИначеЕсли ВерсияСоставаЭД = "3" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия30;
		ИначеЕсли ВерсияСоставаЭД = "4" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия40;
		ИначеЕсли ВерсияСоставаЭД = "5" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия50;
		ИначеЕсли ВерсияСоставаЭД = "6" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия60;
		ИначеЕсли ВерсияСоставаЭД = "7" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия70;
		ИначеЕсли ВерсияСоставаЭД = "8" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия80;
		КонецЕсли;
	ИначеЕсли СвойствоXDTOВерсияСостава <> Неопределено Тогда
		ВерсияСоставаЭД = ДанныеФайлаЭД.Expansion.ВерсияСостава;
		Если ВерсияСоставаЭД = "1" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия10;
		ИначеЕсли ВерсияСоставаЭД = "2" Тогда
			Возврат Перечисления.ВерсииСоставаЭД.Версия20;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ВерсииСоставаЭД.Версия10;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерИДатуРегистрацииЭД(ДанныеФайлаЭД) Экспорт
	
	СтруктураВозврата = Новый Структура("regNum, regDate", "", "");
	
	Если ЭлектронныеДокументыВнутренний.ЕстьСвойствоXDTO(ДанныеФайлаЭД, "Document") Тогда
		Document = ДанныеФайлаЭД.Document;
		
		Если ЭлектронныеДокументыВнутренний.ЕстьСвойствоXDTO(Document, "regNum") Тогда
			СтруктураВозврата.Вставить("regNum", Document.regNum);
		КонецЕсли;
		
		Если ЭлектронныеДокументыВнутренний.ЕстьСвойствоXDTO(Document, "regDate") Тогда
			СтруктураВозврата.Вставить("regDate", Document.regDate);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Raxx>

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры: 
//  МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
//  ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.venkonОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения, ТребуетсяИзвещениеОПолучении)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
	"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	ПЭД                         = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата                    = ТекущаяДатаСеанса();
	Если ПараметрыСоглашения.Свойство("Отправитель") Тогда
		ПЭД.Отправитель             = ПараметрыСоглашения.Отправитель;
	КонецЕсли;
	Если ПараметрыСоглашения.Свойство("Получатель") Тогда
		ПЭД.Получатель              = ПараметрыСоглашения.Получатель;
	КонецЕсли;
	ПЭД.Контрагент              = ПараметрыСоглашения.Контрагент;
	ПЭД.Организация             = ПараметрыСоглашения.Организация;
	
	ПЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление             = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы       = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования    = СертификатШифрования;
	ПЭД.ВерсияФорматаПакета     = ПараметрыСоглашения.ВерсияФорматаПакета;
	
	ПЭД.ПрофильНастроекЭДО      = ПараметрыСоглашения.ПрофильНастроекЭДО;
	
	ПЭД.Записать();
	
	НовСтрока                              = ТЗ_ПЭД.Добавить();
	НовСтрока.ПЭД                          = ПЭД.Ссылка;
	НовСтрока.ТребуетсяШифрованиеНаКлиенте = ТребуетсяШифрованиеНаКлиенте;
	НовСтрока.ВерсияФорматаПакета          = ПараметрыСоглашения.ВерсияФорматаПакета;
	НовСтрока.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеОПолучении;
	
	Возврат ПЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВидЭД, ПрофильНастроекЭДО");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			Если ЭтоОтветныйТитул(ЭД) Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.venkonОбновитьВерсиюЭД(ЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Возврат ПараметрыЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Версии электронных документов

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаляем состояние пакета
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	// Удаляем состояние документа учета
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект.ВладелецФайла;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь)
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
		МенеджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Ответственный;
		МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение модифицированности объекта, аналогичные подсистеме обмена данными

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	ТаблицаРеквизитовРегистрации = ЭлектронныеДокументыПовтИсп.ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// Если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до конца, то объект не изменился по реквизитам регистрации;
	// Регистрация не нужна
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1, Таблица2 - таблицы значений, реквизиты, которые надо проверить на совпадение,
//  РеквизитыОбъекта   - строка, содержит реквизиты, перечисленные через запятую,
//  ДопПараметры       - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Реквизиты шапки";
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРекв.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРекв.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Табличная часть <" + ИмяТабличнойЧасти + ">";
			НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРекв.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - массив - содержить ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВремПапка = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов()
				+ Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремПапка);
	УдалитьФайлы(ВремПапка, "*");
	Для Каждого Элемент Из МассивФайлов Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
		СоздатьКаталог(ВремПапка + Элемент.ИдТовара + "\");
		ДвоичныеДанныеФайла.Записать(ВремПапка + Элемент.ИдТовара + "\" + Элемент.ИмяФайла);
	КонецЦикла;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВремПапка + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		УдалитьФайлы(Архив);
		УдалитьФайлы(ВремПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	УдалитьФайлы(ВремПапка);
	УдалитьФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива, Новый УникальныйИдентификатор);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД);
	Иначе
		Если ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			ВерсияФормата = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВерсияФормата = Выборка.ВерсияФорматаПакета;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция определяет отправлено ли подтверждение о доставке
// для документов ФНС
Функция ЕстьНеотправленноеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭЦП, ЛОЖЬ) КАК ВладелецПодписанЭЦП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭЦП И Не Выборка.ПодписанЭЦП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке
// для документов ФНС
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
	
КонецФункции

// Определяет является ли ЭД титулом.
Функция ЭтоТитулФНС(ЭД) Экспорт
	
	Результат = Ложь;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВидЭД, ТипЭлементаВерсииЭД");
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
		ИЛИ (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
		ИЛИ (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
			
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет является ли ЭД ответным титулом.
Функция ЭтоОтветныйТитул(ЭД) Экспорт
	
	Результат = Ложь;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВидЭД, ТипЭлементаВерсииЭД");
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответный титул.
//
Функция ВторойТитулДокумента(ПервыйТитул) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ВторойТитул
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&МассивТиповТитулов)";
	
	МассивТиповТитулов = Новый Массив;
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	Запрос.УстановитьПараметр("МассивТиповТитулов",          МассивТиповТитулов);
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ПервыйТитул);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВторойТитул = Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВторойТитул = Выборка.ВторойТитул;
	КонецЕсли;
	
	Возврат ВторойТитул
	
КонецФункции

// Проверяет является ли ЭД банковским
Функция ЭтоБанковскийЭД(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ВидЭД");
	Иначе
		ВидЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
		Или ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
		Или ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки
		Или ВидЭД = Перечисления.ВидыЭД.Квитанция
		Или ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

Процедура ДополнитьПараметрыЭД(ДокументИБ, ПараметрыЭД)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИБ)) Тогда
		СсылкаНаОбъект = ДокументИБ.Ссылка;
	Иначе
		СсылкаНаОбъект = ДокументИБ
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЭД = Выборка.ЭД;
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, Контрагент");
	
	ПараметрыЭД.Контрагент = СвойстваЭД.Контрагент;
	ПараметрыЭД.Организация = СвойстваЭД.Организация;
	
КонецПроцедуры

Функция ЭтоПолнаяЗагрузкаОбновленийПоИсходящимДокументам() Экспорт
	
	Возврат Константы.ДидоксСпособЗагрузкиОбновленийПоИсходящимДокументам.Получить() = Перечисления.СпособыЗагрузкиОбновленийПоИсходящимДокументам.ПолнаяЗагрузка
			ИЛИ Константы.ДидоксСпособЗагрузкиОбновленийПоИсходящимДокументам.Получить() = Перечисления.СпособыЗагрузкиОбновленийПоИсходящимДокументам.ПустаяСсылка();
	
		КонецФункции
		
Функция ДатаПереходаНаРегистрационныйКодПлательщикаНДС() Экспорт 

	Возврат '20190122';

КонецФункции

Функция ПроверитьЗаполненностьРеквизитовПрофиляДидокс(Профиль = Неопределено, Организация = Неопределено) Экспорт
	
	Если Профиль = Неопределено
		И Организация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	Если Профиль = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			 Профиль = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Профиль <> Неопределено Тогда
		
		// Код местонахождения
		Если ПустаяСтрока(Профиль.КодМестонахожденияОрганизации) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗаполненностьРеквизитовКонтрагента(Контрагент = Неопределено) Экспорт
	
	Если Контрагент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Код местонахождения
	Если ПустаяСтрока(Контрагент.КодМестонахождения) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
