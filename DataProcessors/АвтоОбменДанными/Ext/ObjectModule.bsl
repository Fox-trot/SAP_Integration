
// дата последнего обновления информации об настройках обмена
Перем мДатаПоследнегоОбновленияДанныхОбОбмене Экспорт;
// количество секунд опреса обмена
Перем мКоличествоСекундОпросаОбмена;

Перем мКоэффициентУменьшенияИнтервалов;

// Функция формирует таблицу настроек обмена для автоматического выполнения
// текущим пользователем.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПолучитьТаблицуАвтоматическихОбменовДанными(ТолькоДляПервогоВходаВПрограмму = Ложь, 
			ТолькоДляВходаВПрограмму = Ложь, ТолькоДляВыходаИзПрограммы = Ложь, ОграничениеПоДнюНедели = Истина,
			СсылкаНаНастройку = Неопределено, ОграничиватьПоПользователю = Истина)
	
	// для обмена при первом входе в прогрумму константа не нужна
	Если Не ТолькоДляПервогоВходаВПрограмму Тогда
		
		ИспользоватьАвтообмен = ИспользоватьМеханизмАвтоматическогоОбмена();
		Если Не ИспользоватьАвтообмен Тогда
			Возврат Неопределено;	
		КонецЕсли;
	
	КонецЕсли;
	
	// есть ли доступ к настройкам обмена данными
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиОбменаДанными) 
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыОбменаДанными) Тогда	
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	ДополнительныеОграничения = "	НЕ	НастройкиОбменаДанными.ПометкаУдаления
								|	И (НастройкиОбменаДанными.ПроизводитьПриемСообщений 
								|		ИЛИ НастройкиОбменаДанными.ПроизводитьОтправкуСообщений)";
	
	// строим ограничения в зависимости от параметров
	Если ТолькоДляПервогоВходаВПрограмму Тогда
		ДополнительныеОграничения = "	ПараметрыОбменаДанными.ВыполнятьПриПервомВходеВСистему";
		
	ИначеЕсли ТолькоДляВходаВПрограмму Тогда
		ДополнительныеОграничения = ДополнительныеОграничения +	"
									|	И	НастройкиОбменаДанными.Ответственный = &ТекущийПользователь	
                                    |	И	НастройкиОбменаДанными.КаждыйЗапускПрограммы";
									
	ИначеЕсли ТолькоДляВыходаИзПрограммы Тогда
		ДополнительныеОграничения = ДополнительныеОграничения +	"
									|	И	НастройкиОбменаДанными.Ответственный = &ТекущийПользователь	
									|	И	НастройкиОбменаДанными.КаждоеЗавершениеРаботыСПрограммой";								
		
	Иначе
		
		Если ОграничениеПоДнюНедели Тогда
			ИмяДняНедели = ПолучитьИмяДняНедели();
			ОграничениеПоДнюНедели = "	И	НастройкиОбменаДанными." + ИмяДняНедели;
		Иначе
			ОграничениеПоДнюНедели = "";
		КонецЕсли;
		
		Если ОграничиватьПоПользователю Тогда
			ОграничениеПоПользователю = "	И	НастройкиОбменаДанными.Ответственный = &ТекущийПользователь";
		Иначе
			ОграничениеПоПользователю = "";
		КонецЕсли;
		
		ДополнительныеОграничения = ДополнительныеОграничения +	"
									|" + ОграничениеПоПользователю + "
									|	И	
									|		( (НастройкиОбменаДанными.КаталогПроверкиДоступности <> """")
									|	ИЛИ	(НастройкиОбменаДанными.ВыполнятьАвтоматически
									|" + ОграничениеПоДнюНедели + ") )";
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь); 
	
	Если Не ЗначениеНеЗаполнено(СсылкаНаНастройку) Тогда
		
		ДополнительныеОграничения = ДополнительныеОграничения +	"
			| И (НастройкиОбменаДанными.Ссылка = &Ссылка)";
			
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаНастройку);
		
	КонецЕсли;
		
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаДанными.Ссылка								КАК Ссылка,
		|	НастройкиОбменаДанными.ВыполнятьАвтоматически               КАК ВыполнятьАвтоматически,
		|	НастройкиОбменаДанными.ЗаданноеВремя						КАК ЗаданноеВремя,
		|	НастройкиОбменаДанными.КоличествоМинутМеждуОбменами			КАК КоличествоМинутМеждуОбменами,
		|	НастройкиОбменаДанными.КонечноеВремяОбменов					КАК КонечноеВремяОбменов,
		|   НастройкиОбменаДанными.КаталогПроверкиДоступности           КАК КаталогПроверкиДоступности,
		|
		|	ПараметрыОбменаДанными.ДатаПоследнегоОбмена					КАК ДатаПоследнегоОбмена,
		|	ПараметрыОбменаДанными.ДоступностьКаталогаПроверки			КАК ДоступностьКаталогаПроверки
		|ИЗ
		|	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
		|	Левое соединение РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными 
		|		ПО (ПараметрыОбменаДанными.НастройкаОбменаДанными = НастройкиОбменаДанными.Ссылка)
		|ГДЕ
		|" + ДополнительныеОграничения;
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция выводит сообщение об измененных настройках обмена данными
Функция ПоказатьИзмененныеАтрибутыНастроек(СтрокаТаблицы, НайденнаяСтрока)
	
	ПараметрыИзменились = Ложь;
	
	Попытка
		Если НайденнаяСтрока.ЗаданноеВремя <> СтрокаТаблицы.ЗаданноеВремя Тогда
			ПараметрыИзменились = Истина;
			#Если Клиент Тогда
				Сообщить("Изменилось время начала процедуры обмена для настройки """ + НайденнаяСтрока.Ссылка + """. Новое значение: " + Формат(НайденнаяСтрока.ЗаданноеВремя, "ДФ=ЧЧ:мм"));
			#КонецЕсли
		КонецЕсли;

		Если НайденнаяСтрока.КоличествоМинутМеждуОбменами <> СтрокаТаблицы.КоличествоМинутМеждуОбменами Тогда
			ПараметрыИзменились = Истина;
			#Если Клиент Тогда
				Сообщить("Изменился интервал обмена данными для настройки """ + НайденнаяСтрока.Ссылка + """. Новое значение: " + НайденнаяСтрока.КоличествоМинутМеждуОбменами);
			#КонецЕсли
		КонецЕсли;
						
		Если НайденнаяСтрока.КонечноеВремяОбменов <> СтрокаТаблицы.КонечноеВремяОбменов Тогда
			ПараметрыИзменились = Истина;
			#Если Клиент Тогда
				Сообщить("Изменилось конечное время обмена данными для настройки """ + НайденнаяСтрока.Ссылка + """. Новое значение: " + Формат(НайденнаяСтрока.КонечноеВремяОбменов, "ДФ=ЧЧ:мм"));
			#КонецЕсли
		КонецЕсли;
		
	Исключение
		// это нужно что бы можно было изменять поля таблицы	
	КонецПопытки;
	
	Возврат ПараметрыИзменились;
	
КонецФункции

#Если Клиент Тогда
	
// процедура сообщает пользователю об изменениях в настройках автообмена
Процедура СообщитьОбИзмененияхВНастройкеАвтообмена(ТаблицаОбменов)
	
	СохраненнаяТаблица = ВосстановитьЗначение("ТаблицаАвтоматическогоОбменаДанными");

	Если ТипЗнч(СохраненнаяТаблица) <> Тип("ТаблицаЗначений") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// для тех строк, которые были до этого проверяем наличие новой строки
	Для Каждого СтрокаТаблицы Из СохраненнаяТаблица Цикл
				
		НайденнаяСтрока = ТаблицаОбменов.Найти(СтрокаТаблицы.Ссылка, "Ссылка");
				
		Если НайденнаяСтрока = Неопределено Тогда
			Сообщить("Из списка текущих автообменов удалена настройка """ + СтрокаТаблицы.Ссылка + """.");
			Продолжить;
		КонецЕсли;
				
		ПоказатьИзмененныеАтрибутыНастроек(СтрокаТаблицы, НайденнаяСтрока);
				
	КонецЦикла;
	
	// для каждой новой строки проверяем была ли она в сохраненной копии
	Для Каждого СтрокаТаблицы Из ТаблицаОбменов Цикл
		
		НайденнаяСтрока = СохраненнаяТаблица.Найти(СтрокаТаблицы.Ссылка, "Ссылка");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Сообщить("В список автоматического обмена данными добавлена новая настройка """ + СтрокаТаблицы.Ссылка + """");
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры
	
#КонецЕсли

// процедура устанавливает время последнего обмена данными для настройки обмена
Процедура ОбновитьИнформациюОНастройкахОбмена(НастройкаОбмена, Знач ДатаПоследнегоОбмена, Знач ДоступностьКаталога) Экспорт
	
	СтрокаТЧ = НастройкиДляОбмена.Найти(НастройкаОбмена.Ссылка, "Ссылка");
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;						
		СтрокаТЧ.ДоступностьКаталогаПроверки = ДоступностьКаталога;
		
	КонецЕсли;
  	
КонецПроцедуры

// Функция по объекту настройки обмена определяет проводить периодический обмен данными в этот день или нет
Функция ВыполнятьПериодическийОбменПоДню(ОбъектНастройки, ДатаПроведенияОбмена)
	
	ИмяДняНедели = ПолучитьИмяДняНедели(ДатаПроведенияОбмена);
	Возврат ОбъектНастройки[ИмяДняНедели];
	
КонецФункции

// функция определяет дату и время периодического обмена данными
Функция ОпределитьДатуИВремяОбменаДанными(НастройкаОбмена, Знач ДанныеАвтообменов = Неопределено)

	Если (ДанныеАвтообменов = Неопределено) 
		И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		
		ТаблицаАвтообменов = ПолучитьТаблицуАвтоматическихОбменовДанными(,,, Ложь, НастройкаОбмена, Ложь);
		
	Иначе
		
		ИспользоватьАвтообмен = ИспользоватьМеханизмАвтоматическогоОбмена();
		Если Не ИспользоватьАвтообмен Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТаблицаАвтообменов = ДанныеАвтообменов;
		
	КонецЕсли;
			
	Если (ТаблицаАвтообменов = Неопределено)
		ИЛИ (ТаблицаАвтообменов.Количество() = 0) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда 
		ОбъектНастройки = НастройкаОбмена.ПолучитьОбъект();
	Иначе
		ОбъектНастройки = НастройкаОбмена;
	КонецЕсли;
	
	// есть ли хоть один день недели когда надо выполнять периодический обмен данными
	Если НЕ ОбъектНастройки.ВыполнятьАвтоматически 
		ИЛИ	НЕ (ОбъектНастройки.Понедельник ИЛИ ОбъектНастройки.Вторник ИЛИ ОбъектНастройки.Среда ИЛИ ОбъектНастройки.Четверг
		ИЛИ ОбъектНастройки.Пятница ИЛИ ОбъектНастройки.Суббота ИЛИ ОбъектНастройки.Воскресенье) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаНастройки = ТаблицаАвтообменов[0];
	ВремяОбмена = Неопределено;
	НомерДня = 0;
	ТекущийДень = ТекущаяДата();
	
	Если ВыполнятьПериодическийОбменПоДню(ОбъектНастройки, ТекущийДень) Тогда
	
		// смотрим может за сегодня обмен может быть выполнен
		ВремяОбмена = ОпределитьВремяБлижайшегоОбмена(СтрокаНастройки.ДатаПоследнегоОбмена, СтрокаНастройки.ЗаданноеВремя, 
			СтрокаНастройки.КоличествоМинутМеждуОбменами, СтрокаНастройки.КонечноеВремяОбменов, ТекущийДень);
		
	КонецЕсли;	
	
	ТекущийДень = НачалоДня(ТекущийДень);
	Пока ВремяОбмена = Неопределено И НомерДня <= 15 Цикл
		
		НомерДня = НомерДня + 1;
		ТекущийДень	= НачалоДня(ТекущийДень + 24 * 3600);
		
		Если ВыполнятьПериодическийОбменПоДню(ОбъектНастройки, ТекущийДень) Тогда
			ВремяОбмена = ОпределитьВремяБлижайшегоОбмена(СтрокаНастройки.ДатаПоследнегоОбмена, СтрокаНастройки.ЗаданноеВремя, 
				СтрокаНастройки.КоличествоМинутМеждуОбменами, СтрокаНастройки.КонечноеВремяОбменов, ТекущийДень);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВремяОбмена = Неопределено Тогда 
		БлижайшийОбмен = Неопределено;
	Иначе
		
		КоличествоСекунд = ПолучитьКоличествоСекундВоВремени(ВремяОбмена);
		БлижайшийОбмен = НачалоДня(ТекущийДень) + КоличествоСекунд;
				
	КонецЕсли;
	
	Возврат БлижайшийОбмен;
	
КонецФункции

// функция по дате последнего обмена и интервалу обменов определяет дату следующего
Функция ОпределитьВремяБлижайшегоОбмена(ДатаПоследнегоОбмена, ВремяНачалаОбменов, ИнтервалОбменов, КонечноеВремяОбменов, ТекущаяДата = Неопределено)
	
	// работаем отосительно даты переданной в параметре
	Если ТекущаяДата = Неопределено Тогда
		ЗначениеТекущейДаты = ТекущаяДата();
	Иначе
		ЗначениеТекущейДаты = ТекущаяДата;
	КонецЕсли;
	
	ЗначениеТекущегоВремени = ПолучитьВремяИзДаты(ЗначениеТекущейДаты);
	
	// если интервал обмена не задан, то время обмена устанавливается как заданное время
	Если ЗначениеНеЗаполнено(ИнтервалОбменов) Тогда
		
		// если текущее время превзошло время начала обмена данными, то обмен не производим сегодня
		Если ЗначениеТекущегоВремени > ВремяНачалаОбменов + мКоличествоСекундОпросаОбмена Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВремяНачалаОбменов;
		КонецЕсли;
					
	КонецЕсли;	

	Если НЕ ЗначениеНеЗаполнено(КонечноеВремяОбменов) Тогда 
		ВремяКонцаОбменов = КонечноеВремяОбменов;
	Иначе
		ВремяКонцаОбменов = Дата('00010101235959');
	КонецЕсли;
		
	Если ЗначениеНеЗаполнено(ДатаПоследнегоОбмена) Тогда
		ВремяБлижайшегоОбмена = Макс(ВремяНачалаОбменов, ЗначениеТекущегоВремени);
	Иначе
		ВремяБлижайшегоОбмена = ДатаПоследнегоОбмена + Цел(60 * ИнтервалОбменов / мКоэффициентУменьшенияИнтервалов);
		
		Если ВремяБлижайшегоОбмена < ЗначениеТекущейДаты + мКоличествоСекундОпросаОбмена Тогда
			ВремяБлижайшегоОбмена = ЗначениеТекущегоВремени;
		КонецЕсли;
		
		// не перемахнили ли мы день
		НачалоСегодняшнегоДня = НачалоДня(ЗначениеТекущейДаты);
		НачалоДняБлижайшегоОбмена = НачалоДня(ВремяБлижайшегоОбмена);
		
		Если НачалоСегодняшнегоДня < НачалоДняБлижайшегоОбмена Тогда
			// в этот день вообще не обменяться
			Возврат Неопределено;
		ИначеЕсли НачалоСегодняшнегоДня = НачалоДняБлижайшегоОбмена Тогда 
			
			ВремяБлижайшегоОбмена = Макс(ЗначениеТекущегоВремени, ВремяБлижайшегоОбмена);
			// теперь время определяем
			ВремяБлижайшегоОбмена = ПолучитьВремяИзДаты(ВремяБлижайшегоОбмена);
			
		Иначе
			// дата начала ближайшего обмена уже прошла
			ВремяБлижайшегоОбмена = ЗначениеТекущегоВремени;			
		КонецЕсли;
		
	КонецЕсли;	
		
	
	Если ВремяКонцаОбменов >= ВремяНачалаОбменов Тогда
		    
		// конечное время обменов больше начального
		Если (ВремяБлижайшегоОбмена >= ВремяНачалаОбменов) И (ВремяБлижайшегоОбмена <= ВремяКонцаОбменов) Тогда
			Возврат ВремяБлижайшегоОбмена;
		Иначе
			// если время текущее время меньше времени начала обмена то сегодня произвести обмен еще можно
			Если (ВремяБлижайшегоОбмена <= ВремяНачалаОбменов) Тогда
				Возврат ВремяНачалаОбменов;
			Иначе	
				// в текущий день обмен уже не провести
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе
		// конечное время обменов меньше начального
		// это означает, что если текущее время больше начального, то ограничение до конца дня, иначе от 0 до конечного времени
		Если ЗначениеТекущегоВремени >= ВремяНачалаОбменов Тогда
				
			Если (ВремяБлижайшегоОбмена >= ВремяНачалаОбменов) Тогда
				Возврат ВремяБлижайшегоОбмена;
			Иначе
				// обменяться можно будет только в момент времени начала обмена
				Возврат ВремяНачалаОбменов;
			КонецЕсли;

		Иначе
			// время конечное меньше времени начального
			// например от 20.00 до 10.00, это значит, что на текущий день ограничение от 0 до 10.00 или от 20. до 23.59
			
			Если (ВремяБлижайшегоОбмена <= ВремяКонцаОбменов) Тогда
				Возврат ВремяБлижайшегоОбмена;
			ИначеЕсли (ВремяБлижайшегоОбмена >= ВремяНачалаОбменов) Тогда
				Возврат ВремяНачалаОбменов;	
			Иначе
				// в промежутке между началом и концом обмена
				Возврат ВремяНачалаОбменов;
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;
			
КонецФункции

//  процедура для каждой настройки обменов определяет время следующего запуска обмена данными
Процедура ОпределитьВремяСледующегоЗапускаОбменаДанными(СтрокаТЧ, ТекущаяДата = Неопределено)
	
	ИспользоватьАвтообмен = ИспользоватьМеханизмАвтоматическогоОбмена();
	
	Если Не СтрокаТЧ.ВыполнятьАвтоматически
		ИЛИ Не ИспользоватьАвтообмен Тогда
		
		СтрокаТЧ.ВремяСледующегоОбмена = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтрокаТЧ.ВремяСледующегоОбмена = ОпределитьВремяБлижайшегоОбмена(СтрокаТЧ.ДатаПоследнегоОбмена, СтрокаТЧ.ЗаданноеВремя, 
		СтрокаТЧ.КоличествоМинутМеждуОбменами, СтрокаТЧ.КонечноеВремяОбменов, ТекущаяДата);
			
КонецПроцедуры
	
// функция возвращает количество секунд во времени
Функция ПолучитьКоличествоСекундВоВремени(Время)
	
	КоличествоСекунд = 3600 * Час(Время) + 60 * Минута(Время) + Секунда(Время);
	Возврат КоличествоСекунд;
	
КонецФункции
	
// Функция возвращает свремя следующего ближайшего периодического обмена данными по настройке обмена
Функция ПолучитьВремяБлижайшегоПериодическогоОбмена(НастройкаОбмена, ОбновитьДанные = Истина, ДатаПоследнегоОбмена = Неопределено) Экспорт
	
	Если ЗначениеНеЗаполнено(НастройкаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ НастройкаОбмена.ВыполнятьАвтоматически Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьАвтообмен = ИспользоватьМеханизмАвтоматическогоОбмена();
	Если Не ИспользоватьАвтообмен Тогда
    	Возврат Неопределено;
	КонецЕсли;
		
	Если ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда 
		
		СтрокаТЧ = НастройкиДляОбмена.Найти(НастройкаОбмена, "Ссылка");
		
		Если СтрокаТЧ = Неопределено Тогда
			// надо подсчитать время очередного обмена данными по настройке которой нет в списке сегодняшних обменов
			БлижайшийОбмен = ОпределитьДатуИВремяОбменаДанными(НастройкаОбмена);
			Возврат БлижайшийОбмен;
		КонецЕсли;
		
		Если ОбновитьДанные Тогда
			ОпределитьВремяСледующегоЗапускаОбменаДанными(СтрокаТЧ);
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаТЧ.ВремяСледующегоОбмена) Тогда
			
			// надо подсчитать время очередного обмена данными по настройке которой нет в списке сегодняшних обменов
			БлижайшийОбмен = ОпределитьДатуИВремяОбменаДанными(НастройкаОбмена);
			
		Иначе	
			
			КоличествоСекунд = ПолучитьКоличествоСекундВоВремени(СтрокаТЧ.ВремяСледующегоОбмена);
			БлижайшийОбмен = НачалоДня(ТекущаяДата()) + КоличествоСекунд;
			
		КонецЕсли;
		
	Иначе
		
		// определяем по настройке по ней есть периодические обмены данными или нет
		ЕстьПериодическийОбмен = НЕ	НастройкаОбмена.ПометкаУдаления
									И (НастройкаОбмена.ПроизводитьПриемСообщений 
										ИЛИ НастройкаОбмена.ПроизводитьОтправкуСообщений)
									И НастройкаОбмена.ВыполнятьАвтоматически;
									//И НастройкаОбмена.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
		Если ЕстьПериодическийОбмен Тогда
			
			ТаблицаАвтообменов = Новый ТаблицаЗначений();
			ТаблицаАвтообменов.Колонки.Добавить("ЗаданноеВремя");
			ТаблицаАвтообменов.Колонки.Добавить("КоличествоМинутМеждуОбменами");
			ТаблицаАвтообменов.Колонки.Добавить("КонечноеВремяОбменов");
			ТаблицаАвтообменов.Колонки.Добавить("ДатаПоследнегоОбмена");
			
			СтрокаТаблицы = ТаблицаАвтообменов.Добавить();
			СтрокаТаблицы.ЗаданноеВремя = НастройкаОбмена.ЗаданноеВремя;
			СтрокаТаблицы.КоличествоМинутМеждуОбменами = НастройкаОбмена.КоличествоМинутМеждуОбменами;
			СтрокаТаблицы.КонечноеВремяОбменов = НастройкаОбмена.КонечноеВремяОбменов;
			СтрокаТаблицы.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
			
			// в качестве настройки передан сам объект
			БлижайшийОбмен = ОпределитьДатуИВремяОбменаДанными(НастройкаОбмена, ТаблицаАвтообменов);
			Возврат БлижайшийОбмен;
			
		Иначе	
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
	Возврат БлижайшийОбмен;
			
КонецФункции

// процедура обновляет одну настройку автоматического обмена данными
Процедура ОбновитьНастройкуАвтоматическогоОбмена(Ссылка) Экспорт
	
	// по настройке нужно определить подходит ли она для обмена сегодня
	НастройкаОбмена = Ссылка.ПолучитьОбъект();
	
	ТаблицаАвтоматическихОбменов = ПолучитьТаблицуАвтоматическихОбменовДанными(,,,,Ссылка);
	
	// настройка подходит для периодического автообмена
	Если (ТаблицаАвтоматическихОбменов = Неопределено) Тогда
		Возврат;
	КонецЕсли;
		
	Если (ТаблицаАвтоматическихОбменов.Количество() = 1) Тогда
		СтрокаТаблицы = ТаблицаАвтоматическихОбменов[0];
	Иначе
		СтрокаТаблицы = Неопределено;
	КонецЕсли;
			
	СтрокаНастройкиОбмена = НастройкиДляОбмена.Найти(Ссылка, "Ссылка");
	
	// есть ли сейчас эта настройка в с писке автообменов
	Если СтрокаНастройкиОбмена = Неопределено Тогда
		
		Если (СтрокаТаблицы <> Неопределено) Тогда
			
			// если настройка должна быть, то ее нужно в список добавить
			НоваяСтрокаТЧ = НастройкиДляОбмена.Добавить();
			НоваяСтрокаТЧ.ДатаИзмененияНастройкиОбмена = ТекущаяДата();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТаблицы);
			ОпределитьВремяСледующегоЗапускаОбменаДанными(НоваяСтрокаТЧ);
			
			#Если Клиент Тогда
				Сообщить("В список автоматического обмена данными добавлена новая настройка """ + СтрокаТаблицы.Ссылка + """");
			#КонецЕсли
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаТаблицы = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("Из списка текущих автообменов удалена настройка """ + СтрокаНастройкиОбмена.Ссылка + """.");
			#КонецЕсли	
		
			// надо удалять настройку обмена
			НастройкиДляОбмена.Удалить(СтрокаНастройкиОбмена);
		Иначе
			
			ИзменилисьПараметры = ПоказатьИзмененныеАтрибутыНастроек(СтрокаНастройкиОбмена, СтрокаТаблицы);
			
			// изменились параметры настройки обмена
			ЗаполнитьЗначенияСвойств(СтрокаНастройкиОбмена, СтрокаТаблицы);
			
			Если ИзменилисьПараметры Тогда
				СтрокаНастройкиОбмена.ДатаИзмененияНастройкиОбмена = ТекущаяДата();
			КонецЕсли;
			
			ОпределитьВремяСледующегоЗапускаОбменаДанными(СтрокаНастройкиОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		СохранитьЗначение("ТаблицаАвтоматическогоОбменаДанными", НастройкиДляОбмена);
	#КонецЕсли
	
КонецПроцедуры

// Процедура обновляет список необходимых настроек для автоматического обмена данными
Процедура ОбновитьТабличнуюЧастьАвтоматическихОбменов(ТолькоДляПервогоВходаВПрограмму = Ложь, 
			ОбменПриВходеВПрограмму = Ложь, ОбменПриВыходеИзПрограммы = Ложь) Экспорт
	
	мДатаПоследнегоОбновленияДанныхОбОбмене = НачалоДня(ТекущаяДата());
	
	ТаблицаОбменов = ПолучитьТаблицуАвтоматическихОбменовДанными(ТолькоДляПервогоВходаВПрограмму, ОбменПриВходеВПрограмму, ОбменПриВыходеИзПрограммы);
	
	НастройкиДляОбмена.Очистить();
	
	Если ТаблицаОбменов = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Если НЕ (ТолькоДляПервогоВходаВПрограмму ИЛИ ОбменПриВходеВПрограмму ИЛИ ОбменПриВыходеИзПрограммы) Тогда
		
		#Если Клиент Тогда
			СообщитьОбИзмененияхВНастройкеАвтообмена(ТаблицаОбменов);
		#КонецЕсли
		
	КонецЕсли;	
	
	// перегоняем все в табличную часть
	Для Каждого СтрокаТаблицы Из ТаблицаОбменов Цикл
		
		НоваяСтрокаТЧ = НастройкиДляОбмена.Добавить();
		НоваяСтрокаТЧ.ДатаИзмененияНастройкиОбмена = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТаблицы);
	    ОпределитьВремяСледующегоЗапускаОбменаДанными(НоваяСтрокаТЧ);
		
	КонецЦикла;
	
	Если НЕ (ТолькоДляПервогоВходаВПрограмму ИЛИ ОбменПриВходеВПрограмму ИЛИ ОбменПриВыходеИзПрограммы) Тогда
		
		#Если Клиент Тогда
			СохранитьЗначение("ТаблицаАвтоматическогоОбменаДанными", ТаблицаОбменов.Скопировать());
		#КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

// функция получает текущее время из даты
Функция ПолучитьВремяИзДаты(ЗначениеДаты)
	
	ТипДанных = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время));
	Возврат ТипДанных.ПривестиЗначение(ЗначениеДаты);
	
КонецФункции

// Функция определяет подходит ли строка текущей настройки обмена для периодического обмена данными сейчас
Функция ОпределитьПодходитСтрокаДляПериодическогоОбмена(СтрокаТЧ)
	
	//сначала проверим может быть это настройка которая должна сработать при изменении доступности каталога
	Если НЕ ПустаяСтрока(СтрокаТЧ.КаталогПроверкиДоступности) Тогда
		
		//проверим что там с каталогом делается
		ТекущаяДоступностьКаталога = ПроверитьНаличиеКаталога(СтрокаТЧ.КаталогПроверкиДоступности);
		
		Если ТекущаяДоступностьКаталога <> СтрокаТЧ.ДоступностьКаталогаПроверки Тогда
			
			// если до этого каталог был доступен а стал недоступен, то ничего не делаем, а только это фиксируем и все
			Если СтрокаТЧ.ДоступностьКаталогаПроверки Тогда
				
				УстановитьДоступностьКаталогаДляПроверки(СтрокаТЧ.Ссылка, ТекущаяДоступностьКаталога);
				СтрокаТЧ.ДоступностьКаталогаПроверки = ТекущаяДоступностьКаталога;
				
			Иначе
				// а каталог то доступен стал, а был недоступен
				Возврат Истина;				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// сегодня периодический обмен вообще не должен произойти
	Если СтрокаТЧ.ВремяСледующегоОбмена = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеТекущейДаты = ТекущаяДата();
	ЗначениеТекущегоВремени = ПолучитьВремяИзДаты(ЗначениеТекущейДаты);
	
	// время обмена еще не пришло
	Если ЗначениеТекущегоВремени < СтрокаТЧ.ВремяСледующегоОбмена Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// сложность состоит в том, что бы производит "отложенный обмен данными"
	// программа может быть занята определенными действиями и тогда обработчики обмена данными не сработают.
	// Сработать они могут на много позже того срока что указан в качестве предполагаемого времени запуска обмена данными.
	
	// Поступаем таким образом, вместе со строкой настроек еще храним последнее время расчета предполагаемого времени запуска обмена
	// смотрим, если время расчета и время запуска обмена давно прошло, то мы обмен выполняем
	// но потом обновляем строку настроек обмена и рассчитываем новое время обмена данными, а если время с момента
	// нужного обмена много не прошло, то перечитываем настройку обмена, по - новому считаем время предпогагаемого обмена данными и  выполянем обмен
	// если нужно
	
	// надо посмотреть сколько времени прошло с момента текущего времени по момент заданного
	Если НЕ (ЗначениеТекущегоВремени - СтрокаТЧ.ВремяСледующегоОбмена > мКоличествоСекундОпросаОбмена) Тогда
		
		// на текущий момент по новому определяем нужен ли обмен данными
		ОбновитьНастройкуАвтоматическогоОбмена(СтрокаТЧ.Ссылка);	
	КонецЕсли;
	
	// считаем время следующего обмена, на 3 секунды до времени предполагаемого обмена данными
	// уже прошло какое - то время с момента предполагаемого обмена и время превысило интервал обмена
		
	// по новому определим на прошлое время надо ли проводить обмен данныи
	ОпределитьВремяСледующегоЗапускаОбменаДанными(СтрокаТЧ, НачалоДня(ЗначениеТекущейДаты) + 
		ПолучитьКоличествоСекундВоВремени(СтрокаТЧ.ВремяСледующегоОбмена) - 3);
		
	// после пересчета по новой определяем нужно ли обмен производить	
	// сегодня периодический обмен вообще не должен произойти
	Если СтрокаТЧ.ВремяСледующегоОбмена = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// время обмена еще не пришло
	Если ЗначениеТекущегоВремени < СтрокаТЧ.ВремяСледующегоОбмена Тогда
		Возврат Ложь;
	КонецЕсли;

	// надо выяснить работала ли программа в тот момент когда должет был быть обмен данными
	Если ( (НачалоДня(СтрокаТЧ.ДатаИзмененияНастройкиОбмена) < НачалоДня(ЗначениеТекущейДаты))
				ИЛИ (ПолучитьВремяИзДаты(СтрокаТЧ.ДатаИзмененияНастройкиОбмена)<= СтрокаТЧ.ВремяСледующегоОбмена) ) Тогда
				
		Возврат Истина;			
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// функция формирует массив строк для выполнения автоматического обмена данными
Функция СформироватьМассивСсылокНастроекОбмена()
	    	
	Если НастройкиДляОбмена.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// а настроен ли вообще периодический обмен данными
	ИспользоватьАвтообмен = ИспользоватьМеханизмАвтоматическогоОбмена();
	Если Не ИспользоватьАвтообмен Тогда
		
		// нет периодических обменов данными
		НастройкиДляОбмена.Очистить();
	 	Возврат Неопределено;
		
	КонецЕсли;
	
	НастройкиДляОбмена.Сортировать("ВремяСледующегоОбмена");
	
	// тот массив строк с которыми будем работать для автоматического обмена
	МассивОбработанныхСтрок = Неопределено;
	
	Для Каждого СтрокаТЧ Из НастройкиДляОбмена Цикл
		
		// подходит строка для периодического обмена данными или нет
		СтрокаПодходитДляОбмена = ОпределитьПодходитСтрокаДляПериодическогоОбмена(СтрокаТЧ);
		
		Если СтрокаПодходитДляОбмена Тогда
			
			Если МассивОбработанныхСтрок = Неопределено Тогда 
				МассивОбработанныхСтрок = Новый Массив;
			КонецЕсли;
			
			// добавляем строку в список подходящих для работы
			МассивОбработанныхСтрок.Добавить(СтрокаТЧ.Ссылка);
		КонецЕсли;
						
	КонецЦикла;
	
	Возврат МассивОбработанныхСтрок;
	
КонецФункции

// процедура инициирует проведение списка обмена данными
Процедура ИнициироватьОбменДанными(МассивСсылокНастроек, ОбменПриПервомВходеВПрограмму = Ложь)
	
	ПроизвестиСписокОбменовДанными(МассивСсылокНастроек, , ЭтотОбъект, , ОбменПриПервомВходеВПрограмму);
	
КонецПроцедуры

// процедура проводит обмен по настройкам обменов
Процедура ПровестиОбменДанными() Экспорт
	
	Если НачалоДня(ТекущаяДата()) <> мДатаПоследнегоОбновленияДанныхОбОбмене Тогда
		
		// день сменился, обновляем информацию об обмене для этого дня
		ОбновитьТабличнуюЧастьАвтоматическихОбменов();
				
	КонецЕсли;
	
	// тот массив строк с которыми будем работать для автоматического обмена
	МассивСсылокНастроек = СформироватьМассивСсылокНастроекОбмена();
	
	ИнициироватьОбменДанными(МассивСсылокНастроек);

КонецПроцедуры

// процедура производит обмен данными при входе или выходе из программы
Процедура ПроизвестиОбменПриВходеВыходе(ОбменПриПервомВходеВПрограмму = Ложь, ОбменПриВходеВПрограмму = Ложь, ОбменПриВыходеИзПрограммы = Ложь) Экспорт
	
	ОбновитьТабличнуюЧастьАвтоматическихОбменов(ОбменПриПервомВходеВПрограмму, ОбменПриВходеВПрограмму, ОбменПриВыходеИзПрограммы);
	
	МассивОбменов = НастройкиДляОбмена.ВыгрузитьКолонку("Ссылка");
		
	ИнициироватьОбменДанными(МассивОбменов, ОбменПриПервомВходеВПрограмму);

	// далее настройки обмена не нужны
	НастройкиДляОбмена.Очистить();
	
КонецПроцедуры


// ИНИЦИАЛИЗАЦИЯ
///////////////////////////////////////////////////////////////////////////////

мДатаПоследнегоОбновленияДанныхОбОбмене = Неопределено;

#Если Клиент тогда
	мКоличествоСекундОпросаОбмена = глКоличествоСекундОпросаОбмена;
#Иначе
	мКоличествоСекундОпросаОбмена = 60;	
#КонецЕсли

мКоэффициентУменьшенияИнтервалов = ВернутьКоэффициентУменьшенияИнтерваловВызоваОбработчиковОбмена();