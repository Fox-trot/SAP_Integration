#Если Клиент тогда

// Валюта регламентированного учета организаций
Перем мВалютаРегламентированногоУчета Экспорт;

// фискальный регистратор
Перем млФР                     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФИСКАЛЬНЫМ РЕГИСТРАТОРОМ

// Подключение фискального регистратора
//
// Параметры:
//  Модель       - модель фискально регистратора (ссылка на справочник Торговое оборудование)
//  ПарольАдминистратора - пароль администратора, заданный в качестве параметра ФР
//  ПарольПользователя - пароль пользователя, заданный в качестве параметра ФР
//  НомерЛУ      - номер логического устройства с который связан Объект
//  ДляПриемаНаличныхОтЮрЛиц - признак используется ли фискальный регистратор для приема наличных денег от юр.лиц или нет
//  КассаККМ     - Касса ККМ с которой связан фискальный регистратор
//
Процедура ПодключитьФР(Модель, ПарольАдминистратора, ПарольПользователя, НомерЛУ, ДляПриемаНаличныхОтЮрЛиц, ПодключениеПриЗапускеСистемы = ложь)
	Перем Ответ, Объект;

	Параметры = Новый Структура();
	Если ПарольПользователя = 0 Тогда
		Пароль = ПарольАдминистратора;
	Иначе
		Пароль = ПарольПользователя;
	КонецЕсли;
	Параметры.Вставить("Модель" , Модель            );
	Параметры.Вставить("Пароль" , Пароль);
	Параметры.Вставить("Объект" , Объект            );
	Параметры.Вставить("НомерЛУ", НомерЛУ           );
	Если ПодключениеПриЗапускеСистемы Тогда
		Параметры.Вставить("ПодключениеПриЗапускеСистемы");
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Модель.ОбработкаОбслуживания) Тогда
		Сообщить("Фискальный регистратор """ + Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
		Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;

	ФормаОбработки = ПолучитьФормуОбработки(Модель.ОбработкаОбслуживания);
	ФормаОбработки.ВыполнитьОперацию("Подключить", Параметры, Ответ);

	Параметры.Свойство("Объект" , Объект            );

	Если ПустаяСтрока(Ответ) Тогда
		НовыйФР = млФР.Добавить();
		НовыйФР.Объект                   = Объект;
		НовыйФР.Модель                   = Модель;
		НовыйФР.НомерЛУ                  = НомерЛУ;
		НовыйФР.ДляПриемаНаличныхОтЮрЛиц = ДляПриемаНаличныхОтЮрЛиц;
	Иначе
		Сообщить("Фискальный регистратор """ + Модель.Наименование + """: ошибка при подключении", СтатусСообщения.Важное);
		Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
	КонецЕсли;

КонецПроцедуры // ПодключитьФР()

// Отключение фискального регистратора
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//
Процедура ОтключитьФР(СтрокаТаблицыФР)
	Перем Ответ;

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Параметры = Новый Структура();
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Отключить", Параметры, Ответ);

		Если Не ПустаяСтрока(Ответ) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при отключении", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		млФР.Удалить(СтрокаТаблицыФР);

	КонецЕсли;

КонецПроцедуры // ОтключитьФР()

// Аннулирование чека
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//
Процедура АннулироватьЧек(СтрокаТаблицыФР, Ответ, ВыводитьСообщение = Истина) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

			Если ВыводитьСообщение Тогда
				Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
				Сообщить(Ответ, СтатусСообщения.Важное);
			КонецЕсли;

		Иначе

			Параметры = Новый Структура();
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
			Если Пароль = 0 Тогда
				Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
			КонецЕсли;
			Параметры.Вставить("Пароль" , Пароль);
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Если ВыводитьСообщение Тогда
					Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
					Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				КонецЕсли;
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("АннулироватьЧек", Параметры, Ответ);

			Если Не ПустаяСтрока(Ответ) Тогда
				Если ВыводитьСообщение Тогда
					Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при аннулировании чека", СтатусСообщения.Важное);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // АннулироватьЧек()

// Процедура вызова печати строки чека на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьСтрокуЧека(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

			Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
			Сообщить(Ответ, СтатусСообщения.Важное);

		Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );
			СтрокаТовара = Неопределено;
			Параметры.Свойство("СтрокаТовара", СтрокаТовара);
			Если СтрокаТовара.Номенклатура = Неопределено
			 Или СтрокаТовара.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнена номенклатура!";
				Возврат;
			КонецЕсли;
			
			Если СтрокаТовара.Цена = 0 Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнена цена товара!";

				Возврат;
			КонецЕсли;

			Если СтрокаТовара.Количество = 0 Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Ответ = "Не заполнено количество товара!";
				Возврат;
			КонецЕсли;

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПечататьСтрокуЧека", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				//Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечататьСтрокуЧека()

// Процедура вызова закрытия чека на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ЗакрытьЧек(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

			Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
			Сообщить(Ответ, СтатусСообщения.Важное);

		Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ЗакрытьЧек", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
				ОткрытьЯщик(СтрокаТаблицыФР, Параметры, Ответ);
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при закрытии чека", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗакрытьЧек()

// Процедура получения номера нового чека и смены на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПолучитьНомерЧекаСмены(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда
		Если НРег(СтрокаТаблицыФР.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

			Ответ = "Фискальный регистратор """+СтрокаТаблицыФР.Модель+""" предназначен для отражения наличных денежных расчетов";
			Сообщить(Ответ, СтатусСообщения.Важное);

		Иначе

			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
			Если Пароль = 0 Тогда
				Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
			КонецЕсли;
			Параметры.Вставить("Пароль" , Пароль);
			Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
			Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

			Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПолучитьНомерЧекаСмены", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при получении номера чека и смены", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолучитьНомерЧекаСмены()

// Процедура вызова печати чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель фискального регистратора из справочника "Торговое оборудование"
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьЧек(МодельТорговогоОборудования, Параметры, Ответ) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Модель",   МодельТорговогоОборудования);
	Отбор.Вставить("КассаККМ", Параметры.КассаККМ);
	Отбор.Вставить("НомерЛУ",  Параметры.НомерЛУ);
	
	НайденныеСтроки = млФР.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда

		Ответ = "Фискальный регистратор """+МодельТорговогоОборудования+""" не подключен";
		Сообщить(Ответ, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	ИскомаяСтрока = НайденныеСтроки[0];

	Если НРег(ИскомаяСтрока.ДляПриемаНаличныхОтЮрЛиц) = "истина" Тогда

		Ответ = "Фискальный регистратор """+МодельТорговогоОборудования+""" предназначен для отражения наличных денежных расчетов";
		Сообщить(Ответ, СтатусСообщения.Важное);

	Иначе

		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
		Параметры.Вставить("Объект" , ИскомаяСтрока.Объект            );
		Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ           );

		Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ПечататьЧек", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечататьЧек()

// Процедура вызова печати ПКО на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ПечататьЧекДляПКО(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		ИскомаяСтрока = СтрокаТаблицыФР.Значение;
		Если НРег(ИскомаяСтрока.ДляПриемаНаличныхОтЮрЛиц) <> "истина" Тогда

			Ответ = "Фискальный регистратор """+ИскомаяСтрока.Модель+""" не предназначен для отражения наличных денежных расчетов";
			Сообщить(Ответ, СтатусСообщения.Важное);

		Иначе

			Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора"));
			Параметры.Вставить("Объект" , ИскомаяСтрока.Объект            );
			Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ           );

			Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
				Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
				Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
				Возврат;
			КонецЕсли;

			ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
			ФормаОбработки.ВыполнитьОперацию("ПечататьЧекДляПКО", Параметры, Ответ);

			Если ПустаяСтрока(Ответ) Тогда
			Иначе
				Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка при печати чека", СтатусСообщения.Важное);
				Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечататьЧекДляПКО()

// Процедура вызова закрытия смены на фискальном регистраторе
// на ФР печатается Z-отчет
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ЗакрытьСмену(СтрокаТаблицыФР, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		ИскомаяСтрока = СтрокаТаблицыФР.Значение;
		
		// параметры фискального регистратора
		Параметры = Новый Структура();
		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора"));
		Параметры.Вставить("Объект" , ИскомаяСтрока.Объект              );
		Параметры.Вставить("НомерЛУ", ИскомаяСтрока.НомерЛУ             );

		Если ЗначениеНеЗаполнено(ИскомаяСтрока.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ЗакрытьСмену", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + ИскомаяСтрока.Модель.Наименование + """: ошибка при закрытии кассовой смены", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	Иначе

		Ответ = "Не подключен фискальный регистратор";

	КонецЕсли;

КонецПроцедуры // ЗакрытьСмену()

// Процедура вызова печати Х-отчета на фискальном регистраторе
// на ФР печатается Z-отчет
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ХОтчет(СтрокаТаблицыФР, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		// параметры фискального регистратора
		Параметры = Новый Структура();
		Параметры.Вставить("Пароль" , ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора"));
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект              );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ             );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ХОтчет", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при печати Х-отчета", СтатусСообщения.Важное);
			Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
		КонецЕсли;

	Иначе

		Ответ = "Не подключен фискальный регистратор";

	КонецЕсли;

КонецПроцедуры // ХОтчет()

// Процедура вызова открытия денежного ящика на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ОткрытьЯщик(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("ОткрытьЯщик", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при открытии ящика", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьЯщик()

// Процедура внесения денег в денежный ящик на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ВнестиСумму(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Внести", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при внесении денег в ящик", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнестиСумму()

// Процедура изъятия денег из денежного ящика на фискальном регистраторе
//
// Параметры:
//  СтрокаТаблицыФР - строка таблицы подключенных фискальных регистраторов
//  Параметры    - структура содержащая необходимые параметры
//  Ответ        - возвращаемое значение с текстом ошибки, если она произошла
//
Процедура ИзъятьСумму(СтрокаТаблицыФР, Параметры, Ответ) Экспорт

	Если СтрокаТаблицыФР <> Неопределено Тогда

		Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
		Если Пароль = 0 Тогда
			Пароль = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
		КонецЕсли;
		Параметры.Вставить("Пароль" , Пароль);
		Параметры.Вставить("Объект" , СтрокаТаблицыФР.Объект            );
		Параметры.Вставить("НомерЛУ", СтрокаТаблицыФР.НомерЛУ           );

		Если ЗначениеНеЗаполнено(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания) Тогда
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка", СтатусСообщения.Важное);
			Сообщить("    Не заполнено поле ""Обработка обслуживания""", СтатусСообщения.БезСтатуса);
			Возврат;
		КонецЕсли;

		ФормаОбработки = ПолучитьФормуОбработки(СтрокаТаблицыФР.Модель.ОбработкаОбслуживания);
		ФормаОбработки.ВыполнитьОперацию("Изъять", Параметры, Ответ);

		Если ПустаяСтрока(Ответ) Тогда
		Иначе
			Сообщить("Фискальный регистратор """ + СтрокаТаблицыФР.Модель.Наименование + """: ошибка при изъятии денег из ящика", СтатусСообщения.Важное);
			Сообщить("     "+Ответ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнестиСумму()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Получить форму обработки торгового оборудования
//
// Параметры:
//  Значение     - ссылка на Перечиление.ОбработкаТорговогоОборудования
//
// Возвращаемое значение:
//  форма обработки "ТорговоеОборудование"
//
Функция ПолучитьФормуОбработки(Значение) Экспорт

	Если ЗначениеНеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	Иначе
		ИндексЗначения = Перечисления.ОбработкиТорговогоОборудования.Индекс(Значение);
		ИмяФормыОбработки = Значение.Метаданные().ЗначенияПеречисления.Получить(ИндексЗначения).Имя;
		ФормаОбработки = Обработки.ТорговоеОборудование.ПолучитьФорму(Строка(ИмяФормыОбработки),,);
	КонецЕсли;

	Возврат ФормаОбработки;

КонецФункции // ПолучитьФормуОбработки()

// Подключает торговое оборудование
//
Процедура ПодключитьОборудование() Экспорт
	Перем Параметр1, Параметр2, Параметр3, Параметр4;

	ИмяТекущегоКомпьютера = Врег(ИмяКомпьютера());

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл
		Если Оборудование.Компьютер <> ИмяТекущегоКомпьютера Тогда

			Продолжить;

		ИначеЕсли НЕ(Оборудование.Подключено) Тогда

			Продолжить;

		Иначе

				Параметры = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);
				ПарольАдминистратора = 0; //ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора");
				ПарольПользователя   = 0; //ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора");
				Параметры.Свойство("ДляПриемаНаличныхОтЮрЛиц"  , Параметр3);
				ПодключитьФР(Оборудование.МодельТорговогоОборудования, ПарольАдминистратора, ПарольПользователя, Оборудование.НомерЛогическогоУстройства, Параметр3);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодключитьОборудование()

// Отключает торговое оборудование
//
Процедура ОтключитьОборудование() Экспорт

	Если млФР <> Неопределено Тогда
		Пока млФР.Количество() > 0 Цикл
			ОтключитьФР(млФР[0]);
		КонецЦикла;
	КонецЕсли;
    
КонецПроцедуры // ОтключитьОборудование()

// Дополняет передаваемую строку Строка символами Символ до строки длиной Длина слева
//
// Параметры:
//  Строка       - строка, к которой надо добавить символы
//  Символ       - добавляемый символ
//  Длина        - длина результирующей строки
//
// Возвращаемое значение:
//  строка
//
Функция ДополнитьСтрокуЛ(Строка, Символ, Длина) Экспорт

	Добавить = Длина - СтрДлина(Строка);
	ВозвращаемаяСтрока = Строка;
	Для а = 1 По Добавить Цикл
		ВозвращаемаяСтрока = Символ + ВозвращаемаяСтрока;
	КонецЦикла;

	Возврат ВозвращаемаяСтрока;

КонецФункции // ДополнитьСтрокуЛ()

// Функция переносит номер логического устройства из свойств модели в измерение
// регистра сведений "Торговое оборудование" при переходе с релиза 10.1.1 на 10.1.2
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Истина если ошибок не произошло, иначе Ложь
//
Функция ПеренестиНомераЛУИзСвойствМоделиВИзмерениеРегистраСведений() Экспорт
	Перем НомерЛУ;

	ТорговоеОборудование = РегистрыСведений.ТорговоеОборудование;
	Оборудование = ТорговоеОборудование.Выбрать();
	Пока Оборудование.Следующий() Цикл

		ИмяКомпьютера = Оборудование.Компьютер;
		Модель        = Оборудование.МодельТорговогоОборудования;
		Подключено    = Оборудование.Подключено;
		Параметры     = ЗначениеИзСтрокиВнутр(Оборудование.Параметры);

		Параметры.Свойство("НомерЛогическогоУстройства", НомерЛУ);

		МенеджерЗаписиРегистра = Оборудование.ПолучитьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Удалить();
		МенеджерЗаписиРегистра.Компьютер                   = ИмяКомпьютера;
		МенеджерЗаписиРегистра.МодельТорговогоОборудования = Модель;
		МенеджерЗаписиРегистра.Подключено                  = Подключено;
		МенеджерЗаписиРегистра.Параметры                   = ЗначениеВСтрокуВнутр(Параметры);
		МенеджерЗаписиРегистра.НомерЛогическогоУстройства  = НомерЛУ;
		МенеджерЗаписиРегистра.Записать();

	КонецЦикла;

	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// фискальный регистратор
млФР = Новый ТаблицаЗначений;
млФР.Колонки.Добавить("Объект");
млФР.Колонки.Добавить("Модель");
млФР.Колонки.Добавить("НомерЛУ");
млФР.Колонки.Добавить("ДляПриемаНаличныхОтЮрЛиц");

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли