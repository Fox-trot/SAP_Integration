
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	ИнициализироватьДерево();
	
	Если НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = Нстр("ru = 'Подписать'");
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
			
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отборы.Количество() > 0 Тогда
		УстановитьОтборыДинамическихСписков(ЭтаФорма, Отборы);
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь) Тогда
		Элементы.КомандаПодписать.Видимость                             = Ложь;
		Элементы.ОтправитьИПолучитьЭД.Видимость                         = Ложь;
	КонецЕсли;

	Для Каждого Страница ИЗ Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		НазваниеСписка = СтрЗаменить(Страница.Имя, "Страница", "");
		Запросы.Добавить(НазваниеСписка, ЭтаФорма[НазваниеСписка].ТекстЗапроса);
		
	КонецЦикла;
	
	ОбновитьДанныеДерева(Запросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
		ОбновитьОтображениеДанных();
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекДинамическогоСпискаТекущиеДелаЭДО" Тогда
		ИмяДинамическогоСписка = "";
		Параметр.Свойство("ИмяДинамическогоСписка", ИмяДинамическогоСписка);
		Если ЗначениеЗаполнено(ИмяДинамическогоСписка) Тогда	
			ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.Инициализировать(Параметр.ИсточникДоступныхНастроек);
			ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ЗагрузитьНастройки(Параметр.Настройки);
			ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Параметр.ПользовательскиеНастройки);
			ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметр.ФиксированныеНастройки);
			ОбновитьДанныеДереваНаКлиенте();
			ОбновитьДинамическиеСписки();
			ОбновитьОтображениеДанных();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ПоказатьСкрытьБыстрыйПоиск();
	ПриИзмененииОтбора();
	ЭлектронныеДокументыСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)
	
	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	ПеречитыватьДанные = Истина;	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	#Если ВебКлиент Тогда
		ПеречитыватьДанные = Элемент.ТекущиеДанные.ОбновитьСписок;
	#КонецЕсли
	КонецЕсли;
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ТекущийЭлемент = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")];
	ОбновитьДинамическиеСписки(ПеречитыватьДанные);
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Создать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ДокументУчета") > 0 Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ДокументУчета);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	МассивСсылок = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Получен.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтруктураДанных = Элементы.Получен.ДанныеСтроки(ВыделеннаяСтрока);
		Если СтруктураДанных.ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылок.Добавить(СтруктураДанных.ЭлектронныйДокумент);
	КонецЦикла;
	
	venkonПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтказать(Команда)
	
	МассивСсылок = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Получен.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтруктураДанных = Элементы.Получен.ДанныеСтроки(ВыделеннаяСтрока);
		МассивСсылок.Добавить(СтруктураДанных.ЭлектронныйДокумент);
	КонецЦикла;
	
	venkonОтказать(МассивСсылок);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалить(Команда)
	
	МассивСсылок = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Отправлен.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтруктураДанных = Элементы.Отправлен.ДанныеСтроки(ВыделеннаяСтрока);
		МассивСсылок.Добавить(СтруктураДанных.Документ);
	КонецЦикла;
	
	venkonУдалить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрофилиЭДО(Команда)
	ЭлектронныеДокументыКлиент.ОткрытьФормуПрофилейЭДО();
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.АрхивЭлектронныхДокументов");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСумме(Форма, Значение, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Отправлен.Отбор, "СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Получен.Отбор, "СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписан.Отбор, "СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Отказано.Отбор, "СуммаДокумента", ВидСравнения, Значение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДате(Форма, ЗначениеОтбора, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Отправлен.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Получен.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписан.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Отказано.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправлен.Отбор,
		"Ответственный", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Получен.Отбор,
		"Ответственный", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписан.Отбор,
		"Ответственный", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отказано.Отбор,
		"Ответственный", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоКонтрагенту(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправлен.Отбор,
		"Контрагент", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Получен.Отбор,
		"Контрагент", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписан.Отбор,
		"Контрагент", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отказано.Отбор,
		"Контрагент", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизацииЭД(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправлен.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Получен.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписан.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отказано.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоВидуЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправлен.Отбор,
	//	"ВидЭД", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Получен.Отбор,
	//	"ВидЭД", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписан.Отбор,
	//	"ВидЭД", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отказано.Отбор,
	//	"ВидЭД", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоНаправлениюЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправлен.Отбор,
		"Документ.Направление", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Получен.Отбор,
		"Документ.Направление", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписан.Отбор,
		"Документ.Направление", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отказано.Отбор,
		"Документ.Направление", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформации(Форма, ЗначениеОтбора)

	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки(Знач ПеречитыватьДанные = Истина)
	
	ИмяСписка = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	// Для версии приложения 8.2 работает только обновление данных.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
		ПеречитыватьДанные = Истина;
	КонецЕсли;
	
	Если ПеречитыватьДанные Тогда
		Элементы[ИмяСписка].Обновить();
		Если Не Элементы.ДеревоДействий.ТекущиеДанные = Неопределено Тогда 
			Элементы.ДеревоДействий.ТекущиеДанные.ОбновитьСписок = Ложь;
		КонецЕсли;
	Иначе
		Элементы[ИмяСписка].ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий(Знач ДеревоДействий, Запросы)
	
	//<Raxx
	
	Дерево = ДанныеФормыВЗначение(ДеревоДействий, Тип("ДеревоЗначений"));
	ДанныеОКоличествах = ДанныеОКоличествах();
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Отправлен", НСтр("ru = 'Ожидает подписи партнера'"), ДанныеОКоличествах[0]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Получен", НСтр("ru = 'Ожидает вашей подписи'"), ДанныеОКоличествах[1]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Подписан", НСтр("ru = 'Подписан сторонами'"), ДанныеОКоличествах[2]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Отказано", НСтр("ru = 'Отказ партнера'"), ДанныеОКоличествах[3]);
	
	Возврат Дерево;

	//Raxx>
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстОперации,
				ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	//<Raxx
	
	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправлен";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Получен";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Подписан";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отказано";
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
	//Raxx>
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, Значение, Представление, Количество)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПредставлениеСтрокДереваРекурсивно(Строка, Значение, Представление, Количество);
		КонецЕсли;
		Если Строка.Значение = Значение Тогда
			НовоеПредставление = Представление + ?(Количество > 0, " (" + Количество + ")", "");
			Строка.ОбновитьСписок = Макс(Строка.ОбновитьСписок, Не Строка.Представление = НовоеПредставление);
			Строка.Представление = НовоеПредставление;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	//НоваяСтрока = БыстрыеОтборы.Добавить();
	//НоваяСтрока.Параметр = "ВидЭД";
	//НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	//НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	//НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	//
	//НоваяСтрока = БыстрыеОтборы.Добавить();
	//НоваяСтрока.Параметр = "НаправлениеЭД";
	//НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	//НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	//НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	//
	//НоваяСтрока = БыстрыеОтборы.Добавить();
	//НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	//НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	//НоваяСтрока.Тип = "Строка";
	//НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = АвторизованныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	УдалитьОтборыПоСумме();
	УдалитьОтборыПоДате();
	
	УстановитьОтборыДинамическихСписков(ЭтаФорма, БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическихСписков(Форма, Отборы)
	
	Для Каждого СтрокаОтбора ИЗ Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			УстановитьОтборПоОтветственному(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			УстановитьОтборПоКонтрагенту(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			УстановитьОтборПоОрганизацииЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			УстановитьОтборПоНаправлениюЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			УстановитьОтборПоВидуЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, НачалоДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, КонецДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "ДополнительнаяИнформация" Тогда
			УстановитьОтборПоДополнительнойИнформации(Форма, СтрокаОтбора.Значение);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоСумме()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отправлен.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Получен.Отбор,    	 "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписан.Отбор,     "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отказано.Отбор,  	 "СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоДате()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отправлен.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Получен.Отбор,    	 "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписан.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отказано.Отбор, "Дата");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();

	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка ИЗ БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДерева(Знач Запросы)
	
	Дерево = ДанныеДереваДействий(ДеревоДействий, Запросы);
	
	Коллекция = ДеревоДействий.ПолучитьЭлементы();
	Коллекция.Очистить();
	
	Для Каждого Строка Из Дерево.Строки Цикл
		ЗаполнитьСтрокиРекурсивно(Коллекция, Строка);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Приемник, Знач Источник);
	
	НовСтрокаКоллекции = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрокаКоллекции, Источник);
	Если Источник.Строки.Количество() > 0 Тогда
		Для Каждого Строка ИЗ Источник.Строки Цикл
			ЗаполнитьСтрокиРекурсивно(НовСтрокаКоллекции.ПолучитьЭлементы(), Строка);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОКоличествах()
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Страница ИЗ Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		НазваниеСписка = СтрЗаменить(Страница.Имя, "Страница", "");
		ТекстЗапроса = ЭтаФорма[НазваниеСписка].ТекстЗапроса;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		ТекстОтбора = "";
		
		НастройкиКомпоновки = ЭтаФорма[НазваниеСписка].КомпоновщикНастроек.ПолучитьНастройки();
		
		Для Каждого Отбор Из НастройкиКомпоновки.Отбор.Элементы Цикл
			
			// Отбор.ЛевоеЗначение - поле, которое необходимо разложить на массив строк с разделением по "."
			МассивПоля 			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрокЭД(Строка(Отбор.ЛевоеЗначение), ".");
			ОпределяемоеПоле 	= МассивПоля[0];
			ИндексПоля 			= Найти(НРЕГ(ТекстЗапроса), " как " + НРЕГ(ОпределяемоеПоле));
			Ключ 				= МассивПоля[МассивПоля.ВГраница()];
			
			Если ИндексПоля = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Определим полный путь к полю отбора
			СтрокаДоОпределяемогоПоля = Сред(ТекстЗапроса, 1, ИндексПоля - 1);
			// Удалим первую строку текста запроса "ВЫБРАТЬ РАЗРЕШЕННЫЕ"
			СтрокаДоОпределяемогоПоля = СтрЗаменить(СтрокаДоОпределяемогоПоля, СтрПолучитьСтроку(СтрокаДоОпределяемогоПоля, 1), "");
			Пока Найти(СтрокаДоОпределяемогоПоля, ",") > 0 Цикл
				СтрокаДоОпределяемогоПоля = Сред(СтрокаДоОпределяемогоПоля, Найти(СтрокаДоОпределяемогоПоля, ",") + 1);
			КонецЦикла;	
			СтрокаДоОпределяемогоПоля = СокрЛП(СтрЗаменить(СтрокаДоОпределяемогоПоля, Символы.ПС, " "));
			
			// Собираем путь к подстрокам обходя синоним поля отбора
			Первый = Истина;
			Для Каждого ЧастьПоля Из МассивПоля Цикл
				Если Первый Тогда
					Первый = Ложь;
					Продолжить;
				КонецЕсли;
				СтрокаДоОпределяемогоПоля = СтрокаДоОпределяемогоПоля + "." + ЧастьПоля;
			КонецЦикла;
			
			// Собираем строку условия по полному пути к полю отбора
			ТекстОтбора = ТекстОтбора + ?(ПустаяСтрока(ТекстОтбора), "", " И ") + СтрокаДоОпределяемогоПоля;
			
			Если Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ТекстОтбора = ТекстОтбора + " = &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ТекстОтбора = ТекстОтбора + " <> &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ТекстОтбора = ТекстОтбора + " В (&" + Ключ + ")";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ТекстОтбора = ТекстОтбора + " НЕ В (&" + Ключ + ")";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ТекстОтбора = ТекстОтбора + " ПОДОБНО &" + Ключ + " + ""%""";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ТекстОтбора = ТекстОтбора + " НЕ ПОДОБНО &" + Ключ + " + ""%""";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ТекстОтбора = ТекстОтбора + " ПОДОБНО ""%"" + &" + Ключ + " + ""%""";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ТекстОтбора = ТекстОтбора + " НЕ ПОДОБНО ""%"" + &" + Ключ + " + ""%""";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ТекстОтбора = ТекстОтбора + " > &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ТекстОтбора = ТекстОтбора + " >= &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ТекстОтбора = ТекстОтбора + " < &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ТекстОтбора = ТекстОтбора + " <= &" + Ключ;
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ТекстОтбора = ТекстОтбора + " В ИЕРАРХИИ (&" + Ключ + ")";
			ИначеЕсли Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ТекстОтбора = ТекстОтбора + " НЕ В ИЕРАРХИИ (&" + Ключ + ")";
			Иначе
				ТекстОтбора = ТекстОтбора + " = &" + Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(Ключ, Отбор.ПравоеЗначение);
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстОтбора) Тогда
			Запрос.Текст = Запрос.Текст + ?(Найти(Запрос.Текст, "ГДЕ") > 0 , " И ", " ГДЕ ") + ТекстОтбора;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПодзапроса = РезультатЗапроса.Выбрать();
		МассивРезультатов.Добавить(ВыборкаПодзапроса.Количество());
		
	КонецЦикла;
		
	Возврат МассивРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеДереваНаКлиенте()
	
	ТекущиеДанные = Элементы.ДеревоДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяСтрока = Неопределено;
	Иначе
		ТекущаяСтрока = ТекущиеДанные.Значение;
	КонецЕсли;
	ОбновитьДанныеДерева(Запросы);
	ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
	Для Каждого Элемент ИЗ ЭлементыДерева Цикл
		Если Элемент.Значение = ТекущаяСтрока Тогда
			Элементы.ДеревоДействий.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		Если Элемент.Значение = "Обработать" Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		Если ВРег(Элемент.Значение) = ВРег("Приглашения") Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		ПодчиненныеЭлементыСтроки = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
			Для Каждого ПодчиненныйЭлемент ИЗ ПодчиненныеЭлементыСтроки Цикл
				Если ПодчиненныйЭлемент.Значение = ТекущаяСтрока Тогда
					Элементы.ДеревоДействий.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура venkonПодписатьИОтправить(МассивСсылок)
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ЭлектронныеДокументыКлиент.venkonСформироватьПодписатьОтправитьЭД(Неопределено, Неопределено, МассивСсылок);
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура venkonОтказать(МассивСсылок)
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ЭлектронныеДокументыКлиент.venkonОтказать(Неопределено, МассивСсылок);
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура venkonУдалить(МассивСсылок)
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ЭлектронныеДокументыКлиент.venkonУдалить(МассивСсылок);
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСкрытьБыстрыйПоиск()
	
	Элементы.ЗаголовокОтбора.Заголовок = "Быстрый поиск" + ?(ПоказатьБыстрыйПоиск," (скрыть)", " (показать)");
	Элементы.БыстрыеОтборы.Видимость = ПоказатьБыстрыйПоиск;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУчетныеДокументыНаСервере(МассивПакетовЭД)
	
	Документы.ПакетЭД.СоздатьДокументыУчетаПоДаннымПакетовЭД(МассивПакетовЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУчетныеДокументы(Команда)
	
	МассивПакетовЭД = Новый Массив;
	
	МассивКлючей = Элементы.Подписан.ВыделенныеСтроки;
	Для Каждого КлючЗаписи Из МассивКлючей Цикл
		МассивПакетовЭД.Добавить(КлючЗаписи.СсылкаНаОбъект);
	КонецЦикла;
	
	СоздатьУчетныеДокументыНаСервере(МассивПакетовЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписок(Команда)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	ИмяДинамическогоСписка = СтрЗаменить(ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Заголовок", "Настройка списка");
	СтруктураПараметров.Вставить("ИмяДинамическогоСписка", ИмяДинамическогоСписка);
	СтруктураПараметров.Вставить("ИсточникДоступныхНастроек", ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	СтруктураПараметров.Вставить("Настройки", ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.Настройки);
	СтруктураПараметров.Вставить("ПользовательскиеНастройки", ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ПользовательскиеНастройки);
	СтруктураПараметров.Вставить("ФиксированныеНастройки", ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.ФиксированныеНастройки);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастроекДинамическогоСписка",СтруктураПараметров,ЭтаФорма, Истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


