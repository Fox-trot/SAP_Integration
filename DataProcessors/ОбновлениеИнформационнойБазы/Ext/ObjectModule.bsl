#Если Клиент Тогда

//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	// Подготовка к выводу формы описания обновлений.

	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();

	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	
	ТекущаяВерсияИБ = "";
	//Вызов функций заполнения данных для пустой информационной базы
	Если ТекущаяВерсияИБ = "" Тогда

		СтрСообщения = "начальное заполнение информационной базы версии " + Метаданные.Версия;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		НачатьТранзакцию();

		ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии

		ЗафиксироватьТранзакцию();

		Возврат;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбновление()
	
// Процедура производит обновление информации в документе "Принятие к учету ОС"
//
Процедура ОбновитьПринятиеКУчетуОС()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Обновление информации в документе "Принятие к учету ОС"
		Док = Выборка.Ссылка.ПолучитьОбъект();		
		
		Если НЕ Док.УдалитьСписыватьПриПринятииКУчету Тогда
			
			Если ЗначениеНеЗаполнено(Док.ПорядокПогашенияСтоимостиБУ) Тогда
				Док.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(Док.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
				Док.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
			КонецЕсли;
		
		Иначе
			
			Если ЗначениеНеЗаполнено(Док.ПорядокПогашенияСтоимостиБУ) Тогда
				Док.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(Док.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
				Док.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету;
			КонецЕсли;
			
			Док.СпособыОтраженияРасходовПоАмортизации = Док.УдалитьНаправлениеСписанияПриПринятииКУчету;
			
		КонецЕсли;
		
		Док.Записать();
		
		Если Док.Проведен Тогда
			
			// Обновление информации в регистре сведений "Первоначальные сведения ОС (бухгалтерский учет)"
			ПервоначальныеСведенияОСБухгалтерскийУчет = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СоздатьНаборЗаписей();
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Значение      = Док.Ссылка;
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Использование = Истина;
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Прочитать();
			
			Если ПервоначальныеСведенияОСБухгалтерскийУчет.Количество() > 0 Тогда
				
				Для Индекс = 0 По (ПервоначальныеСведенияОСБухгалтерскийУчет.Количество() - 1) Цикл
					
					ПервоначальныеСведенияОСБухгалтерскийУчет[Индекс].ПорядокПогашенияСтоимости = Док.ПорядокПогашенияСтоимостиБУ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Записать();
			
			// Обновление информации в регистре сведений "Первоначальные сведения ОС (налоговый учет)"
			ПервоначальныеСведенияОСНалоговыйУчет = РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет.СоздатьНаборЗаписей();
			
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Значение      = Док.Ссылка;
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Использование = Истина;
			
			ПервоначальныеСведенияОСНалоговыйУчет.Прочитать();
			
			Если ПервоначальныеСведенияОСНалоговыйУчет.Количество() > 0 Тогда
				
				Для Индекс = 0 По (ПервоначальныеСведенияОСНалоговыйУчет.Количество() - 1) Цикл
					
					ПервоначальныеСведенияОСНалоговыйУчет[Индекс].ПорядокВключенияСтоимостиВСоставРасходов = Док.ПорядокВключенияСтоимостиВСоставРасходовНУ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПервоначальныеСведенияОСНалоговыйУчет.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПринятиеКУчетуОС()

// Процедура производит обновление информации в документе "Ввод начальных 
// остатков ОС"
//
Процедура ОбновитьВводНачальныхОстатковОС()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковОС.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатковОС КАК ВводНачальныхОстатковОС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Обновление информации в документе "Ввод начальных остатков ОС"
		Док = Выборка.Ссылка.ПолучитьОбъект();		
		
		Для Каждого СтрокаДок Из Док.ОС Цикл
				
			Если НЕ СтрокаДок.УдалитьСписатьНаЗатратыПриВводеРегл Тогда
				
				Если ЗначениеНеЗаполнено(СтрокаДок.ПорядокПогашенияСтоимостиБУ) Тогда
					СтрокаДок.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
				КонецЕсли;
				
				Если ЗначениеНеЗаполнено(СтрокаДок.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
					СтрокаДок.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеНеЗаполнено(СтрокаДок.ПорядокПогашенияСтоимостиБУ) Тогда
					СтрокаДок.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету;
				КонецЕсли;
				
				Если ЗначениеНеЗаполнено(СтрокаДок.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
					СтрокаДок.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Док.Записать();
		
		Если Док.Проведен Тогда
		
			// Обновление информации в регистре сведений "Первоначальные сведения ОС (бухгалтерский учет)"
			ПервоначальныеСведенияОСБухгалтерскийУчет = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СоздатьНаборЗаписей();
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Значение      = Док.Ссылка;
			ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Использование = Истина;
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Прочитать();
			
			Если ПервоначальныеСведенияОСБухгалтерскийУчет.Количество() > 0 Тогда
				
				Для Индекс = 0 По (ПервоначальныеСведенияОСБухгалтерскийУчет.Количество() - 1) Цикл
					
					СтрокаТЧ = Док.ОС.Найти(ПервоначальныеСведенияОСБухгалтерскийУчет[Индекс].НомерСтроки, "НомерСтроки");
					
					ПервоначальныеСведенияОСБухгалтерскийУчет[Индекс].ПорядокПогашенияСтоимости = СтрокаТЧ.ПорядокПогашенияСтоимостиБУ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПервоначальныеСведенияОСБухгалтерскийУчет.Записать();
			
			// Обновление информации в регистре сведений "Первоначальные сведения ОС (налоговый учет)"
			ПервоначальныеСведенияОСНалоговыйУчет = РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет.СоздатьНаборЗаписей();
			
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Значение      = Док.Ссылка;
			ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Использование = Истина;
			
			ПервоначальныеСведенияОСНалоговыйУчет.Прочитать();
			
			Если ПервоначальныеСведенияОСНалоговыйУчет.Количество() > 0 Тогда
				
				Для Индекс = 0 По (ПервоначальныеСведенияОСНалоговыйУчет.Количество() - 1) Цикл
					
					СтрокаТЧ = Док.ОС.Найти(ПервоначальныеСведенияОСНалоговыйУчет[Индекс].НомерСтроки, "НомерСтроки");
					
					ПервоначальныеСведенияОСНалоговыйУчет[Индекс].ПорядокВключенияСтоимостиВСоставРасходов = СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПервоначальныеСведенияОСНалоговыйУчет.Записать();
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ОбновитьВводНачальныхОстатковОС()

// Процедура производит обновление информации в документе "Возврат товаров 
// поставщику"
//
Процедура ОбновитьВозвратТоваровПоставщику()
	
	//Запрос = Новый Запрос();
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ВозвратТоваровПоставщику.Ссылка
	//|ИЗ
	//|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	// Заполнение новых реквизитов документа "Возврат товаров поставщику"
	//	Док = Выборка.Ссылка.ПолучитьОбъект();		
	//	
	//	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Док.Организация, Док.Контрагент, Док.ДоговорКонтрагента);
	//	
	//	Док.СчетУчетаДоходовБУ     = СчетаУчета.СчетУчетаДоходовПоТареБУ;
	//	Док.СчетУчетаРасходовБУ    = СчетаУчета.СчетУчетаРасходовПоТареБУ;
	//	Док.СчетУчетаДоходовНУ     = СчетаУчета.СчетУчетаДоходовПоТареНУ;
	//	Док.СчетУчетаРасходовНУ    = СчетаУчета.СчетУчетаРасходовПоТареНУ;
	//	Док.СтатьяДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
	//	
	//	Док.Записать();
	//	
	//КонецЦикла;
	
КонецПроцедуры // ОбновитьВозвратТоваровПоставщику()

// Процедура изменяет неправильный адрес линии техподдержки hline@1c.ru
// на правильный v8@1c.ru
//
Процедура ИзменитьАдресЛинииТехподдержки()

	ЗначенияПараметров = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
	Если ТипЗнч(ЗначенияПараметров) = Тип("ТаблицаЗначений") Тогда
		СтрокаПараметровОтправки = ЗначенияПараметров.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		Если ВРег(СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1]) = "HLINE@1C.RU" Тогда
			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";
		КонецЕсли;
		Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(ЗначенияПараметров, Новый СжатиеДанных));
	КонецЕсли; 

КонецПроцедуры

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	//Параметры.ФормаПодбораВалют         = Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаВалют          = Справочники.Валюты.ПолучитьФормуСписка();
	//Параметры.ФормаЗагрузкиКурсов       = Обработки.КурсыВалютРБК.ПолучитьФорму();
	//Параметры.ФормаПодбораЕдиниц        = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаЕдиниц         = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();
	//Параметры.ФормаЗагрузкиБанков       = Обработки.ЗагрузкаБанков.ПолучитьФорму();
	//Параметры.ФормаПодбораОКСМ          = Справочники.КлассификаторСтранМира.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаОКСМ           = Справочники.КлассификаторСтранМира.ПолучитьФормуСписка();
	//Параметры.ФормаПодбораДокументовУдостоверяющихЛичность = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	//Параметры.ФормаСпискаДокументовУдостоверяющихЛичность  = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФормуСписка();

	//Параметры.ФормаСпискаКонтрагентов   = Справочники.Контрагенты.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаНоменклатуры   = Справочники.Номенклатура.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаТиповЦенНоменклатуры = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуСписка();

	//Организации = Справочники.Организации.Выбрать();
	//Организация = Неопределено;
	//
	//Если Организации.Следующий() Тогда
	//	Организация = Организации.ПолучитьОбъект();
	//КонецЕсли;

	//Если Организация = Неопределено Тогда
	//	Параметры.ФормаНовойОрганизации = "ФормаНовойОрганизации";
	//Иначе
	//	Параметры.ФормаНовойОрганизации = Организация.ПолучитьФорму();
	//КонецЕсли;

	//Параметры.ФормаСпискаОрганизаций    = Справочники.Организации.ПолучитьФормуСписка();
	//Параметры.ФормаСпискаСкладов        = Справочники.Склады.ПолучитьФормуСписка();

	//Параметры.ФормаСпискаПользователей  = Справочники.Пользователи.ПолучитьФормуСписка();
	//Параметры.ФормаПользователя         = глТекущийПользователь;

	Возврат МакетОписаниеОбновлений;

КонецФункции

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное, Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторЕдиницИзмерения.Ссылка
	               |ИЗ
	               |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	               |ГДЕ
	               |	КлассификаторЕдиницИзмерения.Организация = &Организация
	               |	И КлассификаторЕдиницИзмерения.Код = &Код";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Код", Код);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Ссылка = Выборка.Ссылка;
	Иначе
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;	 
	
	//Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ " +
	               "назначено значение """ + ЗначениеКонстанты + """";

	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
		КонецЕсли; 
		
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки() Экспорт

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("ТаблицаЗначений") Тогда

		ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";
			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_ПортSMTP[1]                                        = 25;

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//

// Установка границы запрета изменения данных
//
Процедура УстановитьДатуЗапретаРедактирования(ОбщаяДатаЗапрета)
	
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Организации.Ссылка КАК Организация,
					|	Роли.Ссылка КАК Роль,
					|	&ОбщаяДата КАК ГраницаЗапретаИзменений
					|ИЗ
					|	Справочник.Организации КАК Организации
					|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			НаборПравПользователей.Ссылка КАК Ссылка
					|		ИЗ
					|			Перечисление.НаборПравПользователей КАК НаборПравПользователей
					|		ГДЕ
					|			НаборПравПользователей.Ссылка <> &ПолныеПрава) КАК Роли
					|		ПО (ИСТИНА)";
						
	Запрос.УстановитьПараметр("ПолныеПрава", Перечисления.НаборПравПользователей.ПолныеПрава);
	Запрос.УстановитьПараметр("ОбщаяДата", ОбщаяДатаЗапрета);
		
	Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	// Обязательное начальное заполнение информационной базы.

	// Создадим одну организацию - по умолчанию она будет основной
	Организация = Справочники.Организации.НайтиПоНаименованию("Наша организация");

	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда

		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование		= "Наша организация";
		//Организация.ВидСтавокЕСНиПФР	= Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
		Организация.Записать();

	КонецЕсли;

	// пропишем эту оргнаизацию текущему пользователю
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение      = глТекущийПользователь;

	Запись = Набор.Добавить();

	Запись.Пользователь = глТекущийПользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
	Запись.Значение     = Организация.Ссылка;

	Запись = Набор.Добавить();

	Запись.Пользователь = глТекущийПользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета;
	Запись.Значение     = Истина;
	
	Запись = Набор.Добавить();

	Запись.Пользователь = глТекущийПользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
	Запись.Значение     = Истина;
	
	Набор.Записать();

	// Заполнение сведений бухгалтерского и налогового учета.
	//УстановитьСуммовойУчетНаСкладах();
	
	УстановитьУчетПоРознице();
	
	// Граница запрета изменения данных
	УстановитьДатуЗапретаРедактирования('19800101');

	//// Заполнение данных для механизма контактной информации
	//ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	// Обязательное начальное заполнение информационной базы для торгового учета.

	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("860", "сум.", "Узбекский сум", "сум, сума, сум, м, тийин, тийин, тийин, ж, 2");
	ВалютаУправленческогоУчета     = НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
	ВалютаМеждународногоУчета      = НайтиСоздатьВалюту("978", "EUR", "Евро"      ,       "евро, евро, евро, м, цент, цента, центов, м, 2");

	УстановитьКонстанту("ВалютаРегламентированногоУчета",     ВалютаРегламентированногоУчета);
	УстановитьКонстанту("РежимЗавершенияРаботыПользователей", Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу);
	УстановитьКонстанту("РежимРасчетаРабочегоВремени", Перечисления.РежимыРасчетаРабочегоВремени.Ручной);
	УстановитьКонстанту("МетодПереоценкиВалютныхДенежныхСредств", Перечисления.МетодыПереоценкиВалютныхДенежныхСредств.МетодПрямогоСписания);
	УстановитьКонстанту("СпособПечатиДоверенности", Перечисления.СпособыПечатиДоверенностей.ПечатьНа1Стороне);

	ЗаполнитьСписокРегламентированныхОтчетов();
	
	НачальноеЗаполениеСправочникаКлассификаторСтранМира();
	
	НачальноеЗаполнениеНастроекПоЗП()

КонецФункции // ЗаполнитьПустуюИБ()

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина) Экспорт

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать().ПолучитьФорму("ОсновнаяФорма");
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

Процедура НачальноеЗаполнениеНастроекПоЗП()
	
	ЗаполнитьНачисления();
	ЗаполнитьГруппыНачислений();
	
КонецПроцедуры	

Процедура ЗаполнитьГруппыНачислений()
	
	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Оклад);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Тариф);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Сдельно);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Больничные);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Отпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускДополнительный);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпенсацияОтпускаПриУвольнении);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпесацияЗаНеиспользованныйОтпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаНочныеЧасы);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаРаботуВПраздник);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаСверхурочныеЧасы);
	
	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.ВсеНачисления,СписокНачислений);
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.ОблагаетсяПодоходнымНалогом,СписокНачислений);
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.НачисленияВходящиеВФОТ,СписокНачислений);

	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Оклад);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Тариф);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Сдельно);
	
	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.ОсновныеНачисления,СписокНачислений);
	
	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Оклад);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Тариф);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Сдельно);
	//СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Больничные);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Отпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускДополнительный);
	//СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпенсацияОтпускаПриУвольнении);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпесацияЗаНеиспользованныйОтпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаНочныеЧасы);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаРаботуВПраздник);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаСверхурочныеЧасы);
	
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.ОблагаетсяПенсионнымиВзносами,СписокНачислений);
	
	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Оклад);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Тариф);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Сдельно);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Больничные);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Отпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускДополнительный);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпенсацияОтпускаПриУвольнении);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпесацияЗаНеиспользованныйОтпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаНочныеЧасы);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаРаботуВПраздник);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ДоплатаЗаСверхурочныеЧасы);
	
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.ОблагаетсяВзносамиВПрофсоюз,СписокНачислений);
	
	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Больничные);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам);
	
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.БольничныеЛисты,СписокНачислений);
	
	СписокНачислений=Новый СписокЗначений;
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.Отпуск);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.ОтпускДополнительный);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпенсацияОтпускаПриУвольнении);
	СписокНачислений.Добавить(ПланыВидовРасчета.Начисления.КомпесацияЗаНеиспользованныйОтпуск);
	
 	ЗаполнитьГруппуНачислений(Справочники.ГруппыНачислений.Отпуска,СписокНачислений);
	
	
КонецПроцедуры	

Процедура ЗаполнитьГруппуНачислений(ГруппаНачислений,СписокНачислений)
	
	ГруппаНачисленийОбъект=ГруппаНачислений.ПолучитьОбъект();
	
	Для Каждого Начисление Из СписокНачислений Цикл
		Если ГруппаНачисленийОбъект.Расчеты.Найти(Начисление.Значение)=Неопределено Тогда
			Строка=ГруппаНачисленийОбъект.Расчеты.Добавить();
			Строка.ВидРасчета=Начисление.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	ГруппаНачисленийОбъект.Записать();
			
КонецПроцедуры	

Процедура ЗаполнитьНачисления()
	
	ЗначенияСвойств=новый Структура;
	ЗначенияСвойств.Вставить("КраткоеНаименование","Оклад");
	ЗначенияСвойств.Вставить("ОчередностьРасчета","1");
	ЗначенияСвойств.Вставить("ВидДохода",Перечисления.ВидыДохода.ОплатаТруда);
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.Оклад,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Тариф");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.Тариф,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Сдельно");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.Сдельно,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Больничные");
	ЗначенияСвойств.Вставить("ОчередностьРасчета","10");
	ЗначенияСвойств.Вставить("ВидДохода",Перечисления.ВидыДохода.ОплатаТруда);
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.Больничные,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Отпуск");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.Отпуск,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Отпуск доп.");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.ОтпускДополнительный,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Отпуск по берем. и родам");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Компен. отп. при ув.");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.КомпенсацияОтпускаПриУвольнении,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Компен. за неисп. отп.");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.КомпесацияЗаНеиспользованныйОтпуск,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Доп. за ночные часы");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.ДоплатаЗаНочныеЧасы,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Доп. за работу в праздник");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.ДоплатаЗаРаботуВПраздник,ЗначенияСвойств);
	
	ЗначенияСвойств.Вставить("КраткоеНаименование","Доп. за сверхуроч. часы");
	
	ЗаполнитьНачисление(ПланыВидовРасчета.Начисления.ДоплатаЗаСверхурочныеЧасы,ЗначенияСвойств);
	
КонецПроцедуры	

Процедура ЗаполнитьНачисление(Начисление,ЗначенияСвойств)
	
	НачислениеОбъект=Начисление.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(НачислениеОбъект,ЗначенияСвойств);
	НачислениеОбъект.Записать();
	
КонецПроцедуры	

Процедура УстановитьУчетПоРознице()
	
	Константы.УчетТоваровВРозницеПоНаименованиям.Установить(ложь);
	
	ДобавитьСубконто(ПланыСчетов.Хозрасчетный.А2920,ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);	
	ДобавитьСубконто(ПланыСчетов.Хозрасчетный.А2980,ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);	
	ДобавитьСубконто(ПланыСчетов.Хозрасчетный.А9020,ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);	
	ДобавитьСубконто(ПланыСчетов.Хозрасчетный.А9120,ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);	
	
КонецПроцедуры	

Процедура ДобавитьСубконто(СчетДляЗаполнения,ВидСубконто)
	
	
	Счета = Новый СписокЗначений();
	Счета.Добавить(СчетДляЗаполнения);
	
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(СчетДляЗаполнения);
	Пока ВыборкаСчетов.Следующий() Цикл
		
		Счета.Добавить(ВыборкаСчетов.Ссылка);
		
	КонецЦикла;
	
	
	Для каждого Счет Из Счета Цикл
		
		
		Объект   = Счет.Значение.ПолучитьОбъект();
		
		Субконто = Объект.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто");
		
		Если Субконто = Неопределено Тогда
			
			НовыйВид = Объект.ВидыСубконто.Вставить(0);
			
			НовыйВид.ВидСубконто = ВидСубконто;
			НовыйВид.Суммовой    = Истина;
			НовыйВид.Количественный = Истина;
			
			Объект.Записать();
			Сообщить("Установлено субконто "+ВидСубконто.Наименование+" по счету "+Строка(Счет.Значение.Код));
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполениеСправочникаКлассификаторСтранМира()

	УЗБЕКИСТАН = Справочники.КлассификаторСтранМира.УЗБЕКИСТАН;

	// Заполнение полного наименования предопределенного элемента.
	УЗБЕКИСТАНОбъект                    = УЗБЕКИСТАН.ПолучитьОбъект();
	УЗБЕКИСТАНОбъект.НаименованиеПолное = "Республика Узбекистан";
	УЗБЕКИСТАНОбъект.Записать();

КонецПроцедуры // НачальноеЗаполениеСправочникаКлассификаторСтранМира()

// Корректировка документов, ссылающихся на ОКСМ.
//
Процедура КорректировкаСсылокНаКлассификаторСтранМира(ИмяДокумента, ИмяТЧ = "", ИмяРеквизита = "СтранаПроисхождения", ТипОбъекта = "Документ")

	Россия = Справочники.КлассификаторСтранМира.Россия;
	ИмяТаблицы = ИмяДокумента + ИмяТЧ;
	ТипДокумента = ИмяДокумента + ?(ИмяТЧ = "", "", "." + ИмяТЧ);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	" + ИмяТаблицы + ".Ссылка
		|   " + ?(ИмяТЧ = "", "", ", " + ИмяТаблицы + ".НомерСтроки как НомерСтроки")+"
		|ИЗ
		|	" + ТипОбъекта + "." + ТипДокумента + " КАК " + ИмяТаблицы + "
		|ГДЕ
		|	(" + ИмяТаблицы + "." + ИмяРеквизита + ".Код = ""643""
		|			ИЛИ " + ИмяТаблицы + "." + ИмяРеквизита + ".Наименование = ""РОССИЯ"")
		|	И (НЕ " + ИмяТаблицы + "." + ИмяРеквизита + ".Предопределенный)
		|
		| " + ?(ИмяТЧ = "", "", " Итоги ПО
		| " + ИмяТаблицы + ".Ссылка ")+"
		|
		|";
	
	Если ИмяТЧ = "" Тогда
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли; 
	

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ИмяТЧ = "" Тогда
			Объект.СтранаПроисхождения = Россия;
			
		Иначе
			ТЧ = Объект[ИмяТЧ];
			ВыборкаПоСтрокам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСтрокам.Следующий() Цикл
                СтрокаТЧ = ТЧ[ВыборкаПоСтрокам.НомерСтроки-1];
				СтрокаТЧ[ИмяРеквизита] = Россия;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Записать();
		
	КонецЦикла;

КонецПроцедуры // КорректировкаСсылокНаКлассификаторСтранМира()

// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
// замена на новую ссылку
//
Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
	
	Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
		Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
			Объект[ИмяСвойства] = НоваяСсылка;
			ОбъектИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
// замена на новую ссылку
//
Процедура ЗаменаСсылкиНаСубконто(Субконто, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
	
	ОсмотрелиВсеЗначения = Ложь;
	
	Пока Не ОсмотрелиВсеЗначения Цикл
		Для каждого КлючЗначение из Субконто Цикл
		
			Если ТипЗнч(КлючЗначение.Значение) = ТипСсылки Тогда
				Если КлючЗначение.Значение = ЗаменяемаяСсылка Тогда
					Субконто.Вставить(КлючЗначение.Ключ, НоваяСсылка);
					ОбъектИзменен = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Ключ) = ТипСсылки Тогда
				Если КлючЗначение.Ключ = ЗаменяемаяСсылка Тогда
					Субконто.Вставить(НоваяСсылка, КлючЗначение.Значение);
					Субконто.Удалить(КлючЗначение.Ключ);
					ОбъектИзменен = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОсмотрелиВсеЗначения = Истина;
	КонецЦикла;
		
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

// Выполняет поиск ссылок на каждый объект из переданного спсика исходных объектов.
// Все найденные ссылки заменяются ссылкой на новый объект, соответствующий исходному.
//
// Поиск и замена ссылок производится по коллекциям метаданных:
// - Реквизиты;
// - Табличные части;
// - Измерения;
// - Ресурсы;
// - Родители;
// - Владельца.
//
Процедура ЗаменаСсылокНаОбъекты(СписокИсходныхОбъектов, СписокНовыхОбъектов)
	
	Сообщить("Выполняется замена ссылок на неиспользующиеся счета учета", СтатусСообщения.Информация);
	
	Если СписокИсходныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборыЗаписей = Новый Структура;
	
	МассивИсходныхОбъектов = СписокИсходныхОбъектов.ВыгрузитьЗначения();
	Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);

	Для каждого Ссылка из Ссылки Цикл
		
		// Получение ссылки на новый объект
		ТипСсылки = ТипЗнч(Ссылка.Ссылка);
		ИсходныйОбъект = СписокИсходныхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
		ИндексОбъектаВСписке = СписокИсходныхОбъектов.Индекс(ИсходныйОбъект);
		НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		// Обработка констант
		Если ИмяКоллекцииОбъектовМД = "Константа" Тогда
			Попытка
				Константы[Ссылка.Метаданные.Имя].Установить(НоваяСсылка);
				Сообщить("Обработан объект <" + Ссылка.Данные + ">");
				
			Исключение
				Сообщить(ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + "> не обработан. В этом объекте следует вручную заменить неиспользующиеся счета.", СтатусСообщения.ОченьВажное);
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;
			
		// Обработка последовательностей
		Если ИмяКоллекцииОбъектовМД = "Последовательность" Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработка независимых регистров сведений
		Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
			Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
			ОбъектИзменен = Ложь;
			
			Измерения = Ссылка.Метаданные["Измерения"];
			Для каждого Измерение из Измерения Цикл
				Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
			КонецЦикла;
			
			Объект.Период = Ссылка.Данные.Период;
			Объект.Прочитать();
			
			Если Объект.Выбран() Тогда
				Измерения = Ссылка.Метаданные["Измерения"];
				Для каждого Измерение из Измерения Цикл
					ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
				Реквизиты = Ссылка.Метаданные["Реквизиты"];
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
			    Ресурсы = Ссылка.Метаданные["Ресурсы"];
				Для каждого Ресурс из Ресурсы Цикл
					ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
				Попытка
					Объект.Записать();
					Сообщить("Обработан объект <" + Ссылка.Данные + ">");
				
				Исключение
					Сообщить(ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + "> не обработан. В этом объекте следует вручную заменить неиспользующиеся счета.", СтатусСообщения.ОченьВажное);
				КонецПопытки;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Обработка всех прочих объектов, не являющихся константами и независимыми регистрами сведений
		Объект = Ссылка.Данные.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		
		// Обработка реквизитов
		Реквизиты = Ссылка.Метаданные["Реквизиты"];
		Для каждого Реквизит из Реквизиты Цикл
			ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
		КонецЦикла;
		
		// Обработка табличных частей
		ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
		Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
			Реквизиты = ТабличнаяЧасть["Реквизиты"];
			ТЧ = Объект[ТабличнаяЧасть.Имя];
			Для каждого СтрокаТЧ из ТЧ Цикл
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Обработка движений документов
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
			Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
				// Получение имени коллекции объектов метаданных
				ПолноеИмяРегистра = Регистр.ПолноеИмя();
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
					Менеджер = РегистрыНакопления[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
					Менеджер = РегистрыСведений[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Менеджер = РегистрыБухгалтерии[Регистр.Имя];
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = Неопределено;
				Если Не НаборыЗаписей.Свойство(ИмяКоллекцииРегистров+Регистр.Имя, НаборЗаписей) Тогда
					НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
					
				Иначе
					НаборЗаписей.Очистить();
				КонецЕсли;
				
				НаборЗаписей.Отбор.Регистратор.Установить(Ссылка.Данные);
				НаборЗаписей.Прочитать();
				
				НаборЗаписейИзменен = Ложь;
				
				Для каждого Запись из НаборЗаписей Цикл
					Измерения = Регистр["Измерения"];
					Для каждого Измерение из Измерения Цикл
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Балансовый = Измерение.Балансовый;
							
						Иначе
							Балансовый = Истина;
						КонецЕсли;
						
						Если Балансовый Тогда
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЦикла;
					
					Реквизиты = Регистр["Реквизиты"];
					Для каждого Реквизит из Реквизиты Цикл
						ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
					КонецЦикла;
					
				    Ресурсы = Регистр["Ресурсы"];
					Для каждого Ресурс из Ресурсы Цикл
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Балансовый = Ресурс.Балансовый;
								
						Иначе
							Балансовый = Истина;
						КонецЕсли;
							
						Если Балансовый Тогда
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЦикла;
				
					Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
						Если Регистр.Корреспонденция Тогда
							
							ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.СубконтоДт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.СубконтоКт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.Субконто, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если НаборЗаписейИзменен Тогда
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Владельцы
		Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
			ЗаменаСсылкиНаОбъект(Объект, "Владелец", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
		КонецЕсли;
		
		// Родители
		Если (ИмяКоллекцииОбъектовМД = "Справочник") или
			 (ИмяКоллекцииОбъектовМД = "ПланВидовХарактеристик") или
			 (ИмяКоллекцииОбъектовМД = "ПланСчетов") Тогда
			 
			ЗаменаСсылкиНаОбъект(Объект, "Родитель", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен); 
		КонецЕсли;
		 
		Если ОбъектИзменен Тогда
			Попытка
				Объект.Записать();
				Сообщить("Обработан объект <" + Ссылка.Данные + ">");
				
			Исключение
				Сообщить(ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + "> не обработан. В этом объекте следует вручную заменить неиспользующиеся счета.", СтатусСообщения.ОченьВажное);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаменаСсылокНаОбъект()


// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			Счета.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();
			
			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();
					Состояние("Добавлен вид субконто ""Номенклатура"" на счете " + Объект.Код + " плана счетов """ + ИмяПланаСчетов + """...");

				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();
				Состояние("Добавлен вид субконто ""Номенклатура"" на счете " + Объект.Код + " плана счетов """ + ИмяПланаСчетов + """...");

			КонецЕсли;

		КонецЦикла;

	Исключение

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Выполняет заполнение регистра сведений "УчетнаяПолитикаОбщаяДляРегламентированногоУчета"
// и устанавливает субконто "Склады" в счетах.
//Процедура УстановитьСуммовойУчетНаСкладах()

//	Счета = Новый СписокЗначений();
//	Счета.Добавить("ОборудованиеКУстановке");
//	Счета.Добавить("ПриобретениеОбъектовОсновныхСредств");
//	Счета.Добавить("Полуфабрикаты");
//	Счета.Добавить("Товары");
//	Счета.Добавить("ГотоваяПродукция");
//	Счета.Добавить("Материалы");
//	Счета.Добавить("ТоварыПринятыеНаКомиссию");

//	НачатьТранзакцию();

//	Для каждого Счет Из Счета Цикл
//		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
//		УстановитьСубконтоНоменклатура(Счет.Значение, "Налоговый"   , Ложь  , Ложь);
//	КонецЦикла;

//	Счета = Новый СписокЗначений();
//	Счета.Добавить("МатериалыПереданныеВПереработку");
//	Счета.Добавить("ТоварыОтгруженные");

//	Для каждого Счет Из Счета Цикл
//		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
//		УстановитьСубконтоНоменклатура(Счет.Значение, "Налоговый"   , Ложь,   Истина);
//	КонецЦикла;


//	ЗафиксироватьТранзакцию();

//КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()


// Заполняет регистры сведения бухгалтерии связанных со счетами учета
//
Процедура ЗаполнитьРегистрыСчетовУчета()

	НачатьТранзакцию();

	Состояние("Выполняется начальное заполнение регистра сведений ""Счета учета расчетов с контрагентами""...");

	Набор  = РегистрыСведений.СчетаУчетаРасчетовСКонтрагентами.СоздатьНаборЗаписей();
	//Запись с пустым измерением ВидРасчетовПоДоговору  - подставляется пока не выбран договор.
	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Запись.СчетУчетаРасчетовСПоставщикомУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателемУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданныхУСН         = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученныхУСН       = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамПолученным;
	Запись.СчетРасчетовПоПретензиям            = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	Запись.СчетУчетаДоходовПоТареБУ            = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Запись.СчетУчетаРасходовПоТареБУ           = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Запись.СчетУчетаДоходовПоТареНУ            = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
	Запись.СчетУчетаРасходовПоТареНУ           = ПланыСчетов.Налоговый.ВнереализационныеРасходы;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПоставщикомУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателемУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданныхУСН         = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученныхУСН       = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамПолученным;
	Запись.СчетРасчетовПоПретензиям            = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	Запись.СчетУчетаДоходовПоТареБУ            = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Запись.СчетУчетаРасходовПоТареБУ           = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Запись.СчетУчетаДоходовПоТареНУ            = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
	Запись.СчетУчетаРасходовПоТареНУ           = ПланыСчетов.Налоговый.ВнереализационныеРасходы;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;
	Запись.СчетУчетаРасчетовСПоставщикомУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателемУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданныхУСН         = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученныхУСН       = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамПолученным;
	Запись.СчетРасчетовПоПретензиям            = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал;
	Запись.СчетУчетаДоходовПоТареБУ            = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Запись.СчетУчетаРасходовПоТареБУ           = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Запись.СчетУчетаДоходовПоТареНУ            = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
	Запись.СчетУчетаРасходовПоТареНУ           = ПланыСчетов.Налоговый.ВнереализационныеРасходы;

	Запись = Набор.Добавить();
	Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;
	Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ; 
	Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ;
	Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;
	Запись.СчетУчетаРасчетовСПоставщикомУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПоставщиками;
	Запись.СчетУчетаРасчетовСПокупателемУСН    = ПланыСчетов.НалоговыйУСН.РасчетыСПокупателями;
	Запись.СчетУчетаАвансовВыданныхУСН         = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамВыданным;
	Запись.СчетУчетаАвансовПолученныхУСН       = ПланыСчетов.НалоговыйУСН.РасчетыПоАвансамПолученным;
	Запись.СчетРасчетовПоПретензиям            = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ;
	Запись.СчетУчетаДоходовПоТареБУ            = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Запись.СчетУчетаРасходовПоТареБУ           = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Запись.СчетУчетаДоходовПоТареНУ            = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
	Запись.СчетУчетаРасходовПоТареНУ           = ПланыСчетов.Налоговый.ВнереализационныеРасходы;

	Набор.Записать();

	Состояние("Выполняется начальное заполнение регистра сведений ""Счета бухгалтерского учета, переоцениваемые в особом порядке""...");

	Набор = РегистрыСведений.СчетаСОсобымПорядкомПереоценкиБУ.СоздатьНаборЗаписей();

	//Счета учета расчетов в у.е.
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	
	//Счета валютного учета кредитов и займов
	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал;

	Набор.Записать();
	
	Состояние("Выполняется начальное заполнение регистра сведений ""Счета доходов и расходов по деятельности, облагаемой ЕНВД ""...");

	Набор = РегистрыСведений.СчетаДоходовИРасходовЕНВД.СоздатьНаборЗаписей();

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД;

	Запись = Набор.Добавить();
	Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД;

	Набор.Записать();
	
	Состояние("Выполняется начальное заполнение регистра сведений ""Объекты строительства организаций""...");

	Набор = РегистрыСведений.ОбъектыСтроительстваОрганизаций.СоздатьНаборЗаписей();

	Запись = Набор.Добавить();
	
	Запись.Организация                = Справочники.Организации.ПустаяСсылка();
	Запись.ОбъектСтроительства        = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	Запись.СчетБухгалтерскогоУчета    = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	Запись.СчетБухгалтерскогоУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;

	Набор.Записать();
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()


// установка реквизита отражать в НУ у предопределенных элементов 
// справочника Прочие доходы и расходы
// при обновлении релиза
Процедура ОбновитьСправочникПрочиеДоходыИРасходы()

	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СуммовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();

КонецПроцедуры

// установка реквизита отражать в НУ у предопределенных элементов 
// справочника Прочие доходы и расходы
// при обновлении на редакцию 1.1
Процедура ОбновитьСправочникПрочиеДоходыИРасходы11()

	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
	Если  СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД =  Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();

	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров.ПолучитьОбъект();
	СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();
	
	СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары.ПолучитьОбъект();
	Если СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
	Если СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка() Тогда
		СтатьяДоходовРаходов.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
	КонецЕсли;
	СтатьяДоходовРаходов.Записать();
	
КонецПроцедуры // ОбновитьСправочникПрочиеДоходыИРасходы11()

// Реструктуризация РегистраСведений.СчетаУчетаНоменклатуры всвязи с изменением состава измерений
// и используемых ресурсов регистра
Процедура РеструктуризироватьСчетаУчетаНоменклатуры() Экспорт
	
	НаборЗаписей = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НачальноеКолЗаписей = НаборЗаписей.Количество();
	
	Для Индекс = 1 По НачальноеКолЗаписей Цикл
		
		Выборка = НаборЗаписей[Индекс - 1];
		
		Если (НЕ ЗначениеНеЗаполнено(Выборка.Склад)) ИЛИ (НЕ ЗначениеНеЗаполнено(Выборка.ТипСклада)) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьТипСклада = Ложь;
		
		Если ((НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетУчетаВРозницеБУ)) И (НЕ Выборка.СчетУчетаБУ = Выборка.УдалитьСчетУчетаВРозницеБУ))
		 ИЛИ ((НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетУчетаВРозницеНУ)) И (НЕ Выборка.СчетУчетаНУ = Выборка.УдалитьСчетУчетаВРозницеНУ))
		 ИЛИ ((НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетДоходовВРозницеБУ)) И (НЕ Выборка.СчетДоходовОтРеализацииБУ = Выборка.УдалитьСчетДоходовВРозницеБУ))
		 ИЛИ ((НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетРасходовВРозницеБУ)) И (НЕ Выборка.СчетРасходовОтРеализацииБУ = Выборка.УдалитьСчетРасходовВРозницеБУ)) Тогда
			
			УстановитьТипСклада = Истина;
			
			// Создадим новую запись.
			Запись = НаборЗаписей.Добавить();
			Запись.Номенклатура = Выборка.Номенклатура;
			Запись.Организация  = Выборка.Организация;
			Запись.Активность   = Истина;
			Запись.ТипСклада    = Перечисления.ТипыСкладов.Розничный;
			
			Запись.СчетДоходовОтРеализацииБУ  = Выборка.УдалитьСчетДоходовВРозницеБУ;
			Запись.СчетДоходовОтРеализацииНУ  = Выборка.СчетДоходовОтРеализацииНУ;
			Запись.СчетРасходовОтРеализацииБУ = Выборка.УдалитьСчетРасходовВРозницеБУ;
			Запись.СчетРасходовОтРеализацииНУ = Выборка.СчетРасходовОтРеализацииНУ;
			
			Запись.СчетУчетаБУ              = Выборка.УдалитьСчетУчетаВРозницеБУ;
			Запись.СчетУчетаНУ              = Выборка.УдалитьСчетУчетаВРозницеНУ;
			Запись.СчетУчетаУСН             = Выборка.СчетУчетаУСН;
			Запись.СчетУчетаЗабалансовыйБУ  = Выборка.СчетУчетаЗабалансовыйБУ;
			Запись.СчетУчетаЗабалансовыйНУ  = Выборка.СчетУчетаЗабалансовыйНУ;
			Запись.СчетУчетаЗабалансовыйУСН = Выборка.СчетУчетаЗабалансовыйУСН;
			
			Запись.СчетУчетаНДСПоПриобретеннымЦенностям = Выборка.СчетУчетаНДСПоПриобретеннымЦенностям;
			Запись.СчетУчетаНДСПоРеализации             = Выборка.СчетУчетаНДСПоРеализации;
			Запись.СчетУчетаНДСУплаченногоНаТаможне     = Выборка.СчетУчетаНДСУплаченногоНаТаможне;
						
		КонецЕсли;
				
		Если (НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетУчетаВРозницеБУ))
		 ИЛИ (НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетУчетаВРозницеНУ))
		 ИЛИ (НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетДоходовВРозницеБУ))
		 ИЛИ (НЕ ЗначениеНеЗаполнено(Выборка.УдалитьСчетРасходовВРозницеБУ)) Тогда
			
			//Изменим существующую запись.
			Если УстановитьТипСклада Тогда
				Выборка.ТипСклада = Перечисления.ТипыСкладов.Оптовый;
			КонецЕсли;
			
			Выборка.УдалитьСчетУчетаВРозницеБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Выборка.УдалитьСчетУчетаВРозницеНУ 	= ПланыСчетов.Налоговый.ПустаяСсылка();
			Выборка.УдалитьСчетДоходовВРозницеБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Выборка.УдалитьСчетРасходовВРозницеБУ 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // РеструктуризироватьСчетаУчетаНоменклатуры() 

// Копирование записей РегистраСведений.ЦеныНоменклатуры   <- РегистраСведений.ЦеныНоменклатуры
// Копирование записей РегистраСведений.ЦеныНоменклатуры <- РегистраСведений.ЦеныНоменклатуры
// в связи с установкой режима записи = "Подчинение регистратору",
// Параметры
Процедура РеструктуризироватьЦеныНоменклатуры() Экспорт
	// Копирование записей РегистраСведений.ЦеныНоменклатуры   <- РегистраСведений.ЦеныНоменклатуры
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Выборка = Документы.УстановкаЦенНоменклатуры.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Период = НачалоМесяца('19800101');
		ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		Док	   = Документы.УстановкаЦенНоменклатуры.ПустаяСсылка();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьЦеныНоменклатуры.Период КАК Период,
		|	УдалитьЦеныНоменклатуры.Номенклатура,
		|	УдалитьЦеныНоменклатуры.ТипЦен КАК ТипЦен,
		|	УдалитьЦеныНоменклатуры.Валюта,
		|	УдалитьЦеныНоменклатуры.Цена
		|ИЗ
		|	РегистрСведений.УдалитьЦеныНоменклатуры КАК УдалитьЦеныНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ТипЦен";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//Ключевые параметры документа: Период и Тип цен, если они не совпадают с текущими, 
			//то создается новый документ, иначе дополняется существующий.
			
			Если (Выборка.Период = Период) И 
				(Выборка.ТипЦен = ТипЦен) И
				(Не ЗначениеНеЗаполнено(Док)) Тогда
				
				//Сформируем строку документа
				СтрокаДокумента 				= Док.Товары.Добавить();
				СтрокаДокумента.Номенклатура 	= Выборка.Номенклатура;
				СтрокаДокумента.Цена 			= Выборка.Цена;
				Если НЕ ЗначениеНеЗаполнено(Выборка.Валюта) Тогда
					СтрокаДокумента.Валюта 			= Выборка.Валюта;
				Иначе	
					СтрокаДокумента.Валюта 			= мВалютаРегламентированногоУчета;
				КонецЕсли;
				
			Иначе
				Если (Не ЗначениеНеЗаполнено(Док)) Тогда //Запишем документ
					
					Попытка
						Док.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						СообщитьОбОшибке(ОписаниеОшибки());
					КонецПопытки;
		
				КонецЕсли;
				
				//Создадим новый документ
				Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				Док.Дата = НачалоДня(Выборка.Период);
				Док.УстановитьНовыйНомер();
				Док.ТипЦен = Выборка.ТипЦен;
				
				Период = Выборка.Период;
				ТипЦен = Выборка.ТипЦен;
				
				//Сформируем строку документа
				СтрокаДокумента 				= Док.Товары.Добавить();
				СтрокаДокумента.Номенклатура 	= Выборка.Номенклатура;
				СтрокаДокумента.Цена 			= Выборка.Цена;
				Если НЕ ЗначениеНеЗаполнено(Выборка.Валюта) Тогда
					СтрокаДокумента.Валюта 			= Выборка.Валюта;
				Иначе	
					СтрокаДокумента.Валюта 			= мВалютаРегламентированногоУчета;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если (Не ЗначениеНеЗаполнено(Док)) Тогда //Запишем документ
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		 
	КонецЕсли; 
	
КонецПроцедуры // РеструктуризироватьЦеныНоменклатуры() 

// Устанавливает субокнто расчетные документы у указанного счета.
//
Процедура ПрименитьПараметрыРасчетовССотрудниками(ИмяСчета, ИмяПланаСчетов, ВестиУчетПоРаботникам)

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");

			Если НЕ (Субконто = Неопределено) Тогда
				Если Субконто.Предопределенное Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ВестиУчетПоРаботникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
					НовыйВид.Суммовой    = Истина;
					
					Если ИмяПланаСчетов = "Налоговый" Тогда
						Если (Счет.Значение.Ссылка.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда)
							ИЛИ Счет.Значение.Ссылка = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда) Тогда 
							НовыйВид.ТолькоОбороты = Истина;
						КонецЕсли;
					КонецЕсли;
						
					Если Объект.Количественный Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """ установлено субконто ""Работники организаций"",";
					
				КонецЕсли;

			ИначеЕсли ВестиУчетПоРаботникам = Ложь Тогда // Удаляем

				Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
					Возврат;
				КонецЕсли;

				Объект.ВидыСубконто.Удалить(Субконто);
				
				Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """ удалено субконто ""Работники организаций"",";

			КонецЕсли;
			
			Если ИмяПланаСчетов = "Налоговый" Тогда
				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК, "ВидСубконто");
				
				Если НЕ (Субконто = Неопределено) Тогда
					Если Субконто.Предопределенное Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ВестиУчетПоРаботникам = Истина Тогда // Добавляем 
					
					Если Субконто = Неопределено Тогда
						
						НовыйВид = Объект.ВидыСубконто.Добавить();
						
						НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
						НовыйВид.Суммовой    = Истина;
						
						Если (Счет.Значение.Ссылка.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда)
							ИЛИ Счет.Значение.Ссылка = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда) Тогда 
							НовыйВид.ТолькоОбороты = Истина;
						КонецЕсли;
					
						Если Объект.Количественный Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;
						
						Сообщение = Сообщение + " установлено субконто ""Вид начислений оплаты труда"",";
						
					КонецЕсли;
					
				ИначеЕсли ВестиУчетПоРаботникам = Ложь Тогда // Удаляем
					
					Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
						Возврат;
					КонецЕсли;
					
					Объект.ВидыСубконто.Удалить(Субконто);
					
					Сообщение = Сообщение + " удалено субконто ""Вид начислений оплаты труда"",";
					
				КонецЕсли;
			КонецЕсли;

			Если Прав(Сообщение, 1) = "," Тогда
				Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
			КонецЕсли;

			//Сообщить(Сообщение);

			Объект.Записать();

		КонецЦикла;

	Исключение

		#Если Клиент Тогда
		Сообщить("Счет """ + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());
		#КонецЕсли

	КонецПопытки

КонецПроцедуры


// Переносит статью ДДС по прочим платежам из шапки документа в табличную часть
//
// Параметры
//  Нет
//
Процедура ОбновлениеСтатьиДДСпоПрочимПлатежам()

	ОперацииППВходящие = Новый СписокЗначений;
	ОперацииППВходящие.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	ОперацииППВходящие.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств);
	
	ОперацииППИсходящие = Новый СписокЗначений;
	ОперацииППИсходящие.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
	ОперацииППИсходящие.Добавить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
	ОперацииППИсходящие.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
	
	ОперацииОрдерПоступления = Новый СписокЗначений;
	ОперацииОрдерПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	ОперацииОрдерПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств);
	
	ОперацииОрдерСписание = Новый СписокЗначений;
	ОперацииОрдерСписание.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств);
	ОперацииОрдерСписание.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет);
	
	ОперацииПКО = Новый СписокЗначений;
	ОперацииПКО.Добавить(Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее);
	ОперацииПКО.Добавить(Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка);
	ОперацииПКО.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке);
	ОперацииПКО.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником);
	
	ОперацииРКО = Новый СписокЗначений;
	ОперацииРКО.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику);
	ОперацииРКО.Добавить(Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	ОперацииРКО.Добавить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ОперацииРКО.Добавить(Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств);
	ОперацииРКО.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаДепонентов);
	

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеВходящее.Ссылка КАК ДокументСсылка,
	|	ПлатежноеПоручениеВходящее.Представление
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ВидОперации В(&ОперацииППВходящие)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.ПлатежноеПоручениеВходящее
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Представление
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ВидОперации В(&ОперацииППИсходящие)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.ПлатежноеПоручениеИсходящее
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка,
	|	ПлатежныйОрдерПоступлениеДенежныхСредств.Представление
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерПоступлениеДенежныхСредств.ВидОперации В(&ОперацииОрдерПоступления)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Представление
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.ВидОперации В(&ОперацииОрдерСписание)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Представление
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ВидОперации В(&ОперацииПКО)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.ПриходныйКассовыйОрдер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Представление
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации В(&ОперацииРКО)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Документ.РасходныйКассовыйОрдер";
	
	Запрос.УстановитьПараметр("ОперацииППВходящие",       ОперацииППВходящие);
	Запрос.УстановитьПараметр("ОперацииППИсходящие",      ОперацииППИсходящие);
	Запрос.УстановитьПараметр("ОперацииОрдерПоступления", ОперацииОрдерПоступления);
	Запрос.УстановитьПараметр("ОперацииОрдерСписание",    ОперацииОрдерСписание);
	Запрос.УстановитьПараметр("ОперацииПКО",              ОперацииПКО);
	Запрос.УстановитьПараметр("ОперацииРКО",              ОперацииРКО);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Состояние("Обрабатывается: " + Выборка.Представление);
		
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	КонецЦикла;
	

КонецПроцедуры // ОбновлениеСтатьиДДСпоПрочимПлатежам()

// Обновление реквизита "СуммаДокумента" документа "Авансовый отчет"
Процедура ОбновитьАвансовыйОтчетСуммаДокумента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвансовыйОтчет.Ссылка,
				   |	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Ссылка) КАК ПредставлениеДокумента
	               |ИЗ
	               |	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	               |ГДЕ
	               |	(НЕ АвансовыйОтчет.СуммаВключаетНДС)";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется обновление документов вида <Авансовый отчет>");
	
	РезультатЗапроса = РезультатЗапроса.Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ДокументОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
			
		ДокументОбъект.СуммаДокумента = ПолучитьСуммуДокументаСНДС(ДокументОбъект, "Товары") + 
										ДокументОбъект.ОплатаПоставщикам.Итог("Сумма") + 
										ПолучитьСуммуДокументаСНДС(ДокументОбъект, "Прочее");
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Невозможно записать документ <"+РезультатЗапроса.ПредставлениеДокумента+">!", СтатусСообщения.Внимание);
		КонецПопытки;
			
	КонецЦикла; 
	
КонецПроцедуры


// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	//ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	//ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	//ОбъектВидКонтактнойИнформации.Записать();

	//ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	//ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	//ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресНаАнглийскомКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресНаАнглийскомОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	СписокПредопределенныхЭлементов = Новый СписокЗначений;
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);
	
	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

	//Контактные лица.
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()

Процедура ОбновитьДокументыГТДИмпорт()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойСчетБУ", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчетНУ", ПланыСчетов.Налоговый.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатья", Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка КАК Ссылка,
	|	ГТДИмпорт.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|
	|ГДЕ
	|	((ГТДИмпорт.СчетУчетаРасходовБУ = &ПустойСчетБУ) И (ГТДИмпорт.СчетУчетаРасходовБУВал <> &ПустойСчетБУ)) ИЛИ
	|	((ГТДИмпорт.СчетУчетаРасходовНУ = &ПустойСчетНУ) И (ГТДИмпорт.СчетУчетаРасходовНУВал <> &ПустойСчетНУ)) ИЛИ
	|	((ГТДИмпорт.СтатьяПрочихДоходовРасходов = &ПустаяСтатья) И (ГТДИмпорт.СтатьяПрочихДоходовРасходовВал <> &ПустаяСтатья))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Выборка_Документ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока Выборка_Документ.Следующий() Цикл
		ГТДИмпорт = Выборка_Документ.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеНеЗаполнено(ГТДИмпорт.СчетУчетаРасходовБУ) И (НЕ ЗначениеНеЗаполнено(ГТДИмпорт.СчетУчетаРасходовБУВал)) Тогда
			ГТДИмпорт.СчетУчетаРасходовБУ = ГТДИмпорт.СчетУчетаРасходовБУВал;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ГТДИмпорт.СчетУчетаРасходовНУ) И (НЕ ЗначениеНеЗаполнено(ГТДИмпорт.СчетУчетаРасходовНУВал)) Тогда
			ГТДИмпорт.СчетУчетаРасходовНУ = ГТДИмпорт.СчетУчетаРасходовНУВал;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ГТДИмпорт.СтатьяПрочихДоходовРасходов) И (НЕ ЗначениеНеЗаполнено(ГТДИмпорт.СтатьяПрочихДоходовРасходовВал)) Тогда
			ГТДИмпорт.СтатьяПрочихДоходовРасходов = ГТДИмпорт.СтатьяПрочихДоходовРасходовВал;
		КонецЕсли;

		Если ГТДИмпорт.Модифицированность()  тогда
			ГТДИмпорт.Записать();
		КонецЕсли; 
		
	 КонецЦикла;
КонецПроцедуры

// Дозаполнение реквизитов ТЧ документов "Ввод начальных остатков НДС по партиям"
// Заполняются реквизиты "Счет учета НДС" и "Ставка НДС".
Процедура ОбновитьВводНачальныхОстатковНДСпоПартиям()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка.Организация КАК Организация,
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка) КАК ПредставлениеДокумента,
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.НомерСтроки,
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура,
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетФактура,
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности,
		|	ВЫБОР
		|		КОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СтавкаНДС = &ПустаяСтавкаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПустаяСтавка,
		|	ВЫБОР
		|		КОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетУчетаНДС = &ПустойСчетУчетаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПустойСчетУчета,
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СчетУчетаНДС КАК НовыйСчетУчетаНДС,
		|	ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СтавкаНДС КАК НовыйСтавкаНДС,
		|	ВЫБОР
		|		КОГДА ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СчетУчетаНДС = &ПустойСчетУчетаНДС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНовыйСчетУчетаНДС,
		|	ВЫБОР
		|		КОГДА ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СтавкаНДС = &ПустаяСтавкаНДС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНоваяСтавкаНДС
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДСпоПартиям.ДанныеПоСФ КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДСпоПартиям.ДанныеПоПартиям КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
		|		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка = ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка
		|			И ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.КлючСтроки = ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.КлючСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги
		|		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетФактура = ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Ссылка
		|			И (ВЫБОР
		|				КОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Количество > 0
		|					ТОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура = ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Номенклатура
		|				ИНАЧЕ ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Номенклатура ССЫЛКА Справочник.Номенклатура
		|						И ЕСТЬNULL(ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.Номенклатура.Услуга, ИСТИНА)
		|			КОНЕЦ)
		|ГДЕ
		|	(ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СтавкаНДС = &ПустаяСтавкаНДС
		|				И (НЕ ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СтавкаНДС = &ПустаяСтавкаНДС)
		|			ИЛИ ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетУчетаНДС = &ПустойСчетУчетаНДС
		|				И (НЕ ОтражениеПоступленияТоваровИУслугНДСТоварыИУслуги.СчетУчетаНДС = &ПустойСчетУчетаНДС))
		|	И (ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка.ПереходСРедакции10 = ЛОЖЬ
		|			ИЛИ ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка.Дата >= &ДатаПереходаС10)
		|	И ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка.Дата,
		|	Ссылка
		|ИТОГИ ПО
		|	Организация,
		|	Ссылка";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС",	Перечисления.СтавкиНДС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчетУчетаНДС",	ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаПереходаС10",	Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Сообщить("Выполняется обновление документов вида <Ввод начальных остатков НДС по партиям>. Заполнение новых реквизитов на основании связанной информации.",СтатусСообщения.Информация);
	
	ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		ВыборкаПоДокументам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			Состояние("Организация <"+ВыборкаПоДокументам.Организация+">, документ <"+ВыборкаПоДокументам.ПредставлениеДокумента+">");
		    Документ = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			ТаблицаДанныхСФДокумента = Документ.ДанныеПоСФ;
			ВыборкаПоСтрокамДокумента = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			    СтрокаДокумента = ТаблицаДанныхСФДокумента[ВыборкаПоСтрокамДокумента.НомерСтроки-1];
				Если ВыборкаПоСтрокамДокумента.ПустаяСтавка и ВыборкаПоСтрокамДокумента.ЕстьНоваяСтавкаНДС Тогда
					СтрокаДокумента.СтавкаНДС = ВыборкаПоСтрокамДокумента.НовыйСтавкаНДС;
				КонецЕсли; 
				Если ВыборкаПоСтрокамДокумента.ПустойСчетУчета и ВыборкаПоСтрокамДокумента.ЕстьНовыйСчетУчетаНДС Тогда
					СтрокаДокумента.СчетУчетаНДС = ВыборкаПоСтрокамДокумента.НовыйСчетУчетаНДС;
				КонецЕсли; 
			КонецЦикла; 
			
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("Невозможно записать документ <"+ВыборкаПоДокументам.ПредставлениеДокумента+">!", СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

//Заполнение реквизитов ТЧ документов "Регистрация оплат поставщику для НДС" и
//"Регистрация оплат от покупателя для НДС"
Процедура ОбновитьРегистрацияОплатДляНДС()
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректируемыеЗаписи.Организация КАК Организация,
		|	КорректируемыеЗаписи.Ссылка КАК Ссылка,
		|	КорректируемыеЗаписи.Дата КАК Дата,
		|	КорректируемыеЗаписи.ПредставлениеДокумента,
		|	КорректируемыеЗаписи.НомерСтроки КАК НомерСтроки,
		|	КорректируемыеЗаписи.СуммаСНДС,
		|	КорректируемыеЗаписи.СФ_ДоговорКонтрагента,
		|	КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов,
		|	КорректируемыеЗаписи.ЗачетАванса,
		|	КорректируемыеЗаписи.ДатаОплаты,
		|	ВЫБОР
		|		КОГДА КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(КурсыВалют.Курс, 1)
		|	КОНЕЦ КАК КурсВалюты,
		|	ВЫБОР
		|		КОГДА КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	КОНЕЦ КАК КратностьВалюты
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияОплатыОтПокупателейДляНДССостав.Ссылка.Организация КАК Организация,
		|		РегистрацияОплатыОтПокупателейДляНДССостав.Ссылка КАК Ссылка,
		|		РегистрацияОплатыОтПокупателейДляНДССостав.Ссылка.Дата КАК Дата,
		|		ПРЕДСТАВЛЕНИЕ(РегистрацияОплатыОтПокупателейДляНДССостав.Ссылка) КАК ПредставлениеДокумента,
		|		РегистрацияОплатыОтПокупателейДляНДССостав.НомерСтроки КАК НомерСтроки,
		|		РегистрацияОплатыОтПокупателейДляНДССостав.УдалитьСуммаБезНДС + РегистрацияОплатыОтПокупателейДляНДССостав.УдалитьНДС КАК СуммаСНДС,
		|		РегистрацияОплатыОтПокупателейДляНДССостав.СчетФактура.ДоговорКонтрагента КАК СФ_ДоговорКонтрагента,
		|		ЕСТЬNULL(РегистрацияОплатыОтПокупателейДляНДССостав.СчетФактура.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРегламентированногоУчета) КАК СФ_ДоговорКонтрагентаВалютаВзаиморасчетов,
		|		ВЫБОР
		|			КОГДА (НЕ РегистрацияОплатыОтПокупателейДляНДССостав.ДатаОплаты = &ПустаяДата)
		|				ТОГДА ВЫБОР
		|						КОГДА РегистрацияОплатыОтПокупателейДляНДССостав.ДатаОплаты <= РегистрацияОплатыОтПокупателейДляНДССостав.СчетФактура.Дата
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			КОГДА (НЕ РегистрацияОплатыОтПокупателейДляНДССостав.ДокументОплаты.Дата ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА РегистрацияОплатыОтПокупателейДляНДССостав.ДокументОплаты.Дата <= РегистрацияОплатыОтПокупателейДляНДССостав.СчетФактура.Дата
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗачетАванса,
		|		ВЫБОР
		|			КОГДА (НЕ РегистрацияОплатыОтПокупателейДляНДССостав.ДатаОплаты = &ПустаяДата)
		|				ТОГДА РегистрацияОплатыОтПокупателейДляНДССостав.ДатаОплаты
		|			КОГДА (НЕ РегистрацияОплатыОтПокупателейДляНДССостав.ДокументОплаты.Дата ЕСТЬ NULL )
		|				ТОГДА РегистрацияОплатыОтПокупателейДляНДССостав.ДокументОплаты.Дата
		|			ИНАЧЕ РегистрацияОплатыОтПокупателейДляНДССостав.СчетФактура.Дата
		|		КОНЕЦ КАК ДатаОплаты
		|	ИЗ
		|		Документ.РегистрацияОплатыОтПокупателейДляНДС.Состав КАК РегистрацияОплатыОтПокупателейДляНДССостав
		|	ГДЕ
		|		РегистрацияОплатыОтПокупателейДляНДССостав.Сумма = 0
		|		И (НЕ РегистрацияОплатыОтПокупателейДляНДССостав.УдалитьНДС + РегистрацияОплатыОтПокупателейДляНДССостав.УдалитьСуммаБезНДС = 0)) КАК КорректируемыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = КурсыВалют.Валюта
		|			И ((НЕ КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета))
		|			И (КурсыВалют.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(КурсыВалют.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.КурсыВалют КАК КурсыВалют
		|				ГДЕ
		|					КурсыВалют.Период <= КорректируемыеЗаписи.ДатаОплаты
		|					И
		|					КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = КурсыВалют.Валюта))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректируемыеЗаписи.Организация,
		|	КорректируемыеЗаписи.Ссылка,
		|	КорректируемыеЗаписи.Дата,
		|	КорректируемыеЗаписи.ПредставлениеДокумента,
		|	КорректируемыеЗаписи.НомерСтроки,
		|	КорректируемыеЗаписи.СуммаСНДС,
		|	КорректируемыеЗаписи.СФ_ДоговорКонтрагента,
		|	КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов,
		|	КорректируемыеЗаписи.ЗачетАванса,
		|	КорректируемыеЗаписи.ДатаОплаты,
		|	ВЫБОР
		|		КОГДА КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(КурсыВалют.Курс, 1)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	КОНЕЦ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияОплатыПоставщикуДляНДССостав.Ссылка.Организация КАК Организация,
		|		РегистрацияОплатыПоставщикуДляНДССостав.Ссылка КАК Ссылка,
		|		РегистрацияОплатыПоставщикуДляНДССостав.Ссылка.Дата КАК Дата,
		|		ПРЕДСТАВЛЕНИЕ(РегистрацияОплатыПоставщикуДляНДССостав.Ссылка) КАК ПредставлениеДокумента,
		|		РегистрацияОплатыПоставщикуДляНДССостав.НомерСтроки КАК НомерСтроки,
		|		РегистрацияОплатыПоставщикуДляНДССостав.УдалитьСуммаБезНДС + РегистрацияОплатыПоставщикуДляНДССостав.УдалитьНДС КАК СуммаСНДС,
		|		РегистрацияОплатыПоставщикуДляНДССостав.СчетФактура.ДоговорКонтрагента КАК СФ_ДоговорКонтрагента,
		|		ЕСТЬNULL(РегистрацияОплатыПоставщикуДляНДССостав.СчетФактура.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРегламентированногоУчета) КАК СФ_ДоговорКонтрагентаВалютаВзаиморасчетов,
		|		ВЫБОР
		|			КОГДА (НЕ РегистрацияОплатыПоставщикуДляНДССостав.ДатаОплаты = &ПустаяДата)
		|				ТОГДА ВЫБОР
		|						КОГДА РегистрацияОплатыПоставщикуДляНДССостав.ДатаОплаты <= РегистрацияОплатыПоставщикуДляНДССостав.СчетФактура.Дата
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			КОГДА (НЕ РегистрацияОплатыПоставщикуДляНДССостав.ДокументОплаты.Дата ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА РегистрацияОплатыПоставщикуДляНДССостав.ДокументОплаты.Дата <= РегистрацияОплатыПоставщикуДляНДССостав.СчетФактура.Дата
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗачетАванса,
		|		ВЫБОР
		|			КОГДА (НЕ РегистрацияОплатыПоставщикуДляНДССостав.ДатаОплаты = &ПустаяДата)
		|				ТОГДА РегистрацияОплатыПоставщикуДляНДССостав.ДатаОплаты
		|			КОГДА (НЕ РегистрацияОплатыПоставщикуДляНДССостав.ДокументОплаты.Дата ЕСТЬ NULL )
		|				ТОГДА РегистрацияОплатыПоставщикуДляНДССостав.ДокументОплаты.Дата
		|			ИНАЧЕ РегистрацияОплатыПоставщикуДляНДССостав.СчетФактура.Дата
		|		КОНЕЦ КАК ДатаОплаты
		|	ИЗ
		|		Документ.РегистрацияОплатыПоставщикуДляНДС.Состав КАК РегистрацияОплатыПоставщикуДляНДССостав
		|	ГДЕ
		|		РегистрацияОплатыПоставщикуДляНДССостав.Сумма = 0
		|		И (НЕ РегистрацияОплатыПоставщикуДляНДССостав.УдалитьНДС + РегистрацияОплатыПоставщикуДляНДССостав.УдалитьСуммаБезНДС = 0)) КАК КорректируемыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = КурсыВалют.Валюта
		|			И ((НЕ КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета))
		|			И (КурсыВалют.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(КурсыВалют.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.КурсыВалют КАК КурсыВалют
		|				ГДЕ
		|					КурсыВалют.Период <= КорректируемыеЗаписи.ДатаОплаты
		|					И
		|					КорректируемыеЗаписи.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов = КурсыВалют.Валюта))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Дата,
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Организация,
		|	Ссылка";
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
    	Возврат;
	КонецЕсли; 
	
	Сообщить("Выполняется обновление документов вида <Регистрация оплаты от покупателей для НДС> и <Регистрация оплаты поставщику для НДС>. Заполнение новых реквизитов на основании связанной информации.",СтатусСообщения.Информация);
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		ВыборкаПоДокументам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Состояние("Организация <"+ВыборкаПоОрганизации.Организация+">, документ <"+ВыборкаПоДокументам.ПредставлениеДокумента+">");
		
		ВыборкаПоСтрокам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДокументРегистрацииОплат = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		ТЧ_Состав = ДокументРегистрацииОплат.Состав;
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			СтрокаТЧ = ТЧ_Состав[ВыборкаПоСтрокам.НомерСтроки -1];
			
				СтрокаТЧ.Сумма = ВыборкаПоСтрокам.СуммаСНДС;
				Если ЗначениеНеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) и не ЗначениеНеЗаполнено(ВыборкаПоСтрокам.СФ_ДоговорКонтрагента) Тогда
					СтрокаТЧ.ДоговорКонтрагента = ВыборкаПоСтрокам.СФ_ДоговорКонтрагента;
				КонецЕсли;
				СтрокаТЧ.ВалютаРасчетов = ВыборкаПоСтрокам.СФ_ДоговорКонтрагентаВалютаВзаиморасчетов;
				СтрокаТЧ.ЗачетАванса    = ВыборкаПоСтрокам.ЗачетАванса;
				
				Если ВалютаРеглУчета = СтрокаТЧ.ВалютаРасчетов Тогда
					СтрокаТЧ.ВалютнаяСумма = СтрокаТЧ.Сумма;
				Иначе
					Если ВыборкаПоСтрокам.КурсВалюты <> 0 и ВыборкаПоСтрокам.КратностьВалюты <> 0 Тогда
						СтрокаТЧ.ВалютнаяСумма = ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, 
																			ВалютаРеглУчета, СтрокаТЧ.ВалютаРасчетов,
																			1, ВыборкаПоСтрокам.КурсВалюты,
																			1, ВыборкаПоСтрокам.КратностьВалюты);
					КонецЕсли;
				КонецЕсли; 
		КонецЦикла;
			
		Если ДокументРегистрацииОплат.Модифицированность() Тогда
			Попытка		
				ДокументРегистрацииОплат.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("Невозможно записать документ <"+ВыборкаПоДокументам.ПредставлениеДокумента + "> !", СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура РаспределитьВычетПредъявлено0(ДокументФормированиеЗаписейКнигиПокупок, СтрокаВычета, СтрокиРаспределения, Авансы);
	
	Если ДокументФормированиеЗаписейКнигиПокупок.ПредъявленНДСКВычету0 Тогда
		
		СуммаБезНДСРаспределения = СтрокаВычета.СуммаБезНДС;
		НДСРаспределения = СтрокаВычета.НДС;
		
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			
			Если СтрокаРаспределения.СуммаБезНДС = 0 И СтрокаРаспределения.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаБезНДСРаспределения = 0 И НДСРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДобавитьСтрокуВычета(ДокументФормированиеЗаписейКнигиПокупок, СтрокаВычета, 
								Мин(СуммаБезНДСРаспределения, СтрокаРаспределения.СуммаБезНДС), 
								Мин(НДСРаспределения, СтрокаРаспределения.НДС), СтрокаРаспределения.Событие, СтрокаРаспределения.ДокументОтгрузки, 
								Авансы);
			
			СуммаБезНДСРаспределения = СуммаБезНДСРаспределения - Мин(СуммаБезНДСРаспределения, СтрокаРаспределения.СуммаБезНДС);
			НДСРаспределения = НДСРаспределения - Мин(НДСРаспределения , СтрокаРаспределения.НДС);
			СтрокаРаспределения.СуммаБезНДС = СтрокаРаспределения.СуммаБезНДС - Мин(НДСРаспределения , СтрокаРаспределения.СуммаБезНДС);
			СтрокаРаспределения.НДС = СтрокаРаспределения.НДС - Мин(НДСРаспределения , СтрокаРаспределения.НДС);
			
		КонецЦикла;
		
		Если СуммаБезНДСРаспределения <> 0 Или НДСРаспределения <> 0 Тогда
			СтрокаНовая = ДобавитьСтрокуВычета(ДокументФормированиеЗаписейКнигиПокупок, СтрокаВычета,
											СуммаБезНДСРаспределения, 
											НДСРаспределения, Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, Неопределено, 
											Авансы);
			Сообщить("<" + ДокументФормированиеЗаписейКнигиПокупок + ">, строка №" + СтрокаНовая.НомерСтроки + ": не обнаружена информация о подтверждении/неподтверждении нулевой ставки
					|. Установлено значение <" + Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 + ">", СтатусСообщения.Внимание);
		КонецЕсли;

	
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьСтрокуВычета(ДокументФормированиеЗаписейКнигиПокупок, СтрокаВычета, СуммаБезНДС, НДС, Состояние, ДокументОтгрузки, Авансы = Ложь);
	
	Если Не Авансы Тогда
		
		СтрокаНовая = ДокументФормированиеЗаписейКнигиПокупок.ВычетПоПриобретеннымЦенностям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаВычета, , "ДокументОтгрузки, Состояние, СуммаБезНДС, НДС");
		
		СтрокаНовая.ДокументОтгрузки = ДокументОтгрузки;
		СтрокаНовая.СуммаБезНДС = СуммаБезНДС;
		СтрокаНовая.НДС = НДС;
		СтрокаНовая.Поставщик = СтрокаВычета.Контрагент;
		СтрокаНовая.ДатаОплаты = СтрокаВычета.ДатаСобытия;
		Если Состояние = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0 Тогда
			СтрокаНовая.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		ИначеЕсли Состояние = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0 Тогда
			СтрокаНовая.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		КонецЕсли;
		
	Иначе 
		
		СтрокаНовая = ДокументФормированиеЗаписейКнигиПокупок.НДСсАвансов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаВычета, , "ДокументОтгрузки, Состояние, СуммаБезНДС, НДС");
		
		СтрокаНовая.ДокументОтгрузки = ДокументОтгрузки;
		СтрокаНовая.СуммаБезНДС = СуммаБезНДС;
		СтрокаНовая.НДС = НДС;
		СтрокаНовая.Покупатель = СтрокаВычета.Контрагент;
		Если Состояние = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0 Тогда
			СтрокаНовая.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		ИначеЕсли Состояние = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0 Тогда
			СтрокаНовая.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаНовая;
	
КонецФункции

// Проверка созданного при переходе с редакции 1.0 документ "Формирование записей книги продаж"
Функция ПроверитьДокументФормированиеЗаписейКнигиПродаж(ДокументФормированиеЗаписейКнигиПродаж)
	
	НовыйДокумент = Неопределено;
	
	МетаданныеДокумента = ДокументФормированиеЗаписейКнигиПродаж.Метаданные().ТабличныеЧасти;
	ТаблицаНезапоненныхСтрок = Новый ТаблицаЗначений();
	ТаблицаНезапоненныхСтрок.Колонки.Добавить("ИмяТабличнойЧасти", ПолучитьОписаниеТиповСтроки(20));
	ТаблицаНезапоненныхСтрок.Колонки.Добавить("ТабличнаяЧасть", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для Каждого ТабличнаяЧасть Из МетаданныеДокумента Цикл
		МассивНезаполненыхСтрок = ПроверитьЗаполнениеТЧФормированиеЗаписейКнигиПродаж(ДокументФормированиеЗаписейКнигиПродаж, ТабличнаяЧасть.Имя);
		Если МассивНезаполненыхСтрок.Количество() <> 0 Тогда
			ЗаполнитьТЧФормированиеЗаписейКнигиПродаж(МассивНезаполненыхСтрок, ДокументФормированиеЗаписейКнигиПродаж, ТаблицаНезапоненныхСтрок, ТабличнаяЧасть.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНезапоненныхСтрок;
	
КонецФункции

// Проверяет правильность заполнения строк табличной части документа "Формирование записей книги продаж".
//
//
Функция ПроверитьЗаполнениеТЧФормированиеЗаписейКнигиПродаж(ДокументФормированиеЗаписейКнигиПродаж, ИмяТабличнойЧасти)

	НезаполненныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ДокументФормированиеЗаписейКнигиПродаж[ИмяТабличнойЧасти] Цикл
		Если (ЗначениеНеЗаполнено(СтрокаТЧ.ВидЦенности) ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.СчетФактура) ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.СтавкаНДС)) ИЛИ
			(ИмяТабличнойЧасти = "НеОтражаетсяВКниге" И ЗначениеНеЗаполнено(СтрокаТЧ.ДокументОплаты)) ИЛИ
			(ДокументФормированиеЗаписейКнигиПродаж.Реализация0 И ИмяТабличнойЧасти = "Реализация" И ЗначениеНеЗаполнено(СтрокаТЧ.Состояние)) Тогда
			НезаполненныеСтроки.Добавить(СтрокаТЧ);
		ИначеЕсли (ЗначениеНеЗаполнено(СтрокаТЧ.Покупатель) И 
					НЕ (СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннеПотребление ИЛИ 
						СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами) И 
					НЕ (ТипЗнч(СтрокаТЧ.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") ИЛИ 
						(ТипЗнч(СтрокаТЧ.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И НЕ СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные))) Тогда
			НезаполненныеСтроки.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НезаполненныеСтроки

КонецФункции // ПроверитьЗаполнениеТЧФормированиеЗаписейКнигиПродаж()

Процедура ЗаполнитьТЧФормированиеЗаписейКнигиПродаж(МассивСтрок, СтарыйДокумент, ТаблицаНезапоненныхСтрок, ИмяТабличнойЧасти);
	
	НоваяТЧ = ТаблицаНезапоненныхСтрок.Добавить();
	НоваяТЧ.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	
	КолонкиТабличнойЧасти = СтарыйДокумент.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Для Каждого КолонкаТЧ Из КолонкиТабличнойЧасти Цикл
		
		НоваяТЧ.ТабличнаяЧасть.Колонки.Добавить(КолонкаТЧ.Имя, КолонкаТЧ.Тип);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
		
		НоваяСтрока = НоваяТЧ.ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		СтарыйДокумент[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
		
	КонецЦикла;
	
	МассивСтрок.Очистить();
	
КонецПроцедуры

//Заполнение ТЧ "Расчеты с контрагентами" документов "Ввод начальных остатков по НДС" 
//
Процедура ОбновитьВводНачальныхОстатковНДСРасчеты()
	
	Состояние("Обновление документов вида <Ввод начальных остатков НДС>");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВводНачальныхОстатковНДС.Ссылка
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковНДС КАК ВводНачальныхОстатковНДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.РасчетыСКонтрагентами КАК ВводНачальныхОстатковНДСРасчетыСКонтрагентами
	               |		ПО ВводНачальныхОстатковНДСРасчетыСКонтрагентами.Ссылка = ВводНачальныхОстатковНДС.Ссылка
	               |ГДЕ
	               |	ВводНачальныхОстатковНДСРасчетыСКонтрагентами.НомерСтроки ЕСТЬ NULL";
					
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументВводНачальныхОстатков = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументВводНачальныхОстатков.ДанныеПоСФ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДокументВводНачальныхОстатков.ОтразитьРасчетыСКонтрагентами Тогда
			Для Каждого СтрокаТаблицы Из ДокументВводНачальныхОстатков.ДанныеПоСФ Цикл
				
				СтрокаРасчетов 								= ДокументВводНачальныхОстатков.РасчетыСКонтрагентами.Добавить();
				СтрокаРасчетов.Аванс						= ДокументВводНачальныхОстатков.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным;
				СтрокаРасчетов.Контрагент					= СтрокаТаблицы.Контрагент;
				СтрокаРасчетов.ДоговорКонтрагента 			= СтрокаТаблицы.ДоговорКонтрагента;
				Если ДокументВводНачальныхОстатков.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
					СтрокаРасчетов.ДокументОплаты			= СтрокаТаблицы.СчетФактура;
				Иначе
					СтрокаРасчетов.СчетФактура 				= СтрокаТаблицы.СчетФактура;
				КонецЕсли;
				СтрокаРасчетов.ВалютаВзаиморасчетов 		= СтрокаТаблицы.ВалютаВзаиморасчетов;
				СтрокаРасчетов.КурсВзаиморасчетов			= СтрокаТаблицы.КурсВзаиморасчетов;
				СтрокаРасчетов.КратностьВзаиморасчетов 		= СтрокаТаблицы.КратностьВзаиморасчетов;
				СтрокаРасчетов.СуммаВзаиморасчетов			= СтрокаТаблицы.Сумма;
				СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов 	= СтрокаТаблицы.СуммаВзаиморасчетов;
				СтрокаРасчетов.СчетУчетаРасчетовСКонтрагентом = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				
			КонецЦикла;
		Иначе
			
			ДокументВводНачальныхОстатков.ЗаполнитьРасчетыСКонтрагентами();
			
		КонецЕсли;
		
		Попытка
			ДокументВводНачальныхОстатков.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("<" + ДокументВводНачальныхОстатков + ">: ошибка при обновлении ТЧ расчетов документа.");
		КонецПопытки;
		
	КонецЦикла;

	
КонецПроцедуры

//Перепроведение документов вида "Восстановление НДС" 
//
Процедура ОбновитьВосстановлениеНДС()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеНДС.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ВосстановлениеНДС.Ссылка) КАК ПредставлениеДокумента
	               |ИЗ
	               |	Документ.ВосстановлениеНДС КАК ВосстановлениеНДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НДСЗаписиКнигиПокупокОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(, , Регистратор, ) КАК НДСЗаписиКнигиПокупокОбороты) КАК НДСЗаписиКнигиПокупок
	               |		ПО ВосстановлениеНДС.Ссылка = НДСЗаписиКнигиПокупок.Регистратор
	               |ГДЕ
	               |	ВосстановлениеНДС.Проведен
	               |	И ВЫБОР
	               |			КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупок.Регистратор, ИСТИНА)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ";
					 
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтараяДатаУстановкиПараметровУчета = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	ЗаписиРегистраНДСПокупки = РегистрыНакопления.НДСПокупки.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументВосстановлениеНДС = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			// Перенос движений документа "НДС покупки"
			ЗаписиРегистраНДСПокупки.Отбор.Регистратор.Значение = ДокументВосстановлениеНДС.Ссылка;
			ЗаписиРегистраНДСПокупки.Прочитать();
			ТаблицаДвиженийНДСПокупки = ЗаписиРегистраНДСПокупки.Выгрузить();
			
			Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Установить(ДобавитьМесяц(ДокументВосстановлениеНДС.Дата, 1));
			ДокументВосстановлениеНДС.Записать(РежимЗаписиДокумента.Проведение);
			Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Установить(СтараяДатаУстановкиПараметровУчета);

			ЗаписиРегистраНДСПокупки.Отбор.Регистратор.Значение = ДокументВосстановлениеНДС.Ссылка;
			ЗаписиРегистраНДСПокупки.Загрузить(ТаблицаДвиженийНДСПокупки);
			ЗаписиРегистраНДСПокупки.Записать();
		Исключение
			Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Установить(СтараяДатаУстановкиПараметровУчета);
			Сообщить(Выборка.ПредставлениеДокумента + ": невозможно обновить данные документа!", СтатусСообщения.Внимание);
        КонецПопытки;			
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление значений субконто "СФВыданные" по счету 76.Н (кроме ручных операций)
//
Процедура ОбновлениеСубконтоНДС76Н()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйДвиженияССубконто.Регистратор,
	               |	ХозрасчетныйДвиженияССубконто.НомерСтроки
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
	               |ГДЕ
	               |	ХозрасчетныйДвиженияССубконто.СчетКт = &Счет76Н
	               |	И ХозрасчетныйДвиженияССубконто.СубконтоКт2 = НЕОПРЕДЕЛЕНО";
						
	НаборСубконто = Новый Массив();
	НаборСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НаборСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	Запрос.УстановитьПараметр("Счет76Н", ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
					
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("Выполняется заполнение субконто <Счета-фактуры выданные> для бухгалтерских проводок по счету 76.Н ""Расчеты по НДС, отложенному для уплаты в бюджет"".",СтатусСообщения.Информация);
	
	Результат = Результат.Выгрузить();
	
	СписокДокументов = УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Регистратор"), Истина);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПродажи.СчетФактура,
	               |	НДСПродажи.Регистратор,
	               |	СУММА(НДСПродажи.НДС) КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСПродажи КАК НДСПродажи
	               |ГДЕ
	               |	НДСПродажи.Регистратор В(&Регистратор)
	               |	И НДСПродажи.Событие = &СобытиеРеализация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПродажи.Регистратор,
	               |	НДСПродажи.СчетФактура";
				   
	Запрос.УстановитьПараметр("Регистратор", СписокДокументов);
	Запрос.УстановитьПараметр("СобытиеРеализация", Перечисления.СобытияПоНДСПродажи.Реализация);
	
	РезультатСФ = Запрос.Выполнить().Выгрузить();
	
	ПризнакПересчетаИтогов = РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов();
	
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Ложь);
	КонецЕсли;
		
	Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	
	ПараметрыОтбора = Новый Структура("Регистратор", Неопределено);
	
	Для Каждого	Документ Из СписокДокументов Цикл
		
		ПараметрыОтбора.Регистратор = Документ;
		
		СтрокиПроводки = Результат.НайтиСтроки(ПараметрыОтбора);
		СтрокиСФ = РезультатСФ.НайтиСтроки(ПараметрыОтбора);
		
		Проводки.Отбор.Регистратор.Установить(Документ);
		Проводки.Прочитать();
		
		ТекущаяСФ = 0;
		
		Для Каждого НомерПроводки Из СтрокиПроводки Цикл
			
			Если ТекущаяСФ > СтрокиСФ.Количество() - 1 Тогда
				Продолжить;
			ИначеЕсли СтрокиСФ[ТекущаяСФ].НДС = 0 Тогда
				ТекущаяСФ = ТекущаяСФ + 1;
				Если ТекущаяСФ > СтрокиСФ.Количество() - 1 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			Проводка = Проводки[НомерПроводки.НомерСтроки-1];
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтрокиСФ[ТекущаяСФ].СчетФактура);
			Если СтрокиСФ[ТекущаяСФ].НДС >= 0 Тогда
				СтрокиСФ[ТекущаяСФ].НДС = СтрокиСФ[ТекущаяСФ].НДС - Мин(СтрокиСФ[ТекущаяСФ].НДС, Проводка.Сумма);
			Иначе
				СтрокиСФ[ТекущаяСФ].НДС = СтрокиСФ[ТекущаяСФ].НДС - Макс(СтрокиСФ[ТекущаяСФ].НДС, Проводка.Сумма);
			КонецЕсли;
			
		КонецЦикла;
		
		Проводки.Записать();
		
	КонецЦикла;
	
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновление реквизита "Счет учета НДС" документов "РаспределениеНДСКосвенныхРасходов"
//
Процедура ОбновитьРаспределениеКосвенныхРасходовНДС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка КАК Ссылка,
	               |	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.НомерСтроки КАК НомерСтроки,
	               |	НДСПокупки.СчетУчетаНДС,
	               |	НДСПокупки.СуммаБезНДС + НДСПокупки.НДС КАК СуммаРаспределения
	               |ИЗ
	               |	Документ.РаспределениеНДСКосвенныхРасходов.СоставКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПокупки КАК НДСПокупки
	               |		ПО РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка.Организация = НДСПокупки.Организация
	               |			И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.ВидЦенности = НДСПокупки.ВидЦенности
	               |			И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Поставщик = НДСПокупки.Поставщик
	               |			И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетФактура = НДСПокупки.СчетФактура
	               |			И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СтавкаНДС = НДСПокупки.СтавкаНДС
	               |ГДЕ
	               |	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетУчетаНДС = &ПустойСчет
	               |	И ЕСТЬNULL(НДСПокупки.СчетУчетаНДС, &ПустойСчет) <> &ПустойСчет
	               |	И НДСПокупки.Событие = &Событие
	               |	И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка.Проведен
	               |ИТОГИ ПО
	               |	Ссылка,
	               |	НомерСтроки";

	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Результат.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Заполнение счетов учета НДС в документах вида <Распределение НДС косвенных расходов>");
	
	СтрокиКУдалению = Новый Массив;
	СуммыРаспределения = Новый Массив;
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СуммаВсего", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("НДСВсего", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("БезНДССумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("БезНДС", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("НДС0Сумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("НДС0", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("ЕНВДСумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("ЕНВДНДС", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("НДССумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРаспределения.Колонки.Добавить("НДС", ПолучитьОписаниеТиповЧисла(15, 2));
	
	ПараметрыОтбора = Новый Структура("КлючСтроки", Неопределено);
	
	Для Каждого Документ Из Результат.Строки Цикл
		
		ДокументРаспределениеНДСКосвеныхРасходов = Документ.Ссылка.ПолучитьОбъект();		
		СтрокиДокументаБезСчета = Документ.Строки;		
		СтрокиКУдалению.Очистить();
		
		Для Каждого СтрокаДокументаБезСчета Из СтрокиДокументаБезСчета Цикл
			
			СтрокаДокумента = ДокументРаспределениеНДСКосвеныхРасходов.СоставКосвенныхРасходов.Найти(СтрокаДокументаБезСчета.НомерСтроки, "НомерСтроки");
			ПараметрыОтбора.КлючСтроки = СтрокаДокумента.КлючСтроки;
			СтрокиСчетаУчетаРасходов = ДокументРаспределениеНДСКосвеныхРасходов.СчетаУчетаРасходов.НайтиСтроки(ПараметрыОтбора);
			
			СтрокиКУдалению.Добавить(СтрокаДокумента);
			ТаблицаРаспределения.Очистить();
			
			СтрокиСчетовУчета = СтрокаДокументаБезСчета.Строки;
			СуммыРаспределения.Очистить();
			
			Для Каждого СчетУчета Из СтрокиСчетовУчета Цикл
				СтрокаРаспределения = ТаблицаРаспределения.Добавить();
				СуммыРаспределения.Добавить(СчетУчета.СуммаРаспределения);
			КонецЦикла;
			
			Для Каждого КолонкаТаблицыРаспределения Из ТаблицаРаспределения.Колонки Цикл
				Если СтрокаДокумента[КолонкаТаблицыРаспределения.Имя] <> 0 Тогда
					ТаблицаРаспределения.ЗагрузитьКолонку(РаспределитьПропорционально(СтрокаДокумента[КолонкаТаблицыРаспределения.Имя], СуммыРаспределения), КолонкаТаблицыРаспределения.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Для К = 0 По СтрокиСчетовУчета.Количество() - 1 Цикл
				
				НоваяСтрока = ДокументРаспределениеНДСКосвеныхРасходов.СоставКосвенныхРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента, "ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, БазисРаспределенияВключаетЕНВД, НДСВключенВСтоимость");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаРаспределения[К]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиСчетовУчета[К]);
				// Установка нового ключа строки
				НеУстановлено = Истина;
				Кандидат = ДокументРаспределениеНДСКосвеныхРасходов.СоставКосвенныхРасходов.Количество();

				Пока НеУстановлено Цикл
					Если ДокументРаспределениеНДСКосвеныхРасходов.СоставКосвенныхРасходов.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
						// Уникальное значение ключа
						НоваяСтрока.КлючСтроки = Кандидат;
						НеУстановлено = Ложь;
					Иначе
						// Такое значение ключа уже использовано
						Кандидат = Кандидат + 1;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаСчетаУчетаРасходов Из СтрокиСчетаУчетаРасходов Цикл
					
					НоваяСтрокаСчетаУчетаРасходов = ДокументРаспределениеНДСКосвеныхРасходов.СчетаУчетаРасходов.Добавить();
					НоваяСтрокаСчетаУчетаРасходов.КлючСтроки = НоваяСтрока.КлючСтроки;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСчетаУчетаРасходов, СтрокаСчетаУчетаРасходов, , "КлючСтроки");
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДокументРаспределениеНДСКосвеныхРасходов.СоставКосвенныхРасходов.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Попытка
			ДокументРаспределениеНДСКосвеныхРасходов.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Документ <" + ДокументРаспределениеНДСКосвеныхРасходов.Представление + ">: не удалось заполнить значения счетов учета НДС", СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление реквизита "Счет учета НДС по реализации" документов "АктОбОказанииПроизводственныхУслуг"
//
Процедура ОбновитьАктОбОказанииПроизводственныхУслугСчетНДС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	АктОбОказанииПроизводственныхУслуг.Ссылка
	               |ИЗ
	               |	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	               |ГДЕ
	               |	ЕСТЬNULL(АктОбОказанииПроизводственныхУслуг.Услуги.СчетУчетаНДСПоРеализации, &ПустойСчет) = &ПустойСчет";
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Заполнение счетов учета НДС по реализации в документах вида <Акт об оказании производственных услуг>");
	
	Результат = Результат.Выбрать();
	Пока Результат.Следующий() Цикл
		
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы Из ДокументОбъект.Услуги Цикл
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
				СтрокаТаблицы.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Документ <" + ДокументОбъект.Представление + ">: не удалось заполнить значения счетов учета НДС по реализации", СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление значений субконто "СФВыданные" по счету 76.АВ (Счет-фактура выданный и ВНО НДС)
//
Процедура ОбновлениеСубконто76АВ()

	Сообщить("Выполняется заполнение субконто <Счета-фактуры выданные> для бухгалтерских проводок по счету 76.АВ ""НДС по авансам и предоплатам"".",СтатусСообщения.Информация);
	
	ПризнакПересчетаИтогов = РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов();
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Ложь);
	КонецЕсли;
	
	// По документам "Счет-фактура выданный"
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйДвиженияССубконто.Регистратор,
	               |	ХозрасчетныйДвиженияССубконто.Регистратор.ДокументОснование,
	               |	ХозрасчетныйДвиженияССубконто.НомерСтроки
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	               |		,
	               |		,
	               |		Регистратор ССЫЛКА Документ.СчетФактураВыданный
	               |		    И СчетДт = &Счет76АВ
	               |		    И СубконтоДт2 = НЕОПРЕДЕЛЕНО) КАК ХозрасчетныйДвиженияССубконто";
				   
	Запрос.УстановитьПараметр("Счет76АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
					
	Результат = Запрос.Выполнить();
	
	Результат = Результат.Выгрузить();
	СписокДокументов = УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Регистратор"), Истина);
	
	Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПараметрыОтбора = Новый Структура("Регистратор", Неопределено);
	
	Для Каждого Документ Из СписокДокументов Цикл
		
		ПараметрыОтбора.Регистратор = Документ;
		СтрокиПроводки = Результат.НайтиСтроки(ПараметрыОтбора);
		
		Проводки.Отбор.Регистратор.Установить(Документ);
		Проводки.Прочитать();
		
		Для Каждого НомерПроводки Из СтрокиПроводки Цикл
			Проводка = Проводки[НомерПроводки.НомерСтроки - 1];
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", НомерПроводки.РегистраторДокументОснование);
		КонецЦикла;
		
		Проводки.Записать();
		
	КонецЦикла;
	
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
	КонецЕсли;
	
	// По документам "Ввод начальных остатков НДС"
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеДанные.Ссылка КАК Ссылка,
	               |	ОсновныеДанные.Ссылка.Организация КАК Организация,
	               |	ОсновныеДанные.Ссылка.Дата КАК Дата,
	               |	ОсновныеДанные.Контрагент,
	               |	ОсновныеДанные.СчетФактура,
	               |	Расшифровка.НДС КАК НДСНаСчетУчета,
	               |	ВЫБОР
	               |		КОГДА Расшифровка.ВидЦенности = &Авансы0
	               |			ТОГДА Расшифровка.НДСПредъявлено0 + Расшифровка.НДСПредъявленоНеПодтверждено0
	               |		ИНАЧЕ Расшифровка.НДСОплата
	               |	КОНЕЦ КАК НДСКВычету
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	               |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	               |			И ОсновныеДанные.Ссылка = Расшифровка.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	               |				,
	               |				,
	               |				Регистратор ССЫЛКА Документ.ВводНачальныхОстатковНДС
	               |				    И СчетДт = &Счет76АВ
	               |				    И СубконтоДт2 = НЕОПРЕДЕЛЕНО) КАК ХозрасчетныйДвиженияССубконто
	               |		ГДЕ
	               |			ВЫБОР
	               |					КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК ВложенныйЗапрос
	               |		ПО ОсновныеДанные.Ссылка = ВложенныйЗапрос.Регистратор
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОсновныеДанные.КлючСтроки,
	               |	Расшифровка.НомерСтроки";
				   
	Запрос.УстановитьПараметр("Счет76АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	Запрос.УстановитьПараметр("Авансы0", Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	СписокДокументов = УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Ссылка"), Истина);
	
	ПризнакПересчетаИтогов = РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов();
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Ложь);
	КонецЕсли;
	
	Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПараметрыОтбора = Новый Структура("Ссылка", Неопределено);
	
	Для Каждого Документ Из СписокДокументов Цикл
		
		ПараметрыОтбора.Ссылка = Документ;
		СтрокиПроводки = Результат.НайтиСтроки(ПараметрыОтбора);
		
		Проводки.Отбор.Регистратор.Установить(Документ);
		Проводки.Прочитать();
		ПроводкиКУдалению = Новый Массив;
		Для Каждого Проводка Из Проводки Цикл
			Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам
				Или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
				ПроводкиКУдалению.Добавить(Проводка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПроводкаКУдалению из ПроводкиКУдалению Цикл
			Проводки.Удалить(ПроводкаКУдалению);
		КонецЦикла;
		
		Для Каждого СтрокаПроводка Из СтрокиПроводки Цикл
			Если СтрокаПроводка.НДСНаСчетУчета=0 Тогда
			    //Нет необходимости формировать проводку с 0 суммой.
				Продолжить;
			КонецЕсли; 
	
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтрокаПроводка.Дата;
			Проводка.Организация  = СтрокаПроводка.Организация;
		    Проводка.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаПроводка.Контрагент);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаПроводка.СчетФактура);
			
			Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			Если СтрокаПроводка.НДСКВычету <> 0 Тогда
				
				Проводка2 = Проводки.Добавить();
				
				Проводка2.Период       = СтрокаПроводка.Дата;
				Проводка2.Организация  = СтрокаПроводка.Организация;
				
				Проводка2.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка2.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
				Проводка2.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

				УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", СтрокаПроводка.Контрагент);
				УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "СФВыданные", СтрокаПроводка.СчетФактура);
				
				Проводка2.Сумма = СтрокаПроводка.НДСКВычету;
				
			КонецЕсли;
			Проводка.Сумма        = СтрокаПроводка.НДСНаСчетУчета;
			
		КонецЦикла;
			
		Проводки.Записать();
		
	КонецЦикла;
	
	Если ПризнакПересчетаИтогов Тогда
		РегистрыБухгалтерии.Хозрасчетный.УстановитьИспользованиеИтогов(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтавкиДля2005года()

	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	СписокПредопределенныхКодовВычетов = Новый Массив;
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код101);
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код102);
	СписокПредопределенныхКодовВычетов.Добавить(ВычетыНДФЛ.Код311);
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	ДатаСведений = Дата("20050101");
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим фильтры	
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код101,  600, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код102, 1200, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код311, 1000000, 0);
	
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
//
Процедура УстановитьРеквизитыКодаДоходаНДФЛ(КодДохода, СтавкаНалогообложенияРезидента, КодДляОтчетности)

	Объект = КодДохода.ПолучитьОбъект();

	Объект.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
	Объект.КодДляОтчетности               = КодДляОтчетности;

	Объект.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛВычетыПоДоходам"
//
Процедура ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, КодДохода, ГодовойВычет, НормативЗатрат)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период         = ДатаСведений;
	НоваяЗапись.КодДохода      = КодДохода;
	НоваяЗапись.ГодовойВычет   = ГодовойВычет;
	НоваяЗапись.НормативЗатрат = НормативЗатрат;

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛРазмерВычетов"
//
Процедура ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, КодВычета, Размер, ОграничениеПоДоходам)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.КодВычета            = КодВычета;
	НоваяЗапись.Период               = ДатаСведений;
	НоваяЗапись.Размер               = Размер;
	НоваяЗапись.ОграничениеПоДоходам = ОграничениеПоДоходам;

КонецПроцедуры

// Добавляет запись в набор записей регистра "ЕСНСкидкиКДоходам"
//
Процедура ДобавитьСкидкуКДодохамЕСН(НаборЗаписей, ДатаСведений, КодДохода, ГодоваяСкидка, МесячнаяСкидка)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период         = ДатаСведений;
	НоваяЗапись.КодДоходаЕСН   = КодДохода;
	НоваяЗапись.ГодоваяСкидка  = ГодоваяСкидка;
	НоваяЗапись.МесячнаяСкидка = МесячнаяСкидка;

КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
//
Процедура УстановитьРеквизитыКодаЕСН(СпособОтражения, ВходитВБазуФедеральныйБюджет, ВходитВБазуФСС, ВходитВБазуФОМС)

	Объект = СпособОтражения.ПолучитьОбъект();

	Объект.ВходитВБазуФедеральныйБюджет = ВходитВБазуФедеральныйБюджет;
	Объект.ВходитВБазуФСС               = ВходитВБазуФСС;
	Объект.ВходитВБазуФОМС              = ВходитВБазуФОМС;

	Объект.Записать();

КонецПроцедуры

//Добавляет запись в набор записей регистра сведений ДопустимыеСочетанияМеждуГруппамиСтажа
//
Процедура ДопустимоеСочетаниеСтажа(НаборЗаписей, НомерПравила, КодУсловийТруда, ТипШаблонаКПС, КодПозицииСписка, КодОснованияИсчисляемогоСтажа, ФорматФОВ, КодОснованияВыслугиЛет)

	Запись = НаборЗаписей.Добавить();

	Запись.НомерПравила                  = СокрЛП(НомерПравила);
	Запись.КодУсловийТруда               = СокрЛП(КодУсловийТруда);
	Запись.ТипШаблонаКПС                 = СокрЛП(ТипШаблонаКПС);
	Запись.КодПозицииСписка              = СокрЛП(КодПозицииСписка);
	Запись.КодОснованияИсчисляемогоСтажа = СокрЛП(КодОснованияИсчисляемогоСтажа);
	Запись.ФорматФОВ                     = СокрЛП(ФорматФОВ);
	Запись.КодОснованияВыслугиЛет        = СокрЛП(КодОснованияВыслугиЛет);

КонецПроцедуры 

// Процедура для заполнения плана видов расчета видами начислений по используемым Способам отражения в БУ
Процедура УстановитьРеквизитыНачисленияОрганизации(ВидРасчета, КодДоходаНДФЛ, КодДоходаЕСН, КодДоходаФСС_НС, СпособОтраженияВБухучете, ВидНачисленияПоСт255НК = Неопределено)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.КодДоходаНДФЛ				= КодДоходаНДФЛ;
	ОбъектВР.КодДоходаЕСН				= КодДоходаЕСН;
	ОбъектВР.КодДоходаФСС_НС			= КодДоходаФСС_НС;
	ОбъектВР.СпособОтраженияВБухучете	= ?(СпособОтраженияВБухучете.Пустая(), Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.Ссылка,СпособОтраженияВБухучете);
	ОбъектВР.ВидНачисленияПоСт255НК		= ВидНачисленияПоСт255НК;
	ОбъектВР.ЧастичноПодпадаетПодЕНВД	= Истина; // т.к. могли в расчете ЕСН уже суммы по любому из создаваемых ВР отнести на ЕНВД
	
	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыОсновногоНачисленияОрганизации()

// Корректировка документов "НачислениеЗарплатыРаботникамОрганизаций", установка значения реквизита "ВидРасчета"
// Корректировка документов "НачислениеЗарплатыРаботникамОрганизаций", установка значения реквизита "ВидРасчета"
Процедура ЗаполнитьНачислениеЗарплаты()
	/////////////////////////////////////////////////////////////////////////////////////
	// Корректировка документов "НачислениеЗарплатыРаботникамОрганизаций", установка значения реквизита "ВидРасчета"
	Сообщить("Выполняется заполнение документов ""Начисление зарплаты"" видами начислений", СтатусСообщения.Информация);
	
	ВРПоУмолчанию = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК Ссылка,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДатаСреза = КонецМесяца(Выборка.ПериодРегистрации);
		ДокументНачисление = Выборка.Ссылка;
		ДокументНачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// организуем выборку Физлиц Приказов, и уже по ним получим срез из регистра
		ЗапросФЛ = Новый Запрос;
		ЗапросФЛ.УстановитьПараметр("ВыборкаСсылка", ДокументНачисление);
		ЗапросФЛ.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо КАК Физлицо,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Приказ,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &ВыборкаСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ВыборкаФЛ = ЗапросФЛ.Выполнить().Выбрать();
		Пока ВыборкаФЛ.Следующий() Цикл
			
			ЗапросВыборкиВР = Новый Запрос;
			
			ЗапросВыборкиВР.УстановитьПараметр("ВыборкаСсылка", ДокументНачисление);
			ЗапросВыборкиВР.УстановитьПараметр("ВыборкаПериод", ДатаСреза);
			ЗапросВыборкиВР.УстановитьПараметр("ФизЛицо",ВыборкаФЛ.Физлицо);
			ЗапросВыборкиВР.УстановитьПараметр("Приказ",ВыборкаФЛ.Приказ);
			ЗапросВыборкиВР.УстановитьПараметр("парамПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
			ЗапросВыборкиВР.УстановитьПараметр("ВРПоУмолчанию",ВРПоУмолчанию);
			
			ЗапросВыборкиВР.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение, &ВРПоУмолчанию) КАК ВидРасчетаИзмерение
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|		&ВыборкаПериод,
			|		ФизЛицо = &ФизЛицо
			|			И Приказ = &Приказ) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Размер <> 0";
			
			ВыборкаВР = ЗапросВыборкиВР.Выполнить().Выбрать();
			Если ВыборкаВР.Следующий() Тогда
				ДокументНачислениеОбъект.Начисления[ВыборкаФЛ.НомерСтроки - 1].ВидРасчета = ВыборкаВР.ВидРасчетаИзмерение;
			Иначе
				ДокументНачислениеОбъект.Начисления[ВыборкаФЛ.НомерСтроки - 1].ВидРасчета = ВРПоУмолчанию;
			КонецЕсли;
			ДокументНачислениеОбъект.Начисления[ВыборкаФЛ.НомерСтроки - 1].КодДоходаНДФЛ = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию;
			
		КонецЦикла;
		ДокументНачислениеОбъект.Записать();
	КонецЦикла;
			
	// Корректировка документов "НачислениеЗарплатыРаботникамОрганизаций", установка значения реквизита "ВидРасчета"
	/////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ЗаполнитьНачислениеЗарплаты()

// Внутренняя процедура, используется при каждой записи нового наименования объекта
Процедура ОбновитьНаименование(Ссылка,НовоеНаименование)
	Если Ссылка.Наименование <> НовоеНаименование Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Наименование = НовоеНаименование;
		Объект.Записать();
	КонецЕсли;
КонецПроцедуры

// Изменения в учетной политике НДФЛ-2006 в части применения стандартных вычетов
//
// Параметры
//  нет
//
Процедура ЗаполнитьУчетнуюПолитикуНДФЛ()
    // регистр не может быть большим - выполняем запись одним набором записей
    НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
    НаборЗаписей.Прочитать();
    Для Каждого СтрокаНабора Из НаборЗаписей Цикл
        СтрокаНабора.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
    КонецЦикла;
    НаборЗаписей.Записать();
    
КонецПроцедуры

// Имущественные вычеты: корректировка реквизитов Организация и Период
//
// Параметры
//  нет
//
Процедура КорректировкаИмущественныхВычетов()
	// Наборы записей имущественного вычета
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыСреза.Период,
	|	ГОД(ДатыСреза.Период) КАК Год,
	|	ДатыСреза.Регистратор КАК Регистратор,
	|	ДатыСреза.Физлицо,
	|	ДатыСреза.КодВычетаИмущественный,
	|	ДатыСреза.Размер,
	|	ДатыСреза.ГоловнаяОрганизация КАК Организация,
	|	ЕСТЬNULL(РаботникиОрганизаций.ОбособленноеПодразделение, ДатыСреза.ГоловнаяОрганизация) КАК ОбособленноеПодразделение
	|ИЗ
	|	(ВЫБРАТЬ
	|		НаборыЗаписей.Период КАК Период,
	|		НаборыЗаписей.Регистратор КАК Регистратор,
	|		НаборыЗаписей.Физлицо КАК Физлицо,
	|		НаборыЗаписей.КодВычетаИмущественный КАК КодВычетаИмущественный,
	|		НаборыЗаписей.Размер КАК Размер,
	|		НаборыЗаписей.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодСреза
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НДФЛПрименениеВычетовСрезПоследних.Период КАК Период,
	|			НДФЛПрименениеВычетовСрезПоследних.Регистратор КАК Регистратор,
	|			НДФЛПрименениеВычетовСрезПоследних.ФизЛицо КАК Физлицо,
	|			НДФЛПрименениеВычетовСрезПоследних.КодВычетаИмущественный КАК КодВычетаИмущественный,
	|			НДФЛПрименениеВычетовСрезПоследних.Размер КАК Размер,
	|			НДФЛПрименениеВычетов.Организация КАК ГоловнаяОрганизация
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК ПериодСреза,
	|				НДФЛИмущественныеВычетыФизлиц.Период КАК Период,
	|				НДФЛИмущественныеВычетыФизлиц.Регистратор КАК Регистратор,
	|				НДФЛИмущественныеВычетыФизлиц.ФизЛицо КАК ФизЛицо,
	|				НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный КАК КодВычетаИмущественный,
	|				НДФЛИмущественныеВычетыФизлиц.Размер КАК Размер
	|			ИЗ
	|				РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|					ПО НДФЛИмущественныеВычетыФизлиц.Период >= НДФЛПрименениеВычетов.Период
	|						И НДФЛПрименениеВычетов.Физлицо = НДФЛИмущественныеВычетыФизлиц.ФизЛицо
	|			ГДЕ
	|				НДФЛИмущественныеВычетыФизлиц.ВидДвижения = &Приход
	|				И НДФЛИмущественныеВычетыФизлиц.Организация = &ПустаяОрганизация
	|			
	|			СГРУППИРОВАТЬ ПО
	|				НДФЛИмущественныеВычетыФизлиц.ФизЛицо,
	|				НДФЛИмущественныеВычетыФизлиц.Период,
	|				НДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный,
	|				НДФЛИмущественныеВычетыФизлиц.Размер,
	|				НДФЛИмущественныеВычетыФизлиц.Регистратор) КАК НДФЛПрименениеВычетовСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|				ПО НДФЛПрименениеВычетов.Период = НДФЛПрименениеВычетовСрезПоследних.ПериодСреза
	|					И НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовСрезПоследних.ФизЛицо) КАК НаборыЗаписей
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО НаборыЗаписей.Физлицо = РаботникиОрганизаций.Физлицо
	|				И НаборыЗаписей.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	|				И (РаботникиОрганизаций.Приказ.ВидЗанятости <> &ВнутреннееСовместительство
	|					ИЛИ РаботникиОрганизаций.Приказ.ВидЗанятости ЕСТЬ NULL )
	|				И НаборыЗаписей.Период >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НаборыЗаписей.Период,
	|		НаборыЗаписей.Регистратор,
	|		НаборыЗаписей.Физлицо,
	|		НаборыЗаписей.ГоловнаяОрганизация,
	|		НаборыЗаписей.КодВычетаИмущественный,
	|		НаборыЗаписей.Размер) КАК ДатыСреза
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ДатыСреза.Физлицо = РаботникиОрганизаций.Физлицо
	|			И ДатыСреза.ГоловнаяОрганизация = РаботникиОрганизаций.Организация
	|			И (РаботникиОрганизаций.Приказ.ВидЗанятости <> &ВнутреннееСовместительство
	|				ИЛИ РаботникиОрганизаций.Приказ.ВидЗанятости ЕСТЬ NULL )
	|			И ДатыСреза.ПериодСреза = РаботникиОрганизаций.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	НаборЗаписей = РегистрыНакопления.НДФЛИмущественныеВычетыФизлиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	ВременнаяТЗ = НаборЗаписей.Выгрузить();
	ВременнаяТЗ.Колонки.Добавить("ОбособленноеПодразделение");
	
	ТипДокументаПодтверждение = Тип("ДокументСсылка.НДФЛПодтверждениеПраваНаИмущественныйВычет");
	Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписейНеЗаполнен = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеНеЗаполнено(Выборка.Организация) Тогда
				НаборЗаписейНеЗаполнен = Истина; 
				Прервать;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ВременнаяТЗ.Добавить(),Выборка);
		КонецЦикла;
		Если Не НаборЗаписейНеЗаполнен Тогда
			НаборЗаписей.Загрузить(ВременнаяТЗ);
			Если ТипЗнч(Выборка.Регистратор) = ТипДокументаПодтверждение Тогда
				ВременнаяТЗ.Свернуть("ОбособленноеПодразделение,Год");
				Если ВременнаяТЗ.Количество() = 1 Тогда
					Документ = Выборка.Регистратор.ПолучитьОбъект();
					Документ.Организация = ВременнаяТЗ[0].ОбособленноеПодразделение;
					Документ.НалоговыйПериод = ВременнаяТЗ[0].Год;
					Документ.Записать();
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
		НаборЗаписей.Очистить();
		ВременнаяТЗ.Очистить();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛИмущественныеВычетыФизлиц.Регистратор,
	|	ВЫБОР
	|		КОГДА НДФЛИмущественныеВычетыФизлиц.Регистратор.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА НДФЛИмущественныеВычетыФизлиц.Регистратор.Организация
	|		ИНАЧЕ НДФЛИмущественныеВычетыФизлиц.Регистратор.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	НДФЛИмущественныеВычетыФизлиц.Регистратор.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
	|ГДЕ
	|	НДФЛИмущественныеВычетыФизлиц.Организация = &ПустаяОрганизация
	|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения = &Расход
	|	И НДФЛИмущественныеВычетыФизлиц.Регистратор.Организация ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
			СтрокаНабораЗаписей.Организация = Выборка.Организация;
			СтрокаНабораЗаписей.Год = Год(СтрокаНабораЗаписей.Период);
			Если Выборка.ПериодРегистрации <> NULL Тогда
				СтрокаНабораЗаписей.Период = КонецМесяца(Выборка.ПериодРегистрации)
			КонецЕсли;
		КонецЦикла; 
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КорректировкаИмущественныхВычетов()

Процедура ОбновлениеРКОВалютаДокумента()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.ВидОперации = &ВидОперации
	               |	И ЕСТЬNULL(РасходныйКассовыйОрдер.ВалютаДокумента, &ПустаяВалюта) = &ПустаяВалюта";
				   			   
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	Запрос.УстановитьПараметр("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Заполнение реквизита <Валюта документа> документа <Расходный кассовый ордер>");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	РезультатЗапроса = РезультатЗапроса.Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ДокументОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Документ <" + ДокументОбъект + ">: не удалось заполнить реквизит <Валюта документа>", СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

	 
Процедура ИзменитьФорматХраненияДанныхРегламентированныхОтчетов()
	
	ВыборкаРегламентированныхОтчетов = Документы.РегламентированныйОтчет.Выбрать();
	
	Пока ВыборкаРегламентированныхОтчетов.Следующий() Цикл
		
		ИмяОтчета = СокрЛП(ВыборкаРегламентированныхОтчетов.ИсточникОтчета);
		
		Если ИмяОтчета = "РегламентированныйОтчетАкцизыПриложение1" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетАкцизыПриложение3" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетАкцизыПриложение5" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетАкцизыПриложение7" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетДоходыЗаПределамиРФ" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетЗемля" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетИмущество" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетНалогНаИгорныйБизнес" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетНДС" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетНДС0" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетПрибыль" ИЛИ
			 ИмяОтчета = "РегламентированныйОтчетТранспорт" Тогда
			 
			РегламентированнаяОтчетность.КонвертацияОтчетнойФормы(ВыборкаРегламентированныхОтчетов.Ссылка);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли