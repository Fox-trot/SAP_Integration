////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ОбъектСправочника = Параметры.Ключ.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаМассивСертификатов") Тогда
		СсылкаНаМассивСертификатов = Параметры.СсылкаНаМассивСертификатов;
	КонецЕсли;
	
	ОтключитьВыводДопДанных = Истина;
	ОтключитьВыводКопияВерна = Истина;
    ПриИзмененииНастроекОтображенияДополнительнойИнформации();
	
	ИнициализацияДанныхНаСервере(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.КлючУникальности = Объект.Ссылка;
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
			#Если ВебКлиент Тогда
				ПутьКФайлуПросмотра = АдресФайлаВХранилище;
			#Иначе
				ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ДДФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
				ДДФайла.Записать(ПутьКФайлуПросмотра);
			#КонецЕсли
			Если Найти("HTML PDF DOCX XLSX", ВРег(РасширениеФайла)) > 0 Тогда
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
				Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
			Иначе
				#Если НЕ ВебКлиент Тогда
					ЗапуститьПриложение(ПутьКФайлуПросмотра);
				#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	// +aldo
	// Если это произвольный электронный документ, 
	// то скрываем вкладку "Содержимое"
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		 Элементы.СтраницыФормы.ПодчиненныеЭлементы.СтраницаТабличныйДокумент.Видимость = Ложь;
	 КонецЕсли;
	 // -aldo
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Если Не ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			Попытка
				МассивСтруктурСертификатов = Новый Массив;
				СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
			Исключение
			КонецПопытки;
		КонецЕсли;
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Настройки.Получить("ОтключитьВыводДопДанных") = Неопределено Тогда
		ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
	КонецЕсли;
	
	Если Не Настройки.Получить("ОтключитьВыводКопияВерна") = Неопределено Тогда
		ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
	КонецЕсли;

	ПриИзмененииНастроекОтображенияДополнительнойИнформации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Квитанция) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ПараметрыФормы = Новый Структура("Ключ", Квитанция);
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Объект.ДополнительнаяИнформация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПредупрежденияНажатие(Элемент)
	Если ЗначениеЗаполнено(АдресПереходаПоПредупреждению) Тогда
		ЗапуститьПриложение(АдресПереходаПоПредупреждению);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерейтиКЖурналуСобытийЭД(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	ЭлектронныеДокументыСлужебныйВызовСервера.venkonОпределитьСтатусыПодписей(Объект.Ссылка);
	
	ЗаполнитьТаблицуЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	ЭлектронныеДокументыСлужебныйКлиент.venkonПерезагрузитьПодписи(Объект.Ссылка);
	
	ЗаполнитьТаблицуЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	Комментарий = "";
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализацияДанныхНаСервере(Отказ)
		
	ТабличныйДокументКопияВерна = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента").ПолучитьОбласть("КопияВерна");
	ТабличныйДокументКопияВерна.Параметры.ДатаПечати = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусОтклонен = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ЭЦПНеВерна
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов);
					
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ЗаполнитьТаблицуЭЦП();
		
		// +aldo
		Если НЕ Отказ И Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
		// -aldo
	КонецЕсли;
	
	ПерезаполнитьКомментарии();
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", ТекстЗаписки);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	ЭтаФорма.Модифицированность = Ложь;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
	|	ЖурналСобытийЭД.Дата КАК Дата,
	|	ЖурналСобытийЭД.СтатусЭД,
	|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
	|	ЖурналСобытийЭД.Комментарий
	|ИЗ
	|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
	|ГДЕ
	|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
	|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКоммент = "";
	ПервыйКоммент = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКоммент = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКоммент = ТекущийКоммент Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКоммент = ТекущийКоммент;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКоммент = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКоммент = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКоммент = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЭД()
		
	СтатусЭД = Объект.СтатусЭД;
	ДатаИзмененияСтатусаЭД = Объект.ДатаИзмененияСтатусаЭД;
	
	ТекстСтатусЭД = "" +  СтатусЭД + ", " + Формат(ДатаИзмененияСтатусаЭД, "ДЛФ=");
	ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла);
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлектронныйДокумент, "ДатаФормированияЭДОтправителем");
		ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
	// Если обмен через ЭДО, то статусы не отображаем
	Если Не ЭлектронныеДокументыСлужебный.ЭтоБанковскийЭД(Объект.ВидЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "ТаблицаСостояний");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаВременная.Очистить();
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ВидЭД,ЭлектронныеЦифровыеПодписи");

	ТаблицаВременная = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаВременная.Очистить();
	
	Если ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Объект.Ссылка) Тогда
		ЭлПодписи = ЭлектронныеПодписиДвухТитулов();
	Иначе
		ЭлПодписи = СвойстваЭД.ЭлектронныеЦифровыеПодписи.Выгрузить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭлПодписи Цикл
		НоваяСтрока = ТаблицаВременная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ВыводКартинки = 0;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаВременная, "ЭЦП");
		
	Если ЭлектронныеДокументыСлужебный.ЭтоБанковскийЭД(Объект.ВидЭД) Тогда
		ШаблонЗаголовка = Нстр("ru = 'Подписи %1и статусы'");
	Иначе
		ШаблонЗаголовка = Нстр("ru = 'Подписи %1'");
	КонецЕсли;
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
		
	Если ЭЦП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭлектронныеПодписиДвухТитулов()
	
	ЭПРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ЭлектронныеЦифровыеПодписи");
	ЭП = ЭПРезультат.Выгрузить();
	
	ВторойТитул = ВторойТитулДокумента(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		
		ЭПВторогоТитулаРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВторойТитул, "ЭлектронныеЦифровыеПодписи");
		ЭПВторогоТитула = ЭПВторогоТитулаРезультат.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭПВторогоТитула, ЭП);
		
	КонецЕсли;
	
	Возврат ЭП;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ СтатусОтклонен Тогда
		
		ФлагПодписи = Истина;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()

	МассивСтруктурСертификатов = Новый Массив;

	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	СтруктураПодписей = Новый Структура();
	СтруктураПодписей.Вставить("Подписи", ЭЦП.Выгрузить(, "КомуВыданСертификат, НомерСтроки, ДатаПодписи, Сертификат"));
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	
	ДанныеЭД = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(Объект.Ссылка, ПараметрыПросмотра);
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		ОпределитьНаличиеДопДанныхСкрытьФлаг();
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
		Элементы.СтраницаДругойФормат.Видимость = Ложь;
		Элементы.СтраницаТабличныйДокумент.Видимость = Истина;
		
		ОбновитьВидимостьДополнительнойИнформации();
		
	Иначе
		Элементы.СтраницаДругойФормат.Видимость = Истина;
		Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
		
		Если ТипЗнч(ДанныеЭД) = Тип("Строка") Тогда
			АдресФайлаВХранилище = ДанныеЭД;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.Ссылка,
		"ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, ПрофильНастроекЭДО, ПодписанЭЦП");
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ВерсияФорматаПакета");
	
	ИспользуетсяЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ((ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий)
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		НоваяСтрока = НастройкиСтатусов.Добавить();
		НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
		НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись = ИспользуетсяЭЦП;
		НоваяСтрока.ИспользоватьКвитанции = Ложь;
		НоваяСтрока.ИспользуетсяНесколькоПодписей = Ложь;
		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
	Иначе
		
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			НоваяСтрока = НастройкиСтатусов.Добавить();
			НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
			НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
			НоваяСтрока.ИспользоватьПодпись = ТребуетсяПодпись;
			
			ВерсияПакетаЭД = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(ЭД);
			НоваяСтрока.ВерсияФорматаПакета = ВерсияПакетаЭД;
			
			Если ВерсияПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				ИспользоватьКвитанции = Ложь;
			Иначе
				ИспользоватьКвитанции = Истина;
			КонецЕсли;
			НоваяСтрока.ИспользоватьКвитанции = ИспользоватьКвитанции;
			
			НоваяСтрока.ИспользуетсяНесколькоПодписей = Ложь;
			НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
						
		КонецЕсли;

	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	СтруктураНастроек = Новый Структура("ВерсияРегламентаЭДО, ВерсияФорматаПакета, ВидЭД, ИспользоватьКвитанции, ИспользоватьПодпись, ИспользуетсяНесколькоПодписей, Направление");
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, НастройкиСтатусов);
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(СтруктураНастроек);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Если ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
		Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = ЭД.СтатусЭД;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД);
		ПризнакПройден = Истина;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
			ТекСтрока.Пройден = ПризнакПройден;
			Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
				И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
				ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
				Прервать;
			КонецЕсли;
			Если ЭД.СтатусЭД = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Функция СкрытьОбластьТабличногоДокумента(ИмяОбласти, ТипСмещения = Неопределено)
	
	Если ТипСмещения = Неопределено Тогда
		ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;
	КонецЕсли;
	
	ЕстьОбластьДД = ТабличныйДокументФормы.Области.Найти(ИмяОбласти);
	
	Если ЕстьОбластьДД <> Неопределено Тогда
		ОбластьШапки = ТабличныйДокументФормы.Области.Найти("Шапка");
		ОбластьТаблицы = ТабличныйДокументФормы.Область(ИмяОбласти);
		
		Верх = ?(ОбластьТаблицы.Лево = 0 И ОбластьТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
			ОбластьТаблицы.Верх, ОбластьШапки.Низ + 1);
			
		Если ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали Тогда
			УдаляемаяОбласть = ТабличныйДокументФормы.Область(Верх, ОбластьТаблицы.Лево,
				ТабличныйДокументФормы.ВысотаТаблицы, ОбластьТаблицы.Право);
		Иначе
			Низ = ТабличныйДокументФормы.ВысотаТаблицы;
			УдаляемаяОбласть = ТабличныйДокументФормы.Область(Верх, , Низ,);
		КонецЕсли; 
			
		ТабличныйДокументФормы.УдалитьОбласть(УдаляемаяОбласть, ТипСмещения);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	
	Если ОтключитьВыводДопДанных Тогда
		СкрытьОбластьТабличногоДокумента("ОбластьДД");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП");
		СкрытьОбластьТабличногоДокумента("ОбластьДДБезЭП");
		СкрытьОбластьТабличногоДокумента("ДопДанныеШапки_Шапка");
		
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_УС");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_У");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_С");

	КонецЕсли;
	
	// Добавление области Копия верна
	Если Не ОтключитьВыводКопияВерна Тогда
		ТабличныйДокументФормы.Вывести(ТабличныйДокументКопияВерна);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеДопДанныхСкрытьФлаг()
	
	СсылкаНаЭД = Объект.Ссылка;
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик 
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		
		Тогда
		
		ЕстьДопДанные = Истина;
	Иначе
		
		ЕстьДопДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ЭлектронныеДокументыСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииНастроекОтображенияДополнительнойИнформации()
	
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

