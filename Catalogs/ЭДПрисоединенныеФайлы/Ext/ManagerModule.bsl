#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати = Неопределено, КоллекцияПечатныхФорм = Неопределено, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ЭД Из МассивОбъектов Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо расскомментировать процедуры печати Справочники.ЭДПрисоединенныеФайлы.Печать(...)");
		//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЭД") Тогда
		//	
		//	// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		//	ТабличныйДокумент = ПечатьЭД(ЭД);
		//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		//		"ПечатьЭД", "Электронный документ", ТабличныйДокумент);
		//	//УниверсальныеМеханизмы.НапечататьДокумент(ТабличныйДокумент, 0, , , , ЭД);   //СформироватьЗаголовокДокумента(Объект)
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПревьюЭД(ЭД, АдресКаталога, ИмяФайла) Экспорт
	
	// Заглушка
	// Отказ от файла превью
	Возврат;
	
	ТабличныйДокумент = ПечатьЭД(ЭД);
		
	ИмяВременногоФайла = ?(Прав(АдресКаталога, 1) = "\", АдресКаталога, АдресКаталога + "\") + ИмяФайла + ".pdf";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
	
КонецПроцедуры

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати = Неопределено)
	
	ТабДок = ПечатнаяФормаЭД(СсылкаНаЭД);
		
	Возврат ТабДок;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[2].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[3].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[4].Выгрузить();
	
	МассивЭД = Новый Массив;
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивЭД, ДанныеЭД.ВыгрузитьКолонку("Ссылка"));
	
	Для Каждого ЭлементМассива Из МассивЭД Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			
		Иначе
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ТипДокумента = СтрокаДанныхЭД.ВидДокумента + " "+ СтрокаДанныхЭД.ТипДокумента;
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		
		Если ЭлектронныеДокументыСлужебный.ЭтоФНС(СтрокаДанныхЭД.ВидЭДСсылка)Тогда
			Идентификатор = СтрокаДанныхЭД.НаименованиеФайла;
		Иначе
			Идентификатор = СтрокаДанныхЭД.Идентификатор;
		КонецЕсли;
		ДанныеПечатнойФормы.Вставить("Идентификатор", Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.СопроводительнаяЗаписка) Тогда
			ДанныеПечатнойФормы.Вставить("СопроводительнаяЗаписка", СтрокаДанныхЭД.СопроводительнаяЗаписка);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу серфтикатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ТребуетсяПодпись Тогда
		
		Если ЭлектронныеДокументыСлужебный.ЭтоФНС(СтрокаМассива.ВидЭДСсылка) Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			КонецЕсли;
			
		Иначе
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
		ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
		
	КонецЕсли;

КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизацииЭД(ДанныеЮрФизЛицо,"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = "Верна ("+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = "Неверна ( "+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция ПечатнаяФормаЭД(СсылкаНаЭД, ИмяФайлаПодчиненногоЭД = Неопределено, Идентификатор = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ПечатьЭД", Истина);
	
	ТабДок = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(СсылкаНаЭД, ПараметрыПросмотра);
	
	ОбъектыПечати = Новый СписокЗначений;
	ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, СсылкаНаЭД);
	
	Возврат ТабДок;
	
КонецФункции

// Задает область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - табличный документ - табличный документ печатной формы
//  НомерСтрокиНачало - число - позиция начала очередной области в документе
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  Ссылка - ссылка на объект ИБ - объект печати
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

КонецПроцедуры

// Обработчик обновления БЭД 1.0.1.1
// Заполняет дату окончания действия сертификата
//
Процедура ЗаполнитьНаименованиеФайла() Экспорт
	
	ЭлементСсылка = Справочники.ЭДПрисоединенныеФайлы.Выбрать();
	
	Пока ЭлементСсылка.Следующий() Цикл
		
		Попытка
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			ЭлементОбъект.НаименованиеФайла = ЭлементОбъект.Наименование;
			ЭлементОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.0.1.1
Процедура ЗаполнитьСвойстваЭД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ЭДПрисоединенныеФайлы.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
	|	И ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)";
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	СостоянияЗавершен = Новый Массив;
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	Запрос.УстановитьПараметр("СостоянияЗавершен", СостоянияЗавершен);
	
	ВидыЭД = Новый Массив;
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Запрос.УстановитьПараметр("ВидыЭД", ВидыЭД);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭДОбъект = Выборка.ЭД.ПолучитьОбъект();
		ЭДОбъект.ТребуетсяИзвещение = Истина;
		ЭДОбъект.ТребуетсяПодтверждение = Истина;
		
		ЭДОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.0.1.1
Процедура УстановитьСостоянияОбменЗавершен() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДОтветные
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДОтветные.ЭлектронныйДокументВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.СсылкаНаОбъект
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД В(&ТитулыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)
	|	И ЭДОтветные.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|	И ЭДОтветные.СтатусЭД В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПереданОператору), ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен))
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДОтветные
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДОтветные.ЭлектронныйДокументВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.СсылкаНаОбъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД В(&НеТитулыЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияЗавершен)
	|	И ЭДОтветные.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП))
	|	И ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.НомерСтроки >= 2
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ПометкаУдаления";
	
	НеТитулы = Новый Массив;
	// +aldo
	НеТитулы.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	// -aldo
	
	Запрос.УстановитьПараметр("НеТитулыЭД", НеТитулы);
	
	Титулы = Новый Массив;
	Титулы.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	
	Запрос.УстановитьПараметр("ТитулыЭД", Титулы);
	
	СостоянияЗавершен = Новый Массив;
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	СостоянияЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
	Запрос.УстановитьПараметр("СостоянияЗавершен", СостоянияЗавершен);

	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей[0];
		Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецЕсли