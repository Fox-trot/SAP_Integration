Перем мДлинаСуток Экспорт;
Перем ТаблицаДляЗаписи Экспорт;
Перем СписокИнтерваловРедактирования Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ПолучитьКоличествоЧасов(День, Смена, ЧасовВсего, ЧасовВечерних, ЧасовНочных)
	
	ЧасовВсего     = 0;
	ЧасовВечерних  = 0;
	ЧасовНочных    = 0;
	НачДня         = НачалоДня(День);
	
	//НачалоВечерних     = 61200;  // 17:00:00
	НачалоВечерних     = 64800;  // 18:00:00
	ОкончаниеВечерних  = 79199;  // 21:59:59
	НачалоНочных1      = 0;      // 00:00:00
	ОкончаниеНочных1   = 21600;  // 06:00:00
	НачалоНочных2      = 79200;  // 22:00:00
	ОкончаниеНочных2   = 108000; // 06:00:00
	
	Для каждого ПериодСмены из Смена.ПериодыСмены Цикл
		
		ПериодСменыВремяНачала    = НачДня + (ПериодСмены.ВремяНачала - НачалоДня(ПериодСмены.ВремяНачала));
		ПериодСменыВремяОкончания = НачДня + (ПериодСмены.ВремяОкончания - НачалоДня(ПериодСмены.ВремяОкончания)) + ?(ПериодСмены.ВремяОкончания < ПериодСмены.ВремяНачала, мДлинаСуток, 0);
		
		ЧасовВсего = ЧасовВсего + (ПериодСменыВремяОкончания - ПериодСменыВремяНачала);
		
		НачалоВечернихЧасов = Макс(ПериодСменыВремяНачала, НачалоДня(День) + НачалоВечерних);
		ОкончаниеВечернихЧасов = Мин(ПериодСменыВремяОкончания, НачалоДня(День) + ОкончаниеВечерних);
		
		ЧасовВечерних = ЧасовВечерних + Макс(ОкончаниеВечернихЧасов - НачалоВечернихЧасов, 0);
		
		НачалоНочныхЧасов = Макс(ПериодСменыВремяНачала, НачалоДня(День) + НачалоНочных1);
		ОкончаниеНочныхЧасов = Мин(ПериодСменыВремяОкончания, НачалоДня(День) + ОкончаниеНочных1);
		
		ЧасовНочных = ЧасовНочных + Макс(ОкончаниеНочныхЧасов - НачалоНочныхЧасов, 0);
		
		НачалоНочныхЧасов = Макс(ПериодСменыВремяНачала, НачалоДня(День) + НачалоНочных2);
		ОкончаниеНочныхЧасов = Мин(ПериодСменыВремяОкончания, НачалоДня(День) + ОкончаниеНочных2);
		
		ЧасовНочных = ЧасовНочных + Макс(ОкончаниеНочныхЧасов - НачалоНочныхЧасов, 0);
		
	КонецЦикла;
	
	ЧасовВсего    = ЧасовВсего / 3600;
	ЧасовВечерних = ЧасовВечерних / 3600;
	ЧасовНочных   = ЧасовНочных / 3600;
	
КонецФункции

Функция ПолучитьКоличествоДнейВпроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаИнтервала", ДатаНачалаИнтервала);
	Запрос.УстановитьПараметр("ДатаОкончанияИнтервала", ДатаОкончанияИнтервала);
	Запрос.Текст = "ВЫБРАТЬ
	| КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней
	|ИЗ
	| РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|
	|ГДЕ
	| РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачалаИнтервала И
	| РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаОкончанияИнтервала";
	
	Результат  = Запрос.Выполнить();
	Выборка    = Результат.Выбрать();
	Выборка.Следующий();
	КоличествоДней = Выборка.КоличествоДней;
	Возврат КоличествоДней;
	
КонецФункции

Функция ВыходнойПоПроизводственномуКалендарю(индДата, ВидГрафика)
	
	ЗаписьРеглПроизвКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
	ЗаписьРеглПроизвКалендаря.Год = Год(индДата);
	ЗаписьРеглПроизвКалендаря.ДатаКалендаря = индДата;
	ЗаписьРеглПроизвКалендаря.Прочитать();
	Если ЗаписьРеглПроизвКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник тогда
		Возврат Истина;
	ИначеЕсли ЗаписьРеглПроизвКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий тогда
		Возврат Ложь;
	ИначеЕсли ЗаписьРеглПроизвКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота тогда
		Если ПервыйВыходной = Перечисления.ДниНедели.Суббота или ВторойВыходной = Перечисления.ДниНедели.Суббота тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЗаписьРеглПроизвКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье тогда
		Если ПервыйВыходной = Перечисления.ДниНедели.Воскресенье или ВторойВыходной = Перечисления.ДниНедели.Воскресенье тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции  //ВыходнойПоПроизводственномуКалендарю

Процедура ОбработатьНаборЗаписейКалендаряДляАвтоматическогоЗаполнения(ДатаНачалаИнтервала, ДатаОкончанияИнтервала)
	
	Если НЕ ПроверитьПравильностьЗаполненияПериодовДляПятиШестидневки() тогда
		Сообщить("Количество часов за неделю не совпадает с расчетным!");
		Возврат;
	КонецЕсли;
	
	Если ДатаНачалаИнтервала < ДатаОтсчета Тогда
		Сообщить("Календарь не может быть заполнен на период, предшествующий указанной в нем дате отсчета!");
		Возврат;
	КонецЕсли;
	
	КоличествоДней = ПолучитьКоличествоДнейВпроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	ДнейВИнтервале = Окр((ДатаОкончанияИнтервала - ДатаНачалаИнтервала) / мДлинаСуток);
	Если ДнейВИнтервале <> КоличествоДней тогда
//		Сообщить("Проверьте правильность заполнения регламентированного производственного календаря", СтатусСообщения.Важное);
	КонецЕсли;
	
	Модифицированность = Истина;
	//КалендарьНаборЗаписей.Очистить();
	// сначала очистим записи за указанный период
	индДата = ДатаНачалаИнтервала;
	ПарамПоиска = Новый Структура("Дата");
	Пока индДата <= ДатаОкончанияИнтервала Цикл
		ПарамПоиска.Дата = индДата;
		СтрокиДляУдаления = ТаблицаДляЗаписи.НайтиСтроки(ПарамПоиска);
		Для каждого СтрокаУдаления из СтрокиДляУдаления Цикл
			ТаблицаДляЗаписи.Удалить(СтрокаУдаления);
		КонецЦикла;
		индДата = индДата + мДлинаСуток;
	КонецЦикла;
	
	КоличествоДнейВЦикле  = 0;
	ТаблицаСменПоДням   = Новый ТаблицаЗначений;
	ТипСмены     = Новый ОписаниеТипов("СписокЗначений");
	ТаблицаСменПоДням.Колонки.Добавить("СписокСмен", ТипСмены);
	
	Если ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
	
		Для каждого НомерДня из Смены Цикл
			КоличествоДнейВЦикле = Макс(КоличествоДнейВЦикле, НомерДня.НомерДня);
			Если ТаблицаСменПоДням.Количество() < НомерДня.НомерДня тогда
				Пока Истина Цикл
					ТаблицаСменПоДням.Добавить();
					Если ТаблицаСменПоДням.Количество() = НомерДня.НомерДня тогда
						Прервать;
					КонецЕсли
				КонецЦикла;
			КонецЕсли;
			СтрокаизТаблицыПоДню = ТаблицаСменПоДням[НомерДня.НомерДня-1];
			СтрокаизТаблицыПоДню.СписокСмен.Добавить(НомерДня.Смена);
		КонецЦикла;
	
	КонецЕсли; 
	
	ДнейВИнтервале = (НачалоДня(ДатаОкончанияИнтервала) - ДатаНачалаИнтервала)/мДлинаСуток;
	индДата   = '00000000';
	ЧасовВДне = Окр(ДлительностьРабочейНедели/?(ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка,6,5));
	
	Для инд = 0 по ДнейВИнтервале-1 Цикл
		индДата = ДатаНачалаИнтервала + инд * мДлинаСуток;
		Если  КоличествоДнейВЦикле > 0 тогда
			НомерДняДляСмены = ((индДата - ДатаОтсчета)/мДлинаСуток) % КоличествоДнейВЦикле;
			НомерДняДляСмены = ?(НомерДняДляСмены < 0, НомерДняДляСмены*-1, НомерДняДляСмены);
			СменыЗаДень   = ТаблицаСменПоДням[НомерДняДляСмены].СписокСмен;
			ИтогоЧасовВсего  = 0;
			ИтогоЧасовВечерних = 0;
			ИтогоЧасовНочных = 0;
			Для каждого ПериодДня из СменыЗаДень Цикл
				КоличествоЧасовВсего  = 0;
				КоличествоЧасовВечерних  = 0;
				КоличествоЧасовНочных  = 0;
				ЗаписьПоСменам = ТаблицаДляЗаписи.Добавить();//КалендарьНаборЗаписей.Добавить();
				ПолучитьКоличествоЧасов(индДата, ПериодДня.Значение, КоличествоЧасовВсего, КоличествоЧасовВечерних, КоличествоЧасовНочных);
				ЗаписьПоСменам.Дата     = индДата;
				ЗаписьПоСменам.Часы     = КоличествоЧасовВсего;
				ЗаписьПоСменам.ВечерниеЧасы = КоличествоЧасовВечерних;
				ЗаписьПоСменам.НочныеЧасы   = КоличествоЧасовНочных;
			КонецЦикла;
		Иначе // дней в цикле нет!
			Если (ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка) или (ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка) тогда
				ИтогоЧасовВсего  = 0;
				ИтогоЧасовВечерних = 0;
				ИтогоЧасовНочных = 0;
				ЗаписьПоСменам  = ТаблицаДляЗаписи.Добавить();//КалендарьНаборЗаписей.Добавить();
				Если (НЕ ЗначениеНеЗаполнено(ПервыйВыходной) и (Перечисления.ДниНедели.Индекс(ПервыйВыходной) = (ДеньНедели(индДата)-1))) или
					(НЕ ЗначениеНеЗаполнено(ВторойВыходной) и (Перечисления.ДниНедели.Индекс(ВторойВыходной) = (ДеньНедели(индДата)-1))) 
					или ВыходнойПоПроизводственномуКалендарю(индДата, ВидГрафика) тогда
					ЗаписьПоСменам.Дата			= индДата;
					ЗаписьПоСменам.Часы			= 0;
					ЗаписьПоСменам.ВечерниеЧасы	= 0;
					ЗаписьПоСменам.НочныеЧасы	= 0;
				Иначе
					ПолучитьКоличествоЧасов(индДата, Ссылка, КоличествоЧасовВсего, КоличествоЧасовВечерних, КоличествоЧасовНочных);
					ЗаписьПоСменам.Дата			= индДата;
					ЗаписьПоСменам.Часы			= КоличествоЧасовВсего;
					ЗаписьПоСменам.ВечерниеЧасы = КоличествоЧасовВечерних;
					ЗаписьПоСменам.НочныеЧасы   = КоличествоЧасовНочных;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОтмеченВРесурсеПроизводственногоКалендаря(ПроверяемаяДата, Ресурс, ТаблицаДанныхКалендаря) Экспорт
	
	НайденнаяСтрока = ТаблицаДанныхКалендаря.Найти(ПроверяемаяДата, "ДатаКалендаря");
	Если НайденнаяСтрока = Неопределено тогда
		Возврат 0;
	КонецЕсли;
	Возврат НайденнаяСтрока[Ресурс];
	
КонецФункции

Процедура ПоместитьТаблицуВТаблицуДляЗаписи(ТаблицаПоместить, ТаблицаДляЗаписи, ДатаНачалаИнтервала, ДатаОкончанияИнтервала) Экспорт
	
	СтруктураПоиска = Новый Структура("Дата");
	
	//Для каждого СтрокаТаблицаПоместить из ТаблицаПоместить Цикл
	ДнейВТекущемМесяце = Окр((ДатаОкончанияИнтервала - ДатаНачалаИнтервала) / мДлинаСуток); //День(КонецМесяца(ДатаНачалаИнтервала));
	ДатаМесяца = ДатаНачалаИнтервала;
	Для индДата = 0 по ДнейВТекущемМесяце-1 Цикл
		ДатаМесяца = ДатаНачалаИнтервала + индДата * мДлинаСуток;
		// попробуем найти строку с соответствующей датой в таблице ИЗ которой помещаем
		СтруктураПоиска.Дата = ДатаМесяца;
		
		НайдСтрокиПоместить = ТаблицаПоместить.НайтиСтроки(СтруктураПоиска);
		//СтрокаТаблицаПоместить = 
		Если НайдСтрокиПоместить.Количество() > 0 Тогда
			СтрокаТаблицаПоместить = НайдСтрокиПоместить[0];
			// нашли строку и теперь ее поместим
			СтруктураПоискаВТаблицеЗаписи = Новый Структура("Дата");
			СтруктураПоискаВТаблицеЗаписи.Дата = ДатаМесяца;
			
			НайдСтроки = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоискаВТаблицеЗаписи);
			Если НайдСтроки.Количество()>0 Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока        = ТаблицаДляЗаписи.Добавить();
				НоваяСтрока.Дата   = СтрокаТаблицаПоместить.Дата;
			КонецЕсли; 

			НоваяСтрока.Часы   = СтрокаТаблицаПоместить.Часы;
			НоваяСтрока.ВечерниеЧасы = СтрокаТаблицаПоместить.ВечерниеЧасы;
			НоваяСтрока.НочныеЧасы   = СтрокаТаблицаПоместить.НочныеЧасы;
		Иначе
			// если не нашли строку, тогда удалим соответствующую строку из другой таблицы
			НайдСтроки = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоиска);
			Если НайдСтроки.Количество()>0 Тогда
				НоваяСтрока = НайдСтроки[0];
				ТаблицаДляЗаписи.Удалить(НоваяСтрока);
			КонецЕсли; 

		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

// Отбирает данные за переданный интервал дат из регистра сведений
//
// Параметры: 
//  ДатаНачалаИнтервалаКалендаря - начало интервала дат
//  ДатаОкончанияИнтервалаКалендаря - окончание интервала дат
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьТаблицуЗаИнтервал(ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря) Экспорт
	
	ДнейВИнтервале = Окр((ДатаОкончанияИнтервалаКалендаря - ДатаНачалаИнтервалаКалендаря)/мДлинаСуток);
	Для инд = 0 по ДнейВИнтервале - 1 Цикл
		индДата    = ДатаНачалаИнтервалаКалендаря + инд * мДлинаСуток;
	КонецЦикла;
	ЗапросПоСменам = Новый Запрос;
	ЗапросПоСменам.УстановитьПараметр("ДатаНачалаИнтервалаКалендаря",  ДатаНачалаИнтервалаКалендаря);
	ЗапросПоСменам.УстановитьПараметр("ДатаОкончанияИнтервалаКалендаря", ДатаОкончанияИнтервалаКалендаря);
	ЗапросПоСменам.УстановитьПараметр("ГрафикРаботы", Ссылка);
	ЗапросПоСменам.УстановитьПараметр("ПоЧасам", 	Перечисления.ВидыУчетаВремени.ПоЧасам);
	ЗапросПоСменам.УстановитьПараметр("Вечерние", 	Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросПоСменам.УстановитьПараметр("Ночные", 	Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	
	ЗапросПоСменам.Текст = "ВЫБРАТЬ
	                       |	ГрафикиРаботыПоВидамВремениЧасы.Дата,
	                       |	ГрафикиРаботыПоВидамВремениЧасы.ОсновноеЗначение КАК Часы,
	                       |	ГрафикиРаботыПоВидамВремениЧасы.ВидУчетаВремени,
	                       |	ГрафикиРаботыПоВидамВремениНочные.ОсновноеЗначение КАК НочныеЧасы,
	                       |	ГрафикиРаботыПоВидамВремениВечерние.ОсновноеЗначение КАК ВечерниеЧасы
	                       |ИЗ
	                       |	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениЧасы
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениВечерние
	                       |		ПО ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = ГрафикиРаботыПоВидамВремениВечерние.ГрафикРаботы И ГрафикиРаботыПоВидамВремениЧасы.Дата = ГрафикиРаботыПоВидамВремениВечерние.Дата И (ГрафикиРаботыПоВидамВремениВечерние.ВидУчетаВремени = &Вечерние)
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениНочные
	                       |		ПО ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = ГрафикиРаботыПоВидамВремениНочные.ГрафикРаботы И ГрафикиРаботыПоВидамВремениЧасы.Дата = ГрафикиРаботыПоВидамВремениНочные.Дата И (ГрафикиРаботыПоВидамВремениНочные.ВидУчетаВремени = &Ночные)
	                       |
	                       |ГДЕ
	                       |	ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = &ГрафикРаботы И
	                       |	ГрафикиРаботыПоВидамВремениЧасы.Дата >= &ДатаНачалаИнтервалаКалендаря И
	                       |	ГрафикиРаботыПоВидамВремениЧасы.Дата <= &ДатаОкончанияИнтервалаКалендаря И
	                       |	ГрафикиРаботыПоВидамВремениЧасы.ВидУчетаВремени = &ПоЧасам";
	
	РезультатЗапроса  = ЗапросПоСменам.Выполнить();
	ВременныйНаборЗаписей = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ПоместитьТаблицуВТаблицуДляЗаписи(ВременныйНаборЗаписей, ТаблицаДляЗаписи, ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря);
	
КонецПроцедуры

// заполняет календарь за определенный временной интервал
Процедура ЗаполнитьКалендарьЗаИнтервал(ДатаИнтервала) Экспорт
	
	ДатаНачалаИнтервала    	= НачалоГода(ДатаИнтервала);
	ДатаОкончанияИнтервала  = КонецГода(ДатаИнтервала)+1;
	ОбработатьНаборЗаписейКалендаряДляАвтоматическогоЗаполнения(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	индМес  = 0;
	ДатаМесяца = ДобавитьМесяц(ДатаНачалаИнтервала, индМес);
	Пока ДатаМесяца <= ДатаОкончанияИнтервала Цикл
		Если СписокИнтерваловРедактирования.НайтиПоЗначению(ДатаМесяца) = Неопределено тогда
			СписокИнтерваловРедактирования.Добавить(ДатаМесяца);
		КонецЕсли;
		ДатаМесяца = ДобавитьМесяц(ДатаНачалаИнтервала, индМес);
		индМес  = индМес + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьПравильностьЗаполненияПериодовДляПятиШестидневки() Экспорт
	
	СуммаВремени = 0; ЧасовВДне = 0;
	Для каждого ПериодДня из ПериодыСмены Цикл
		СуммаВремени = СуммаВремени + Час(ПериодДня.ВремяОкончания)*3600 + Минута(ПериодДня.ВремяОкончания)*60 + Секунда(ПериодДня.ВремяОкончания) - (Час(ПериодДня.ВремяНачала)*3600 + Минута(ПериодДня.ВремяНачала)*60 + Секунда(ПериодДня.ВремяНачала));
	КонецЦикла;
	
	Если ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка тогда
		ЧасовВДне = ДлительностьРабочейНедели / 5;
	ИначеЕсли ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка тогда
		ЧасовВДне = ДлительностьРабочейНедели / 6;
	ИначеЕсли ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный тогда
		Возврат Истина;
	КонецЕсли;
	
	РасхождениеВоВремени = ЧасовВДне * 3600 - СуммаВремени;
	
	Возврат РасхождениеВоВремени < 60 и РасхождениеВоВремени > - 60 // допускаем погрешность в минуту

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ОбменДанными.Загрузка И НЕ ПроверитьПравильностьЗаполненияПериодовДляПятиШестидневки() тогда
		Сообщить("Количество часов за неделю не совпадает с расчетным!");
	КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка Тогда
	
		// Получим таблицу сведений о производственном календаре за нужные месяцы
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивМесяцев", СписокИнтерваловРедактирования.ВыгрузитьЗначения());
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		               |	РегламентированныйПроизводственныйКалендарь.Пятидневка,
		               |	РегламентированныйПроизводственныйКалендарь.Шестидневка,
		               |	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
		               |	РегламентированныйПроизводственныйКалендарь.ВидДня
		               |ИЗ
		               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		               |
		               |ГДЕ
		               |	(НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) В (&МассивМесяцев))";
		РезультатЗапроса = Запрос.Выполнить();
		ПроизводственныйКалендарь = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		Для каждого ДатаИзСписка из СписокИнтерваловРедактирования Цикл
			ДатаНачалаИнтервалаИзСписка  = НачалоМесяца(ДатаИзСписка.Значение);
			ДатаОкончанияИнтервалаИзСписка = КонецМесяца(ДатаИзСписка.Значение);
			
			индДата   = '00000000';
			ДнейВИнтервале = Окр((ДатаОкончанияИнтервалаИзСписка - ДатаНачалаИнтервалаИзСписка) / мДлинаСуток);
			
			НаборЗаписейЗаДеньПоВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение       = Ссылка;
			НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
			НаборЗаписейЗаДеньПоВремени.Отбор.Дата.ВидСравнения           = ВидСравнения.Равно;
			НаборЗаписейЗаДеньПоВремени.Отбор.Дата.Использование          = Истина;
			СтруктураПоиска   = Новый Структура("Дата");
			
			Для инд = 0 по ДнейВИнтервале - 1 Цикл
				ИтогоЧасовВсего    = 0;
				ИтогоЧасовВечерних = 0;
				ИтогоЧасовНочных   = 0;
				
				индДата = ДатаНачалаИнтервалаИзСписка + инд * мДлинаСуток;
				НаборЗаписейЗаДеньПоВремени.Отбор.Дата.Значение = индДата;
				
				СтруктураПоиска.Дата = индДата;
				НайденныеСтроки      = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоиска);
				// выбрали строки по дате, теперь будем их записывать
				Для каждого СтрокаТаблицаДляЗаписи   из НайденныеСтроки   Цикл
					
					КоличествоЧасовВсего     = СтрокаТаблицаДляЗаписи.Часы;
					КоличествоЧасовВечерних  = СтрокаТаблицаДляЗаписи.ВечерниеЧасы;
					КоличествоЧасовНочных    = СтрокаТаблицаДляЗаписи.НочныеЧасы;
					
					ИтогоЧасовВсего     = ИтогоЧасовВсего    + КоличествоЧасовВсего;
					ИтогоЧасовВечерних  = ИтогоЧасовВечерних + КоличествоЧасовВечерних;
					ИтогоЧасовНочных    = ИтогоЧасовНочных   + КоличествоЧасовНочных;
					
				КонецЦикла;
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = Ссылка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.ВидыУчетаВремени.ПоДням;
				ЗаписьПоВУВ.ОсновноеЗначение  = ?(ИтогоЧасовВсего > 0, 1, 0);
				ЗаписьПоВУВ.ДополнительноеЗначение = ИтогоЧасовВсего;
				ЗаписьПоВУВ.Дата     = индДата;
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы           = Ссылка;
				ЗаписьПоВУВ.ВидУчетаВремени        = Перечисления.ВидыУчетаВремени.ПоЧасам;
				ЗаписьПоВУВ.ОсновноеЗначение       = ИтогоЧасовВсего;
				ЗаписьПоВУВ.ДополнительноеЗначение = ?(ИтогоЧасовВсего > 0, 1, 0);
				ЗаписьПоВУВ.Дата     = индДата;
				ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
				ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = Ссылка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
				ЗаписьПоВУВ.ОсновноеЗначение  = ИтогоЧасовВечерних;
				ЗаписьПоВУВ.Дата     = индДата;
				// ПроизводственныйКалендарьПятидневка 
				// ПроизводственныйКалендарьШестиДневка
				// ПроизводственныйКалендарьКалендарныеДни
				// ДополнительноеЗначение
				// не записываются для ПоЧасам
				
				ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
				ЗаписьПоВУВ.ГрафикРаботы      = Ссылка;
				ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
				ЗаписьПоВУВ.ОсновноеЗначение  = ИтогоЧасовНочных;
				ЗаписьПоВУВ.Дата     = индДата;
				// ПроизводственныйКалендарьПятидневка 
				// ПроизводственныйКалендарьШестиДневка
				// ПроизводственныйКалендарьКалендарныеДни
				// ДополнительноеЗначение
				// не записываются для ПоЧасам
				
				НаборЗаписейЗаДеньПоВремени.Записать(Истина);
				НаборЗаписейЗаДеньПоВремени.Очистить();
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаДляЗаписи.Очистить();
		СписокИнтерваловРедактирования.Очистить();
	
	КонецЕсли; 
	
КонецПроцедуры

мДлинаСуток = 86400; // в секундах
ТаблицаДляЗаписи    = Новый ТаблицаЗначений; 
ТаблицаДляЗаписи.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
ТаблицаДляЗаписи.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
ТаблицаДляЗаписи.Колонки.Добавить("ВечерниеЧасы", Новый ОписаниеТипов("Число"));
ТаблицаДляЗаписи.Колонки.Добавить("НочныеЧасы",  Новый ОписаниеТипов("Число"));
МаксДатаОкончанияИнтервала = '00000000';
МинДатаНачалаИнтервала  = '22000101';
СписокИнтерваловРедактирования = Новый СписокЗначений();
