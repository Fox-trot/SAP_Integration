
Функция ZFI_011_RFC_OZBEKISTAN_RTRN(ТЧ=Неопределено, DOCNO="") Экспорт
	Ответ	= "";
	Если ТЧ = Неопределено Тогда
		ТЧ = ZFI_011_S_DATA;
	КонецЕсли;
	ТЧ.Сортировать("DOCNO,POSTITEMFORLEDGER");
	
	ИмяWSСсылки	= "ZFI_011_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_TT_1C_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_S_1C_LOG");
	WSЗапись	= WSПрокси.ФабрикаXDTO.Создать(WSТип);

	Ответ		= "";
	Загружено	= Новый Массив;
	Если ПустаяСтрока(DOCNO) Тогда
		Для Каждого ТекСтрока Из ТЧ Цикл
			Если Загружено.Найти(ТекСтрока.DOCNO) = Неопределено Тогда
				Попытка
					Если ?(ЭтоТест, ЗначениеЗаполнено(УслугиСтороннихОрганизацийНайти(ТекСтрока)), УслугиСтороннихОрганизацийПроведен(ТекСтрока)) Тогда
						ZFI_011_RFC_OZBEKISTAN_RTRN_Заполнить(WSПараметр, WSЗапись, ТекСтрока);
					КонецЕсли;
					Загружено.Добавить(ТекСтрока.DOCNO);
					Если ЭтоТест Тогда
						Прервать;
					КонецЕсли;
				Исключение
					Ответ	= ОписаниеОшибки();
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСтроки = ТЧ.НайтиСтроки(Новый Структура("DOCNO", DOCNO));
		Для Каждого ТекСтрока Из мСтроки Цикл
			Если ЗначениеЗаполнено(УслугиСтороннихОрганизацийНайти(ТекСтрока)) Тогда
				ZFI_011_RFC_OZBEKISTAN_RTRN_Заполнить(WSПараметр, WSЗапись, ТекСтрока);
				Загружено.Добавить(ТекСтрока.DOCNO);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Загружено.Количество() > 0 И ПустаяСтрока(Ответ) Тогда
		Объект	= WSПрокси.ZFI_011_RFC_OZBEKISTAN_RTRN(WSПараметр);
		Ответ	= ZFI_011_S_MESSAGES(Объект);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Процедура ZFI_011_RFC_OZBEKISTAN_RTRN_Заполнить(WSПараметр, WSЗапись, ТекСтрока)
	ЗаполнитьЗначенияСвойств(WSЗапись, ТекСтрока,, "POSTDATE");
	WSЗапись.POSTDATE	= ДатаКакСтрока(ТекСтрока.POSTDATE);
	WSПараметр.item.Добавить(WSЗапись);
КонецПроцедуры

Функция ДатаКакСтрока(Дата)
	Возврат Формат(Дата, "ДФ=yyyy-dd-MM");
КонецФункции

Функция ZFI_011_S_MESSAGES(Объект)
	Ответы	= Новый Массив;
	Попытка
		Если НЕ ПустаяСтрока(Объект.MSGTY) Тогда
			Ответы.Добавить(Объект.MSGTY);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV1) Тогда
			Ответы.Добавить(Объект.MSGV1);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV2) Тогда
			Ответы.Добавить(Объект.MSGV2);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV3) Тогда
			Ответы.Добавить(Объект.MSGV3);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат ?(Ответы.Количество() = 0, "", СтрСоединить(Ответы, ";"));
КонецФункции

Процедура ZFI_011_RFC_OZBEKISTAN(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZFI_011_S_DATA;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZFI_011_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZFI_011_RFC_OZBEKISTAN();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			Если СтрокаКакДата(ТекСтрока.DOCDATE) >= Дата(2021, 12, 01) Тогда
				НовСтрока = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
				НовСтрока.POSTDATE	= СтрокаКакДата(ТекСтрока.POSTDATE);
				НовСтрока.DOCDATE	= СтрокаКакДата(ТекСтрока.DOCDATE);
			КонецЕсли;
		КонецЦикла;
		ТЧ.Сортировать("DOCDATE,DOCNO,POSTITEMFORLEDGER");
		
		Ответ	= ZFI_011_S_MESSAGES(Объект.RETURN);
		Если НЕ ПустаяСтрока(Ответ) Тогда
			Сообщить(Ответ);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СтрокаКакДата(Знач Слово)
	Ответ		= Дата(1,1,1);
	Попытка
		Ответ		= Дата(СтрЗаменить(Слово, "-", ""));
	Исключение КонецПопытки;
	//Если Год(Ответ) < 2 Тогда
	//	Разделитель	= "-";
	//	Слова 		= СтрРазделить(Слово, Разделитель, Ложь);
	//	Если Слова.Количество() > 2 Тогда
	//		Попытка
	//			Ответ	= Дата(Слова.Получить(0), Слова.Получить(1), Слова.Получить(2));
	//		Исключение КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция WSПроксиПолучить(WSСервис=Неопределено, ИндексТочкиПодключения=0) Экспорт
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Точка		= WSСервис.ТочкиПодключения.Получить(ИндексТочкиПодключения);
	//Если ЗащищенноеСоединение Тогда
	//	WSПрокси	= WSСсылки.ZFI_011_FG_1C.СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL, Точка.Местоположение);
	//Иначе
		WSПрокси	= WSСсылки[ИмяWSСсылки].СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут,, Точка.Местоположение);
	//КонецЕсли;
	НастройкиПолучить(WSПрокси);
	Возврат WSПрокси;
КонецФункции

Функция WSСервисПолучить(ИндексСервиса=0) Экспорт
	WSОпределение	= WSОпределениеПолучить();
	WSСервис		= WSОпределение.Сервисы.Получить(ИндексСервиса);
	Возврат WSСервис;
КонецФункции

Функция WSОпределениеПолучить() Экспорт
	Возврат WSСсылки[ИмяWSСсылки].ПолучитьWSОпределения();
КонецФункции

Функция НастройкиПолучить(Объект=Неопределено)
	//Пользователь	= "d_retmind";
	Пользователь	= "isretmind";
	Пароль			= "Sap1234!";
	Если Объект <> Неопределено Тогда
		Объект.Пользователь	= Пользователь;
		Объект.Пароль		= Пароль;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция URIПространстваИменПолучить(WSСервис=Неопределено)
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Возврат WSСервис.URIПространстваИмен;
КонецФункции

Функция Запросить(Адрес) Экспорт
	Ответ	= "";
	Сервер		= СерверПолучить(Адрес);
	Если НЕ ПустаяСтрока(Сервер) И НастройкиПолучить() Тогда
		HTTPСоединение = HTTPСоединениеПолучить(Сервер);
		HTTPЗапрос	= Новый HTTPЗапрос(Адрес, ЗаголовкиПолучить());
		HTTPОтвет	= HTTPСоединение.Получить(HTTPЗапрос);			// 		GET
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
			//ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(
		//ИначеЕсли HTTPОтвет.КодСостояния >= 400 Тогда
		//	HTTPОтвет	= HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);			// 		POST
		//	Если HTTPОтвет.КодСостояния = 200 Тогда
		//		Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
		//	Иначе
		//		Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		//	КонецЕсли;
				
		Иначе
			Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		КонецЕсли;
	КонецЕсли;
	Возврат ?(Ответ=Неопределено, "", Ответ);
КонецФункции

Функция WSОпределенияПолучить(УРЛ)
	Попытка
		Если ЗащищенноеСоединение Тогда
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут);
		КонецЕсли;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат WSОпределения;
КонецФункции

Функция HTTPСоединениеПолучить(Сервер, Порт=8000)
	Если ЗащищенноеСоединение Тогда
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут);
	КонецЕсли;
	Возврат HTTPСоединение;
КонецФункции

Функция ЗаголовкиПолучить()
	Ответ	= Новый Соответствие;
	Ответ.Вставить("Accept-Encoding",	"gzip,deflate");
	Ответ.Вставить("Accept",			"*/*");
	Ответ.Вставить("Connection",		"keep-alive");
	Ответ.Вставить("content-type",		"application/json");
	//Ответ.Вставить("content-type",	"text/html");
	//Ответ.Вставить("charset",		"utf-8");
	//Ответ.Вставить("sap-server",	"true");
	Ответ.Вставить("sap-client",	"200");
	Возврат Ответ;
КонецФункции

Процедура ZSD_010_RFC_OZB_IADE_TES(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZSD_010_S_DATA;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZSD_010_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_IADE_TES();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			Если ПостАпокалипсис(ТекСтрока.CRDATE) Тогда
				НовСтрока = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
				НовСтрока.CRDATE	= СтрокаКакДата(ТекСтрока.CRDATE);
				НовСтрока.GMDATE	= СтрокаКакДата(ТекСтрока.GMDATE);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция ПостАпокалипсис(Слово)
	Возврат (СтрокаКакДата(Слово) >= Дата(2021, 12, 1));
КонецФункции

Процедура ZSD_010_RFC_OZB_FAT_IA_DEKONT(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZSD_011_S_DATA;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZSD_011_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_FAT_IA_DEKONT();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			Если ПостАпокалипсис(ТекСтрока.BILLDATE) Тогда
				НовСтрока = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
				НовСтрока.BILLDATE			= СтрокаКакДата(ТекСтрока.BILLDATE);
				НовСтрока.IADE_REF_TARIH	= СтрокаКакДата(ТекСтрока.IADE_REF_TARIH);
				НовСтрока.SOZLESME_TARIH	= СтрокаКакДата(ТекСтрока.SOZLESME_TARIH);
			КонецЕсли;
		КонецЦикла;
		ТЧ.Сортировать("BILLDOC,ITEMNO");
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_FATURA_LISTESI(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ENTEGRASYON_LIST;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	//WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR"));
	//WSПараметр.SIGN		= "1";
	//WSПараметр.OPTION	= "22";
	//WSПараметр.LOW		= "1000000000";
	//WSПараметр.HIGH		= "2000000000";
	//WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR_T"));
	//WSПараметр1.item.Добавить(WSПараметр);
	//MRMRBBW_RANGE_BELNR
	//WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "TRGR_POSTING_DATE"));
	//WSПараметр3	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	WSПараметр3	= "UZ10";
	//WSПараметр4	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	WSПараметр4	= 2021;
	Попытка
		//Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LISTESI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		//Для Каждого ТекСтрока Из Объект.item Цикл
		//	НовСтрока = ТЧ.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		//КонецЦикла;
		Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LISTESI(,, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			Если ПостАпокалипсис(ТекСтрока.KAYIT_TARIH) Тогда
				НовСтрока = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
				НовСтрока.KAYIT_TARIH	= СтрокаКакДата(ТекСтрока.KAYIT_TARIH);
				НовСтрока.SKT			= СтрокаКакДата(ТекСтрока.SKT);
				НовСтрока.CEVIRI_TARIHI	= СтрокаКакДата(ТекСтрока.CEVIRI_TARIHI);
				//НовСтрока.MASRAF_TIPI_TX= ТекСтрока.MASRAF_TIPI_TX;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_MAL_HAREKETI(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ILAC_ALIM;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "BKK_R_BUDAT");
	WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "CFB_T_MBLNR_RANGE"));
	WSПараметр3	= 2021;	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	WSПараметр4	= "";	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	Попытка
		Объект	= WSПрокси.ZMM_000_FM_1C_MAL_HAREKETI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
		//ZFI_011_S_MESSAGES(Объект);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СерверПолучить(Знач Адрес)
	Ответ	= "";
	Если НРег(Лев(Адрес, 7)) = "http://" Тогда
		Адрес	= Сред(Адрес, 8);
	КонецЕсли;
	Для Итератор = 1 По СтрДлина(Адрес) Цикл
		Если Сред(Адрес, Итератор, 1) = "/"  Тогда
			Прервать;
		Иначе
			Ответ	= Ответ + Сред(Адрес, Итератор, 1);
		КонецЕсли;
	КонецЦикла;
	Если Найти(Ответ, ".") = 0 Тогда
		Ответ	= СерверДефолт();
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СерверДефолт()
	ИмяСервера	= "AFERPAEQA1.asfarma.local";
	Возврат ИмяСервера;
КонецФункции

Функция Настроить(Объект) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Или НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Настройки.Пользователь КАК Ответственный
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК Настройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Настройки.Значение = Организации.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Настройки.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Наименование = &Наименование
		|	И Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ГоловнаяОрганизация.ПометкаУдаления ЕСТЬ NULL");
		Запрос.УстановитьПараметр("Наименование",	"Администратор");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка);
		КонецЕсли;
		Объект.НацВалюта	= НацВалюта();
		Объект.ИмяСервера	= СерверДефолт();
	КонецЕсли;
	Возврат ЗначениеЗаполнено(Объект.Организация);
КонецФункции

Процедура ПоступленияНоменклатурыСоздать(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ENTEGRASYON_LIST;
	КонецЕсли;
	ТЧ.Сортировать("MUHASEBE_BELGE_NO,MUHASEBE_BELGE_KALEM");
	
	Настроить(ЭтотОбъект);
	мДоки	= Новый Массив;
	Для Каждого ТекСтрока Из ТЧ Цикл
		Если мДоки.Найти(ТекСтрока.MUHASEBE_BELGE_NO) = Неопределено Тогда
			//Если ДокументПоступленияПроведен(ТекСтрока) Тогда
				//Документ = ДокументНайти(ТекСтрока);
				//Если НЕ Документ.Проведен Тогда
				//	Строки = ТЧ.НайтиСтроки(Новый Структура("MUHASEBE_BELGE_NO", ТекСтрока.MUHASEBE_BELGE_NO));
				//	ПоступлениеНоменклатурыСоздать(ТекСтрока, Строки, Документ);
				//КонецЕсли;
			//Иначе
				Строки = ТЧ.НайтиСтроки(Новый Структура("MUHASEBE_BELGE_NO", ТекСтрока.MUHASEBE_BELGE_NO));
				//Если ЭтоНацВалюта(ТекСтрока.PARA_BIRIMI) Тогда
				//	ПоступлениеНоменклатурыСоздать(ТекСтрока, Строки);
				////Иначе
					ПоступлениеНоменклатурыВалютныйСоздать(ТекСтрока, Строки);
				//КонецЕсли;
				//
				//Прервать;
			//КонецЕсли;
			
			мДоки.Добавить(ТекСтрока.MUHASEBE_BELGE_NO);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭтоНацВалюта(Код)
	Возврат (СтрСравнить(Код, "UZS") = 0);
КонецФункции

Процедура ПоступлениеНоменклатурыВалютныйСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Ссылка		= ПоступлениеНоменклатурыПродажВалютныйСпискамиНайти(Шапка);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Док = Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда Док.УстановитьПометкуУдаления(Ложь); КонецЕсли;
		Док.Номенклатура.Очистить();
		Док.Списки.Очистить();
		Док.РасходыВключаемыеВСтоимость.Очистить();
		Док.Прочее.Очистить();
		Док.ПрямыеЗатраты.Очистить();
	Иначе
		Док = Документы.ПоступлениеНоменклатурыПродажВалютныйСписками.СоздатьДокумент();
		Док.Дата			= Шапка.KAYIT_TARIH;
		Док.Номер			= Шапка.MUHASEBE_BELGE_NO;
		Док.Организация		= Организация;
		Док.ОтражатьПоБУ	= Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Валюта) Тогда
		Док.Валюта			= ВалютаПолучить(Шапка.PARA_BIRIMI);
		Док.Курс			= Шапка.CEVIRI_KURU;	//	КурсПолучить(Док.Валюта, Док.Дата);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Склад) Тогда
		Док.Склад			= СкладПолучить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Поставщик) Тогда
		Док.Поставщик		= КонтрагентНайти(Шапка.SATICI, Шапка.SATICI_TX);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Поставщик) Тогда
		Ошибки.Добавить(СтрШаблон("Не найден Поставщик %2 по коду %1", Шапка.SATICI, Шапка.SATICI_TX));
		ДокументЗаполнить(Док);		// 4testonly
	ИначеЕсли НЕ ЗначениеЗаполнено(Док.ДоговорПоставщика) Тогда
		Док.ДоговорПоставщика				= ДоговорПоставщикаПолучить(Док.Поставщик);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.ДоговорПоставщика) Тогда
		Ошибки.Добавить("Не найден договор поставщика");
	КонецЕсли;
	Док.СчетУчетаРасчетовСКонтрагентом	= СчетУчетаРасчетовСКонтрагентом(НЕ ЭтоНацВалюта(Шапка.PARA_BIRIMI));
	Док.ПриходныйДокумент				= Шапка.TESLIMAT;
	//Док.ПриходныйДокументДата
	//Док.ЗаписыватьЦеныВСправочник			= Истина;
	Док.НомерГТД		= Шапка.FATURA_NO;
	//Док.ДатаГТД			=
	//Док.НДСТаможенный	=
	//Док.СчетУчетаРасчетовСТаможней			=
	//Док.СубконтоТаможня1=
	//Док.СубконтоТаможня2=
	//Док.СубконтоТаможня3=
	//Док.ЗачестьАванс	= Истина;
	//Док.ТипРаспределения= Истина;
	
	СчетУчетаБУ			= СчетУчетаНайти();
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Ошибки.Добавить("Не заполнен Счет учета БУ");
	КонецЕсли;
	
	Док.СуммаПоДокументу= 0;
	Для Каждого Деталь Из Детали Цикл
		Если Деталь.MASRAF_TIPI = 0 Тогда
			ТекСтрока = Док.Номенклатура.Добавить();
			//ТекСтрока.Номенклатура	= НоменклатураПродажПодобрать(Деталь.MALZEME, Деталь.PARTI, ?(ЭтоНацВалюта(Шапка.PARA_BIRIMI), Док.Поставщик.Наименование, "Импортные поставки " + Шапка.TESLIMAT), Деталь.SKT);
			ТекСтрока.Номенклатура	= НоменклатураПродажПодобрать(Деталь.MALZEME, Деталь.PARTI, "Импортные поставки " + Шапка.TESLIMAT, Деталь.SKT);
			//Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			//	Возврат;
			//КонецЕсли;
			//Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				ТекСтрока.НоменклатурныйНомер	= Деталь.MALZEME;
			//Иначе
			//	Ошибки.Добавить(СтрШаблон("Строка %1. Не найдена Номенклатура по коду %2", ТекСтрока.НомерСтроки, Деталь.MALZEME));
			//КонецЕсли;
			ТекСтрока.СчетУчетаБУ	= СчетУчетаБУ;
			ТекСтрока.Количество	= Деталь.MIKTAR;
			ТекСтрока.ЦенаВВалюте	= Деталь.BIRIM_FIYAT;
			ТекСтрока.Цена			= Деталь.BIRIM_FIYAT * Док.Курс;
			//ТекСтрока.БазоваяЦена	= Деталь.;
			ТекСтрока.СуммаВВалюте	= Деталь.MIKTAR * Деталь.BIRIM_FIYAT;
			ТекСтрока.Сумма			= Деталь.MIKTAR * ТекСтрока.Цена;			//	Деталь.TUTAR
			ТекСтрока.Список		= СпискиПоступленияНоменклатурыВВалютеПодобрать(ТекСтрока, Деталь);
			ТекСтрока.СрокГодности	= Деталь.SKT;

			Док.СуммаПоДокументу	= Док.СуммаПоДокументу + ТекСтрока.Сумма;
			
			Если Док.Списки.Количество() = 0 Тогда
				ТекСписки	= Док.Списки.Добавить();
				ТекСписки.Список		= ТекСтрока.Список;
			КонецЕсли;
				
		ИначеЕсли Деталь.MASRAF_TIPI = 8 Или Деталь.MASRAF_TIPI = 24
		Или Деталь.MASRAF_TIPI = 7
		Тогда
			СписокПоступления		= ?(Док.Номенклатура.Количество() = 0, СпискиПоступленияНоменклатурыВВалютеПодобрать(ТекСтрока, Деталь), Док.Номенклатура.Получить(0).Список);
			мСписок	= Док.Списки.НайтиСтроки(Новый Структура("Список", СписокПоступления));
			Если мСписок.Количество() = 0 Тогда
				ТекСписки	= Док.Списки.Добавить();
				ТекСписки.Список		= СписокПоступления;
			Иначе
				ТекСписки	= мСписок.Получить(0);
			КонецЕсли;
			Если Деталь.MASRAF_TIPI = 8 Тогда
				ТекСписки.ТП			= ТекСписки.ТП + Деталь.TUTAR;
				Если НЕ ЗначениеЗаполнено(ТекСписки.ТПСчет) Тогда
					ТекСписки.ТПСчет	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("4890");
					ТекСписки.ТПС1		= Таможня();
					ТекСписки.ТПС2		= ТаможняДоговор();
				КонецЕсли;
			ИначеЕсли Деталь.MASRAF_TIPI = 24 Тогда
				ТекСписки.НДС			= ТекСписки.НДС + Деталь.TUTAR;
				Если НЕ ЗначениеЗаполнено(ТекСписки.НДССчет) Тогда
					ТекСписки.НДССчет	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("4890");
					ТекСписки.НДСС1		= Таможня();
					ТекСписки.НДСС2		= ТаможняДоговор();
				КонецЕсли;
			Иначе	//Если Деталь.MASRAF_TIPI = 7 Тогда
				ТекСписки.Акциз			= ТекСписки.Акциз + Деталь.TUTAR;
				Если НЕ ЗначениеЗаполнено(ТекСписки.АкцизСчет) Тогда
					ТекСписки.АкцизСчет	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("4890");
					ТекСписки.АкцизС1	= Таможня();
					ТекСписки.АкцизС2	= ТаможняДоговор();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Описание= Перевод(Деталь.MASRAF_TIPI_TX);
			мСтроки	= Док.РасходыВключаемыеВСтоимость.НайтиСтроки(Новый Структура("Описание,Валюта",  Описание, ВалютаПолучить(Деталь.PARA_BIRIMI)));
			Если мСтроки.Количество() = 0 Тогда
				ТекСтрока	= Док.РасходыВключаемыеВСтоимость.Добавить();
				ТекСтрока.ПриходныйДокумент	= Шапка.FATURA_BELGE_NO + "/" + Шапка.FATURA_NO;
				ТекСтрока.Описание		= Описание;
				ТекСтрока.Валюта		= ВалютаПолучить(Деталь.PARA_BIRIMI);
				ТекСтрока.СчетКредит	= ПланыСчетов.Хозрасчетный.НайтиПоКоду("4890");
				ТекСтрока.Субконто1		= КонтрагентНайти(Деталь.SATICI, Деталь.SATICI_TX);
				ТекСтрока.Субконто2		= ДоговорПоставщикаПолучить(ТекСтрока.Субконто1);
				//ТекСтрока.Субконто3		=
			Иначе
				ТекСтрока	= мСтроки.Получить(0);
			КонецЕсли;
			ТекСтрока.ВалютнаяСумма	= ТекСтрока.ВалютнаяСумма + Деталь.TUTAR;
			ТекСтрока.Сумма			= ТекСтрока.Сумма + Деталь.TUTAR;							//Деталь.MIKTAR * Деталь.BIRIM_FIYAT * Док.Курс;
			Если Деталь.VERGI_TUTAR <> 0 Тогда
				ТекСтрока.СтавкаНДС		= СтавкаНДС(Деталь.VERGI_GOSTERGE);				//Перечисления.СтавкиНДС.БезНДС;
				ТекСтрока.СуммаНДС		= ТекСтрока.СуммаНДС + Деталь.VERGI_TUTAR;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокЗаписать(Док, Ошибки);
КонецПроцедуры

Функция Таможня()
	Если НЕ ЗначениеЗаполнено(Таможня) Тогда
		Таможня	= КонтрагентНайти("200637640");
	КонецЕсли;
	Возврат Таможня;
КонецФункции

Функция ТаможняДоговор()
	Если НЕ ЗначениеЗаполнено(ТаможняДоговор) Тогда
		ТаможняДоговор	= ДоговорКонтрагентаПолучить(Таможня());
	КонецЕсли;
	Возврат ТаможняДоговор;
КонецФункции

Процедура ДокументЗаполнить(Документ, Валюта=Неопределено)
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	УчетЗачетаНДС.Поставщик КАК Поставщик,
	//|	УчетЗачетаНДС.Договор КАК ДоговорПоставщика
	//|ИЗ
	//|	РегистрНакопления.УчетЗачетаНДС КАК УчетЗачетаНДС
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//|		ПО УчетЗачетаНДС.Поставщик = Контрагенты.Ссылка
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|		ПО УчетЗачетаНДС.Договор = ДоговорыКонтрагентов.Ссылка
	//|ГДЕ
	//|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
	////|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	//|	И ДоговорыКонтрагентов.Владелец = УчетЗачетаНДС.Поставщик
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Контрагенты.ПометкаУдаления,
	//|	ДоговорыКонтрагентов.ПометкаУдаления,
	//|	УчетЗачетаНДС.Период УБЫВ");
	//Запрос.УстановитьПараметр("Валюта",			?(Валюта=Неопределено, ВалютаПолучить(), Валюта));
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ЗаполнитьЗначенияСвойств(Документ, Выборка);
	//КонецЕсли;
КонецПроцедуры

Функция ДокументПоступленияПроведен(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНоменклатурыПродажВалютныйСписками КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен = ИСТИНА");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.KAYIT_TARIH));
	Запрос.УстановитьПараметр("Номер",			Параметры.MUHASEBE_BELGE_NO);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Возврат (НЕ Запрос.Выполнить().Пустой());
КонецФункции

Функция ПоступлениеНоменклатурыПродажВалютныйСпискамиНайти(Параметры) Экспорт
	Ответ	= Документы.ПоступлениеНоменклатурыПродажВалютныйСписками.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНоменклатурыПродажВалютныйСписками КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.KAYIT_TARIH));
	Запрос.УстановитьПараметр("Номер",			Параметры.MUHASEBE_BELGE_NO);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПоступлениеНоменклатурыПродажНайти(Параметры)
	Ответ	= Документы.ПоступлениеНоменклатурыВалютныйСписками.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеНоменклатуры.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНоменклатурыПродаж КАК ПоступлениеНоменклатуры
	|ГДЕ
	|	ГОД(ПоступлениеНоменклатуры.Дата) = &Дата
	|	И ПоступлениеНоменклатуры.Номер = &Номер
	|	И ПоступлениеНоменклатуры.Организация = &Организация");
	Запрос.УстановитьПараметр("Номер",			Параметры.MUHASEBE_BELGE_NO);
	Запрос.УстановитьПараметр("Дата",			Год(Параметры.KAYIT_TARIH));
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ	= Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция Asfarma()
	Если НЕ ЗначениеЗаполнено(Asfarma) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Контрагенты.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |ГДЕ
		                      |	Контрагенты.Код = ""РУ0001507""");	//	Attenzione!!!	Hardcode!!!
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Asfarma	= Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Asfarma;
КонецФункции

Функция КонтрагентНайти(ИНН, Наименование="")
	Если СтрСравнить(ИНН, "TR11") = 0 Тогда Возврат Asfarma(); КонецЕсли;
	Ответ	= Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Соответствия.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Соответствия КАК Соответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Справочник
	|		ПО Соответствия.Ссылка = Справочник.Ссылка
	|ГДЕ
	|	Соответствия.Код = &Код");
	Запрос.УстановитьПараметр("Код",			ИНН);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	Иначе
		Если ПустаяСтрока(Наименование) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагенты.ПометкаУдаления,
			|	Контрагенты.Код = &Код УБЫВ";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(Контрагенты.ИНН = &Код
			|			ИЛИ Контрагенты.Наименование ПОДОБНО &Наименование
			|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Наименование)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагенты.ПометкаУдаления,
			|	Контрагенты.Код = &Код УБЫВ";
		Запрос.УстановитьПараметр("Наименование",	Наименование + "%");
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Ответ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СкладПолучить()
	Ответ	= Справочники.Склады.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаН, , , , &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ХозрасчетныйОбороты.Субконто1 = Склады.Ссылка
	|ГДЕ
	|	Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидСклада.Склад)
	|	И Склады.СчетУчетаПродукции.Код > "" ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склады.ПометкаУдаления,
	|	ХозрасчетныйОбороты.СуммаОборот УБЫВ");
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ДатаН",			ДобавитьМесяц(ТекущаяДата(), -3));
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконто",	ВидыСубконто);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ДоговорПоставщикаПолучить(Контрагент, Валюта=Неопределено)
	Ответ	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос	= Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Договоры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|			ТОГДА 1
		|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|			ТОГДА 2
		|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Договоры.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
		|			ТОГДА -10
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Договоры.Владелец = Контрагенты.Ссылка
		|ГДЕ
		|	Договоры.Владелец = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры.ПометкаУдаления,
		|	Порядок,
		|	Договоры.Наименование УБЫВ");
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		//Запрос.УстановитьПараметр("Валюта",			?(Валюта=Неопределено, ВалютаПолучить(), Валюта));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Ответ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ДоговорКонтрагентаПолучить(Контрагент, Валюта=Неопределено)
	Ответ	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос	= Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Договоры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|			ТОГДА 1
		//|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		//|			ТОГДА 2
		|		КОГДА Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Договоры.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
		|			ТОГДА -10
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Договоры.Владелец = Контрагенты.Ссылка
		|ГДЕ
		|	Договоры.Владелец = &Контрагент
		//|	И Договоры.ВалютаВзаиморасчетов = &Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры.ПометкаУдаления,
		|	Порядок,
		|	Договоры.Наименование УБЫВ");
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		//Запрос.УстановитьПараметр("Валюта",			?(Валюта=Неопределено, ВалютаПолучить(), Валюта));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Ответ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция БанковскийСчетНайти(Владелец, Валюта=Неопределено)
	Ответ	= Справочники.БанковскиеСчета.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Договоры.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Договоры.Ссылка = Договоры.Владелец.ОсновнойБанковскийСчет
	|			ТОГДА 0
	|		ИНАЧЕ 10
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.БанковскиеСчета КАК Договоры
	|ГДЕ
	|	Договоры.Владелец = &Владелец
	|	И Договоры.ВалютаДенежныхСредств = &Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договоры.ПометкаУдаления,
	|	Порядок");
	Запрос.УстановитьПараметр("Владелец",		Владелец);
	Запрос.УстановитьПараметр("Валюта",			?(Валюта=Неопределено, ВалютаПолучить(), Валюта));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция СчетУчетаНайти(Код="2911")
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(Код);
КонецФункции

Функция НоменклатураПродажНайти(Код, Серия="") Экспорт
	Ответ = Справочники.НоменклатураПродаж.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Соответствия.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Соответствия КАК Соответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПродаж КАК НоменклатураПродаж
	|		ПО Соответствия.Ссылка = НоменклатураПродаж.Ссылка
	|ГДЕ
	|	Соответствия.Код = &Код");
	Запрос.УстановитьПараметр("Код",			Код + "/" + Серия);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	ИначеЕсли НЕ ПустаяСтрока(Серия) Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	НоменклатураПродаж.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.НоменклатураПродаж КАК НоменклатураПродаж
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AsfarmaID КАК Asfarma
		               |		ПО НоменклатураПродаж.AsfarmaID = Asfarma.Ссылка
		               |ГДЕ
		               |	Asfarma.Код = &Код
		               |	И НоменклатураПродаж.ПометкаУдаления = ЛОЖЬ
		               |	И НоменклатураПродаж.Серия ПОДОБНО &Серия
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НоменклатураПродаж.СрокГодности УБЫВ";
		Запрос.УстановитьПараметр("Код",	Код);
		Запрос.УстановитьПараметр("Серия",	Серия);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Ответ = Выборка.Ссылка;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			               |	НоменклатураПродаж.Ссылка КАК Ссылка,
			               |	НоменклатураПродаж.Серия КАК Серия
			               |ИЗ
			               |	Справочник.НоменклатураПродаж КАК НоменклатураПродаж
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AsfarmaID КАК Asfarma
			               |		ПО НоменклатураПродаж.AsfarmaID = Asfarma.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В ИЕРАРХИИ (&Счет), &Субконто, Организация = &Организация) КАК Остатки
			               |		ПО (Остатки.Субконто1 = НоменклатураПродаж.Ссылка)
			               |ГДЕ
			               |	Asfarma.Код В(&Коды)
			               |	И НоменклатураПродаж.ПометкаУдаления = ЛОЖЬ
			               |	И НоменклатураПродаж.Серия ПОДОБНО &Серия
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) <= 0,
			               |	НоменклатураПродаж.СрокГодности УБЫВ";
			Запрос.УстановитьПараметр("Коды",	Коды(Код));
			Запрос.УстановитьПараметр("Серия",	"%" + Серия + "%");
			Запрос.УстановитьПараметр("Счет",	ПланыСчетов.Хозрасчетный.НайтиПоКоду("2900"));
			Субконто	= Новый Массив;
			Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатураПродаж);
			Запрос.УстановитьПараметр("Субконто",		Субконто);
			Запрос.УстановитьПараметр("Организация",	Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока НЕ ЗначениеЗаполнено(Ответ) И Выборка.Следующий() Цикл
				мСерии = СтрРазделить(Выборка.Серия, ",");
				Если мСерии.Количество() = 0 Тогда
					мСерии = СтрРазделить(Выборка.Серия, " ");
				КонецЕсли;
				Для Каждого ТекЭлемент Из мСерии Цикл
					Если СтрСравнить(СокрЛП(ТекЭлемент), Серия) = 0 Тогда
						Ответ = Выборка.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция Коды(Знач Код)
	Коды	= Новый Массив;
	Коды.Добавить(Код);
	Пока СтрДлина(Код) > 5 Цикл
		Код	= Лев(Код, СтрДлина(Код) - 1);
		Коды.Добавить(Код);
	КонецЦикла;
	Возврат Коды;
КонецФункции

Функция НоменклатураПродажПодобрать(Знач Код, Знач Серия="", Знач РодительНаименование="", СрокГодности=Неопределено)
	Ответ = НоменклатураПродажНайти(Код, Серия);
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	Номенклатура.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.НоменклатураПродаж КАК Номенклатура
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AsfarmaID КАК AsfarmaIDs
	//|		ПО Номенклатура.AsfarmaID = AsfarmaIDs.Ссылка
	//|ГДЕ
	//|	Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатурыПродаж.Товар)
	//|	И Номенклатура.ПометкаУдаления = ИСТИНА
	//|	И AsfarmaIDs.Код В(&Коды)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	AsfarmaIDs.Код");
	//Коды	= Новый Массив;
	//Коды.Добавить(Параметры.MALZEME);
	//Коды.Добавить(Лев(Параметры.MALZEME, 5));
	//Запрос.УстановитьПараметр("Коды",			Коды);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Ответ = Выборка.Ссылка;
	//Иначе
	//	Справочник	= Справочники.НоменклатураПродаж.СоздатьЭлемент();
	//	Справочник.Код						= Параметры.MALZEME;
	//	Справочник.Наименование				= Параметры.MALZEME_TX;
	//	Справочник.НаименованиеПолное		= Параметры.MALZEME_TX;
	//	Справочник.БазоваяЕдиницаИзмерения	= БазоваяЕдиницаИзмеренияНайти(Параметры);
	//	Справочник.СтавкаНДС				= СтавкаНДС(Параметры.VERGI_GOSTERGE);
	//	Справочник.ВидНоменклатуры			= Перечисления.ВидыНоменклатурыПродаж.Товар;
	//	//Справочник.БазоваяЦена				= Параметры.BIRIM_FIYAT;
	//	//Справочник.Цена						= Параметры.BIRIM_FIYAT;
	//	//Справочник.Группа					= Параметры.;
	//	Справочник.Серия					= Параметры.PARTI;
	//	Справочник.СрокГодности				= Параметры.SKT;
	//	//Справочник.ДатаРегистрации			= Параметры.;
	//	//Справочник.НомерКонтракта			= Параметры.;
	//	//Справочник.СерияКонтракта			= Параметры.;
	//	Справочник.AsfarmaID				= AsfarmaIDСоздать(Параметры);
	//	Если Справочник.ПроверитьЗаполнение() Тогда
	//		Попытка
	//			Справочник.Записать();
	//			Ответ = Справочник.Ссылка;
	//			
	//			//Если ЗначениеЗаполнено(Справочник.БазоваяЕдиницаИзмерения) Тогда
	//			//КонецЕсли;
	//		Исключение КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Ответ)
	И НЕ ПустаяСтрока(РодительНаименование)
	Тогда
		Запрос	= Новый Запрос;
		Запрос.УстановитьПараметр("Коды",	Коды(Код));
		//Запрос.УстановитьПараметр("Серия",	Серия);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	НоменклатураПродаж.Код КАК Код,
		               |	НоменклатураПродаж.Наименование КАК Наименование,
		               |	НоменклатураПродаж.НаименованиеПолное КАК НаименованиеПолное,
		               |	НоменклатураПродаж.СтавкаНДС КАК СтавкаНДС,
		               |	НоменклатураПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
		               |	НоменклатураПродаж.Гост КАК Гост,
		               |	НоменклатураПродаж.ТипТовара КАК ТипТовара,
		               |	НоменклатураПродаж.СтранаПроисхождения КАК СтранаПроисхождения,
		               |	НоменклатураПродаж.Организация КАК Организация,
		               |	НоменклатураПродаж.Полуфабрикат КАК Полуфабрикат,
		               |	НоменклатураПродаж.Производитель КАК Производитель,
		               |	НоменклатураПродаж.КоличествоВУпаковке КАК КоличествоВУпаковке,
		               |	НоменклатураПродаж.ПроисхождениеТовара КАК ПроисхождениеТовара,
		               |	НоменклатураПродаж.AsfarmaID КАК AsfarmaID,
		               |	НоменклатураПродаж.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		               |	НоменклатураПродаж.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		               |	НоменклатураПродаж.Группа КАК Группа,
		               |	НоменклатураПродаж.БазоваяЦена КАК БазоваяЦена,
		               |	НоменклатураПродаж.Цена КАК Цена,
		               |	НоменклатураПродаж.Ссылка КАК Виктим,
		               |	НоменклатураПродаж.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетовНаименование,
		               |	НоменклатураПродаж.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатковНаименование
		               |ИЗ
		               |	Справочник.НоменклатураПродаж КАК НоменклатураПродаж
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.AsfarmaID КАК Asfarma
		               |		ПО НоменклатураПродаж.AsfarmaID = Asfarma.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		               |		ПО НоменклатураПродаж.БазоваяЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыНоменклатурыПродаж КАК ВидыНоменклатурыПродаж
		               |		ПО НоменклатураПродаж.ВидНоменклатуры = ВидыНоменклатурыПродаж.Ссылка
		               |ГДЕ
		               |	Asfarma.Код В(&Коды)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НоменклатураПродаж.ПометкаУдаления,
		               |	НоменклатураПродаж.Родитель.Наименование УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	НоменклатураПоставщиков.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			               |ГДЕ
			               |	НоменклатураПоставщиков.Наименование ПОДОБНО &Наименование
			               |	И НоменклатураПоставщиков.ЭтоГруппа = ИСТИНА
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	НоменклатураПоставщиков.Наименование";
			Запрос.УстановитьПараметр("Наименование",	СокрЛП(РодительНаименование) + "%");
			Родители = Запрос.Выполнить().Выбрать();
			Если Родители.Следующий() Тогда
				Родитель	= Родители.Ссылка;
			//Родитель = Справочники.НоменклатураПродаж.НайтиПоНаименованию(РодительНаименование);
			//Если ЗначениеЗаполнено(Родитель) И Родитель.ЭтоГруппа Тогда
				//
			Иначе
				РодительОбъект	= Справочники.НоменклатураПродаж.СоздатьГруппу();
				РодительОбъект.Наименование	= СокрЛП(РодительНаименование);
				РодительОбъект.Организация	= Организация;
				//РодительОбъект.TrId		= 0;
				//РодительОбъект.НомерКонтракта	= "";
				//РодительОбъект.СерияКонтракта	= "";
				//РодительОбъект.ДатаРегистрации	= Дата();
				РодительОбъект.УстановитьНовыйКод();
				Если РодительОбъект.ПроверитьЗаполнение() Тогда
					Попытка
						РодительОбъект.Записать();
						Родитель	= РодительОбъект.Ссылка;
					Исключение
						Возврат Ответ;
					КонецПопытки;
				Иначе
					Возврат Ответ;
				КонецЕсли;
			КонецЕсли;
			
			Справочник	= Справочники.НоменклатураПродаж.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Справочник,  Выборка);
			Справочник.Родитель		= Родитель;
			Справочник.Серия		= Серия;
			Справочник.СрокГодности	= Формат(СрокГодности, "ДЛФ=D");
			//Справочник.УстановитьНовыйКод();
			Если Справочник.ПроверитьЗаполнение() Тогда
				Попытка
					Справочник.Записать();
					Ответ	= Справочник.Ссылка;
				Исключение
				КонецПопытки;
				
				Если НЕ ПустаяСтрока(Выборка.ЕдиницаДляОтчетовНаименование) Или НЕ ПустаяСтрока(Выборка.ЕдиницаХраненияОстатковНаименование) Тогда
					Запрос.Текст = "ВЫБРАТЬ
					               |	&Владелец КАК Владелец,
					               |	ЕИ.Наименование КАК Наименование,
					               |	&Владелец КАК ЕдиницаПоКлассификатору,
					               |	ЕИ.Вес КАК Вес,
					               |	ЕИ.Объем КАК Объем,
					               |	ЕИ.Коэффициент КАК Коэффициент
					               |ИЗ
					               |	Справочник.ЕдиницыИзмерения КАК ЕИ
					               |ГДЕ
					               |	ЕИ.Владелец = &Владелец
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	ЕИ.ПометкаУдаления";
					Запрос.УстановитьПараметр("Владелец",	Выборка.Виктим);
					ЕИ = Запрос.Выполнить().Выбрать();
					Если ЕИ.Следующий() Тогда
						ЕдиницаДляОтчетов	= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(ЕдиницаДляОтчетов, ЕИ);
						ЕдиницаДляОтчетов.УстановитьНовыйКод();
						Если ЕдиницаДляОтчетов.ПроверитьЗаполнение() Тогда
							Попытка
								ЕдиницаДляОтчетов.Записать();
								Если НЕ ПустаяСтрока(Выборка.ЕдиницаДляОтчетовНаименование) Тогда
									Справочник.ЕдиницаДляОтчетов		= ЕдиницаДляОтчетов;
								КонецЕсли;
								Если НЕ ПустаяСтрока(Выборка.ЕдиницаХраненияОстатковНаименование) Тогда
									Справочник.ЕдиницаХраненияОстатков	= ЕдиницаДляОтчетов;
								КонецЕсли;
								Справочник.Записать();
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция AsfarmaIDСоздать(Параметры)
	Ответ = Справочники.AsfarmaID.ПустаяСсылка();
	
	Справочник	= Справочники.AsfarmaID.СоздатьЭлемент();
	Справочник.Код						= Параметры.MALZEME;
	Справочник.Наименование				= Параметры.MALZEME_TX;
	Если Справочник.ПроверитьЗаполнение() Тогда
		Попытка
			Справочник.Записать();
			Ответ = Справочник.Ссылка;
		Исключение КонецПопытки;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СпискиПоступленияНоменклатурыВВалютеПодобрать(ДанныеСтроки, Параметры)
	Возврат Справочники.СпискиПоступленияНоменклатурыВВалюте.Список1;
	//Ответ	= Справочники.СпискиПоступленияНоменклатурыВВалюте.ПустаяСсылка();
	//Запрос	= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	//      	               |	Товары.Список КАК Ссылка
	//      	               |ИЗ
	//      	               |	Документ.ПоступлениеНоменклатурыПродажВалютныйСписками.Номенклатура КАК Товары
	//      	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНоменклатурыПродажВалютныйСписками КАК Поступление
	//      	               |		ПО Товары.Ссылка = Поступление.Ссылка
	//      	               |ГДЕ
	//      	               |	Товары.Номенклатура = &Номенклатура
	//      	               |	И Поступление.Проведен = ИСТИНА
	//      	               |
	//      	               |УПОРЯДОЧИТЬ ПО
	//      	               |	Поступление.Дата УБЫВ");
	//Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	//Выборка	= Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Ответ = Выборка.Ссылка;
	//КонецЕсли;
	//Возврат Ответ;
КонецФункции

Функция БазоваяЕдиницаИзмеренияНайти(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторЕИ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПродаж КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕИ
	|		ПО Номенклатура.БазоваяЕдиницаИзмерения = КлассификаторЕИ.Ссылка
	|ГДЕ
	|	(КлассификаторЕИ.Наименование = &Код
	|			ИЛИ Номенклатура.Наименование = &Наименование)
	|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатурыПродаж.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторЕИ.Наименование = &Код УБЫВ");
	Запрос.УстановитьПараметр("Код",			Параметры.OLCU_BIRIMI);
	Запрос.УстановитьПараметр("Наименование",	Параметры.MALZEME_TX);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторЕИ.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕИ
	               |ГДЕ
	               |	КлассификаторЕИ.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",	"шт.");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
КонецФункции

Функция НацВалюта()
	Если НЕ ЗначениеЗаполнено(НацВалюта) Тогда
		НацВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Возврат НацВалюта;
КонецФункции

Функция ВалютаПолучить(Код="")
	Если ПустаяСтрока(Код) Или СтрСравнить(Код, "UZS") = 0 Тогда
		Возврат НацВалюта();
	КонецЕсли;
	
	Ответ = Справочники.Валюты.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	(Валюты.Наименование = &Код
	|			ИЛИ Валюты.Код = &Код)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.ПометкаУдаления");
	Запрос.УстановитьПараметр("Код",			Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция КурсПолучить(Валюта, Период)
	Если Валюта = НацВалюта() Тогда
		Возврат 1;
	КонецЕсли;
	
	Ответ	= 1;
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Курсы.Кратность = 0
	|			ТОГДА Курсы.Курс
	|		ИНАЧЕ Курсы.Курс / Курсы.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК Курсы");
	Запрос.УстановитьПараметр("Валюта",			Валюта);
	Запрос.УстановитьПараметр("Период",			Период);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Курс;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СчетУчетаРасчетовСКонтрагентом(Валютный=Ложь)
	Возврат ?(Валютный, ПланыСчетов.Хозрасчетный.А6011, ПланыСчетов.Хозрасчетный.А6010);
КонецФункции

Функция СчетУчетаВозвратаИРеализации()
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("4010");
КонецФункции

Функция СчетУчетаЗатрат()
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("9410");
КонецФункции

Функция СтавкаНДС(Код="")
	Если СтрСравнить(Код, "T1") = 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС15;
	КонецЕсли;
	Возврат Перечисления.СтавкиНДС.БезНДС;
КонецФункции

Процедура РеализацияМедикаментовСоздатьНаСервере(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZSD_011_S_DATA;
	КонецЕсли;
	ТЧ.Сортировать("BILLDOC,ITEMNO");
	
	Настроить(ЭтотОбъект);
	мДоки	= Новый Массив;
	Для Каждого ТекСтрока Из ТЧ Цикл
		Если мДоки.Найти(ТекСтрока.BILLDOC) = Неопределено Тогда
			//Если SDДокументПроведен(ТекСтрока) Тогда
				//
			//Иначе
				Строки = ТЧ.НайтиСтроки(Новый Структура("BILLDOC", ТекСтрока.BILLDOC));
				Если СтрСравнить(ТекСтрока.BILLTYP, "S1") = 0
				Или СтрСравнить(Лев(ТекСтрока.BILLTYP, 2), "ZI") = 0
				Тогда
					ВозвратНоменклатурыПродажСоздать(ТекСтрока, Строки);
				Иначе
					РеализацияМедикаментовСоздать(ТекСтрока, Строки);
				КонецЕсли;
				//Прервать;
			//КонецЕсли;
			
			мДоки.Добавить(ТекСтрока.BILLDOC);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РеализацияМедикаментовСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Ссылка		= ДокументРеализацияНайти(Шапка);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Док = Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Док.Номенклатура.Очистить();
		Док.Услуги.Очистить();

	Иначе
		Док = Документы.РеализацияМедикаментов.СоздатьДокумент();
		Док.Дата			= Шапка.BILLDATE;
		Док.Номер			= Шапка.BILLDOC;
		Док.Организация		= Организация;
		Док.ОтражатьПоБУ	= Истина;
		Док.БанковскийСчет	= БанковскийСчетНайти(Док.Организация);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Склад) Тогда
		Док.Склад			= СкладПолучить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Док.Контрагент		= КонтрагентНайти(Шапка.VKN);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Ошибки.Добавить(СтрШаблон("Не найден Контрагент по коду %1", Шапка.PAYER));
		ДокументЗаполнить(Док);		// 4testonly
	ИначеЕсли НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Док.ДоговорКонтрагента				= ДоговорКонтрагентаПолучить(Док.Контрагент);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Ошибки.Добавить("Не найден договор Контрагента");
	КонецЕсли;
	Док.СчетУчетаРасчетовСКонтрагентомБУ	= СчетУчетаВозвратаИРеализации();
	Док.БанковскийСчетКонтрагента			= БанковскийСчетНайти(Док.Контрагент);
	//Док.ЗачестьАванс	= Истина;
	
	СчетУчетаБУ			= СчетУчетаНайти("2910");
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Ошибки.Добавить("Не заполнен Счет учета БУ");
	КонецЕсли;
	Док.ФинансоваяСкидкаПроцент	= 0;
	Док.ФинансоваяСкидкаСумма	= 0;
	
	Док.СуммаПоДокументу		= 0;
	Док.КоличествоПоДокументу	= 0;
	Для Каждого Деталь Из Детали Цикл
		//Если СтрСравнить(Деталь.BILLTYP, "ZA01") = 0 Тогда
		//ИначеЕсли СтрСравнить(Деталь.BILLTYP, "ZH01") = 0 Тогда
		//	ТекСтрока = Док.Услуги.Добавить();
		//	ТекСтрока.Услуга		= НоменклатураПродажНайти(Деталь.MATERIAL);
		//	//ТекСтрока.СчетУчета	= 
		//	ТекСтрока.Сумма			= Деталь.TOTALPRICE;
		//	ТекСтрока.СтавкаНДС		= СтавкаНДС();
		//	ТекСтрока.СуммаНДС		= ТекСтрока.Сумма * ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС) * 0.01;
		//	
		////ИначеЕсли СтрСравнить(Деталь.BILLTYP, "ZI02") = 0 Тогда
		////ИначеЕсли СтрСравнить(Деталь.BILLTYP, "ZB01") = 0 Тогда
		////ИначеЕсли СтрСравнить(Деталь.BILLTYP, "ZS06") = 0 Тогда
		//Иначе	//Если СтрСравнить(Деталь.BILLTYP, "ZS07") = 0 Тогда
			ТекСтрока = Док.Номенклатура.Добавить();
			ТекСтрока.Номенклатура	= НоменклатураПродажНайти(Деталь.MATERIAL, Деталь.BATCH);
			ТекСтрока.НоменклатурныйНомер	= ТекСтрока.Номенклатура.Код;
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
				ТекСтрока.ЕдиницаИзмерения	= ЕдиницаИзмеренияНайти(ТекСтрока.Номенклатура, Деталь.UNIT);
			Иначе
				Ошибки.Добавить(СтрШаблон("Строка %1. Не найдена Номенклатура по коду %2", ТекСтрока.НомерСтроки, Деталь.MATERIAL));
			КонецЕсли;
			ТекСтрока.СчетУчетаБУ	= СчетУчетаБУ;
			ТекСтрока.Серия			= Деталь.BATCH;
			ТекСтрока.Количество	= Деталь.QUANTITY;
			ТекСтрока.Цена			= ?(Деталь.QUANTITY = 0, Деталь.TOTALPRICE, Деталь.TOTALPRICE / Деталь.QUANTITY);
			//ТекСтрока.Себестоимость	= Деталь.COST;
			Остаток	= ПолучитьОстатокНоменклатуры(ТекСтрока.Номенклатура, Док.Склад, Док.Организация, Док.Дата-1, ТекСтрока.СчетУчетаБУ);
			ТекСтрока.Себестоимость	= ?(Остаток.Количество = 0, 0, Окр(Остаток.Сумма / Остаток.Количество, 2));
			ТекСтрока.Сумма			= Деталь.TOTALPRICE;
			ТекСтрока.Наценка		= Деталь.PROFITMARJIN;
			ТекСтрока.СтавкаНДС		= ЧислоКакСтавкаНДС(Деталь.KDV);				//	ТекСтрока.Номенклатура.СтавкаНДС;
			ТекСтрока.СуммаНДС		= Деталь.KDV_TUTARI;
			ТекСтрока.СрокГодности	= ТекСтрока.Номенклатура.СрокГодности;
			//ТекСтрока.
			//Док.ФинансоваяСкидкаПроцент	= Абс(Деталь.FINDISC);
			Док.ФинансоваяСкидкаСумма	= Док.ФинансоваяСкидкаСумма + Абс(Деталь.TOTALDISC);
		//КонецЕсли;
		Док.СуммаПоДокументу		= Док.СуммаПоДокументу + ТекСтрока.Сумма;
		Док.КоличествоПоДокументу	= Док.КоличествоПоДокументу + ТекСтрока.Количество;
	КонецЦикла;
	Если Док.ФинансоваяСкидкаСумма > 0 Тогда
		Док.ФинансоваяСкидкаПроцент = Окр(Док.ФинансоваяСкидкаСумма * 100 / Док.СуммаПоДокументу, 2);
	КонецЕсли;
	
	ДокЗаписать(Док, Ошибки);
КонецПроцедуры

Функция Абс(Число)
	Возврат ?(Число < 0, -Число, Число);
КонецФункции

Процедура ВозвратНоменклатурыПродажСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Ссылка		= ВозвратНоменклатурыПродажНайти(Шапка);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Док = Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Док.Номенклатура.Очистить();
		Док.Услуги.Очистить();

	Иначе
		Док = Документы.ВозвратНоменклатурыПродаж.СоздатьДокумент();
		Док.Дата			= Шапка.BILLDATE;
		Док.Номер			= Шапка.BILLDOC;
		Док.Организация		= Организация;
		Док.ОтражатьПоБУ	= Истина;
		Док.БанковскийСчет	= БанковскийСчетНайти(Док.Организация);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Склад) Тогда
		Док.Склад			= СкладПолучить();
	КонецЕсли;
	Если СтрСравнить(Шапка.BILLTYP, "S1") = 0 Тогда
		Док.КорректируемыйДокументРеализации	= ДокументРеализацияНайти(Новый Структура("BILLDOC,BILLDATE", Шапка.REVREC, Шапка.IADE_REF_TARIH));
	Иначе
		Док.КорректируемыйДокументРеализации	= ДокументРеализацияНайти(Новый Структура("BILLDOC,BILLDATE", Шапка.IADE_REF_NO, Шапка.IADE_REF_TARIH));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Док.Контрагент		= КонтрагентНайти(Шапка.VKN);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Ошибки.Добавить(СтрШаблон("Не найден Контрагент по коду %1", Шапка.PAYER));
		ДокументЗаполнить(Док);		// 4testonly
	ИначеЕсли НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Док.ДоговорКонтрагента				= ДоговорКонтрагентаПолучить(Док.Контрагент);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Ошибки.Добавить("Не найден договор Контрагента");
	КонецЕсли;
	Док.СчетУчетаРасчетовСКонтрагентомБУ	= СчетУчетаВозвратаИРеализации();
	Док.БанковскийСчетКонтрагента			= БанковскийСчетНайти(Док.Контрагент);
	//Док.ЗачестьАванс	= Истина;
	
	СчетУчетаБУ			= СчетУчетаНайти("2910");
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Ошибки.Добавить("Не заполнен Счет учета БУ");
	КонецЕсли;
	
	Док.СуммаПоДокументу		= 0;
	Док.КоличествоПоДокументу	= 0;
	Для Каждого Деталь Из Детали Цикл
		ТекСтрока = Док.Номенклатура.Добавить();
		ТекСтрока.Номенклатура	= НоменклатураПродажНайти(Деталь.MATERIAL, Деталь.BATCH);
		ТекСтрока.НоменклатурныйНомер	= ТекСтрока.Номенклатура.Код;
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			ТекСтрока.ЕдиницаИзмерения	= ЕдиницаИзмеренияНайти(ТекСтрока.Номенклатура, Деталь.UNIT);
		Иначе
			Ошибки.Добавить(СтрШаблон("Строка %1. Не найдена Номенклатура по коду %2", ТекСтрока.НомерСтроки, Деталь.MATERIAL));
		КонецЕсли;
		ТекСтрока.СчетУчетаБУ	= СчетУчетаБУ;
		ТекСтрока.Серия			= Деталь.BATCH;
		ТекСтрока.Количество	= Деталь.QUANTITY;
		ТекСтрока.Цена			= ?(Деталь.QUANTITY = 0, Деталь.TOTALPRICE, Деталь.TOTALPRICE / Деталь.QUANTITY);
		//ТекСтрока.Себестоимость	= Деталь.COST;
		ТекСтрока.Себестоимость	= ?(ЗначениеЗаполнено(ТекСтрока.Номенклатура) И ЗначениеЗаполнено(Док.КорректируемыйДокументРеализации), Док.ПолучитьСебестоимостьКорректируемыйДокументРеализации(Док.КорректируемыйДокументРеализации, ТекСтрока.Номенклатура), 0);
		ТекСтрока.Сумма			= Деталь.TOTALPRICE;
		ТекСтрока.Наценка		= Деталь.PROFITMARJIN;
		ТекСтрока.СтавкаНДС		= ЧислоКакСтавкаНДС(Деталь.IADE_KDV);		//ТекСтрока.Номенклатура.СтавкаНДС;
		ТекСтрока.СуммаНДС		= Деталь.IADE_KDV_TUTARI;	//ТекСтрока.Сумма * ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС) * 0.01;
		//ТекСтрока.СрокГодности	= ТекСтрока.Номенклатура.СрокГодности;

		//	Док.СуммаПоДокументу	= Док.СуммаПоДокументу + ТекСтрока.Сумма;
	КонецЦикла;
	
	ДокЗаписать(Док, Ошибки);
КонецПроцедуры

Функция ЧислоКакСтавкаНДС(Число)
	Если Число = 0 Тогда
		//
	ИначеЕсли Окр(Число, 0) >= 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Окр(Число, 0) >= 14 Тогда
		Возврат Перечисления.СтавкиНДС.НДС15;
	ИначеЕсли Окр(Число, 0) >= 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Окр(Число, 0) >= 8 Тогда
		Возврат Перечисления.СтавкиНДС.НДС8;
	ИначеЕсли Окр(Число, 0) >= 7 Тогда
		Возврат Перечисления.СтавкиНДС.НДС7;
	ИначеЕсли Окр(Число, 0) >= 6 Тогда
		Возврат Перечисления.СтавкиНДС.НДС6;
	ИначеЕсли Окр(Число, 0)  >= 4 Тогда
		Возврат Перечисления.СтавкиНДС.НДС4;
	КонецЕсли;
	Возврат Перечисления.СтавкиНДС.БезНДС;
КонецФункции

Функция ЕдиницаИзмеренияНайти(Владелец, КодКлассификатора)
	Ответ	= Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ЕИ.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Соответствия.Код, "" "") = &Код
	|			ТОГДА 1
	|		КОГДА ЕИ.Ссылка = ЕИ.Владелец.ЕдиницаХраненияОстатков
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствия КАК Соответствия
	|		ПО ЕИ.ЕдиницаПоКлассификатору = Соответствия.Ссылка
	|ГДЕ
	|	ЕИ.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ЕИ.ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец",		Владелец);
	Запрос.УстановитьПараметр("Код",			КодКлассификатора);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция SDДокументНайти(Параметры) Экспорт
	Ответ	= Документы.РеализацияМедикаментов.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияМедикаментов КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ВозвратНоменклатурыПродаж КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.BILLDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.BILLDOC);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция SDДокументПроведен(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияМедикаментов КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ВозвратНоменклатурыПродаж КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен = ИСТИНА");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.BILLDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.BILLDOC);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Возврат (НЕ Запрос.Выполнить().Пустой());
КонецФункции

Функция ДокументРеализацияНайти(Параметры)
	Ответ	= Документы.РеализацияМедикаментов.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияМедикаментов КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.BILLDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.BILLDOC);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Если Год(Параметры.BILLDATE) < 2 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Документ.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РеализацияМедикаментов КАК Документ
		               |ГДЕ
		               |	Документ.Номер = &Номер
		               |	И Документ.Организация = &Организация
		               |	И ГОД(Документ.Дата) <= &ГГ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Документ.Дата УБЫВ";
		Запрос.УстановитьПараметр("ГГ",				Год(ТекущаяДатаСеанса()));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ВозвратНоменклатурыПродажНайти(Параметры)
	Ответ	= Документы.ВозвратНоменклатурыПродаж.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратНоменклатурыПродаж КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.BILLDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.BILLDOC);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ДокументРеализацииПроведен(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияМедикаментов КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен = ИСТИНА");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.BILLDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.BILLDOC);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Возврат (НЕ Запрос.Выполнить().Пустой());
КонецФункции

Процедура УслугиСтороннихСоздатьНаСервере(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZFI_011_S_DATA;
	КонецЕсли;
	ТЧ.Сортировать("DOCNO,POSTITEMFORLEDGER");
	
	Настроить(ЭтотОбъект);
	мДоки	= Новый Массив;
	Для Каждого ТекСтрока Из ТЧ Цикл
		Если мДоки.Найти(ТекСтрока.DOCNO) = Неопределено Тогда
			//Если СтрСравнить(ТекСтрока.DOCTYP_DESC, "IFT dosya kapama") = 0 Тогда
			//ИначеЕсли СтрСравнить(ТекСтрока.DOCTYP_DESC, "IFT masraf kaydı") = 0 Тогда
			//ИначеЕсли СтрСравнить(Лев(ТекСтрока.DOCTYP_DESC, 3), "IFT") = 0 Тогда
				//
			//ИначеЕсли УслугиСтороннихОрганизацийПроведен(ТекСтрока) Тогда
				//
			//Иначе
				Строки = ТЧ.НайтиСтроки(Новый Структура("DOCNO", ТекСтрока.DOCNO));
				Если СтрСравнить(ТекСтрока.DOCTYP, "KR") = 0 Тогда
					СчетФактураВыданныйСоздать(ТекСтрока, Строки);
					
				ИначеЕсли СтрСравнить(ТекСтрока.DOCTYP, "DR") = 0 Тогда
					УслугиСтороннихОрганизацийСоздать(ТекСтрока, Строки);
				КонецЕсли;
			//КонецЕсли;
			
			мДоки.Добавить(ТекСтрока.DOCNO);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СчетФактураВыданныйСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Ссылка		= СчетФактураВыданныйНайти(Шапка);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Док = Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Док.ДокументыОснования.Очистить();

	Иначе
		Док = Документы.СчетФактураВыданный.СоздатьДокумент();
		Док.Дата			= Шапка.DOCDATE;
		Док.Номер			= Шапка.DOCNO;
		Док.Организация		= Организация;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Валюта) Тогда
		Док.ВалютаДокумента	= ВалютаПолучить(Шапка.CURRENCY);
		//Док.Курс			= Шапка.EXCRATE;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Док.Контрагент		= КонтрагентНайти(Шапка.TAXNO);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Ошибки.Добавить(СтрШаблон("Не найден Контрагент по коду %1", Шапка.TAXNO));
	ИначеЕсли НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Док.ДоговорКонтрагента				= ДоговорКонтрагентаПолучить(Док.Контрагент);
	КонецЕсли;
	Док.ДокументОснование	= ДокументРеализацияНайти(Шапка);
	//Док.СтавкаНДС			= ;
	//Док.СуммаНДС			= Шапка.AMOUNT_TRANSACTIONCURR;
	Док.СуммаДокумента		= Шапка.AMOUNT_TRANSACTIONCURR;
	Док.Сумма				= Шапка.AMOUNT_TRANSACTIONCURR;
КонецПроцедуры

Функция СчетФактураВыданныйНайти(Параметры)
	Ответ	= Документы.СчетФактураВыданный.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.DOCDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.DOCNO);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Процедура УслугиСтороннихОрганизацийСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Ссылка		= УслугиСтороннихОрганизацийНайти(Шапка);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Док = Ссылка.ПолучитьОбъект();
		Если Док.ПометкаУдаления Тогда
			Док.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Док.Услуги.Очистить();

	Иначе
		Док = Документы.УслугиСтороннихОрганизаций.СоздатьДокумент();
		Док.Дата			= Шапка.DOCDATE;
		Док.Номер			= Шапка.DOCNO;
		Док.Организация		= Организация;
		Док.ОтражатьПоБУ	= Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Валюта) Тогда
		Док.Валюта			= ВалютаПолучить(Шапка.CURRENCY);
		Док.Курс			= Шапка.EXCRATE;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Док.Контрагент		= КонтрагентНайти(Шапка.TAXNO);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.Контрагент) Тогда
		Ошибки.Добавить(СтрШаблон("Не найден Контрагент по коду %1", Шапка.TAXNO));
		////ДокументЗаполнить(Док);		// 4testonly
	ИначеЕсли НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Док.ДоговорКонтрагента				= ДоговорКонтрагентаПолучить(Док.Контрагент);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		Ошибки.Добавить("Не найден договор Контрагента");
	КонецЕсли;
	//Док.ЗачестьАванс	= Истина;
	//Док.ПриходныйДокумент		= Шапка.REFBELNO;
	Док.ПриходныйДокументДата	= Шапка.POSTDATE;
	//Док.СчетЗатрат				= СчетУчетаЗатрат();
	
	Док.СуммаПоДокументу		= 0;
	Для Каждого Деталь Из Детали Цикл
		Если Деталь.AMOUNT_TRANSACTIONCURR > 0 Тогда
			//мСтроки	= Док.Услуги.НайтиСтроки(Новый Структура("Описание",  Деталь.DOCTYP_DESC)));
			Если Док.Услуги.Количество() = 0 Тогда
				ТекСтрока = Док.Услуги.Добавить();
			Иначе
				ТекСтрока = Док.Услуги.Получить(0);
			КонецЕсли;
			Если ЭтоСчетНДС(Деталь.ALT_ACCNO) Тогда
				//ТекСтрока.СтавкаНДС			= ;
				ТекСтрока.СуммаНДС			= Деталь.AMOUNT_TRANSACTIONCURR;
			Иначе
				ТекСтрока.ОписаниеУслуги	= Перевод(Деталь.DOCTYP_DESC);
				ТекСтрока.Количество		= 1;
				ТекСтрока.Сумма				= Деталь.AMOUNT_TRANSACTIONCURR;
				//ТекСтрока.СтавкаНДС			= 
				//ТекСтрока.СуммаНДС			= 
				ТекСтрока.СчетЗатрат		= СчетУчетаНайти(Деталь.ALT_ACCNO);
				//ТекСтрока.Субконто1			= ;
				//ТекСтрока.Субконто2			= ;
			КонецЕсли;
		ИначеЕсли Деталь.AMOUNT_TRANSACTIONCURR < 0 И НЕ ЗначениеЗаполнено(Док.СчетРасчетовСКонтрагентом) Тогда
			Док.СчетРасчетовСКонтрагентом	= СчетУчетаНайти(Деталь.ALT_ACCNO);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Док.СчетРасчетовСКонтрагентом) Тогда
		Док.СчетРасчетовСКонтрагентом	= СчетУчетаРасчетовСКонтрагентом();
	КонецЕсли;
	
	ДокЗаписать(Док, Ошибки);
КонецПроцедуры

Функция ЭтоСчетНДС(Код)
	Кондуит	= Новый Массив;
	Кондуит.Добавить("4415");
	Возврат (Кондуит.Найти(Код) <> Неопределено);
КонецФункции

Функция КодСчетаПричесать(Знач Код)
	Возврат ?(СтрДлина(Код) = 4, Код, Сред(Код, 4, 4));
КонецФункции

Процедура ДокЗаписать(Док, Ошибки)
	Док.Ответственный	= Ответственный;
	Док.Комментарий		= СтрСоединить(Ошибки, ",");
	
	Если Док.ПроверитьЗаполнение() Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Ошибки.Добавить(ОписаниеОшибки());
			//Док.Комментарий	= СтрСоединить(Ошибки, ",");
		КонецПопытки;
	КонецЕсли;
	Если Док.Модифицированность() Тогда
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Функция УслугиСтороннихОрганизацийПроведен(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УслугиСтороннихОрганизаций КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен = ИСТИНА");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.DOCDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.DOCNO);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Возврат (НЕ Запрос.Выполнить().Пустой());
КонецФункции

Функция УслугиСтороннихОрганизацийНайти(Параметры) Экспорт
	Ответ	= Документы.УслугиСтороннихОрганизаций.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УслугиСтороннихОрганизаций КАК Документ
	|ГДЕ
	|	ГОД(Документ.Дата) = &ГГ
	|	И Документ.Номер = &Номер
	|	И Документ.Организация = &Организация");
	Запрос.УстановитьПараметр("ГГ",				Год(Параметры.DOCDATE));
	Запрос.УстановитьПараметр("Номер",			Параметры.DOCNO);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ =  Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция Перевод(Фраза)
	Если Переводы.Количество() = 0 Тогда
		Макет	= ПолучитьМакет("Переводы");
		Для Итератор = 1 По Макет.ВысотаТаблицы Цикл
			Текст	= Макет.Область(Итератор, 1, Итератор, 1).Текст;
			Если НЕ ПустаяСтрока(Текст) Тогда
				ТекСтрока = Переводы.Добавить();
				ТекСтрока.Фраза		= Текст;
				ТекСтрока.Перевод	= Макет.Область(Итератор, 2, Итератор, 2).Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	мПеревод	= Переводы.НайтиСтроки(Новый Структура("Фраза", Фраза));
	Возврат	?(мПеревод.Количество() = 0, Фраза, мПеревод.Получить(0).Перевод);
КонецФункции

Функция ZMM_000_FM_1C_FATURA_LIST_RTRN(ТЧ=Неопределено, MUHASEBE_BELGE_NO="") Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ENTEGRASYON_LIST;
	КонецЕсли;
	ТЧ.Сортировать("MUHASEBE_BELGE_NO,MUHASEBE_BELGE_KALEM");
	
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZMM_000_TT_1C_FATURA_LIST_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZMM_000_S_1C_FATURA_LIST_LOG");
	WSЗапись	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	
	Ответ		= "";
	Загружено	= Новый Массив;
	Если ПустаяСтрока(MUHASEBE_BELGE_NO) Тогда
		Для Каждого ТекСтрока Из ТЧ Цикл
			Если Загружено.Найти(ТекСтрока.MUHASEBE_BELGE_NO) = Неопределено Тогда
				Попытка
					Если ?(ЭтоТест, ЗначениеЗаполнено(ПоступлениеНоменклатурыПродажВалютныйСпискамиНайти(ТекСтрока)), ДокументПоступленияПроведен(ТекСтрока)) Тогда
						ЗаполнитьЗначенияСвойств(WSЗапись, ТекСтрока);
						WSПараметр.item.Добавить(WSЗапись);
						Загружено.Добавить(ТекСтрока.MUHASEBE_BELGE_NO);
						Если ЭтоТест Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				Исключение
					Ответ	= ОписаниеОшибки();
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСтроки = ТЧ.НайтиСтроки(Новый Структура("MUHASEBE_BELGE_NO", MUHASEBE_BELGE_NO));
		Для Каждого ТекСтрока Из мСтроки Цикл
			Если ЗначениеЗаполнено(ПоступлениеНоменклатурыПродажВалютныйСпискамиНайти(ТекСтрока)) Тогда
				ЗаполнитьЗначенияСвойств(WSЗапись, ТекСтрока);
				WSПараметр.item.Добавить(WSЗапись);
				Загружено.Добавить(ТекСтрока.MUHASEBE_BELGE_NO);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Если Загружено.Количество() > 0 И ПустаяСтрока(Ответ) Тогда
		Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LIST_RTRN(WSПараметр);
		Ответ	= ZMM_000_S_MESSAGES(Объект);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ZMM_000_S_MESSAGES(Объект)
	Ответы	= Новый Массив;
	Попытка
		Если НЕ ПустаяСтрока(Объект.MSGTY) Тогда
			Ответы.Добавить(Объект.MSGTY);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV1) Тогда
			Ответы.Добавить(Объект.MSGV1);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV2) Тогда
			Ответы.Добавить(Объект.MSGV2);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV3) Тогда
			Ответы.Добавить(Объект.MSGV3);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат ?(Ответы.Количество() = 0, "", СтрСоединить(Ответы, ";"));
КонецФункции

Функция ZSD_011_RFC_OZBFAT_IA_DKNT_RTR(ТЧ=Неопределено, BILLDOC="") Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZSD_011_S_DATA;
	КонецЕсли;
	ТЧ.Сортировать("BILLDOC,ITEMNO");
	
	ИмяWSСсылки	= "ZSD_011_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZSD_011_TT_OZB_FAT_IA_DEKN_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZSD_011_S_OZB_FAT_IA_DEKON_LOG");
	WSЗапись	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	
	Ответ		= "";
	Загружено	= Новый Массив;
	Если ПустаяСтрока(BILLDOC) Тогда
		Для Каждого ТекСтрока Из ТЧ Цикл
			Если Загружено.Найти(ТекСтрока.BILLDOC) = Неопределено Тогда
				Попытка
					Если ?(ЭтоТест, ЗначениеЗаполнено(SDДокументНайти(ТекСтрока)), SDДокументПроведен(ТекСтрока)) Тогда
						ЗаполнитьЗначенияСвойств(WSЗапись, ТекСтрока);
						WSПараметр.item.Добавить(WSЗапись);
						Загружено.Добавить(ТекСтрока.BILLDOC);
						Если ЭтоТест Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				Исключение
					Ответ	= ОписаниеОшибки();
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		мСтроки = ТЧ.НайтиСтроки(Новый Структура("BILLDOC", BILLDOC));
		Для Каждого ТекСтрока Из мСтроки Цикл
			Если ЗначениеЗаполнено(SDДокументНайти(ТекСтрока)) Тогда
				ЗаполнитьЗначенияСвойств(WSЗапись, ТекСтрока);
				WSПараметр.item.Добавить(WSЗапись);
				Загружено.Добавить(ТекСтрока.BILLDOC);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;

	Если Загружено.Количество() > 0 И ПустаяСтрока(Ответ) Тогда
		Объект	= WSПрокси.ZSD_011_RFC_OZBFAT_IA_DKNT_RTR(WSПараметр);
		Ответ	= ZSD_010_S_MESSAGE(Объект);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ZSD_010_S_MESSAGE(Объект)
	Ответы	= Новый Массив;
	Попытка
		Если НЕ ПустаяСтрока(Объект.MSGTY) Тогда
			Ответы.Добавить(Объект.MSGTY);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV1) Тогда
			Ответы.Добавить(Объект.MSGV1);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV2) Тогда
			Ответы.Добавить(Объект.MSGV2);
		КонецЕсли;
		Если НЕ ПустаяСтрока(Объект.MSGV3) Тогда
			Ответы.Добавить(Объект.MSGV3);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат ?(Ответы.Количество() = 0, "", СтрСоединить(Ответы, ";"));
КонецФункции
