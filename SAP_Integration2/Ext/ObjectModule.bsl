
Функция ZFI_011_RFC_OZBEKISTAN_RTRN(ВыделенныеСтроки=Неопределено) Экспорт
	ИмяWSСсылки	= "ZFI_011_FG_1CF";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_S_1C_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);

	Загружено	= Новый Массив;
	Шерлок		= Новый Структура("DOCNO,PERIOD_YEAR,POSTDATE");
	Для Каждого ТекЭлемент Из ВыделенныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Шерлок, ZFI_011_S_DATA.Получить(ТекЭлемент));
		//POSTDATE	= Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		//Шерлок.POSTDATE	= POSTDATE.ПривестиЗначение(СтрокаКакДата(Шерлок.POSTDATE));
		Если Загружено.Найти(Шерлок) = Неопределено Тогда
			Попытка
				ЗаполнитьЗначенияСвойств(WSПараметр, Шерлок);
				Объект		= WSПрокси.ZFI_011_RFC_OZBEKISTAN_RTRN(WSПараметр);
			Исключение
				Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Прервать;
			КонецПопытки;
			Загружено.Добавить(Шерлок);
		КонецЕсли;
	КонецЦикла;
	Возврат (Загружено.Количество() > 0);
КонецФункции

Функция ZFI_011_RFC_OZBEKISTAN_RTRN_TEST() Экспорт
	Ответ		= "";
	ИмяWSСсылки	= "ZFI_011_FG_1CF";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_S_1C_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	Попытка
		Объект		= WSПрокси.ZFI_011_RFC_OZBEKISTAN_RTRN(WSПараметр);
		//Если ТипЗнч(Объект) = Тип("ОбъектXDTO") Тогда
			Для Каждого ТекЭлемент Из Объект.Свойства() Цикл
				Ответ = Ответ + ТекЭлемент.Имя + "		" + Объект.Получить(ТекЭлемент.Имя) + Символы.ВК;
			КонецЦикла;
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Процедура ZFI_011_RFC_OZBEKISTAN(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZFI_011_FG_1CF";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZFI_011_RFC_OZBEKISTAN();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СтрокаКакДата(Знач Слово)
	Ответ		= Дата(1,1,1);
	Попытка
		Ответ		= Дата(СтрЗаменить(Слово, "-", ""));
	Исключение КонецПопытки;
	//Если Год(Ответ) < 2 Тогда
	//	Разделитель	= "-";
	//	Слова 		= СтрРазделить(Слово, Разделитель, Ложь);
	//	Если Слова.Количество() > 2 Тогда
	//		Попытка
	//			Ответ	= Дата(Слова.Получить(0), Слова.Получить(1), Слова.Получить(2));
	//		Исключение КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция WSПроксиПолучить(WSСервис=Неопределено, ИндексТочкиПодключения=0) Экспорт
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Точка		= WSСервис.ТочкиПодключения.Получить(ИндексТочкиПодключения);
	//Если ЗащищенноеСоединение Тогда
	//	WSПрокси	= WSСсылки.ZFI_011_FG_1CF.СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL, Точка.Местоположение);
	//Иначе
		WSПрокси	= WSСсылки[ИмяWSСсылки].СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут,, Точка.Местоположение);
	//КонецЕсли;
	НастройкиПолучить(WSПрокси);
	Возврат WSПрокси;
КонецФункции

Функция WSСервисПолучить(ИндексСервиса=0) Экспорт
	WSОпределение	= WSОпределениеПолучить();
	WSСервис		= WSОпределение.Сервисы.Получить(ИндексСервиса);
	Возврат WSСервис;
КонецФункции

Функция WSОпределениеПолучить() Экспорт
	Возврат WSСсылки[ИмяWSСсылки].ПолучитьWSОпределения();
КонецФункции

Функция НастройкиПолучить(Объект=Неопределено)
	//Пользователь	= "d_retmind";
	Пользователь	= "isretmind";
	Пароль			= "Sap1234!";
	Если Объект <> Неопределено Тогда
		Объект.Пользователь	= Пользователь;
		Объект.Пароль		= Пароль;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция URIПространстваИменПолучить(WSСервис=Неопределено)
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Возврат WSСервис.URIПространстваИмен;
КонецФункции

Функция Запросить(Адрес) Экспорт
	Ответ	= "";
	Сервер		= СерверПолучить(Адрес);
	Если НЕ ПустаяСтрока(Сервер) И НастройкиПолучить() Тогда
		HTTPСоединение = HTTPСоединениеПолучить(Сервер);
		HTTPЗапрос	= Новый HTTPЗапрос(Адрес, ЗаголовкиПолучить());
		HTTPОтвет	= HTTPСоединение.Получить(HTTPЗапрос);			// 		GET
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
			//ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(
		//ИначеЕсли HTTPОтвет.КодСостояния >= 400 Тогда
		//	HTTPОтвет	= HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);			// 		POST
		//	Если HTTPОтвет.КодСостояния = 200 Тогда
		//		Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
		//	Иначе
		//		Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		//	КонецЕсли;
				
		Иначе
			Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		КонецЕсли;
	КонецЕсли;
	Возврат ?(Ответ=Неопределено, "", Ответ);
КонецФункции

Функция WSОпределенияПолучить(УРЛ)
	Попытка
		Если ЗащищенноеСоединение Тогда
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут);
		КонецЕсли;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат WSОпределения;
КонецФункции

Функция HTTPСоединениеПолучить(Сервер, Порт=8000)
	Если ЗащищенноеСоединение Тогда
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут);
	КонецЕсли;
	Возврат HTTPСоединение;
КонецФункции

Функция ЗаголовкиПолучить()
	Ответ	= Новый Соответствие;
	Ответ.Вставить("Accept-Encoding",	"gzip,deflate");
	Ответ.Вставить("Accept",			"*/*");
	Ответ.Вставить("Connection",		"keep-alive");
	Ответ.Вставить("content-type",		"application/json");
	//Ответ.Вставить("content-type",	"text/html");
	//Ответ.Вставить("charset",		"utf-8");
	//Ответ.Вставить("sap-server",	"true");
	Ответ.Вставить("sap-client",	"200");
	Возврат Ответ;
КонецФункции

Процедура ZSD_010_RFC_OZB_IADE_TES(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZSD_010_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_IADE_TES();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZSD_010_RFC_OZB_FAT_IA_DEKONT(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZSD_011_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_FAT_IA_DEKONT();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_FATURA_LISTESI(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ENTEGRASYON_LIST;
	КонецЕсли;
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	//WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR"));
	//WSПараметр.SIGN		= "1";
	//WSПараметр.OPTION	= "22";
	//WSПараметр.LOW		= "1000000000";
	//WSПараметр.HIGH		= "2000000000";
	WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR_T"));
	//WSПараметр1.item.Добавить(WSПараметр);
	//MRMRBBW_RANGE_BELNR
	WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "TRGR_POSTING_DATE"));
	WSПараметр3	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	WSПараметр3	= "UZ10";
	WSПараметр4	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	WSПараметр4	= 2021;
	Попытка
		//Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LISTESI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		//Для Каждого ТекСтрока Из Объект.item Цикл
		//	НовСтрока = ТЧ.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		//КонецЦикла;
		Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LISTESI(,, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
			НовСтрока.KAYIT_TARIH	= СтрокаКакДата(ТекСтрока.KAYIT_TARIH);
			НовСтрока.SKT			= СтрокаКакДата(ТекСтрока.SKT);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_MAL_HAREKETI(ТЧ) Экспорт
	ТЧ.Очистить();
	
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "BKK_R_BUDAT");
	WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "CFB_T_MBLNR_RANGE"));
	WSПараметр3	= 2021;	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	WSПараметр4	= "";	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	Попытка
		Объект	= WSПрокси.ZMM_000_FM_1C_MAL_HAREKETI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СерверПолучить(Знач Адрес)
	Ответ	= "";
	Если НРег(Лев(Адрес, 7)) = "http://" Тогда
		Адрес	= Сред(Адрес, 8);
	КонецЕсли;
	Для Итератор = 1 По СтрДлина(Адрес) Цикл
		Если Сред(Адрес, Итератор, 1) = "/"  Тогда
			Прервать;
		Иначе
			Ответ	= Ответ + Сред(Адрес, Итератор, 1);
		КонецЕсли;
	КонецЦикла;
	Если Найти(Ответ, ".") = 0 Тогда
		Ответ	= СерверДефолт();
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СерверДефолт()
	Возврат "AFERPAEQA1.asfarma.local";
КонецФункции

Функция Настроить(Объект) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Настройки.Пользователь КАК Ответственный
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК Настройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Настройки.Значение = Организации.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Настройки.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Наименование = &Наименование
		|	И Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ГоловнаяОрганизация.ПометкаУдаления ЕСТЬ NULL");
		Запрос.УстановитьПараметр("Наименование",	"Администратор");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка);
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеЗаполнено(Объект.Организация);
КонецФункции

Процедура ПоступленияНоменклатурыСоздать(ТЧ=Неопределено) Экспорт
	Если ТЧ = Неопределено Тогда
		ТЧ = ZMM_000_S_1C_ENTEGRASYON_LIST;
	КонецЕсли;
	ТЧ.Сортировать("MUHASEBE_BELGE_NO,MUHASEBE_BELGE_KALEM");
	
	Настроить(ЭтотОбъект);
	мДоки	= Новый Массив;
	Для Каждого ТекСтрока Из ТЧ Цикл
		Если мДоки.Найти(ТекСтрока.MUHASEBE_BELGE_NO) = Неопределено Тогда
			Если ДокументСуществует(ТекСтрока) Тогда
				
			Иначе
				Строки = ТЧ.НайтиСтроки(Новый Структура("MUHASEBE_BELGE_NO", ТекСтрока.MUHASEBE_BELGE_NO));
				Если СтрСравнить(ТекСтрока.PARA_BIRIMI, "UZS") = 0 Тогда
					ПоступлениеНоменклатурыСоздать(ТекСтрока, Строки);
				Иначе
					//ПоступлениеНоменклатурыВалютныйСоздать(ТекСтрока, Строки);
					Продолжить;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			мДоки.Добавить(ТекСтрока.MUHASEBE_BELGE_NO);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоступлениеНоменклатурыСоздать(Шапка, Детали)
	Ошибки		= Новый Массив;
	Контрагент	= КонтрагентПолучить(Шапка.SATICI);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Ошибки.Добавить("Не найден Контрагент по коду " + Шапка.SATICI);
	КонецЕсли;
	Док = Документы.ПоступлениеНоменклатурыВалютныйСписками.СоздатьДокумент();
	Док.Дата		= Шапка.KAYIT_TARIH;
	Док.Номер		= Шапка.MUHASEBE_BELGE_NO;
	Док.Организация		= Организация;
	Док.Ответственный	= Ответственный;
	Док.Склад			= СкладПолучить();
	Док.ОтражатьПоБУ	= Истина;
	Док.Валюта			= ВалютаПолучить(Шапка.PARA_BIRIMI);
	Док.Курс			= КурсПолучить(Док.Валюта, Док.Дата);
	Док.Поставщик							= Контрагент;
	Док.ДоговорПоставщика					= ДоговорПоставщикаПолучить(Контрагент, Док.Валюта);
	Док.СчетУчетаРасчетовСКонтрагентом		= СчетУчетаРасчетовСКонтрагентом();
	//Док.ПриходныйДокумент
	//Док.ПриходныйДокументДата
	//Док.ЗаписыватьЦеныВСправочник			= Истина;
	//Док.НомерГТД		= 
	//Док.ДатаГТД			=
	//Док.НДСТаможенный	=
	//Док.СчетУчетаРасчетовСТаможней			=
	//Док.СубконтоТаможня1=
	//Док.СубконтоТаможня2=
	//Док.СубконтоТаможня3=
	//Док.ЗачестьАванс	= Истина;
	//Док.ТипРаспределения= Истина;
	Для Каждого Деталь Из Детали Цикл
		ТекСтрока = Док.Номенклатура.Добавить();
		ТекСтрока.Номенклатура	= НоменклатураНайти(Деталь.MALZEME);
		ТекСтрока.НоменклатурныйНомер	= Деталь.MALZEME;
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Ошибки.Добавить("Не найдена Номенклатура по коду " + Деталь.MALZEME);
		КонецЕсли;
		ТекСтрока.СчетУчетаБУ	= ТекСтрока.Номенклатура.СчетУчетаБУ;
		ТекСтрока.Количество	= Деталь.MIKTAR;
		ТекСтрока.ЦенаВВалюте	= Деталь.BIRIM_FIYAT;
		ТекСтрока.Цена			= ТекСтрока.ЦенаВВалюте * Док.Курс;
		ТекСтрока.СтавкаНДС		= СтавкаНДС(Деталь.VERGI_GOSTERGE);
		ТекСтрока.СуммаНДС		= Деталь.VERGI_TUTAR;
		ТекСтрока.СуммаВВалюте	= ТекСтрока.Количество * ТекСтрока.ЦенаВВалюте;
		ТекСтрока.Сумма			= ТекСтрока.Количество * ТекСтрока.Цена;			//	Деталь.TUTAR
		//ТекСтрока.Список
		//ТекСтрока.ПлатежПоНДС
		//ТекСтрока.ЗачетНДС
	КонецЦикла;
	Док.Комментарий	= СтрСоединить(Ошибки, ",");
	Если Док.ПроверитьЗаполнение() Тогда
		Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Иначе
		Ошибки.Добавить(ОписаниеОшибки());
		Док.Комментарий	= СтрСоединить(Ошибки, ",");
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Процедура ПоступлениеНоменклатурыВалютныйСоздать(Шапка, Детали)
	Док = Документы.ПоступлениеНоменклатурыПродажВалютныйСписками.СоздатьДокумент();
КонецПроцедуры

Функция ДокументСуществует(Параметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеНоменклатуры.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНоменклатурыВалютныйСписками КАК ПоступлениеНоменклатуры
	|ГДЕ
	|	ГОД(ПоступлениеНоменклатуры.Дата) = &Дата
	|	И ПоступлениеНоменклатуры.Номер = &Номер
	|	И ПоступлениеНоменклатуры.Организация = &Организация");
	Запрос.УстановитьПараметр("Номер",			Параметры.MUHASEBE_BELGE_NO);
	Запрос.УстановитьПараметр("Дата",			Год(Параметры.KAYIT_TARIH));
	Запрос.УстановитьПараметр("Организация",	Организация);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция КонтрагентПолучить(Код)
	Ответ = Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.ПометкаУдаления");
	Запрос.УстановитьПараметр("Код",		Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция СкладПолучить()
	Ответ = Справочники.Склады.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеНоменклатуры.Склад КАК Ссылка,
	|	СУММА(ПоступлениеНоменклатуры.СуммаПоДокументу) КАК Сумма,
	|	Склады.ПометкаУдаления КАК СкладПометкаУдаления
	|ИЗ
	|	Документ.ПоступлениеНоменклатуры КАК ПоступлениеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ПоступлениеНоменклатуры.Склад = Склады.Ссылка
	|ГДЕ
	|	ПоступлениеНоменклатуры.Дата > &Дата
	|	И ПоступлениеНоменклатуры.Проведен = ИСТИНА
	|	И Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидСклада.Склад)
	|	И Склады.СчетУчетаПродукции.Код > "" ""
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНоменклатуры.Склад,
	|	Склады.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладПометкаУдаления,
	|	Сумма УБЫВ");
	Запрос.УстановитьПараметр("Дата",		ДобавитьМесяц(ТекущаяДата(), -3));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция ДоговорПоставщикаПолучить(Контрагент, Валюта=Неопределено)
	Ответ = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Договоры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ
	|	Договоры.Владелец = &Контрагент
	|	И Договоры.ВалютаВзаиморасчетов = &Валюта
	|	И (Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ИЛИ Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договоры.ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	Запрос.УстановитьПараметр("Валюта",			?(Валюта=Неопределено, ВалютаПолучить(), Валюта));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция НоменклатураНайти(Код)
	Ответ = Справочники.Номенклатура.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ПометкаУдаления");
	Запрос.УстановитьПараметр("Код",			Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция НацВалюта()
	Если ЗначениеЗаполнено(НацВалюта) Тогда
		НацВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Возврат НацВалюта;
КонецФункции

Функция ВалютаПолучить(Код="")
	Если ПустаяСтрока(Код) Или СтрСравнить(Код, "UZS") = 0 Тогда
		Возврат НацВалюта();
	КонецЕсли;
	
	Ответ = Справочники.Валюты.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	(Валюты.Наименование = &Код
	|			ИЛИ Валюты.Код = &Код)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.ПометкаУдаления");
	Запрос.УстановитьПараметр("Код",			Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция КурсПолучить(Валюта, Период)
	Если Валюта = НацВалюта() Тогда
		Возврат 1;
	КонецЕсли;
	
	Ответ	= 0;
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Курсы.Кратность = 0
	|			ТОГДА Курсы.Курс
	|		ИНАЧЕ Курсы.Курс / Курсы.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК Курсы");
	Запрос.УстановитьПараметр("Валюта",			Валюта);
	Запрос.УстановитьПараметр("Период",			Период);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Курс;
	КонецЕсли;
	Возврат Ответ
КонецФункции

Функция СчетУчетаРасчетовСКонтрагентом(Валютный=Ложь)
	Возврат ?(Валютный, ПланыСчетов.Хозрасчетный.А6011, ПланыСчетов.Хозрасчетный.А6010);
КонецФункции

Функция СтавкаНДС(Код)
	Если СтрСравнить(Код, "T1") = 0 Тогда
		//Возврат Перечисления.СтавкиНДС.
	КонецЕсли;
	Возврат Перечисления.СтавкиНДС.БезНДС;
КонецФункции
