
Функция ZFI_011_RFC_OZBEKISTAN_RTRN(ВыделенныеСтроки=Неопределено) Экспорт
	ИмяWSСсылки	= "ZFI_011_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_S_1C_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);

	Загружено	= Новый Массив;
	Шерлок		= Новый Структура("DOCNO,PERIOD_YEAR,POSTDATE");
	Для Каждого ТекЭлемент Из ВыделенныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Шерлок, ZFI_011_S_DATA.Получить(ТекЭлемент));
		//POSTDATE	= Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		//Шерлок.POSTDATE	= POSTDATE.ПривестиЗначение(СтрокаКакДата(Шерлок.POSTDATE));
		Если Загружено.Найти(Шерлок) = Неопределено Тогда
			Попытка
				ЗаполнитьЗначенияСвойств(WSПараметр, Шерлок);
				Объект		= WSПрокси.ZFI_011_RFC_OZBEKISTAN_RTRN(WSПараметр);
			Исключение
				Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Прервать;
			КонецПопытки;
			Загружено.Добавить(Шерлок);
		КонецЕсли;
	КонецЦикла;
	Возврат (Загружено.Количество() > 0);
КонецФункции

Функция ZFI_011_RFC_OZBEKISTAN_RTRN_TEST() Экспорт
	Ответ		= "";
	ИмяWSСсылки	= "ZFI_011_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИменПолучить(WSСервис), "ZFI_011_S_1C_LOG");
	WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	Попытка
		Объект		= WSПрокси.ZFI_011_RFC_OZBEKISTAN_RTRN(WSПараметр);
		//Если ТипЗнч(Объект) = Тип("ОбъектXDTO") Тогда
			Для Каждого ТекЭлемент Из Объект.Свойства() Цикл
				Ответ = Ответ + ТекЭлемент.Имя + "		" + Объект.Получить(ТекЭлемент.Имя) + Символы.ВК;
			КонецЦикла;
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Процедура ZFI_011_RFC_OZBEKISTAN(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZFI_011_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZFI_011_RFC_OZBEKISTAN();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СтрокаКакДата(Слово)
	Ответ		= Дата(1,1,1);
	Разделитель	= "-";
	Слова 		= СтрРазделить(Слово, Разделитель, Ложь);
	Если Слова.Количество() > 2 Тогда
		Попытка
			Ответ	= Дата(Слова.Получить(0), Слова.Получить(1), Слова.Получить(2));
		Исключение КонецПопытки;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция WSПроксиПолучить(WSСервис=Неопределено, ИндексТочкиПодключения=0) Экспорт
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Точка		= WSСервис.ТочкиПодключения.Получить(ИндексТочкиПодключения);
	//Если ЗащищенноеСоединение Тогда
	//	WSПрокси	= WSСсылки.ZFI_011_FG_1C.СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL, Точка.Местоположение);
	//Иначе
		WSПрокси	= WSСсылки[ИмяWSСсылки].СоздатьWSПрокси(WSСервис.URIПространстваИмен, WSСервис.Имя, Точка.Имя,, Таймаут,, Точка.Местоположение);
	//КонецЕсли;
	НастройкиПолучить(WSПрокси);
	Возврат WSПрокси;
КонецФункции

Функция WSСервисПолучить(ИндексСервиса=0) Экспорт
	WSОпределение	= WSОпределениеПолучить();
	WSСервис		= WSОпределение.Сервисы.Получить(ИндексСервиса);
	Возврат WSСервис;
КонецФункции

Функция WSОпределениеПолучить() Экспорт
	Возврат WSСсылки[ИмяWSСсылки].ПолучитьWSОпределения();
КонецФункции

Функция НастройкиПолучить(Объект=Неопределено)
	//Пользователь	= "d_retmind";
	Пользователь	= "isretmind";
	Пароль			= "Sap1234!";
	Если Объект <> Неопределено Тогда
		Объект.Пользователь	= Пользователь;
		Объект.Пароль		= Пароль;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция URIПространстваИменПолучить(WSСервис=Неопределено)
	Если WSСервис = Неопределено Тогда
		WSСервис = WSСервисПолучить();
	КонецЕсли;
	Возврат WSСервис.URIПространстваИмен;
КонецФункции

Функция Запросить(Адрес) Экспорт
	Ответ	= "";
	Сервер		= СерверПолучить(Адрес);
	Если НЕ ПустаяСтрока(Сервер) И НастройкиПолучить() Тогда
		HTTPСоединение = HTTPСоединениеПолучить(Сервер);
		HTTPЗапрос	= Новый HTTPЗапрос(Адрес, ЗаголовкиПолучить());
		HTTPОтвет	= HTTPСоединение.Получить(HTTPЗапрос);			// 		GET
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
			//ЭлектронноеВзаимодействиеССерверомDidox.ПрочитатьСтрокуJSON(
		//ИначеЕсли HTTPОтвет.КодСостояния >= 400 Тогда
		//	HTTPОтвет	= HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);			// 		POST
		//	Если HTTPОтвет.КодСостояния = 200 Тогда
		//		Ответ	= HTTPЗапрос.ПолучитьТелоКакСтроку();
		//	Иначе
		//		Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		//	КонецЕсли;
				
		Иначе
			Ответ	= Строка(HTTPОтвет.КодСостояния) + " " + Адрес;
		КонецЕсли;
	КонецЕсли;
	Возврат ?(Ответ=Неопределено, "", Ответ);
КонецФункции

Функция WSОпределенияПолучить(УРЛ)
	Попытка
		Если ЗащищенноеСоединение Тогда
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			WSОпределения	= Новый WSОпределения(УРЛ, Пользователь, Пароль,, Таймаут);
		КонецЕсли;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат WSОпределения;
КонецФункции

Функция HTTPСоединениеПолучить(Сервер, Порт=8000)
	Если ЗащищенноеСоединение Тогда
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль,, Таймаут);
	КонецЕсли;
	Возврат HTTPСоединение;
КонецФункции

Функция ЗаголовкиПолучить()
	Ответ	= Новый Соответствие;
	Ответ.Вставить("Accept-Encoding",	"gzip,deflate");
	Ответ.Вставить("Accept",			"*/*");
	Ответ.Вставить("Connection",		"keep-alive");
	Ответ.Вставить("content-type",		"application/json");
	//Ответ.Вставить("content-type",	"text/html");
	//Ответ.Вставить("charset",		"utf-8");
	//Ответ.Вставить("sap-server",	"true");
	Ответ.Вставить("sap-client",	"200");
	Возврат Ответ;
КонецФункции

Процедура ZSD_010_RFC_OZB_IADE_TES(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZSD_010_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_IADE_TES();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZSD_010_RFC_OZB_FAT_IA_DEKONT(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZSD_011_FG_1C";
	WSПрокси	= WSПроксиПолучить();
	Попытка
		Объект	= WSПрокси.ZSD_010_RFC_OZB_FAT_IA_DEKONT();
		Для Каждого ТекСтрока Из Объект.DATA.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_FATURA_LISTESI(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	//WSПараметр	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR"));
	//WSПараметр.SIGN		= "1";
	//WSПараметр.OPTION	= "22";
	//WSПараметр.LOW		= "1000000000";
	//WSПараметр.HIGH		= "2000000000";
	WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "MRMRBBW_RANGE_BELNR_T"));
	//WSПараметр1.item.Добавить(WSПараметр);
	//MRMRBBW_RANGE_BELNR
	WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "TRGR_POSTING_DATE"));
	WSПараметр3	= "";	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	WSПараметр4	= 2021;	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	Попытка
		Объект	= WSПрокси.ZMM_000_FM_1C_FATURA_LISTESI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Процедура ZMM_000_FM_1C_MAL_HAREKETI(ТЧ) Экспорт
	ТЧ.Очистить();
	ИмяWSСсылки	= "ZMM_000_FG_1C";
	WSСервис	= WSСервисПолучить();
	WSПрокси	= WSПроксиПолучить(WSСервис);
	URIПространстваИмен	= URIПространстваИменПолучить(WSСервис);
	WSТип		= WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "BKK_R_BUDAT");
	WSПараметр1	= WSПрокси.ФабрикаXDTO.Создать(WSТип);
	WSПараметр2	= WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "CFB_T_MBLNR_RANGE"));
	WSПараметр3	= 2021;	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "numeric4"));
	WSПараметр4	= "";	//WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(URIПространстваИмен, "char4"));
	Попытка
		Объект	= WSПрокси.ZMM_000_FM_1C_MAL_HAREKETI(WSПараметр1, WSПараметр2, WSПараметр3, WSПараметр4);
		Для Каждого ТекСтрока Из Объект.item Цикл
			НовСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

Функция СерверПолучить(Знач Адрес)
	Ответ	= "";
	Если НРег(Лев(Адрес, 7)) = "http://" Тогда
		Адрес	= Сред(Адрес, 8);
	КонецЕсли;
	Для Итератор = 1 По СтрДлина(Адрес) Цикл
		Если Сред(Адрес, Итератор, 1) = "/"  Тогда
			Прервать;
		Иначе
			Ответ	= Ответ + Сред(Адрес, Итератор, 1);
		КонецЕсли;
	КонецЦикла;
	Если Найти(Ответ, ".") = 0 Тогда
		Ответ	= СерверДефолт();
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СерверДефолт()
	Возврат "176.88.5.98";
КонецФункции
