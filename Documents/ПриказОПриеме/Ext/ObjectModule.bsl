
#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т1_от_5_1_2004" Тогда
		ТабДокумент = ПечатьТ1(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "Т1а_от_5_1_2004" тогда
		ТабДокумент = ПечатьТ1а(ИмяМакета);
		
	КонецЕсли;
		
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "));
	
КонецПроцедуры // Печать()

#КонецЕсли

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Т1а_от_5_1_2004",	"Форма Т-1а");
	СтруктураПечатныхФорм.Вставить("Т1_от_5_1_2004",	"Форма Т-1");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции

Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель"  ,	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента" ,	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ВЫРАЗИТЬ(ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
		|	ПриемНаРаботуВОрганизацию.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ПриемНаРаботуВОрганизацию.Организация.Префикс
		|ИЗ
		|	Документ.ПриказОПриеме КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоШапкеДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиДокумента.ДатаПриема,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.ФизическоеЛицо.Наименование) КАК Работник,
		|	СтрокиДокумента.ТабельныйНомер,
		|	1 КАК НомерСтроки,
		|	СтрокиДокумента.Подразделение,
		|	СтрокиДокумента.Разряд,
		|	ЕСТЬNULL(СтрокиДокумента.Должность.Наименование, """") + "" "" + ЕСТЬNULL(СтрокиДокумента.Разряд.Наименование, """") КАК Должность,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.Тариф = 0
		|			ТОГДА СтрокиДокумента.ТарифОклад
		|		ИНАЧЕ СтрокиДокумента.Тариф
		|	КОНЕЦ КАК ОкладТарифнаяСтавка,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ВВалюте
		|			ТОГДА СтрокиДокумента.Валюта
		|		ИНАЧЕ ""сум.""
		|	КОНЕЦ КАК Валюта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриказОПриеме.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПриказОПриеме.ДатаПриема КАК ДатаПриема,
		|		ПриказОПриеме.Подразделение КАК Подразделение,
		|		ПриказОПриеме.Должность КАК Должность,
		|		ПриказОПриеме.Разряд КАК Разряд,
		|		ЕСТЬNULL(ТарифыПоРазрядамСрезПоследних.Тариф, 0) КАК Тариф,
		|		ПриказОПриеме.ТабельныйНомер КАК ТабельныйНомер,
		|		ПриказОПриеме.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ВЫБОР
		|			КОГДА ПриказОПриеме.Оклад = 0
		|				ТОГДА ПриказОПриеме.Тариф
		|			ИНАЧЕ ПриказОПриеме.Оклад
		|		КОНЕЦ КАК ТарифОклад,
		|		ПриказОПриеме.ТипСотрудника КАК УсловияПриемаНаРаботу,
		|		ПриказОПриеме.ВВалюте КАК ВВалюте,
		|		ПриказОПриеме.Валюта КАК Валюта
		|	ИЗ
		|		Документ.ПриказОПриеме КАК ПриказОПриеме
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыПоРазрядам.СрезПоследних(
		|					&ДатаДокумента,
		|					Разряд В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ПриказОПриеме.Разряд
		|						ИЗ
		|							Документ.ПриказОПриеме КАК ПриказОПриеме
		|						ГДЕ
		|							ПриказОПриеме.Ссылка = &ДокументСсылка)) КАК ТарифыПоРазрядамСрезПоследних
		|			ПО ПриказОПриеме.Разряд = ТарифыПоРазрядамСрезПоследних.Разряд
		|	ГДЕ
		|		ПриказОПриеме.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПриказОПриеме.ФизическоеЛицо
		|					ИЗ
		|						Документ.ПриказОПриеме КАК ПриказОПриеме
		|					ГДЕ
		|						ПриказОПриеме.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|			КурсыВалютСрезПоследних.Курс КАК Курс,
		|			КурсыВалютСрезПоследних.Кратность КАК Кратность
		|		ИЗ
		|			РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних) КАК КурсыВалют
		|		ПО СтрокиДокумента.Валюта = КурсыВалют.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиДокумента.ДатаПриема,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.ФизическоеЛицо.Наименование) КАК Работник,
		|	СтрокиДокумента.ТабельныйНомер,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.Подразделение,
		|	ЕСТЬNULL(СтрокиДокумента.Должность.Наименование, """") + "" "" + ЕСТЬNULL(СтрокиДокумента.Разряд.Наименование, """") КАК Должность,
		|	СтрокиДокумента.Разряд,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.Тариф = 0
		|			ТОГДА СтрокиДокумента.ТарифОклад
		|		ИНАЧЕ СтрокиДокумента.Тариф
		|	КОНЕЦ КАК ОкладТарифнаяСтавка,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ВВалюте
		|			ТОГДА СтрокиДокумента.Валюта
		|		ИНАЧЕ ""сум.""
		|	КОНЕЦ КАК Валюта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриказОПриемеСотрудники.НомерСтроки КАК НомерСтроки,
		|		ПриказОПриемеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПриказОПриемеСотрудники.ДатаПриема КАК ДатаПриема,
		|		ПриказОПриемеСотрудники.Подразделение КАК Подразделение,
		|		ПриказОПриемеСотрудники.Должность КАК Должность,
		|		ПриказОПриемеСотрудники.Разряд КАК Разряд,
		|		ЕСТЬNULL(ТарифыПоРазрядамСрезПоследних.Тариф, 0) КАК Тариф,
		|		ПриказОПриемеСотрудники.ТабельныйНомер КАК ТабельныйНомер,
		|		ПриказОПриемеСотрудники.ИспытательныйСрок КАК ИспытательныйСрок,
		|		ВЫБОР
		|			КОГДА ПриказОПриемеСотрудники.Оклад = 0
		|				ТОГДА ПриказОПриемеСотрудники.Тариф
		|			ИНАЧЕ ПриказОПриемеСотрудники.Оклад
		|		КОНЕЦ КАК ТарифОклад,
		|		ПриказОПриемеСотрудники.ТипСотрудника КАК УсловияПриемаНаРаботу,
		|		ПриказОПриемеСотрудники.ВВалюте КАК ВВалюте,
		|		ПриказОПриемеСотрудники.Валюта КАК Валюта
		|	ИЗ
		|		Документ.ПриказОПриеме.Сотрудники КАК ПриказОПриемеСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыПоРазрядам.СрезПоследних(
		|					&ДатаДокумента,
		|					Разряд В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ПриказОПриемеСотрудники.Разряд
		|						ИЗ
		|							Документ.ПриказОПриеме.Сотрудники КАК ПриказОПриемеСотрудники
		|						ГДЕ
		|							ПриказОПриемеСотрудники.Ссылка = &ДокументСсылка)) КАК ТарифыПоРазрядамСрезПоследних
		|			ПО ПриказОПриемеСотрудники.Разряд = ТарифыПоРазрядамСрезПоследних.Разряд
		|	ГДЕ
		|		ПриказОПриемеСотрудники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПриказОПриемеСотрудники.ФизическоеЛицо
		|					ИЗ
		|						Документ.ПриказОПриеме.Сотрудники КАК ПриказОПриемеСотрудники
		|					ГДЕ
		|						ПриказОПриемеСотрудники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-1а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	Если Списком Тогда
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоШапкеДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = Сотрудники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ1а()

// Функция формирует табличный документ с печатной формой "Т-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
 Функция ПечатьТ1(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	Если Списком Тогда
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоШапкеДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		//ВыводитьДатуОзнакомленияСПриказом = ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		//Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
		//	ОбластьМакетаПодвал.Параметры.ДатаДок = "";
		//КонецЕсли;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если Сотрудники.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		//ПредставлениеДатыДоговора                       = Формат(ВложеннаяВыборка.ТрудовойДоговорДата, "ДЛФ=DD");
		//ОбластьМакета.Параметры.ТрудовойДоговорЧисло    = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Лев(ПредставлениеДатыДоговора,2)), "      ");
		//ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Прав(ПредставлениеДатыДоговора, СтрДлина(ПредставлениеДатыДоговора)-2)), "                     г.");
		
		// Уточним размер и валюту тарифной ставки
		ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка;
		
		Если ВложеннаяВыборка.Валюта="сум." Тогда
			
			ОбластьМакета.Параметры.КопейкиТарифнойСтавки = "тийин.";
			ОбластьМакета.Параметры.ВалютаТарифнойСтавки = "сум.";
			
		Иначе
			
			СтрокаПараметров = СтрЗаменить(ВложеннаяВыборка.Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);

			ОбластьМакета.Параметры.КопейкиТарифнойСтавки = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5));
			ОбластьМакета.Параметры.ВалютаТарифнойСтавки = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбластьМакета.Параметры.КопейкиТарифнойСтавки) Тогда
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Цел(ОкладВПечатнойФорме);
			ДробнаяЧасть = ОкладВПечатнойФорме - Цел(ОкладВПечатнойФорме);
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
		Иначе
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2");
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = "";
		КонецЕсли;
		
		Если ВложеннаяВыборка.ИспытательныйСрок = 0 Тогда
			ОбластьМакета.Параметры.ИспытательныйСрок = "Без испытательного срока";
		Иначе
			ОбластьМакета.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;

		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ОбластьМакета.Параметры.ТрудовойДоговорЧисло = "     ";
		ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = "                 г.";
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ1()

#КонецЕсли

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Списком Тогда
		
		ФизическоеЛицо="";
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПроверитьТабельныеНомера(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Списком Тогда
		ПроверитьДубли( Отказ, Заголовок,"ФизическоеЛицо"," физ. лицо ");
		ПроверитьДубли( Отказ, Заголовок,"ТабельныйНомер"," табельный № ");
	КонецЕсли; 
	
	ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры

Процедура ПроверитьДубли( Отказ, Заголовок,ИмяПоля,ОписаниеПоля) Экспорт
	
	ТаблицаДублей = Сотрудники.Выгрузить();
	
	// Подсчитываем количество повторений сотрудников.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть(ИмяПоля, "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = Сотрудники.НайтиСтроки(Новый Структура(ИмяПоля, СтрокаТаблицыДублей[ИмяПоля]));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части указан один и тот же "+ОписаниеПоля+".";
								   
		КонецЦикла;
														  
		ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ПечатьДокумента(ИмяМакета)
	ТабДок = Новый ТабличныйДокумент;
	
	//Макет = ПолучитьОбщийМакет(ИмяМакета);
	
	//Руководители = ОтветственныеЛица(Организация, Дата);	
	//Область.Параметры.Заполнить(Руководители);
	//Область = Макет.ПолучитьОбласть("ПП");
	//Область.Параметры.Номер = ПолучитьНомерНаПечать(ЭтотОбъект);
	
	//ТабДок.Вывести(Область);
	//ТабДок.ФиксацияСверху=0;
	//ТабДок.ФиксацияСлева=0;
	//ТабДок.ЭкземпляровНаСтранице=0;
	//ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
КонецФункции

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если не Списком Тогда
		СтруктураОбязательныхПолей = Новый Структура();
		СтруктураОбязательныхПолей.Вставить("Организация");
		СтруктураОбязательныхПолей.Вставить("ФизическоеЛицо","Не выбрано физ. лицо.");
		СтруктураОбязательныхПолей.Вставить("ДатаПриема","Не заполнена дата приема.");
		
		СтруктураОбязательныхПолей.Вставить("ТабельныйНомер","Не заполнен таб. №.");
		СтруктураОбязательныхПолей.Вставить("ТипСотрудника","Не выбран тип сотрудника.");
		СтруктураОбязательныхПолей.Вставить("Подразделение","Не выбрано подразделение.");
		СтруктураОбязательныхПолей.Вставить("Должность","Не выбрана должность.");
		//СтруктураОбязательныхПолей.Вставить("Категория","Не выбрана категория.");
		СтруктураОбязательныхПолей.Вставить("СпособРасчетаПН","Не выбран способ расчета подоходного налога.");
		СтруктураОбязательныхПолей.Вставить("ГрафикРаботы","Не выбран график работы.");
		СтруктураОбязательныхПолей.Вставить("ФормаТруда","Не выбрана форма труда.");
		СтруктураОбязательныхПолей.Вставить("Ставка","Не заполнена ставка.");
		
		СтруктураОбязательныхПолей.Вставить("СпособОтраженияРасходовБУ","Не указан способ отражения расходов (БУ).");
		
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	Иначе
		СтруктураОбязательныхПолей = Новый Структура();
		СтруктураОбязательныхПолей.Вставить("Организация");
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей = Новый Структура();
		СтруктураОбязательныхПолей.Вставить("ФизическоеЛицо","Не выбран физ. лицо.");
		СтруктураОбязательныхПолей.Вставить("ДатаПриема","Не заполнена дата приема.");
		
		СтруктураОбязательныхПолей.Вставить("ТабельныйНомер","Не заполнен таб. №.");
		СтруктураОбязательныхПолей.Вставить("ТипСотрудника","Не выбран тип сотрудника.");
		СтруктураОбязательныхПолей.Вставить("Подразделение","Не выбрано подразделение.");
		СтруктураОбязательныхПолей.Вставить("Должность","Не выбрана должность.");
		//СтруктураОбязательныхПолей.Вставить("Категория","Не выбрана категория.");
		СтруктураОбязательныхПолей.Вставить("СпособРасчетаПН","Не выбран способ расчета подоходного налога.");
		СтруктураОбязательныхПолей.Вставить("ГрафикРаботы","Не выбран график работы.");
		СтруктураОбязательныхПолей.Вставить("ФормаТруда","Не выбрана форма труда.");
		СтруктураОбязательныхПолей.Вставить("Ставка","Не заполнена ставка.");
		
		СтруктураОбязательныхПолей.Вставить("СпособОтраженияРасходовБУ","Не указан способ отражения расходов (БУ).");
		
		ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "Сотрудники", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если не Списком Тогда
		СформироватьДвиженияПоСотруднику(СтруктураШапкиДокумента,Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	Иначе
		Для Каждого СтрокаСотрудники из Сотрудники Цикл
			СформироватьДвиженияПоСотруднику(СтрокаСотрудники,Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		КонецЦикла; 
	КонецЕсли; 		
	
КонецПроцедуры 

Функция НайтиСотрудника(ФизическоеЛицо,ТабельныйНомер,Отказ)
	
	Перем Сотрудник;
	
	Сотрудник=Справочники.Сотрудники.ПустаяСсылка();
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Ссылка;
	КонецЕсли;	
	
	//Если Сотрудник.Пустая() Тогда
	//	
	//	Сотрудник=Справочники.Сотрудники.НайтиПоКоду(ТабельныйНомер);
	//	
	//КонецЕсли;

	
	Если Сотрудник.Пустая() Тогда
		
		Сотрудник=Справочники.Сотрудники.СоздатьЭлемент();
		
	Иначе
		
		Сотрудник=Сотрудник.ПолучитьОбъект();
		
	КонецЕсли; 
	
	Попытка
		
		Сотрудник.Код=ТабельныйНомер;
		Сотрудник.Наименование=ФизическоеЛицо.Наименование;
		Сотрудник.ФизическоеЛицо=ФизическоеЛицо;
		Сотрудник.Записать();
		
		Сотрудник=Сотрудник.Ссылка;
		
	Исключение
		
		Сообщить("Ошибка при попытке записи сотрудника, возможно сотрудник с таб.№ "+СокрЛП(ТабельныйНомер)+" уже существует!",СтатусСообщения.Важное);
		Отказ=Истина;
		
	КонецПопытки;
	
	
    Возврат Сотрудник;
	
КонецФункции // 

Процедура СформироватьДвиженияПоСотруднику(Реквизиты,Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Сотрудник=НайтиСотрудника(Реквизиты.ФизическоеЛицо,Реквизиты.ТабельныйНомер,Отказ);

	//=======================================
	Движение=Движения.РаботникиОрганизаций.Добавить();		
	Движение.Организация=Организация;
	Движение.Сотрудник=Сотрудник;
	Движение.Период=Реквизиты.ДатаПриема;
	
	Движение.ТабельныйНомер=Реквизиты.ТабельныйНомер;
	Движение.ПодразделениеОрганизации=Реквизиты.Подразделение;
	Движение.Должность=Реквизиты.Должность;
	Движение.Категория=Реквизиты.Категория;
	Движение.ТипСотрудника=Реквизиты.ТипСотрудника;
	Движение.НеРезидент=Реквизиты.НеРезидент;
	Движение.Надомник=Реквизиты.Надомник;
	Движение.НеУдерживатьПрофвзносы=Реквизиты.НеУдерживатьПрофвзносы;
	Движение.НеУдерживатьВПенсионныйФонд = Реквизиты.НеУдерживатьВПенсионныйФонд;
	
	Движение.ПричинаИзмененияСостояния=Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
	//=======================================
	Движение=Движения.ДанныеДляРасчетаЗП.Добавить();		
	Движение.Организация=Организация;
	Движение.Сотрудник=Сотрудник;
	Движение.Период=Реквизиты.ДатаПриема;
	
	Движение.Оклад=Реквизиты.Оклад;
	Движение.Тариф=Реквизиты.Тариф;
	Движение.ФормаТруда=Реквизиты.ФормаТруда;
	Движение.Ставка=Реквизиты.Ставка;
	Движение.Разряд=Реквизиты.Разряд;
	Движение.ГрафикРаботы=Реквизиты.ГрафикРаботы;
	Движение.ВВалюте=Реквизиты.ВВалюте;
	Если Движение.ВВалюте Тогда 
		Движение.Валюта=Реквизиты.Валюта;
	КонецЕсли;
	//=======================================
	Движение=Движения.ДанныеДляРасчетаПН.Добавить();		
	Движение.Организация=Организация;
	Движение.Сотрудник=Сотрудник;
	Движение.Период=Реквизиты.ДатаПриема;
	
	Движение.СпособРасчетаПН=Реквизиты.СпособРасчетаПН;
	//=======================================
	Движение=Движения.СпособыОтраженияРасходовПоЗПБУ.Добавить();		
	Движение.Организация=Организация;
	Движение.Сотрудник=Сотрудник;
	Движение.Период=Реквизиты.ДатаПриема;
	
	Движение.СпособОтраженияРасходов=Реквизиты.СпособОтраженияРасходовБУ;	
	//=======================================
	Движение=Движения.ПроцентВыплатыНаПластиковуюКарту.Добавить();
	Движение.Организация=Организация;
	Движение.Период=Реквизиты.ДатаПриема;
	Движение.Сотрудник=Сотрудник;
	Движение.Процент=Реквизиты.ПроцентВыплатыНаПластиковуюКарту;
	
КонецПроцедуры
                                                                                                                             
Процедура ПроверитьТабельныеНомера(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	МассивТабельныхНомеров=новый Массив;
	Если не Списком Тогда
		МассивТабельныхНомеров.Добавить(СтруктураШапкиДокумента.ТабельныйНомер);
	Иначе	
		МассивТабельныхНомеров=Сотрудники.ВыгрузитьКолонку("ТабельныйНомер");
	КонецЕсли;
	
	МассивФизЛиц=новый Массив;
	Если не Списком Тогда
		МассивФизЛиц.Добавить(СтруктураШапкиДокумента.ФизическоеЛицо);
	Иначе	
		МассивФизЛиц=Сотрудники.ВыгрузитьКолонку("ФизическоеЛицо");
	КонецЕсли;
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Регистратор КАК Документ,
	|	РаботникиОрганизаций.Период КАК ДатаПриема,
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизаций.Сотрудник.Наименование КАК ФИО
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Организация = &Организация
	|	И (РаботникиОрганизаций.Сотрудник.Код В (&МассивТабельныхНомеров)
	|			ИЛИ РаботникиОрганизаций.Сотрудник.ФизическоеЛицо В (&МассивФизЛиц))
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу";
	
	Запрос.УстановитьПараметр("ПриемНаРаботу", 	Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("МассивТабельныхНомеров", МассивТабельныхНомеров);
	Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	ВыборкаДоков=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВыборки из ВыборкаДоков Цикл
		
		Если СтрокаВыборки<>неопределено Тогда
			Сообщить("На физ.лицо ("+СтрокаВыборки.ФИО+") или таб.№ "+СтрокаВыборки.ТабельныйНомер+" уже оформлялся приказ о приеме: "+СтрокаВыборки.Документ+", дата приема: "+строка(СтрокаВыборки.ДатаПриема));
		    Отказ=истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
КонецПроцедуры


