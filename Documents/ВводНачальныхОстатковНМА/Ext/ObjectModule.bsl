// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мФормаДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура печати табличной части документа
//
Функция ПечатьОписи() Экспорт
	
	Если мФормаДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Список полей, по которым нужно выводить итоги.
	
	
	СписокИтоговыхПолей = Новый СписокЗначений();
	
	СписокИтоговыхПолей.Добавить("ПервоначальнаяСтоимостьБУ");
	СписокИтоговыхПолей.Добавить("СтоимостьБУ");
	СписокИтоговыхПолей.Добавить("НакопленнаяАмортизацияБУ");
	СписокИтоговыхПолей.Добавить("ПереоценкаБУ");
	
	
	
	
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Метаданные().Представление() + " № " + Номер + " от " + Формат( Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаБух");
	Область.Параметры.Организация              = Организация;
	ТабДок.Вывести( Область);
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.НМА.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("НематериальныйАктив", МетаТЧ.НематериальныйАктив);
	Для Каждого Колонка Из мФормаДокумента.ЭлементыФормы.НМА.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "КодНМА")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "НематериальныйАктив" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из НМА Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.НМА          = СтрокаТЧ.НематериальныйАктив;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			
			//Если не Колонки[Колонка.Ключ].Видимость Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			Если Не Колонка.Ключ = "НематериальныйАктив" Тогда
				Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.ТекущаяОбласть.Формат = "БЛ=Нет; БИ=Да";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.ТекущаяОбласть.Формат = "ДЛФ=DD";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Число") Тогда
					//Формат числового значения
					Разрядность = 0;
					РазрядностьДробнойЧасти = 0;
					Если Колонка.Значение.Тип.СодержитТип(Тип("Число")) тогда
						Разрядность = Колонка.Значение.Тип.КвалификаторыЧисла.Разрядность;
						РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					КонецЕсли;
					СтрокаФормата = ?(Разрядность=0,"","ЧЦ="+Разрядность+";")+?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти);				
					
					Область.ТекущаяОбласть.Формат = СтрокаФормата;
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "НематериальныйАктив" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") 
		   И НЕ (СписокИтоговыхПолей.НайтиПоЗначению(Колонка.Ключ) = Неопределено) Тогда
			//Формат числового значения
			РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			СтрокаФормата = ?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти+";");				
			Область.Параметры.КолИтог = НМА.Итог( Колонка.Ключ);
			Область.ТекущаяОбласть.Формат = СтрокаФормата+"ЧРД=,; ЧРГ=; ЧГ=3,0";
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "Опись" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОписи();
		
	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись НМА при вводе остатков");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация";
					
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "НематериальныйАктив,МОЛ,Подразделение";
	
	ОбязательныеРеквизиты =ОбязательныеРеквизиты+",СчетУчетаБУ,СчетАмортизацииБУ";
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Процедура формирования движений по регистру Первоначальные сведеняи об НМА бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияНМАБух(ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НематериальныйАктив            = СтрокаНМА.НематериальныйАктив;
		//НоваяСтрока.ИнвентарныйНомер            = СтрокаНМА.ИнвентарныйНомер;
		НоваяСтрока.СпособПоступления			= СтрокаНМА.СпособПоступления;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаНМА.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользованияБУ;
		НоваяСтрока.НачислятьАмортизацию        = СтрокаНМА.НачислятьАмортизациюБУ;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияНМАБух()

// Процедура формирования движений по регистру Состояния НМА бух.
//
Процедура ДвижениеПоРегиструСостоянияНМАБух( ТабНМА, СтруктураШапкиДокумента,Отказ,Заголовок)
		
	НаборДвижений   = Движения.СостоянияНМАОрганизацийБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ДатаСостояния     = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние         = Перечисления.ВидыСостоянийНМА.Поступил;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ДатаСостояния     = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние         = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
		
	КонецЦикла;
	//ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,Дата, ТаблицаДвижений,Отказ,Заголовок);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеНМАБух()

// Процедура формирования движений по регистру Состояния НМА бух.
//
Процедура ДвижениеПоРегиструОперацииНМАБух( ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияНМАОрганизацийБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаНМА.Событие;
		НоваяСтрока.НомерДокумента    = СтрокаНМА.НомерДокументаВводаВЭксплуатацию;
		НоваяСтрока.НазваниеДокумента = СтрокаНМА.НазваниеДокументаВводаВЭксплуатацию;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеНМАБух()
////////////////////////////////////////////////////////////////////////////////

Процедура ДвижениеПоРегиструСпособыОтраженияБух	     ( ТабНМА, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		Если ЗначениеНеЗаполнено(СтрокаНМА.СпособОтраженияРасходовПоАмортизации) тогда
			Продолжить;
		КонецЕслИ;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособОтраженияРасходовПоАмортизации = СтрокаНМА.СпособОтраженияРасходовПоАмортизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

// Процедура формирования движений по регистру СчетаУчета НМА бух.
//
Процедура ДвижениеПоРегиструСчетовУчетаНМАБух( ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаБухгалтерскогоУчетаНМА;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		  = СтрокаНМА.ДатаВводаВЭксплуатацию;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета         = СтрокаНМА.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаНМА.СчетАмортизацииБУ;
		
	КонецЦикла;
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСчетовУчетаНМАБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух(ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииНМАБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		ДатаДвижения = СтрокаНМА.ДатаВводаВЭксплуатацию;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ДатаДвижения;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаНМА.СтоимостьБУ;
		НоваяСтрока.КоэффициентАмортизации                      = СтрокаНМА.КоэффициентАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух(ТабНМА, СтруктураШапкиДокумента)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		Если НЕ ЗначениеНеЗаполнено(СтрокаНМА.СчетУчетаБУ) Тогда
			// Ввод балансовой стоимости НМА.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Ввод остатков по НМА (баланс. стоимость)";
			Проводка.Сумма       = СтрокаНМА.СтоимостьБУ;
			
			Проводка.СчетДт = СтрокаНМА.СчетУчетаБУ;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
			
			Если СчетИсточник.Пустая() Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			Иначе
				Проводка.СчетКт = СчетИсточник;
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ ЗначениеНеЗаполнено(СтрокаНМА.СчетАмортизацииБУ) И НЕ (СтрокаНМА.НакопленнаяАмортизацияБУ = 0) Тогда
			// Ввод начисленной амортизации.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Ввод остатков по НМА (начисл. амортизация)";
			Проводка.Сумма       = СтрокаНМА.НакопленнаяАмортизацияБУ;
			
			Если СчетИсточник.Пустая() Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			Иначе
				Проводка.СчетДт = СчетИсточник;
			КонецЕсли; 
			
			Проводка.СчетКт = СтрокаНМА.СчетАмортизацииБУ;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух
////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ,Заголовок)

	ТабНМА = НМА.Выгрузить();
	
	ДвижениеПоРегиструПервоначальныеСведенияНМАБух( ТабНМА, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСостоянияНМАБух             ( ТабНМА, СтруктураШапкиДокумента,Отказ,  Заголовок);
	ДвижениеПоРегиструСпособыОтраженияБух	     ( ТабНМА, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструОперацииНМАБух              ( ТабНМА, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСчетовУчетаНМАБух           ( ТабНМА, СтруктураШапкиДокумента);
	
	ФормированиеПроводокБух( ТабНМА, СтруктураШапкиДокумента);
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОшибкаПроведенияПоСтроке(СтрокаНМА, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = "- строка № "+СтрокаНМА.НомерСтроки+", инв. номер НМА <"+СтрокаНМА.НематериальныйАктив.ИнвентарныйНомер+"> : ";
	СообщитьОбОшибке(НачалоСообщения+ТекстСообщения, ,Заголовок ,Статус)
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив", "НематериальныйАктив");
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	//СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоНМА = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	
	// Проверим, нет ли повторяющихся нематериальных активов в таблице по НМА.
	ПроверитьДублиНМА(ТаблицаПоНМА, Отказ, Заголовок);

	// Проверим, нет ли одинаковых инвентарных номеров нематериальных активов в таблице по НМА.
	//ПроверитьДублиИнвентарныхНомеровНМА(ТаблицаПоНМА, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мФормаДокумента = Неопределено;