
Перем ТаблицаЗачетаНДС;
Перем ПорядокУплатыНДС;

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("БухгалтерскаяСправка", "Бухгалтерская справка");
КонецФункции

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	Если ИмяМакета = "БухгалтерскаяСправка" Тогда
		ТабДокумент = ПечатьБухгалтерскойСправки();
	КонецЕсли;
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(Ссылка), НепосредственнаяПечать);
КонецПроцедуры

Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДополнительныхРасходов.Организация,
	|	ПоступлениеДополнительныхРасходов.Номер,
	|	ПоступлениеДополнительныхРасходов.Дата,
	|	ПоступлениеДополнительныхРасходов.Комментарий КАК Содержание
	|ИЗ
	|	Документ.ПоступлениеДополнительныхРасходов КАК ПоступлениеДополнительныхРасходов
	|ГДЕ
	|	ПоступлениеДополнительныхРасходов.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";

	// Выведем шапку документа.
	СведенияОбОрганизации = СведенияОЮрФизЛице(Док.Организация, "",Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ОписаниеОрганизации(СведенияОбОрганизации);
	ШапкаДокумента.Параметры.НомерДокумента = ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(ЗначениеНеЗаполнено(Ответственный), "", ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()

////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)
	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент","Не выбран контрагент.");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента","Не выбран договор контрагента.");
	СтруктураОбязательныхПолей.Вставить("СчетРасчетовСКонтрагентом","Не указан счет учета расчетов с контрагентом.");
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	//Проверяем заполнение табличной части 
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ОписаниеУслуги","Не заполнено описание услуги");
	ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "Услуги", СтруктураПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ЗаписатьПлатежиПоНДС()
	Если Услуги.Итог("СуммаНДС")=0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из ДокументыПоступления Цикл
		Если ТипЗнч(СтрокаТЧ.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ПлатежПоНДС) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.ЗачетНДС<>Перечисления.ЗачетНДС.НДСПо_ОС_НМА_НС И
			 СтрокаТЧ.ЗачетНДС<>Перечисления.ЗачетНДС.НДСВЗачетИмущество Тогда
			Продолжить;
		КонецЕсли; 
		//
		ПлатежПоНДС = ПолучитьПлатежПоНДС(СтрокаТЧ.Документ,СтрокаТЧ.Номенклатура);
		Если НЕ ЗначениеЗаполнено(ПлатежПоНДС) Тогда
			ОбъектПлатеж = Справочники.ПлатежиПоНДС.СоздатьЭлемент();
			ОбъектПлатеж.Наименование = СтрокаТЧ.Номенклатура.Наименование;
			ОбъектПлатеж.Номенклатура = СтрокаТЧ.Номенклатура;
			ОбъектПлатеж.ДокументПоступления = СтрокаТЧ.Документ;
			ОбъектПлатеж.УстановитьНовыйКод();
			ОбъектПлатеж.ДатаНачала = СтрокаТЧ.Документ.Дата;
			ОбъектПлатеж.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И ТипЗнч(СтрокаТЧ.Документ)=Тип("ДокументСсылка.ПоступлениеНоменклатурыВалютныйСписками") Тогда
				ОбъектПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;
			Если СтрокаТЧ.ЗачетНДС=Перечисления.ЗачетНДС.НДСВЗачетИмущество Тогда
				ОбъектПлатеж.КоличествоМесяцев = 36;
			ИначеЕсли СтрокаТЧ.ЗачетНДС=Перечисления.ЗачетНДС.НДСПо_ОС_НМА_НС Тогда
				ОбъектПлатеж.КоличествоМесяцев = 12;
			КонецЕсли;
			ОбъектПлатеж.ОбменДанными.Загрузка=Истина;
			ОбъектПлатеж.Записать();
			ПлатежПоНДС = ОбъектПлатеж.Ссылка;
		КонецЕсли;
		СтрокаТЧ.ПлатежПоНДС=ПлатежПоНДС;
	КонецЦикла;
	Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Функция СформироватьОписаниеПервичногоДокумента(ПервичныйДокумент)
	ПервичныйДокументСтр=сокрлп(ПервичныйДокумент);	
    Если Лев(ПервичныйДокументСтр,1)="№" или ЭтоЦифра(лев(ПервичныйДокументСтр,1)) Тогда
		Возврат "Сч.фак. "+ПервичныйДокументСтр;	
	Иначе
		Возврат ПервичныйДокументСтр;
	КонецЕсли; 
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	СуммаПоДокументу = Услуги.Итог("Сумма")+Услуги.Итог("СуммаНДС");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	Если НЕ Отказ Тогда
		ЗаписатьПлатежиПоНДС();
		ДвиженияПоБУ(Отказ,Заголовок,СтруктураШапкиДокумента);
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоБУ(Отказ,Заголовок,СтруктураШапкиДокумента)
	ПорядокУплатыНДС = ПолучитьПорядокУплатыНДС(Дата,Организация);
	ПроводкиБУ = Движения.Хозрасчетный;
	ТаблицаЗачетаНДС = СоздатьТаблицуДляУчетаНДС();
	Для Каждого СтрокаУслуги Из Услуги Цикл
		Сумма=СтрокаУслуги.Сумма;
		Остаток=Сумма;
		СуммаНДС=СтрокаУслуги.СуммаНДС;
		ОстатокНДС=СуммаНДС;
		Для Каждого Строка Из ДокументыПоступления Цикл
			Если Строка.НомерСтроки=ДокументыПоступления.Количество() Тогда
				СуммаВПроводку=Остаток;
				СуммаНДСВПроводку=ОстатокНДС;
			Иначе
				СуммаВПроводку=Окр(Сумма/ДокументыПоступления.Итог("Сумма")*Строка.Сумма,2);
				Остаток=Остаток-СуммаВПроводку;
				СуммаНДСВПроводку=Окр(СуммаНДС/ДокументыПоступления.Итог("Сумма")*Строка.Сумма,2);
				ОстатокНДС=ОстатокНДС-СуммаНДСВПроводку;
			КонецЕсли;	
			Если СуммаВПроводку<>0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = СтрокаУслуги.ОписаниеУслуги;     
				//
				Проводка.СчетДт = Строка.СчетУчета;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Строка.Номенклатура);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Строка.Склад);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,Строка.Документ);
				//
				Проводка.СчетКт = СчетРасчетовСКонтрагентом;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Контрагент);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ДоговорКонтрагента);
				Если СчетРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт = Валюта;
					Проводка.ВалютнаяСуммаКт = СуммаВПроводку; 
					Проводка.Сумма = СуммаВПроводку*Курс; 
				Иначе
					Проводка.Сумма = СуммаВПроводку; 
				КонецЕсли; 
			КонецЕсли;
			Если СуммаНДСВПроводку<>0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = СтрокаУслуги.ОписаниеУслуги;     
				//
				Если Дата<Дата('20190101') И (Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А0700) ИЛИ
											  Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.А0800)) Тогда
					Проводка.СчетДт = Строка.СчетУчета;
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Строка.Номенклатура);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Строка.Склад);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,Строка.Документ);
				ИначеЕсли Дата<Дата('20190101') Тогда
					Проводка.СчетДт = СчетУчетаАвансаПлатежа("НДС");
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиИОбязательныеПлатежи",Справочники.ПлатежиВБюджет.НДС);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтрокаУслуги.СтавкаНДС);
				ИначеЕсли ПорядокУплатыНДС = Перечисления.ПорядокУплатыНДС.Общеустановленный Тогда
					Если ТипЗнч(Строка.Номенклатура)=Тип("СправочникСсылка.НоменклатураПродаж") Тогда
						Проводка.СчетДт = СчетУчетаАвансаПлатежа("НДС");
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиИОбязательныеПлатежи",Справочники.ПлатежиВБюджет.НДС);
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтрокаУслуги.СтавкаНДС);
					ИначеЕсли Строка.ЗачетНДС=Перечисления.ЗачетНДС.НДСВЗачет Тогда
						Проводка.СчетДт = СчетУчетаАвансаПлатежа("НДС");
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиИОбязательныеПлатежи",Справочники.ПлатежиВБюджет.НДС);
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтрокаУслуги.СтавкаНДС);
					ИначеЕсли Строка.ЗачетНДС=Перечисления.ЗачетНДС.НДСПо_ОС_НМА_НС ИЛИ
							  Строка.ЗачетНДС=Перечисления.ЗачетНДС.НДСВЗачетИмущество Тогда
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А4401;
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПлатежиПоНДС",Строка.ПлатежПоНДС);
					Иначе
						Проводка.СчетДт = Строка.СчетУчета;
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Строка.Номенклатура);
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Строка.Склад);
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,Строка.Документ);
					КонецЕсли;
				Иначе
					Проводка.СчетДт = Строка.СчетУчета;
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Строка.Номенклатура);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Строка.Склад);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,Строка.Документ);
				КонецЕсли;
				//
				Проводка.СчетКт = СчетРасчетовСКонтрагентом;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Контрагент);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ДоговорКонтрагента);
				Если СчетРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт = Валюта;
					Проводка.ВалютнаяСуммаКт = СуммаНДСВПроводку; 
					Проводка.Сумма = СуммаНДСВПроводку*Курс; 
				Иначе
					Проводка.Сумма = СуммаНДСВПроводку; 
				КонецЕсли; 
			КонецЕсли; 
			////
			КурсВПроводку=?(СчетРасчетовСКонтрагентом.Валютный,Курс,1);
			Движение = ТаблицаЗачетаНДС.Добавить();
			Движение.Период				= ?(ЗначениеЗаполнено(ПриходныйДокументДата),ПриходныйДокументДата,Дата);
			Движение.Организация		= Организация;
			Движение.СчетДт				= Строка.СчетУчета;
			Движение.Получатель			= Строка.Склад;
			Движение.СчетКт				= СчетРасчетовСКонтрагентом;
			Движение.Сумма				= СуммаВПроводку*КурсВПроводку;
			Движение.СуммаНДСПоУслугам	= СуммаНДСВПроводку*КурсВПроводку;
			Движение.Поставщик			= Контрагент;
			Движение.Договор			= ДоговорКонтрагента;
			Движение.ПриходныйДокумент	= ПриходныйДокумент;
			Движение.ЗачетНДС			= Строка.ЗачетНДС;
			Движение.СтавкаНДС			= СтрокаУслуги.СтавкаНДС;
			Движение.ПорядокУплатыНДС	= ПорядокУплатыНДС;
		КонецЦикла;
	КонецЦикла; 
	Для Каждого Строка Из Движения.Хозрасчетный Цикл
		Строка.ПервичныйДокумент=СформироватьОписаниеПервичногоДокумента(ПриходныйДокумент);	
	КонецЦикла;	
	ТаблицаЗачетаНДС.Свернуть("Период,Организация,СчетДт,Получатель,СчетКт,Поставщик,Договор,ПриходныйДокумент,ЗачетНДС,СтавкаНДС,ПорядокУплатыНДС","Сумма,СуммаНДС,СуммаНДСПоУслугам,СуммаНДСПоИмпорту");
	Движения.УчетЗачетаНДС.Загрузить(ТаблицаЗачетаНДС);
	Если ЗачестьАванс Тогда
		Движения.Хозрасчетный.Записать();
		ЗачетАвансов.ВыполнитьЗакрытиеАвансов(ЭтотОбъект, СчетРасчетовСКонтрагентом, Контрагент,ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДвижениеПоУчетуНДС(СчетДт,Получатель,СчетКт,Сумма,СуммаНДС,СуммаНДСПоУслугам,Поставщик,Договор,ПриходныйДокумент,Услуга,СтавкаНДС,ПорядокУплатыНДС)
	Движение = ТаблицаЗачетаНДС.Добавить();
	Движение.Период				= ?(ЗначениеЗаполнено(ПриходныйДокументДата), ПриходныйДокументДата, Дата);
	Движение.Организация		= Организация;
	Движение.СчетДт				= СчетДт;
	Движение.Получатель			= Получатель;
	Движение.СчетКт				= СчетКт;
	Движение.Сумма				= Сумма;
	Движение.СуммаНДС			= СуммаНДС;
	Движение.СуммаНДСПоУслугам	= СуммаНДСПоУслугам;
	Движение.Поставщик			= Поставщик;
	Движение.Договор			= Договор;
	Движение.ПриходныйДокумент	= ПриходныйДокумент;
	Движение.ЗачетНДС			= ПолучитьТипЗачетаНДС(СчетДт,Услуга);
	Движение.СтавкаНДС			= СтавкаНДС;
	Движение.ПорядокУплатыНДС	= ПорядокУплатыНДС;
КонецПроцедуры
