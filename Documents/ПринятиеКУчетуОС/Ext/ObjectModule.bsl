
Перем мСтрокаРеквизитыБухУчета Экспорт;
Перем ПартионныйУчетБУ;

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("ОС1","Форма ОС-1");
КонецФункции

#Если Клиент Тогда

Процедура Печать(ИмяМакета, КоличествоЭкземпляров=1, НаПринтер=Ложь, НепосредственнаяПечать=Ложь) Экспорт
	Для каждого ТекОС из ОсновныеСредства Цикл	
		Если ИмяМакета = "ОС1" Тогда
			ТабДокумент = ПечатьОС(ТекОС);
		КонецЕсли;
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), НепосредственнаяПечать);
	КонецЦикла;
КонецПроцедуры

#КонецЕсли

Функция ПечатьОС(ТекОС)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер,
	|	ПринятиеКУчетуОС.Дата КАК Дата,
	|	ПринятиеКУчетуОС.Дата КАК ДатаВвода,
	|	ПринятиеКУчетуОС.Ответственный,
	|	ПринятиеКУчетуОС.Склад,
	|	ПринятиеКУчетуОС.СпособПоступления,
	|	ПринятиеКУчетуОС.СтоимостьБУ,
	|	ПринятиеКУчетуОС.Организация,
	|	ПринятиеКУчетуОС.СчетНачисленияАмортизацииБУ,
	|	ПринятиеКУчетуОС.ГодоваяНормаАмортизацииБУ,
	|	ПринятиеКУчетуОС.СрокПолезногоИспользованияБУ,
	|	ПринятиеКУчетуОС.СпособНачисленияАмортизацииБУ,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Наименование КАК НаименованиеОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Код КАК КодОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПринятиеКУчетуОС.МОЛБУ,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|		ПО ПринятиеКУчетуОСОсновныеСредства.Ссылка = ПринятиеКУчетуОС.Ссылка
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка
	|	И ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Ссылка = &СсылкаОС";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СсылкаОС", ТекОС.ОсновноеСредство.Ссылка);
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	
	Руководители = ОтветственныеЛица(Организация, Дата);
	ТабДокумент = Новый ТабличныйДокумент();
	МакетАктОС = ПолучитьОбщийМакет("ОС");
	ОбластьМакета = МакетАктОС.ПолучитьОбласть("Печать");
	
	ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
	ОбластьМакета.Параметры.Заполнить(Руководители);
	ОбластьМакета.Параметры.РуководительСтр = Руководители.Руководитель;
	ОбластьМакета.Параметры.ПредставлениеГода = Формат(Лев(Год(ВыборкаОС.Дата),3),"ЧГ=0");
	ОбластьМакета.Параметры.ПринялПредставление = ВыборкаОС.МОЛБУ.Наименование;
	ОбластьМакета.Параметры.ГлавныйБухгалтерПредставление = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.Организация = ВыборкаОС.Организация.Наименование;
	ОбластьМакета.Параметры.КодОКПОСтр=ВыборкаОС.Организация.КодПоОКПО;
	Сдатчик = "";
	ОбластьМакета.Параметры.Сдатчик = Сдатчик;
	ОбластьМакета.Параметры.Получатель = ВыборкаОС.ПодразделениеОрганизации.Наименование;
	ОбластьМакета.Параметры.БалансоваяСтоимость = ВыборкаОС.СтоимостьБУ;
	ОбластьМакета.Параметры.ОС = ВыборкаОС.НаименованиеОС;
	
	Если ВыборкаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка	ИЛИ
		 ВыборкаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный	ИЛИ
		 ВыборкаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
		ОбластьМакета.Параметры.СрокИспользования = ""+ВыборкаОС.СрокПолезногоИспользованияБУ+" мес";
	Иначе
		ОбластьМакета.Параметры.СрокИспользования = "";
	КонецЕсли;
	ОбластьМакета.Параметры.НачисленнаяАмортизация = 0;
	ОбластьМакета.Параметры.КоэфАмортизацииСтр = ВыборкаОС.ГодоваяНормаАмортизацииБУ;
	ОбластьМакета.Параметры.ОССчетЗатрат = ВыборкаОС.СчетНачисленияАмортизацииБУ;
	ОбластьМакета.Параметры.Код = ВыборкаОС.ИнвентарныйНомер;
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента) Экспорт
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента);
КонецПроцедуры

Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента)
	мСтрокаРеквизитыБухУчета =
	"СтоимостьБУ,
	|СчетУчетаБУВнеоборотногоАктива,
	|ОС.ИнвентарныйНомер,
	|МОЛБУ,
	|ПодразделениеОрганизации,
	|СпособПоступления,
	|ГодоваяНормаАмортизацииБУ,
	|СчетУчетаБУ,
	|СчетНачисленияАмортизацииБУ,
	|ДатаПриобретения,
	|НачислятьАмортизациюБУ
	|";
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	ОбязательныеРеквизитыШапки = "Организация";
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки+",ГруппаОС,ПодразделениеОрганизации,СчетУчетаБУ,СчетНачисленияАмортизацииБУ,СпособыОтраженияРасходовПоАмортизации"; 
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ОбъектСтроительства, СчетУчетаБУВнеоборотногоАктива, СтоимостьБУ";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПокупныеОСОборудованиеМатериалы Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "Номенклатура, СчетУчетаБУВнеоборотногоАктива";  // , Склад
	КонецЕсли;
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СчетУчетаБУ,ГодоваяНормаАмортизацииБУ,СчетНачисленияАмортизацииБУ";
	Если (НЕ СтруктураШапкиДокумента.НакопленнаяАмортизацияБУ = 0)ИЛИ(НЕ СтруктураШапкиДокумента.ПереоценкаБУ = 0) Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "КорСчетИзнос";
	КонецЕсли; 
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт
	РеквизитыТабОС = "ОсновноеСредство";
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,"ОсновныеСредства",Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, ДатаОплаты, СуммаОплаты");
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС,  Отказ, Заголовок)
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПокупныеОСОборудованиеМатериалы Тогда
		ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Дата,
		|			Счет = &Счет,
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Субконто1
		|				"+?(Склад.Пустая(),"","И Субконто2 = &Субконто2")+") КАК ХозрасчетныйОстатки";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Субконто1",Номенклатура);
		Запрос.УстановитьПараметр("Субконто2",Склад);
		Запрос.УстановитьПараметр("Дата",КонецДня(Дата));
		Запрос.УстановитьПараметр("Счет",СчетУчетаБУВнеоборотногоАктива);
		
		тзОстатки=Запрос.Выполнить().Выгрузить();
		Если тзОстатки.итог("Количество")=0 Тогда
			Отказ=истина;
			Сообщить("Нет остатков материала """+Номенклатура+""", счет учета "+СчетУчетаБУВнеоборотногоАктива.Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Возврат;
		ИначеЕсли тзОстатки.итог("Количество")< ОсновныеСредства.Количество() Тогда
			Отказ=истина;
			Сообщить("Недостаточно остатков номенклатуры ("+Номенклатура.Код+") """+Номенклатура+""", счет учета "+СчетУчетаБУВнеоборотногоАктива.Код+", склад """+Склад.Наименование+"""",СтатусСообщения.Важное);
			Сообщить("В остатке: "+Строка(тзОстатки.итог("Количество"))+" "+Номенклатура.БазоваяЕдиницаИзмерения,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли; 
		
		Цена=СтоимостьБУ;
		Если ВключатьНакопленнуюАмортизациюВСтоимостьБУ Тогда
			Цена = Цена + НакопленнаяАмортизацияБУ;
		КонецЕсли; 
		Если ВключатьПереоценкуВСтоимостьБУ Тогда
			Цена = Цена + ПереоценкаБУ;
		КонецЕсли; 
		
		Для каждого Строка Из ОсновныеСредства Цикл
			ПроводкиБУ = Движения.Хозрасчетный;
			//
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание	 = "";
			//
			Проводка.СчетДт = СчетУчетаБУ;
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Строка.ОсновноеСредство);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ПодразделениеОрганизации);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,МОЛБУ);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,ГруппаОС);
			//
			Проводка.СчетКт = СчетУчетаБУВнеоборотногоАктива;
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Номенклатура);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Склад);
			Проводка.КоличествоКт = 1;
			//
			Проводка.Сумма = Цена;
			////
			Если НакопленнаяАмортизацияБУ<>0 Тогда
				// Ввод начисленной амортизации.
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Накопленная амортизация по ОС";
				//
				Проводка.СчетДт = КорСчетИзнос;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,КорСубконтоИзнос1);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,КорСубконтоИзнос2);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,КорСубконтоИзнос3);
				//
				Проводка.СчетКт = СчетНачисленияАмортизацииБУ;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",Строка.ОсновноеСредство);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Подразделения",ПодразделениеОрганизации);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"МОЛ",МОЛБУ);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ГруппыОС",ГруппаОС);
				//
				Проводка.Сумма = НакопленнаяАмортизацияБУ;
			КонецЕсли; 
			
			Если ПереоценкаБУ<>0 Тогда
				// Ввод начисленной амортизации.
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Переоценка ОС";
				//
				Проводка.СчетДт = КорСчетИзнос;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,КорСубконтоИзнос1);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,КорСубконтоИзнос2);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,КорСубконтоИзнос3);
				//
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А8510;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",Строка.ОсновноеСредство);
				//
				Проводка.Сумма = ПереоценкаБУ;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ДвиженияПоСписаниюОтсроченногоЗачетаНДС();
	КонецЕсли;
	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС,  Отказ, Заголовок);
КонецПроцедуры

Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ)
	НомСтр   = 0;
	ДатаДока = Дата;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки КАК НомерСтроки,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Организация КАК Организация,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура КАК Номенклатура,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Склад КАК Склад,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчетаБУВнеоборотногоАктива КАК СчетУчетаБУ,
	|	&ПустойДоговор КАК ДоговорКонтрагента,
	|	1 КАК Количество,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчетаБУ КАК КорСчетСписанияБУ,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК КорСубконтоСписанияБУ1,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ПринятиеКУчетуОСОсновныеСредства.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	0 КАК КоэффОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ПринятиеКУчетуОС.МОЛБУ КАК КорСубконтоСписанияБУ3,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК КорСубконтоСписанияБУ2
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|		ПО ПринятиеКУчетуОСОсновныеСредства.Ссылка = ПринятиеКУчетуОС.Ссылка
	|ГДЕ
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка";
		
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоОС = Результат.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Регистратор");
	ТаблицаПоОС.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	ТаблицаПоОС.Колонки.Добавить("СчетДоходовБУ");

	СодержаниеПроводок = "Принят к учету объект ОС";
КонецПроцедуры

Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС,  Отказ, Заголовок)
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма",    ПолучитьОписаниеТиповЧисла(15,2));
	
	ПроводкиБУ = Движения.Хозрасчетный;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПокупныеОСОборудованиеМатериалы Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма       = СтруктураШапкиДокумента.СтоимостьБУ;
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма       = СтруктураШапкиДокумента.СтоимостьБУ;
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма       = СтруктураШапкиДокумента.СтоимостьБУ;
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма       = СтруктураШапкиДокумента.СтоимостьБУ;
		КонецЦикла;
	КонецЕсли;
	
	ГрафикиАмортизации     = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	МестонахождениеОС      = Движения.МестонахождениеОСБухгалтерскийУчет;
	НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизации  = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	СостояниеОС            = Движения.СостоянияОСОрганизацийБухгалтерскийУчет;
	ОперацииОС             = Движения.СобытияОСОрганизацийБухгалтерскийУчет;
	СчетаУчетаОС           = Движения.СчетаБухгалтерскогоУчетаОС;
	ЛьготныеОС             = Движения.ЛьготныеОсновныеСредства;
	ЛизинговыеОС           = Движения.ЛизинговыеОсновныеСредства;
	
	Для Каждого Строка Из ТЗДанныеОС Цикл
		ТекОС = Строка.ОбъектУчета;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			Если Строка.Сумма>0 Тогда
				Для каждого СтрокаСтроительныеЗатраты Из СтроительныеЗатраты Цикл
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Принят к учету объект ОС";
					//
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаБУ;
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ТекОС);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"МОЛ",МОЛБУ);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Подразделения",ПодразделениеОрганизации);
					УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,ГруппаОС);
					//
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
					УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОбъектыСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства);
					УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтроительныеЗатраты",СтрокаСтроительныеЗатраты.СтроительныеЗатраты);
					//
					Проводка.Сумма = СтрокаСтроительныеЗатраты.Сумма;
					////
					Если СтрокаСтроительныеЗатраты.Переоценка<>0 Тогда
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Принят к учету объект ОС";
						//
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А8512;
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОбъектыСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства);
						УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтроительныеЗатраты",СтрокаСтроительныеЗатраты.СтроительныеЗатраты);
						//
						Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А8510;
						УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",ТекОС);
						//
						Проводка.Сумма = СтрокаСтроительныеЗатраты.Переоценка;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПокупныеОСОборудованиеМатериалы Тогда
			//Проводка сформирована движениями по партиям
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
			Если Строка.Сумма>0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Принят к учету объект ОС";
				//
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаБУ;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ТекОС);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"МОЛ",МОЛБУ);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Подразделения",ПодразделениеОрганизации);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,ГруппаОС);
				//
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А9710;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрочиеДоходыИРасходы",СтруктураШапкиДокумента.СтатьяДоходов);
				//
				Проводка.Сумма = Строка.Сумма;
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
			Если Строка.Сумма>0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Принят к учету объект ОС";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаБУ;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ТекОС);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"МОЛ",МОЛБУ);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Подразделения",ПодразделениеОрганизации);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,ГруппаОС);
				//
				Проводка.СчетКт = СчетКт;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоКт1);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СубконтоКт2);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СубконтоКт3);
		    	Если СчетКт.Количественный Тогда
					Проводка.КоличествоКт = 1;	
				КонецЕсли;
				//
				Проводка.Сумма = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
		// Движения по регистру СостоянияОСОрганизацийБухгалтерскийУчет
		Движение = СостояниеОС.Добавить();
		Движение.ДатаСостояния        = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Состояние            = Перечисления.СостоянияОС.ПринятоКУчету;
		//
		Движение = СостояниеОС.Добавить();
		Движение.ДатаСостояния    = ДатаДока;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		// Движения по регистру СобытияОСОрганизацийБухгалтерскийУчет
		Движение = ОперацииОС.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.Событие           = СтруктураШапкиДокумента.ОперацияСОбъектамиОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		// Движения по регистру ПервоначальныеСведенияОбОсновныхСредствах
		Движение = ПервоначальныеСведения.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.Организация                 = ТекОрганизация;
		Движение.ПервоначальнаяСтоимость     = Строка.Сумма;
		Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
		Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
		//Движение.ПроизводственнаяГруппа      = СтруктураШапкиДокумента.ПроизводственнаяГруппа;
		Движение.ГруппаОС                    = СтруктураШапкиДокумента.ГруппаОС;
		Движение.ПротивопожарныеОС           = СтруктураШапкиДокумента.Противопожарные;
		Движение.ОСПоОхранеОкружающейСреды   = СтруктураШапкиДокумента.ОСПоОхранеОкружающейСреды;
		Движение.Состояние                   = СтруктураШапкиДокумента.Состояние;
		Движение.ГруппаОборудования          = СтруктураШапкиДокумента.ГруппаОборудования;
		ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");
		// Движения по регистру МестонахождениеОсновныхСредств
		Движение = МестонахождениеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Местонахождение      = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Движение.МОЛ                  = СтруктураШапкиДокумента.МОЛБУ;
		Движение.МестонахождениеОСДляГНИ  = СтруктураШапкиДокумента.МестонахождениеОСДляГНИ;
		
		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизации.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
		// Движения по регистру СчетаБухгалтерскогоУчетаОС
		Движение = СчетаУчетаОС.Добавить();
		Движение.Период                    = ДатаДока;
		Движение.ОсновноеСредство          = ТекОС;
		Движение.Организация               = ТекОрганизация;
		Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчетаБУ;
		Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
		// Движения по регистру СпособыОтраженияРасходовПоАмортизации
		Движение = НаправлениеАмортизации.Добавить();
		Движение.Период                                = ДатаДока;
		Движение.ОсновноеСредство                      = ТекОС;
		Движение.Организация                           = ТекОрганизация;
		Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
		// Движения по регистру ПараметрыАмортизации
		Движение = ПараметрыАмортизации.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.КоэффициентАмортизации                      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииБУ;
		Движение.КорректирующийКоэффициент                   = СтруктураШапкиДокумента.КорректирующийКоэффициент;
		Движение.ПараметрВыработкиОС                         = СтруктураШапкиДокумента.ПараметрВыработкиОС;
		Движение.СтоимостьДляВычисленияАмортизации           = Строка.Сумма;
		// Движения по регистру ЛьготныеОсновныеСредства
		Движение = ЛьготныеОС.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.Льгота                                      = СтруктураШапкиДокумента.Льгота;
		// Движения по регистру ЛизинговыеОсновныеСредства
		Движение = ЛизинговыеОС.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.Лизинг                                      = СтруктураШапкиДокумента.Лизинг;
		Движение.СрокМесяцев                                 = СтруктураШапкиДокумента.ЛизингСрокМесяцев;
	КонецЦикла;
	ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, СостояниеОС, Отказ, Заголовок);

	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма",                    ПолучитьОписаниеТиповЧисла(18,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаКапитальныхВложений", ПолучитьОписаниеТиповЧисла(18,2));
КонецПроцедуры

Процедура ДвиженияПоСписаниюОтсроченногоЗачетаНДС()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.А4402),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &ОбъектСтроительства) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ОбъектСтроительства",ОбъектСтроительства);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПлатежПоНДС = ПолучитьПлатежПоНДС(Ссылка,ОбъектСтроительства);
		Если ЗначениеЗаполнено(ПлатежПоНДС) Тогда
			ОбъектПлатеж = ПлатежПоНДС.ПолучитьОбъект();
		Иначе
			ОбъектПлатеж = Справочники.ПлатежиПоНДС.СоздатьЭлемент();
			ОбъектПлатеж.Наименование = ОбъектСтроительства.Наименование;
			ОбъектПлатеж.Номенклатура = ОбъектСтроительства;
			ОбъектПлатеж.ДокументПоступления = Ссылка;
			ОбъектПлатеж.УстановитьНовыйКод();
		КонецЕсли;
		ОбъектПлатеж.ДатаНачала = Дата;
		ОбъектПлатеж.СтавкаНДС = УстановитьСтавкуНДС(ОбъектСтроительства,Дата,Организация);
		ОбъектПлатеж.КоличествоМесяцев = 36;
		ОбъектПлатеж.ОбменДанными.Загрузка=Истина;
		ОбъектПлатеж.Записать();
		ПлатежПоНДС=ОбъектПлатеж.Ссылка;
		//
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "";     
		//
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А4401;
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПлатежиПоНДС",ПлатежПоНДС);
		Проводка.КоличествоДт = 1;
		//
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А4402;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОбъектыСтроительства",ОбъектСтроительства);
		//
		Проводка.Сумма = Выборка.СуммаОстаток; 
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если Оплата.Количество() > 0 Тогда
		КоличествоСтрок = Оплата.Количество();
		Для Счетчик = 1 По КоличествоСтрок Цикл
			Строка = Оплата[КоличествоСтрок - Счетчик];
			Если ОсновныеСредства.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
				Оплата.Удалить(КоличествоСтрок-Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	Заголовок = "";
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента);
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");
	РезультатЗапросаПоОС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС,  Отказ, Заголовок);
        глДанныеОбОСРассчитаны = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	глДанныеОбОСРассчитаны = Ложь;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя принять к учету группу основных средств", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 
		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;
	КонецЕсли;
КонецПроцедуры
