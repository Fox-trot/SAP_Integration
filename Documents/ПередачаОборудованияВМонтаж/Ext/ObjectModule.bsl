Перем мВалютаРегламентированногоУчета Экспорт;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СчетУчетаБУОбъектаСтроительства,
								|Оборудование.СчетУчетаБУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС15()

	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОборудованияВМонтаж_ОС15";
	Макет       = ПолучитьМакет("ОС15");

	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Оборот        = Макет.ПолучитьОбласть("ОборотнаяСторона");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Дата                           КАК ДатаДокумента,
	|	Номер                          КАК НомерДокумента,
	|	ОбъектСтроительства            КАК ОбъектВнеоборотныхАктивов,
	|	СтатьяЗатрат,
	|	Склад,
	|	Склад.Представление КАК СкладПредставление
	|
	|ИЗ
	|	Документ.ПередачаОборудованияВМонтаж КАК ПередачаОборудованияВМонтаж
	|
	|ГДЕ
	|	Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	Шапка.Параметры.НомерДокумента=ПолучитьНомерНаПечать(ЭтотОбъект);
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.Вывести(ШапкаТаблицы);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"	, ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Вид"		, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	    	    	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйСубконто.Значение.НаименованиеПолное КАК ОборудованиеНаименование,
		|	ХозрасчетныйСубконто.Значение КАК Оборудование,
		|	Хозрасчетный.Сумма КАК СтоимостьВсего,
		|	Хозрасчетный.КоличествоКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
		|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
		|
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка И
		|	(Хозрасчетный.Активность) И
		|	ХозрасчетныйСубконто.Вид = &Вид";
	ВыборкаПоОборудованию = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОборудованию.Следующий() Цикл

		Если ВыборкаПоОборудованию.Количество = 0 
		 ИЛИ ВыборкаПоОборудованию.Количество = Null Тогда
			Количество = 1;
		Иначе
			Количество = ВыборкаПоОборудованию.Количество;
		КонецЕсли;

		СтрокаТаблицы.Параметры.Заполнить(ВыборкаПоОборудованию);
		СтрокаТаблицы.Параметры.СтоимостьЕдиницы = ВыборкаПоОборудованию.СтоимостьВсего / Количество;

		ТабДокумент.Вывести(СтрокаТаблицы);

	Конеццикла;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	Оборот.Параметры.Заполнить(ВыборкаПоШапке);
	ТабДокумент.Вывести(Оборот);

	Возврат ТабДокумент;

КонецФункции // ПечатьОС15()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "ОС15" тогда
		// Унифицированная форма М-4 (Акт о приеме оборудования)
		ТабДокумент = ПечатьОС15();
		
	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Передача оборудования в монтаж"), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС15","Форма ОС-15");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация,ОбъектСтроительства, СтатьяЗатрат, Склад,СчетУчетаБУОбъектаСтроительства";

	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, , СтруктураШапкиДокумента);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "Номенклатура,Количество,СчетУчетаБУ"; //через запятую

	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Оборудование", СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

Процедура ДвиженияПоРегистрам(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&ПустойДоговор КАК ДоговорКонтрагента,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.СчетУчетаБУОбъектаСтроительства КАК КорСчетСписанияБУ,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.ОбъектСтроительства КАК КорСубконтоСписанияБУ1,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.СтатьяЗатрат КАК КорСубконтоСписанияБУ2,
	|	&СпособСтроительства КАК КорСубконтоСписанияБУ3,
	|	&НомерЖурнала КАК НомерЖурналаБУ,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ПередачаОборудованияВМонтажОборудование.Номенклатура,
	|	ПередачаОборудованияВМонтажОборудование.Количество КАК Количество,
	|	ПередачаОборудованияВМонтажОборудование.НомерСтроки,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.Организация,
	|	0 КАК КоэффОплаты,
	|	ПередачаОборудованияВМонтажОборудование.Ссылка.Склад,
	|	ПередачаОборудованияВМонтажОборудование.СчетУчетаБУ КАК СчетУчетаБУ,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования
	|ИЗ
	|	Документ.ПередачаОборудованияВМонтаж.Оборудование КАК ПередачаОборудованияВМонтажОборудование
	|
	|ГДЕ
	|	ПередачаОборудованияВМонтажОборудование.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("СпособСтроительства",Перечисления.СпособыСтроительства.Подрядный);
	Запрос.УстановитьПараметр("НомерЖурнала","ОС");
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	ТаблицаДвижений.Колонки.Добавить("Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект,"Регистратор");
	ТаблицаДвижений.Колонки.Добавить("СчетДоходовБУ");

	ДвижениеПартийТоваров(ТаблицаДвижений, СтруктураШапкиДокумента.ОтражатьПоБУ, , Отказ);
	
	// Отразим перемещение НДС на отдельный субсчет и списание по партиям НДС
	//ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	//ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	//// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	//СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	//Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
	//	ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	//КонецЕсли;

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество",   "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");

	РезультатЗапросаПоТЧ = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);
	ТаблицаПоТоварам     = РезультатЗапросаПоТЧ.Выгрузить();

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
