// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мДокументОснование       Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)
Перем мВалютаРегламентированногоУчета Экспорт;

//#Если Клиент Тогда

Функция ПолучитьЗапрос()
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПеремещениеНоменклатурыПродажНоменклатура.Номенклатура,
	|	ПеремещениеНоменклатурыПродажНоменклатура.Количество,
	|	ПеремещениеНоменклатурыПродажНоменклатура.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПеремещениеНоменклатурыПродажНоменклатура.Количество <> 0
	|			ТОГДА ПеремещениеНоменклатурыПродажНоменклатура.Сумма / ПеремещениеНоменклатурыПродажНоменклатура.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ПеремещениеНоменклатурыПродажНоменклатура.Количество <> 0
	|			ТОГДА (ПеремещениеНоменклатурыПродажНоменклатура.Сумма + ПеремещениеНоменклатурыПродажНоменклатура.СуммаНаценки) / ПеремещениеНоменклатурыПродажНоменклатура.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаСНаценкой,
	|	ПеремещениеНоменклатурыПродажНоменклатура.Сумма + ПеремещениеНоменклатурыПродажНоменклатура.СуммаНаценки КАК СуммаСНаценкой,
	|	ПеремещениеНоменклатурыПродажНоменклатура.Номенклатура.Код,
	|	ПеремещениеНоменклатурыПродажНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ПеремещениеНоменклатурыПродажНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ПеремещениеНоменклатурыПродаж.Номенклатура КАК ПеремещениеНоменклатурыПродажНоменклатура
	|ГДЕ
	|	ПеремещениеНоменклатурыПродажНоменклатура.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаСНаценкой)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПечатьНакладная()

	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Накладная");
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Номер = ПолучитьНомерНаПечать(ЭтотОбъект);
	Область.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	Область.Параметры.Организация = Организация;
	Область.Параметры.Склад = Склад;
	Область.Параметры.СкладПолучатель = СкладПолучатель;
	//Область.Параметры.Руководитель = Руководители.РуководительПредставление;
	
	ТабДок.Вывести(Область);
	
	Результат=ПолучитьЗапрос();
	
	ВыборкаОбщие=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщие.Следующий();
	
	
	Область = Макет.ПолучитьОбласть("Строка");
	
	
	ВыборкаДетали=ВыборкаОбщие.Выбрать();
	
	
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(Область);
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(ВыборкаОбщие);
	
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;

	Возврат ТабДок;

КонецФункции // ПечатьМ11()

Функция ПечатьТребованиеНакладная()

	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ТребованиеНакладная");
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Номер = ПолучитьНомерНаПечать(ЭтотОбъект);
	Область.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	Область.Параметры.Организация = Организация;
	
	Область.Параметры.Склад = Склад;
	Область.Параметры.СкладМОЛ = ФИОСотрудника(Склад.МОЛ);
	
	Область.Параметры.СкладПолучатель = СкладПолучатель;
	Область.Параметры.СкладПолучательМОЛ = ФИОСотрудника(СкладПолучатель.МОЛ);
	
	//Область.Параметры.Руководитель = Руководители.РуководительПредставление;
	
	ТабДок.Вывести(Область);
	
	Результат=ПолучитьЗапрос();
	
	ВыборкаОбщие=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщие.Следующий();
	
	
	Область = Макет.ПолучитьОбласть("Строка");
	
	
	ВыборкаДетали=ВыборкаОбщие.Выбрать();
	
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(Область);
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(ВыборкаОбщие);
	
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;

	Возврат ТабДок;

КонецФункции // ПечатьМ11()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьНакладная();
	ИначеЕсли      ИмяМакета = "ТребованиеНакладная" Тогда
		ТабДокумент = ПечатьТребованиеНакладная();
	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(Ссылка), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ТребованиеНакладная,Накладная","Требование-накладная","Накладная");
                                                             
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	КоэффОплаты      = 1;
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   							"КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	

	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ДвиженияПоРегистрамПоУказаннойСтоимости(РежимПроведения,  Отказ, Заголовок, СтруктураШапкиДокумента)

	ПроверитьОстаткиНоменклатурыПродаж(Отказ,ЭтотОбъект,Номенклатура, Склад,Организация,"Счет");
	ДвиженияПоБУПоУказаннойСтоимости(РежимПроведения, Отказ, Заголовок ,СтруктураШапкиДокумента);

КонецПроцедуры

Процедура ДвиженияПоБУПоУказаннойСтоимости(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Счет2830=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2830");
	Счет2920=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2920");
	Счет2980=ПланыСчетов.Хозрасчетный.НайтиПоКоду("2980");
	
	УчетТоваровВРозницеПоНаименованиям=Константы.УчетТоваровВРозницеПоНаименованиям.Получить();
	
	Для Каждого СтрокаНоменклатуры Из Номенклатура Цикл
		
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание = ?(ПолучательВТаблице,"Тр. №"+СтрокаНоменклатуры.Требование,"");     
		
		Если ПеремещениеВРозницу Тогда
			
			Проводка.СчетДт     =  Счет2920;
			
			Если УчетТоваровВРозницеПоНаименованиям Тогда
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаНоменклатуры.Номенклатура);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
				Проводка.КоличествоДт = СтрокаНоменклатуры.Количество;
			Иначе
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
			КонецЕсли;
		
		ИначеЕсли НаКомиссию Тогда
			Проводка.СчетДт     =  Счет2830;
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаНоменклатуры.Номенклатура);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
			Проводка.КоличествоДт = СтрокаНоменклатуры.Количество;
		Иначе
			Проводка.СчетДт     =  СтрокаНоменклатуры.СчетДебет;
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаНоменклатуры.Номенклатура);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
			Проводка.КоличествоДт = СтрокаНоменклатуры.Количество;
		КонецЕсли;
		
		Проводка.СчетКт     =  СтрокаНоменклатуры.Счет;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаНоменклатуры.Номенклатура);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Склад);
		Проводка.КоличествоКт = СтрокаНоменклатуры.Количество;
		
		Проводка.Сумма = СтрокаНоменклатуры.Сумма; 
		
		Если ПеремещениеВРозницу Тогда
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание = ?(ПолучательВТаблице,"Тр. №"+СтрокаНоменклатуры.Требование,"");     
			
			Если УчетТоваровВРозницеПоНаименованиям Тогда
				Проводка.СчетДт     =  Счет2920;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаНоменклатуры.Номенклатура);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
				
				Проводка.СчетКт     =  Счет2980;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаНоменклатуры.Номенклатура);
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
				Проводка.КоличествоКт = СтрокаНоменклатуры.Количество;
			Иначе
				Проводка.СчетДт     =  Счет2920;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
				
				Проводка.СчетКт     =  Счет2980;
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,?(ПолучательВТаблице,СтрокаНоменклатуры.СкладПолучатель,СкладПолучатель));
			КонецЕсли;
			
			
			Проводка.Сумма = СтрокаНоменклатуры.СуммаНаценки; 
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрамПоУказаннойСтоимости(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Склад","Не выбран склад.");
	Если НЕ ПолучательВТаблице Тогда
		СтруктураОбязательныхПолей.Вставить("СкладПолучатель","Не выбран получатель.");
	КонецЕсли;
	

	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверяем заполнение табличной части 
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура","Не выбрана номенклатура");
	
	СтруктураПолей.Вставить("Счет","Не указан счет учета номенклатуры");
	Если не НаКомиссию и не ПеремещениеВРозницу тогда
		СтруктураПолей.Вставить("СчетДебет","Не указан счет дебет");
	КонецЕсли;
	
	Если ПолучательВТаблице Тогда
		СтруктураПолей.Вставить("СкладПолучатель","Не выбран получатель.");
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "Номенклатура", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СписыватьПоУказаннойСтоимости Тогда
		СуммаПоДокументу = Номенклатура.Итог("Сумма");
	Иначе	
		СуммаПоДокументу = 0;
	КонецЕсли; 
	
	КоличествоПоДокументу=Номенклатура.Итог("Количество");
	ПоказыватьТекущиеОстатки=ложь;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		УдалитьСтрокиСНулевымКоличеством(ЭтотОбъект,"Номенклатура");
		
	КонецЕсли;	

	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьТаблицуПоЦенам() Экспорт
	Для каждого Строка Из Номенклатура Цикл
		Строка.Сумма=Строка.Номенклатура.Цена*Строка.Количество;
	КонецЦикла; 
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();