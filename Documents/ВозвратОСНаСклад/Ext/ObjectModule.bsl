// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБУ Экспорт; // (Регл)
Перем ТабЗатрат;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция возращает параметры ОС
	//
	Функция ПолучитьПробегАвто(ОбъектОС, НачДата, КонДата)
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
		|	ВыработкаОС.ПараметрВыработки,
		|	ВыработкаОС.КоличествоОборот КАК Пробег
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонДата, ОсновноеСредство = &ОС и Организация = &Организация) КАК РегСведенияОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
		|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("ОС", ОбъектОС);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		РезультатЗапроса.Следующий();
		
		Возврат РезультатЗапроса.Пробег;
		
	КонецФункции // ПолучитьПробегАвто()
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьСписаниеОС()
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СписаниеОС.Номер						  КАК НомерДок,
		|	СписаниеОС.Дата							  КАК ДатаДок,
		|	СписаниеОС.СобытиеОС					  КАК Состояние,
		|	СписаниеОС.ПричинаСписания 				  КАК ПричинаСписания,
		|	СписаниеОС.Организация   				  КАК Организация,
		|	СписаниеОС.Организация.КодПоОКПО		  КАК КодОКПО
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|
		|ГДЕ
		|	СписаниеОС.Ссылка = &Ссылка";
		СтруктураДока = Запрос.Выполнить().Выбрать();
		СтруктураДока.Следующий();
		
		СведенияОбОрганизации    = СведенияОЮрФизЛице(СтруктураДока.Организация, "", СтруктураДока.ДатаДок);
		ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		ОтветственныеЛица        = ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратОСНаСкладОС.НомерСтроки КАК НП,
		|	ВозвратОСНаСкладОС.ОсновноеСредство КАК ОС,
		|	ВозвратОСНаСкладОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ВозвратОСНаСкладОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ВозвратОСНаСкладОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
		|	ВозвратОСНаСкладОС.АмортизацияБУ КАК НачАмортизация,
		|	ВозвратОСНаСкладОС.СтоимостьБУ КАК Стоимость,
		|	ВозвратОСНаСкладОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость КАК НачСтоимость,
		|	ВозвратОСНаСкладОС.ОсновноеСредство.ИнвентарныйНомер КАК ИнвНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
		|	ВозвратОСНаСкладОС.ПодразделениеБУ КАК Подразделение,
		|	ВозвратОСНаСкладОС.МОЛБУ,
		|	ВозвратОСНаСкладОС.ГруппаОС КАК Группа
		|ИЗ
		|	Документ.ВозвратОСНаСклад.ОС КАК ВозвратОСНаСкладОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
		|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ВозвратОСНаСкладОС.Ссылка = &Ссылка";
		ВыборкаОС = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаОС.Количество() = 1 Тогда
			
			ВыборкаОС.Следующий();
			
			Макет = ПолучитьМакет("ОС4");
			
			Область = Макет.ПолучитьОбласть("Заголовок");
			Область.Параметры.Заполнить(СтруктураДока);
			Область.Параметры.НомерДок=ПолучитьНомерНаПечать(ЭтотОбъект);
			Область.Параметры.Организация = ПредставлениеОрганизации;
			
			//Область.Параметры.Заполнить(ВыборкаОС);
			//Если ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) тогда
				Область.Параметры["НаимОС"] = ВыборкаОС.ОС.Наименование+", код: "+ВыборкаОС.ОС.Код;
			//КонецЕслИ;
			
			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";
			
			ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
			ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);
			
			//Область.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; // это в месяцах - по 30 дней
			
			СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			ВыборкаОС.НачСтоимость,
			ВыборкаОС.Стоимость);
			
			АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			0,
			ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
			
			Область.Параметры.ГодВыпуска     = ?(НЕ ЗначениеНеЗаполнено(ВыборкаОС.ГодВыпуска), Год(ВыборкаОС.ГодВыпуска), 0);
			Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
			Область.Параметры.НачСтоимость   = СтоимостьОС;
			Область.Параметры.НачАмортизация = АмортизацияОС;
			Область.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
			Область.Параметры.Подразделение   = ВыборкаОС.Подразделение;
			
			Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
			Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
			
			
			//Область.Параметры.ПредседательКомиссии = ФИОСотрудника(ПредседательКомиссии,Дата);
			//Область.Параметры.ЧленКомиссии1 = ФИОСотрудника(ЧленКомиссии1,Дата);
			//Область.Параметры.ЧленКомиссии2 = ФИОСотрудника(ЧленКомиссии2,Дата);
			//Область.Параметры.ЧленКомиссии3 = ФИОСотрудника(ЧленКомиссии3,Дата);
			//
			//Область.Параметры.ДолжностьПредседателя = ДолжностьСотрудника(ПредседательКомиссии,Дата);
			//Область.Параметры.ДолжностьЧК1 = ДолжностьСотрудника(ЧленКомиссии1,Дата);
			//Область.Параметры.ДолжностьЧК2 = ДолжностьСотрудника(ЧленКомиссии2,Дата);
			//Область.Параметры.ДолжностьЧК3 = ДолжностьСотрудника(ЧленКомиссии3,Дата);

	
			ТабДокумент.Вывести(Область);
			
		Иначе
			
			Макет  = ПолучитьМакет("ОС4б");
			
			Шапка = Макет.ПолучитьОбласть("Шапка0");
			Шапка.Параметры.Заполнить(СтруктураДока);
			Шапка.Параметры.Организация           = ПредставлениеОрганизации;
			Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
			Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
			Шапка.Параметры.НомерДок=ПолучитьНомерНаПечать(ЭтотОбъект);
			
			ТабДокумент.Вывести(Шапка);
			
			Шапка = Макет.ПолучитьОбласть("Шапка1");
			Шапка.Параметры.Заполнить(СтруктураДока);
			ТабДокумент.Вывести(Шапка);
			
			Строка1 = Макет.ПолучитьОбласть("Строка1");
			
			Пока ВыборкаОС.Следующий() Цикл
				
				//Строка1.Параметры.Заполнить(ВыборкаОС);
				//Если ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) Тогда
					Строка1.Параметры["НаимОС"] = ВыборкаОС.ОС.Наименование+", код: "+ВыборкаОС.ОС.Код;
				//КонецЕсли;
				
				СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				ВыборкаОС.НачСтоимость,
				ВыборкаОС.Стоимость);
				
				АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				0,
				ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
				
				Строка1.Параметры.Заполнить(СтруктураДока);
				Строка1.Параметры.НачСтоимость   = СтоимостьОС;
				Строка1.Параметры.НачАмортизация = АмортизацияОС;
				Строка1.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
				
				Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;
				
				ДокументПринятияКУчету     = "";
				ДокументВводаВЭксплуатацию = "";
				ПринятоКУчету              = "";
				ВведеноВЭксплуатацию       = "";
				
				ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
				ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);
				
				//Если ВведеноВЭксплуатацию = Неопределено Тогда
				//	
				//	Строка1.Параметры.СрокЭкспл = 0;
				//	
				//Иначе
				//	
				//	КоличествоЛет     = Год(Дата) - Год(ВведеноВЭксплуатацию);
				//	КоличествоМесяцев = Месяц(Дата) - Месяц(ВведеноВЭксплуатацию);
				//	
				//	Строка1.Параметры.СрокЭкспл = КоличествоЛет * 12 + КоличествоМесяцев;
				//	
				//КонецЕсли;
				
				ТабДокумент.Вывести(Строка1);
				
			КонецЦикла;
			
			Шапка = Макет.ПолучитьОбласть("Шапка2");
			Шапка.Параметры.Заполнить(СтруктураДока);
			
			//Шапка.Параметры.ПредседательКомиссии = ФИОСотрудника(ПредседательКомиссии,Дата);
			//Шапка.Параметры.ЧленКомиссии1 = ФИОСотрудника(ЧленКомиссии1,Дата);
			//Шапка.Параметры.ЧленКомиссии2 = ФИОСотрудника(ЧленКомиссии2,Дата);
			//Шапка.Параметры.ЧленКомиссии3 = ФИОСотрудника(ЧленКомиссии3,Дата);
			//
			//Шапка.Параметры.ДолжностьПредседателя = ДолжностьСотрудника(ПредседательКомиссии,Дата);
			//Шапка.Параметры.ДолжностьЧК1 = ДолжностьСотрудника(ЧленКомиссии1,Дата);
			//Шапка.Параметры.ДолжностьЧК2 = ДолжностьСотрудника(ЧленКомиссии2,Дата);
			//Шапка.Параметры.ДолжностьЧК3 = ДолжностьСотрудника(ЧленКомиссии3,Дата);


			
			Шапка.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			
			ТабДокумент.Вывести(Шапка);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС4" Тогда
			
			ТабДокумент = ПечатьСписаниеОС();
			
		КонецЕсли; 
		
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС4","ОС-4");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	мСтрокаРеквизитыБУ = "СпособУчетаРасходовБУ, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ"; 
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";
	
	НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБУ,  ,СтруктураШапкиДокумента);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБУ, "ОС", СтруктураШапкиДокумента);
	
	РеквизитыТабОС = "ОсновноеСредство,Номенклатура,Склад"; //через запятую
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		
		Если НЕ СтрокаОС.ОтражалосьПоБУ Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете  по указанной организации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчетаБУ Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета (БУ) в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.Направление_БУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	НомерЖурнала   = "ОС";
	
	СостояниеОСБУ             = Движения.СостоянияОСОрганизацийБухгалтерскийУчет;
	СобытияОСБУ               = Движения.СобытияОСОрганизацийБухгалтерскийУчет;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ПроводкиБУ              = Движения.Хозрасчетный;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	ТабАмортизации.Колонки.Добавить("МОЛ");
	ТабАмортизации.Колонки.Добавить("Подразделение");
	ТабАмортизации.Колонки.Добавить("ГруппаОС");
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		//Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		//   И СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
		
		НоваяСтрока = ТабАмортизации.Добавить();
		
		НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцБУ;
		НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
		НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
		НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
		НоваяСтрока.МОЛ                    = СтрокаОС.МОЛБУ;
		НоваяСтрока.Подразделение          = СтрокаОС.ПодразделениеБУ;
		НоваяСтрока.ГруппаОС               = СтрокаОС.ГруппаОС;
		                              
		Если СтрокаОС.ВозвратАмортизацииБУ<>0 Тогда
			
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  = -СтрокаОС.ВозвратАмортизацииБУ;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
			НоваяСтрока.МОЛ                    = СтрокаОС.МОЛБУ;
			НоваяСтрока.Подразделение          = СтрокаОС.ПодразделениеБУ;
			НоваяСтрока.ГруппаОС               = СтрокаОС.ГруппаОС;
			
		КонецЕсли; 
		//КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", НомерЖурнала);
	
	
	
	СуммаПрибылиУбытка=0;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// Движения по регистру СостоянияОСОрганизацийБухгалтерскийУчет
		Движение = СостояниеОСБУ.Добавить();
		
		Движение.ДатаСостояния    = ДатаДока;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Движения по регистру СобытияОСОрганизацийБухгалтерскийУчет
		Движение = СобытияОСБУ.Добавить();
		
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		Движение = НачислениеАмортизацииБУ.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;
		
		//Списание БС
		Если СтрокаТЧ.СтоимостьБУ <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана балансовая ст-ть";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
			
			Проводка.СчетДт = СтрокаТЧ.СчетУчетаНоменклатуры;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",СтрокаТЧ.Склад);
			Проводка.КоличествоДт        = СтрокаТЧ.Количество;
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "МОЛ", СтрокаТЧ.МОЛБУ);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
			
		КонецЕсли;
		
		//Списание аморт.
		СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ-СтрокаТЧ.ВозвратАмортизацииБУ;
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана амортизация";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "МОЛ", СтрокаТЧ.МОЛБУ);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаНоменклатуры;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТЧ.Склад);
			
		КонецЕсли;
		//Списание переоценки
		Если СтрокаТЧ.ПереоценкаБУ <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана переоценка";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаТЧ.ПереоценкаБУ;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А8510;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаНоменклатуры;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТЧ.Склад);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	ПроводкиБУ.Записать(Ложь);
	ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизацийБухгалтерскийУчет, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		Если Основание.ЭтоГруппа Тогда
			
			Сообщить("Нельзя списать группу основных средств",СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ВозвратОСНаСкладОС.ОсновноеСредство
	|ИЗ
	|	Документ.ВозвратОСНаСклад.ОС КАК ВозвратОСНаСкладОС
	|ГДЕ
	|	ВозвратОСНаСкладОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратОСНаСкладОС.НомерСтроки,
	|	ВозвратОСНаСкладОС.ОсновноеСредство,
	|	ВозвратОСНаСкладОС.СтоимостьБУ,
	|	ВозвратОСНаСкладОС.АмортизацияБУ,
	|	ВозвратОСНаСкладОС.АмортизацияЗаМесяцБУ,
	|	ВозвратОСНаСкладОС.ПереоценкаБУ,
	|	ВозвратОСНаСкладОС.ВозвратАмортизацииБУ,
	|	ВозвратОСНаСкладОС.МОЛБУ,
	|	ВозвратОСНаСкладОС.ПодразделениеБУ,
	|	ВозвратОСНаСкладОС.Номенклатура,
	|	ВозвратОСНаСкладОС.Склад,
	|	ВозвратОСНаСкладОС.СчетУчетаНоменклатуры,
	|	ВозвратОСНаСкладОС.Количество,
	|	ВозвратОСНаСкладОС.ГруппаОС,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьПоБУ,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчетаБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчетаБУ
	|ИЗ
	|	Документ.ВозвратОСНаСклад.ОС КАК ВозвратОСНаСкладОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В("+СписокОС+")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчетаБУ
	|		ПО ВозвратОСНаСкладОС.ОсновноеСредство = ОС_СнятыеСУчетаБУ.ОсновноеСредство
	|ГДЕ
	|	ВозвратОСНаСкладОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	//" + СписокОС + "
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
