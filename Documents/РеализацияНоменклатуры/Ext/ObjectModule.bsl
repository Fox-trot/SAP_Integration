
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("СчетФактура","Счет-фактура");
КонецФункции

Процедура Печать(ИмяМакета, КоличествоЭкземпляров=1, НаПринтер=Ложь, НепосредственнаяПечать=Ложь) Экспорт
	Если ИмяМакета="СчетФактура" Тогда
		ТабДокумент = ПечатьСчетФактура();
	КонецЕсли; 
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Счет-фактура");
КонецПроцедуры

Функция ПечатьСчетФактура()
	ТабДок = Новый ТабличныйДокумент;
	
	Если Дата<Дата(2019,1,22) Тогда
		Макет = ПолучитьМакет("СчетФактура2017");
	Иначе 	
		Макет = ПолучитьМакет("СчетФактура");
	КонецЕсли;
	
	СведенияОбОрганизации = СведенияОЮрФизЛице(Организация, БанковскийСчет, Дата);
	СведенияОКонтрагенте  = СведенияОЮрФизЛице(Контрагент, БанковскийСчетКонтрагента, Дата);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ДоговорПродажи	= ДоговорКонтрагента.Наименование;
	Область.Параметры.Номер				= ПолучитьНомерНаПечать(ЭтотОбъект);
	Область.Параметры.Дата				= Формат(Дата,"ДЛФ=D")+" г.";
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(СведенияОбОрганизации);
	Область.Параметры.Заполнить(СведенияОКонтрагенте);
	ТабДок.Вывести(Область);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияНоменклатурыНоменклатура.Номенклатура,
	|	РеализацияНоменклатурыНоменклатура.Количество,
	|	РеализацияНоменклатурыНоменклатура.Сумма КАК Сумма,
	|	РеализацияНоменклатурыНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияНоменклатурыНоменклатура.Цена КАК Цена,
	|	РеализацияНоменклатурыНоменклатура.СуммаНДС КАК СуммаНДС,
	|	РеализацияНоменклатурыНоменклатура.СтавкаНДС,
	|	РеализацияНоменклатурыНоменклатура.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияНоменклатурыНоменклатура.СуммаНДС = 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияНоменклатурыНоменклатура.Сумма + РеализацияНоменклатурыНоменклатура.СуммаНДС
	|	КОНЕЦ КАК Всего,
	|	РеализацияНоменклатурыНоменклатура.Сумма + РеализацияНоменклатурыНоменклатура.СуммаНДС КАК СуммаСУчетомАкцизаИНДС
	|ИЗ
	|	Документ.РеализацияНоменклатуры.Номенклатура КАК РеализацияНоменклатурыНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияНоменклатуры КАК РеализацияНоменклатуры
	|		ПО РеализацияНоменклатурыНоменклатура.Ссылка = РеализацияНоменклатуры.Ссылка
	|ГДЕ
	|	РеализацияНоменклатуры.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияНоменклатурыУслуги.Услуга,
	|	NULL,
	|	РеализацияНоменклатурыУслуги.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияНоменклатурыУслуги.СуммаНДС,
	|	РеализацияНоменклатурыУслуги.СтавкаНДС,
	|	РеализацияНоменклатурыУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияНоменклатурыУслуги.СуммаНДС = 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияНоменклатурыУслуги.Сумма + РеализацияНоменклатурыУслуги.СуммаНДС
	|	КОНЕЦ,
	|	NULL
	|ИЗ
	|	Документ.РеализацияНоменклатуры.Услуги КАК РеализацияНоменклатурыУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияНоменклатуры КАК РеализацияНоменклатуры
	|		ПО РеализацияНоменклатурыУслуги.Ссылка = РеализацияНоменклатуры.Ссылка
	|ГДЕ
	|	РеализацияНоменклатуры.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС),
	|	СУММА(Всего),
	|	СУММА(СуммаСУчетомАкцизаИНДС)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка );
	
	Результат = Запрос.Выполнить();
	ВыборкаОбщие = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщие.Следующий();
	
	номерСтроки = 0;
	
	Выборка = ВыборкаОбщие.Выбрать();
	Пока Выборка.Следующий() Цикл
		номерСтроки = номерСтроки+1;
		Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ
			 Выборка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка()Тогда
			Область = Макет.ПолучитьОбласть("СтрокаБезНДС");
		Иначе	
			Область = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		
		Область.Параметры.Заполнить(Выборка);
		Область.Параметры.номерСтроки = номерСтроки;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(ВыборкаОбщие);
	
	Всего = ВыборкаОбщие.Сумма + ВыборкаОбщие.СуммаНДС;
	Область.Параметры.ВсегоПрописью	= СформироватьСуммуПрописью(Всего, Константы.ВалютаРегламентированногоУчета.Получить());
	Если Дата<Дата(2019,1,22) Тогда
		Область.Параметры.Доверенность	= Доверенность;
		Область.Параметры.Получатель	= Получатель;
	КонецЕсли;
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
    Область.Параметры.Заполнить(Руководители);
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху			= 0;
	ТабДок.ФиксацияСлева			= 0;
	ТабДок.ЭкземпляровНаСтранице	= 1;
	ТабДок.ТолькоПросмотр			= Истина;
	ТабДок.Автомасштаб				= Истина;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДок.КлючПараметровПечати="КПП_РеализацияНоменклатуры";
	
	Возврат ТабДок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("БанковскийСчет","Не выбран вид банковский счет");
	СтруктураОбязательныхПолей.Вставить("Контрагент","Не выбран вид контрагент");
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	//
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура","Не выбрана номенклатура");
	СтруктураПолей.Вставить("СчетУчетаБУ","Не выбран счет учета номенклатуры");
	ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "Номенклатура", СтруктураПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ДвиженияПоРегистрамБУПоПартиям(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	ТаблицаИСФ=СоздатьТаблицуИСФ();
	Если СобирательныйСчет.Пустая() Тогда
		СобирательныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("9210");
	КонецЕсли;	
	СчетПрибыли=ПланыСчетов.Хозрасчетный.НайтиПоКоду("9320");
	////
	СписокМПЗ = СкладскойУчет.ПолучитьНовыйСписокМПЗ();
	Для Каждого СтрокаНоменклатуры Из Номенклатура Цикл
		СтрокаСписка = СписокМПЗ.Добавить();
		СтрокаСписка.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаСписка.Склад = Склад;
		СтрокаСписка.СчетУчета = СтрокаНоменклатуры.СчетУчетаБУ;
		СтрокаСписка.Количество = СтрокаНоменклатуры.Количество;
	КонецЦикла;	
	////
	ТПартии = СкладскойУчет.ПолучитьТаблицуПартийПоСпискуМПЗ(СписокМПЗ, Дата, Организация);
	Для каждого Партия Из ТПартии Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "";     
		//
		Проводка.СчетДт = СобирательныйСчет;
		//
		Проводка.СчетКт = Партия.СчетУчета;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Партия.Номенклатура);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Склад);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,Партия.Партия);
		Проводка.КоличествоКт = Партия.Количество; 
		//
		Проводка.Сумма = Партия.Сумма; 
	КонецЦикла; 
	////
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ЗаполнитьТаблицуОстатковНоменклатуры(ТаблицаОстатков,ЭтотОбъект,Склад,Организация);
	Для Каждого СтрокиНоменклатура Из Номенклатура Цикл
		Себестоимость=0;
		СтрокаОстатков=ТаблицаОстатков.Найти(СтрокиНоменклатура.Номенклатура,"Субконто1");
		Если СтрокаОстатков<>Неопределено Тогда
			Если СтрокаОстатков.КоличествоОстатокДт=СтрокиНоменклатура.Количество Тогда
				Себестоимость=СтрокаОстатков.СуммаОстатокДт;							
			ИначеЕсли СтрокаОстатков.КоличествоОстатокДт<>0 Тогда
				Себестоимость=СтрокаОстатков.СуммаОстатокДт/СтрокаОстатков.КоличествоОстатокДт*СтрокиНоменклатура.Количество;							
			КонецЕсли; 		
		КонецЕсли; 
		//
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "";     
		//
		Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомБУ;
		Если ОтдельнаяНастройкаСчетаУчетаРасчетовСКонтрагентом Тогда
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ДопСубконто1);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДопСубконто2);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,ДопСубконто3);
		Иначе	
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Контрагент);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДоговорКонтрагента);
		КонецЕсли;
		//
		Проводка.СчетКт = СобирательныйСчет;
		//
		Проводка.Сумма = СтрокиНоменклатура.Всего+СтрокиНоменклатура.СуммаДопРасходов+СтрокиНоменклатура.СуммаНДСДопРасходов;
		////
		Если СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов<>0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание	 = "";     
			//
			Проводка.СчетДт = СобирательныйСчет;
			//
			Проводка.СчетКт = СчетУчетаПлатежа("НДС");
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтавкиНДС",СтрокиНоменклатура.СтавкаНДС);
			//
			Проводка.Сумма = СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов; 
		КонецЕсли; 
		////
		Если ОтражатьПрибыльУбытокПоРеализации Тогда
			Разница = СтрокиНоменклатура.Сумма+СтрокиНоменклатура.СуммаДопРасходов-Себестоимость;
			Если Разница>0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = "Прибыль от реализации";     
				//
				Проводка.СчетДт = СобирательныйСчет;
				//
				Проводка.СчетКт = СчетПрибыли;
				//
				Проводка.Сумма = Разница; 
			ИначеЕсли Разница<0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = "Убыток от реализации";     
				//
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("9430");
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.РасходыПериода.УбыткиОтВыбытияОСиИногоИмущества);
				//
				Проводка.СчетКт = СобирательныйСчет;
				//
				Проводка.Сумма = -Разница; 
			КонецЕсли;	
		КонецЕсли;
		////
		Движение = ТаблицаИСФ.Добавить();
		Движение.Период				= Дата;
		Движение.Организация		= Организация;
		Движение.Контрагент			= Контрагент;
		Движение.Ссылка				= Ссылка;
		Движение.Документ			= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект())+" от "+Формат(Ссылка.Дата, "ДФ='dd.MM.yyyy ""г.""'");
		Движение.ДокументНомер		= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект());
		Движение.ДокументДата		= Дата;
		Движение.СтавкаНДС			= СтрокиНоменклатура.СтавкаНДС;
		Движение.ВидДеятельностиНДС	= Организация.ОсновнойВидДеятельностиНДС;
		Движение.ПорядокУплатыНДС	= ПолучитьПорядокУплатыНДС(Дата,Организация);
		Движение.Сумма				= СтрокиНоменклатура.Сумма+СтрокиНоменклатура.СуммаДопРасходов;
		Движение.СуммаНДС			= СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов;
		Движение.Всего				= СтрокиНоменклатура.Всего+СтрокиНоменклатура.СуммаДопРасходов+СтрокиНоменклатура.СуммаНДСДопРасходов;
	КонецЦикла;
	Движения.Хозрасчетный.Записать();
	ТаблицаИСФ.Свернуть("Период,Организация,Контрагент,Ссылка,Документ,ДокументНомер,ДокументДата,СтавкаНДС,ВидДеятельностиНДС,ПорядокУплатыНДС","Сумма,СуммаНДС,Всего");	
	Движения.ИсходящиеСчетаФактуры.Загрузить(ТаблицаИСФ);
КонецПроцедуры	 

Процедура ДвиженияПоРегистрамБУ(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	ТаблицаИСФ=СоздатьТаблицуИСФ();
	Если СобирательныйСчет.Пустая() Тогда
		СобирательныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду("9210");
	КонецЕсли;	
	СчетПрибыли=ПланыСчетов.Хозрасчетный.НайтиПоКоду("9320");
	//
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ЗаполнитьТаблицуОстатковНоменклатуры(ТаблицаОстатков,ЭтотОбъект,Склад,Организация);
	Для Каждого СтрокиНоменклатура Из Номенклатура Цикл
		Себестоимость=0;
		СтрокаОстатков=ТаблицаОстатков.Найти(СтрокиНоменклатура.Номенклатура,"Субконто1");
		Если СтрокаОстатков<>Неопределено Тогда
			Если СтрокаОстатков.КоличествоОстатокДт=СтрокиНоменклатура.Количество Тогда
				Себестоимость=СтрокаОстатков.СуммаОстатокДт;							
			ИначеЕсли СтрокаОстатков.КоличествоОстатокДт<>0 Тогда
				Себестоимость=СтрокаОстатков.СуммаОстатокДт/СтрокаОстатков.КоличествоОстатокДт*СтрокиНоменклатура.Количество;							
			КонецЕсли; 		
		КонецЕсли; 
		////
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "";     
		//
		Проводка.СчетДт = СобирательныйСчет;
		//
		Проводка.СчетКт = СтрокиНоменклатура.СчетУчетаБУ;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокиНоменклатура.Номенклатура);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Склад);
		Проводка.КоличествоКт = СтрокиНоменклатура.Количество; 
		//
		Проводка.Сумма = Себестоимость; 
		////
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "";     
		//
		Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомБУ;
		Если ОтдельнаяНастройкаСчетаУчетаРасчетовСКонтрагентом Тогда
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ДопСубконто1);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДопСубконто2);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,ДопСубконто3);
		Иначе	
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Контрагент);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДоговорКонтрагента);
		КонецЕсли;
		//
		Проводка.СчетКт = СобирательныйСчет;
		//
		Проводка.Сумма = СтрокиНоменклатура.Всего+СтрокиНоменклатура.СуммаДопРасходов+СтрокиНоменклатура.СуммаНДСДопРасходов;
		////
		Если СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов<>0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание	 = "";     
			//
			Проводка.СчетДт = СобирательныйСчет;
			//
			Проводка.СчетКт = СчетУчетаПлатежа("НДС");
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтавкиНДС",СтрокиНоменклатура.СтавкаНДС);
			//
			Проводка.Сумма = СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов; 
		КонецЕсли; 
		Если ОтражатьПрибыльУбытокПоРеализации Тогда
			Разница = СтрокиНоменклатура.Сумма+СтрокиНоменклатура.СуммаДопРасходов-Себестоимость;
			Если Разница>0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = "Прибыль от реализации";     
				//
				Проводка.СчетДт = СобирательныйСчет;
				//
				Проводка.СчетКт = СчетПрибыли;
				//
				Проводка.Сумма = Разница; 
			ИначеЕсли Разница<0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = "Убыток от реализации";     
				//
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("9430");
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.РасходыПериода.УбыткиОтВыбытияОСиИногоИмущества);
				//
				Проводка.СчетКт = СобирательныйСчет;
				//
				Проводка.Сумма = -Разница; 
			КонецЕсли;	
		КонецЕсли; 
		////
		Движение = ТаблицаИСФ.Добавить();
		Движение.Период				= Дата;
		Движение.Организация		= Организация;
		Движение.Контрагент			= Контрагент;
		Движение.Ссылка				= Ссылка;
		Движение.Документ			= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект())+" от "+Формат(Ссылка.Дата, "ДФ='dd.MM.yyyy ""г.""'");
		Движение.ДокументНомер		= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект());
		Движение.ДокументДата		= Дата;
		Движение.СтавкаНДС			= СтрокиНоменклатура.СтавкаНДС;
		Движение.ВидДеятельностиНДС	= Организация.ОсновнойВидДеятельностиНДС;
		Движение.ПорядокУплатыНДС	= ПолучитьПорядокУплатыНДС(Дата,Организация);
		Движение.Сумма				= СтрокиНоменклатура.Сумма+СтрокиНоменклатура.СуммаДопРасходов;
		Движение.СуммаНДС			= СтрокиНоменклатура.СуммаНДС+СтрокиНоменклатура.СуммаНДСДопРасходов;
		Движение.Всего				= СтрокиНоменклатура.Всего+СтрокиНоменклатура.СуммаДопРасходов+СтрокиНоменклатура.СуммаНДСДопРасходов;
	КонецЦикла;
	Движения.Хозрасчетный.Записать();
	ТаблицаИСФ.Свернуть("Период,Организация,Контрагент,Ссылка,Документ,ДокументНомер,ДокументДата,СтавкаНДС,ВидДеятельностиНДС,ПорядокУплатыНДС","Сумма,СуммаНДС,Всего");	
	Движения.ИсходящиеСчетаФактуры.Загрузить(ТаблицаИСФ);
КонецПроцедуры	 

Процедура ДвиженияПоСписаниюОтсроченногоЗачетаНДС(РежимПроведения, Отказ)
	Для каждого СтрокаТЧ Из ЗачетНДС Цикл
		Если СтрокаТЧ.Количество=0 И СтрокаТЧ.Сумма=0 Тогда
			Продолжить;
		КонецЕсли;
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "Списание отсроченного зачета по НДС";     
		//
		Проводка.СчетДт = СчетУчетаАвансаПлатежа("НДС");
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиИОбязательныеПлатежи",Справочники.ПлатежиВБюджет.НДС);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтрокаТЧ.ПлатежПоНДС.СтавкаНДС);
		//
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А4401;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПлатежиПоНДС",СтрокаТЧ.ПлатежПоНДС);
		Проводка.КоличествоКт = СтрокаТЧ.Количество;
		//
		Проводка.Сумма = СтрокаТЧ.Сумма; 
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	ЗарегистрироватьИсходящийСчетФактуру(
			Ссылка, 
			Контрагент, 
			, 
			Номенклатура.Итог("Сумма") + Услуги.Итог("Сумма"), 
			Номенклатура.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС"), 
			Номенклатура.Итог("Сумма") + Номенклатура.Итог("СуммаНДС") + Услуги.Итог("Сумма") + Услуги.Итог("СуммаНДС"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Номенклатура Цикл
		Если СтрокаТЧ.Всего=0 Тогда
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма+СтрокаТЧ.СуммаНДС
		КонецЕсли;
	КонецЦикла;
	СуммаПоДокументу=Номенклатура.Итог("Сумма")+Номенклатура.Итог("СуммаНДС");
	КоличествоПоДокументу=0;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);	
	ПроверитьОстаткиНоменклатуры(Отказ,ЭтотОбъект,Номенклатура,Склад,Организация,"СчетУчетаБУ");
	Если ПараметрыСеанса.ВедетсяПартионныйУчет Тогда
		ДвиженияПоРегистрамБУПоПартиям(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	Иначе	
		ДвиженияПоРегистрамБУ(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли; 
	ДвиженияПоСписаниюОтсроченногоЗачетаНДС(Режим, Отказ);
	//ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
КонецПроцедуры
