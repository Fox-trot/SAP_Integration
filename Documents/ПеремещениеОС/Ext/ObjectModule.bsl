
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации
								|";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()


Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Накладная");
	
КонецФункции


Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если Модифицированность()=1 Тогда
		Сообщить("Для печати запишите документ!");
		Возврат;
	КонецЕсли; // Получить экземпляр документа на печать
	
	Если ИмяМакета="Накладная" Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ПечатьНакладная(ТабДокумент);
	КонецЕсли; 
		
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Накладная");
	
КонецПроцедуры // Печать()


Процедура ПечатьНакладная(ТабДок) Экспорт
	
	Макет = ПолучитьМакет("Накладная");

	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Номер=ПолучитьНомерНаПечать(ЭтотОбъект);
	Область.Параметры.Дата=Формат(Дата,"ДФ=dd.MM.yyyy");
	Область.Параметры.Организация=Организация;
	Область.Параметры.ПодразделениеОткуда=ПодразделениеОткуда;
	Область.Параметры.МОЛОткуда=МОЛОткуда;
	Область.Параметры.ПодразделениеКуда=ПодразделениеКуда;
	Область.Параметры.МОЛКуда=МОЛКуда;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Строка");
		
	Для Каждого СтрокаОС из ОС Цикл
		Область.Параметры.Заполнить(СтрокаОС);
		Область.Параметры.Сумма=СтрокаОС.СтоимостьБУ;
		Область.Параметры.ОсновноеСредство=СтрокаОС.ОсновноеСредство;
		Область.Параметры.ИнвентарныйНомер=СтрокаОС.ОсновноеСредство.ИнвентарныйНомер;
		ТабДок.Вывести(Область);
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("Итого");
	Область.Параметры.Сумма=ОС.Итог("СтоимостьБУ");
	ТабДок.Вывести(Область);
		
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Проверим соответствие организайий ОС и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     , СтруктураШапкиДокумента.Дата);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчет.Организация КАК Организация,
	|	ОсновныеСредства.Код                           КАК Инв,
	|	ОсновныеСредства.Ссылка                        КАК ОсновноеСредство,
	|	Представление(ОсновныеСредства.Ссылка)         КАК ОсновноеСредствоПредставление
	|
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСреза, (ОсновноеСредство В(&СписокОС) И Организация = &ВыбОрганизация)) КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&СписокОС) И
	|	НЕ ОсновныеСредства.ЭтоГруппа И
	|	МестонахождениеОСБухгалтерскийУчет.Организация ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		Отказ = Истина;

		Пока Выборка.Следующий() Цикл
			СообщитьОбОшибке(("Бух.учет: Несоответствие организаций ОС """ + СокрЛП(Выборка.ОсновноеСредствоПредставление) + """ инв.№ " + СокрЛП(Выборка.Инв) + " и организации указанной в документе."),, Заголовок);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)

	ДвиженияПоРегистрамБУ(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок);

КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрамБУ(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)

	ДатаДока = Дата;

	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	СпособыОтраженияРасходовПоАмортизацииОС = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ОперацииОС                   = Движения.СобытияОСОрганизацийБухгалтерскийУчет;
	СчетаБухгалтерскогоУчетаОС                   = Движения.СчетаБухгалтерскогоУчетаОС;
	Проводки                   = Движения.Хозрасчетный;
	НомерЖурнала   = "ОС";
	
	
		// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	ТабАмортизации.Колонки.Добавить("МОЛ");
	ТабАмортизации.Колонки.Добавить("Подразделение");
	ТабАмортизации.Колонки.Добавить("ГруппаОС");
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		//Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		//   И СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
		
		НоваяСтрока = ТабАмортизации.Добавить();
		
		НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцБУ;
		НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
		НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
		НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
		НоваяСтрока.МОЛ                    = МОЛОткуда;
		НоваяСтрока.Подразделение          = ПодразделениеОткуда;
		НоваяСтрока.ГруппаОС          = СтрокаОС.ГруппаОСОткуда;
		//КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух",НомерЖурнала);

	
	//Запрос = Новый Запрос; 
	//Запрос.УстановитьПараметр("Организация", Организация); 
	//
	//МассивОС = Новый Массив; 
	//МассивОС=ОС.ВыгрузитьКолонку("ОсновноеСредство");	

	//Запрос.УстановитьПараметр("МассивОС", МассивОС); 
	//Запрос.УстановитьПараметр("Дата", Дата); 
	//
	//Запрос.Текст = " 
	//|ВЫБРАТЬ 
	//|	СчетаУчетаСрезПоследних.ОсновноеСредство, 
	//|	СчетаУчетаСрезПоследних.СчетУчета, 
	//|	СчетаУчетаСрезПоследних.СчетНачисленияАмортизации 
	//|ИЗ 
	//|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,Организация=&Организация и ОсновноеСредство В (&МассивОС)) КАК СчетаУчетаСрезПоследних"; 
	//
	//СчетаУчета = Запрос.Выполнить().Выгрузить(); 

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Если СтрокаТч.ГруппаОСКуда<>СтрокаТч.ГруппаОСОткуда Тогда
			
			
			Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
			Движение.Период=ДатаДока;
			Движение.ОсновноеСредство=СтрокаТЧ.ОсновноеСредство;
			Движение.Организация=СтруктураШапкиДокумента.Организация;
			Движение.ГруппаОС=СтрокаТЧ.ГруппаОСКуда;
			
			Срез=РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(Дата-1,Новый Структура("Организация,ОсновноеСредство",Организация,СтрокаТЧ.ОсновноеСредство));
			
			Если Срез.Количество()>0 Тогда
				
				Движение.СпособПоступления        =Срез[0].СпособПоступления;
				Движение.ПервоначальнаяСтоимость  =Срез[0].ПервоначальнаяСтоимость;
				Движение.СпособНачисленияАмортизации=Срез[0].СпособНачисленияАмортизации;
				Движение.ПорядокПогашенияСтоимости=Срез[0].ПорядокПогашенияСтоимости;
				//Движение.ПроизводственнаяГруппа= ;
				Движение.ПротивопожарныеОС        =Срез[0].ПротивопожарныеОС;
				Движение.Состояние                =Срез[0].Состояние;
				Движение.ГруппаОборудования       =Срез[0].ГруппаОборудования;
				Движение.ОСПоОхранеОкружающейСреды=Срез[0].ОСПоОхранеОкружающейСреды;
				
			КонецЕсли; 
				
		
		КонецЕсли; 
		

		Движение = МестонахождениеОСОрганизаций.Добавить();
	
		Движение.Период           = ДатаДока;
		Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛКуда;
		Движение.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеКуда;
		Движение.МестонахождениеОСДляГНИ  = СтрокаТЧ.МестонахождениеОСДляГНИКуда;
		
		// Движения по регистру СобытияОСОрганизацийБухгалтерскийУчет
		Движение = ОперацииОС.Добавить();
		Движение.Период				= ДатаДока;
		Движение.ОсновноеСредство	= СтрокаТЧ.ОсновноеСредство;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		Движение = СпособыОтраженияРасходовПоАмортизацииОС.Добавить();
	
		Движение.Период           = ДатаДока;
		Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.СпособыОтраженияРасходовПоАмортизации = СтрокаТЧ.СпособОтраженияРасходовКуда;
		
		Если СтрокаТЧ.СчетУчетаБУ<>СтрокаТЧ.СчетУчетКуда
			или  СтрокаТЧ.СчетНачисленияАмортизацииБУ<>СтрокаТЧ.СчетНачисленияАмортизацииКуда Тогда
			
			Движение = СчетаБухгалтерскогоУчетаОС.Добавить();
			Движение.Период           = ДатаДока;
			Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация      = СтруктураШапкиДокумента.Организация;
			Движение.СчетУчета        = СтрокаТЧ.СчетУчетКуда;
			Движение.СчетНачисленияАмортизации      = СтрокаТЧ.СчетНачисленияАмортизацииКуда;
			
		КонецЕсли;	
		
		Проводка=Проводки.Добавить();
		Проводка.Организация=СтруктураШапкиДокумента.Организация;
		Проводка.Период=Дата;
		Проводка.СчетДт=СтрокаТЧ.СчетУчетКуда;
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТЧ.ОсновноеСредство);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ПодразделениеКуда);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,МОЛКуда);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,СтрокаТЧ.ГруппаОСКуда);
		Проводка.СчетКт=СтрокаТЧ.СчетУчетаБУ;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТЧ.ОсновноеСредство);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ПодразделениеОткуда);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,МОЛОткуда);
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,4,СтрокаТЧ.ГруппаОСОткуда);
		Проводка.Сумма=СтрокаТЧ.СтоимостьБУ;
		
		Если (СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ)<>0 Тогда
			
			Проводка=Проводки.Добавить();
			Проводка.Организация=СтруктураШапкиДокумента.Организация;
			Проводка.Период=Дата;
			Проводка.СчетДт=СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТЧ.ОсновноеСредство);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ПодразделениеОткуда);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,МОЛОткуда);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,СтрокаТЧ.ГруппаОСОткуда);
			Проводка.СчетКт=СтрокаТЧ.СчетНачисленияАмортизацииКуда;
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТЧ.ОсновноеСредство);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ПодразделениеКуда);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,МОЛКуда);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,4,СтрокаТЧ.ГруппаОСКуда);
			Проводка.Сумма=СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
			
		КонецЕсли; 
		
		//КонецЕсли; 
		
		
	КонецЦикла;
	                         
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

//	СтруктураПолей = Новый Структура;
//	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");

//	РезультатЗапросаПоОС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
//	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
//	
//	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
//	
//	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
//	ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПеремещениеОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	//|	ПеремещениеОСОС.МОЛБУ,
	//|	ПеремещениеОСОС.ПодразделениеБУ,
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеОСОС.НомерСтроки,
	|	ПеремещениеОСОС.ОсновноеСредство,
	|	ПеремещениеОСОС.СтоимостьБУ,
	|	ПеремещениеОСОС.АмортизацияБУ,
	|	ПеремещениеОСОС.АмортизацияЗаМесяцБУ,
	|	ПеремещениеОСОС.СпособОтраженияРасходовКуда,
	|	ПеремещениеОСОС.СчетНачисленияАмортизацииКуда,
	|	ПеремещениеОСОС.СчетУчетКуда,
	|	ПеремещениеОСОС.ГруппаОСКуда,
	|	ПеремещениеОСОС.ГруппаОСОткуда,
	|	ПеремещениеОСОС.МестонахождениеОСДляГНИОткуда,
	|	ПеремещениеОСОС.МестонахождениеОСДляГНИКуда,
	|	ПеремещениеОСОС.СпособНачисленияАмортизацииОткуда,
	|	ПеремещениеОСОС.СпособНачисленияАмортизацииКуда,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьПоБУ,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчетаБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчетаБУ
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПеремещениеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПеремещениеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПеремещениеОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В("+СписокОС+")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчетаБУ
	|		ПО ПеремещениеОСОС.ОсновноеСредство = ОС_СнятыеСУчетаБУ.ОсновноеСредство
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	//" + СписокОС + "
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	//ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);


	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		глДанныеОбОСРассчитаны = Ложь;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание)
	
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	глДанныеОбОСРассчитаны = Ложь;
КонецПроцедуры

