Перем мДатаПерехода;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
								|ОбъемПродукцииРаботДляВычисленияАмортизации,
								|СпособНачисленияАмортизацииБУ,
								|СрокПолезногоИспользованияБУ,
								|СтоимостьБУ,
								|СчетНачисленияАмортизацииБУ,
								|СчетУчетаБУ,
								|СчетУчетаБУВнеоборотногоАктива
								|";

	мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
								|СпециальныйКоэффициентНУ,
								|СпособНачисленияАмортизацииНУ,
								|СрокПолезногоИспользованияНУ,
								|СтоимостьНУ,
								|СчетНачисленияАмортизацииНУ,
								|СчетУчетаНУ,
								|СчетУчетаНУВнеоборотногоАктива
								|";

							КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
							
// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктНМА()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуНМА.Номер КАК Номер,
	|	ПринятиеКУчетуНМА.Дата,
	|	ПринятиеКУчетуНМА.Дата КАК ДатаВвода,
	|	ПринятиеКУчетуНМА.Ответственный,
	|	ПринятиеКУчетуНМА.Склад,
	|	ПринятиеКУчетуНМА.СпособПоступления,
	|	ПринятиеКУчетуНМА.СтоимостьБУ,
	|	ПринятиеКУчетуНМА.Организация,
	|	ПринятиеКУчетуНМА.СпособНачисленияАмортизацииБУ,
	|	ПринятиеКУчетуНМА.СчетНачисленияАмортизацииБУ,
	|	ПринятиеКУчетуНМА.НематериальныйАктив,
	|	ПринятиеКУчетуНМА.ГодоваяНормаАмортизацииБУ
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	|ГДЕ
	|	ПринятиеКУчетуНМА.Ссылка = &Ссылка";
	ВыборкаНМА = Запрос.Выполнить().Выбрать();
	ВыборкаНМА.Следующий();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	МакетАктНМА   = ПолучитьОбщийМакет("АктНМА");
    ОбластьМакета = МакетАктНМА.ПолучитьОбласть("Печать");
	Руководители  = ОтветственныеЛица(Организация, Дата);
	
	ОбластьМакета.Параметры.Заполнить(ВыборкаНМА);
	ОбластьМакета.Параметры.Заполнить(Руководители);
	ОбластьМакета.Параметры.РуководительСтр = Руководители.Руководитель;
	ОбластьМакета.Параметры.ПредставлениеГода = Формат(Лев(Год(ВыборкаНМА.Дата),3),"ЧГ=0");
	
	ОбластьМакета.Параметры.Организация = ВыборкаНМА.Организация.Наименование;
	ОбластьМакета.Параметры.КодОКПО=ВыборкаНМА.Организация.КодПоОКПО;
	
	Сдатчик = "";
	ОбластьМакета.Параметры.Сдатчик = Сдатчик;
	ОбластьМакета.Параметры.Получатель = ВыборкаНМА.Склад.Наименование;
	ОбластьМакета.Параметры.БалансоваяСтоимость = ВыборкаНМА.СтоимостьБУ;
	
	ОбластьМакета.Параметры.НМА = ВыборкаНМА.НематериальныйАктив.Наименование;
	
	Если(ВыборкаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка)
	или (ВыборкаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный)
	или (ВыборкаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) Тогда
		ОбластьМакета.Параметры.СрокИспользования = ""+СрокПолезногоИспользованияБУ+" мес";
	Иначе
		ОбластьМакета.Параметры.СрокИспользования = "";
	КонецЕсли;
	ОбластьМакета.Параметры.НачисленнаяАмортизация = 0;
	ОбластьМакета.Параметры.КоэфАмортизацииСтр = ВыборкаНМА.ГодоваяНормаАмортизацииБУ;
	ОбластьМакета.Параметры.НМАСчетЗатрат = ВыборкаНМА.СчетНачисленияАмортизацииБУ;
	ОбластьМакета.Параметры.Код = ВыборкаНМА.НематериальныйАктив.Код;
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СчетУчетаБУВнеоборотногоАктива,СчетУчетаБУ";

	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
		Реквизиты = Реквизиты + ",СпособНачисленияАмортизацииБУ,СрокПолезногоИспользованияБУ";

		Реквизиты = Реквизиты + ",СчетНачисленияАмортизацииБУ";

	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("НематериальныйАктив", "Не выбран нематериальный актив!");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУВнеоборотногоАктива", "Не выбран счет учета внеоборотного актива!");
	
	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
		СтруктураОбязательныхПолей.Вставить("СпособНачисленияАмортизацииБУ", "Не заполнено значение реквизита ""Способ списания расходов""!");
		СтруктураОбязательныхПолей.Вставить("СрокПолезногоИспользованияБУ", "Не заполнено значение реквизита ""Срок полезного исползования, мес.""!");
	КонецЕсли;
		// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаПоСтрокамНМА, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (СтруктураШапкиДокумента.Дата < мДатаПерехода) Тогда
		ТаблицаПоСтрокамНМА.Очистить();
		Возврат;
	КонецЕсли;
		
	//УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	//ДатаПереходаНаУСН = УчетнаяПолитикаНУ["ДатаПереходаНаУСН"];
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаНМА Из ТаблицаПоСтрокамНМА Цикл
		//ДатаВвода		 = СтруктураШапкиДокумента.Дата;
		//ДатаПриобретения = СтруктураШапкиДокумента.ДатаПриобретения;
		//
		//Если (ДатаПриобретения < мДатаПерехода) И 
		//	(ДатаПереходаНаУСН < ДатаПриобретения) И 
		//	(СтрокаНМА.ДатаОплаты < мДатаПерехода) Тогда
		//	
		//	ТекстСообщения = "По "+ Строка(НематериальныйАктив) + " оплата от "+СтрокаНМА.ДатаОплаты+" не зарегистрирована. Расходы по данной оплате принимаются в порядке, действовавшем до 01.01.2006 г.";
		//	СообщитьОбОшибке(ТекстСообщения, , ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		//	СтрокаНМА.СуммаОплаты = 0;
		//КонецЕсли;
		//		
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
// Структура, каждая строка которой соответствует одному из вариантов печати
// 

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктНМА","Акт НМА");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "АктНМА" Тогда
		
		ТабДокумент = ПечатьАктНМА();
		
	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регл. регистров
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ,Заголовок)

	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМАОрганизацийБухгалтерскийУчет.Добавить();
	Движение.ДатаСостояния       = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация         = СтруктураШапкиДокумента.Организация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	//Движения.СостоянияНМАОрганизаций.Записать();

	СостояниеНМА            = Движения.СостоянияНМАОрганизацийБухгалтерскийУчет;
	ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата, СостояниеНМА,Отказ,Заголовок);
	
	Если Отказ Тогда
	    // НМА уже было принято к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
	КонецЕсли; 

	Проводки = Движения.Хозрасчетный;

	Проводка = Проводки.Добавить();

	Проводка.Период       = СтруктураШапкиДокумента.Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;

	Проводка.Содержание = "Принят к учету НМА";

	Проводка.НомерЖурнала = "НМА";
	Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьБУ;
	Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
	УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
	
	Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;

	//Опеределиться с расходами на НИОКР.

	УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ПриобретенныйНематериальныйАктив);
	 //УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Склад);
  	Проводка.КоличествоКт       = 1;

	// Движения по регистру СпособыОтраженияРасходов
	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СпособОтраженияРасходовПоАмортизации     = СтруктураШапкиДокумента.СпособОтраженияРасходов;

	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
	Движение.ПервоначальнаяСтоимость     = СтруктураШапкиДокумента.СтоимостьБУ;
	Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
	Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
	Движение.СрокПолезногоИспользования  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;

	Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	// Движения по регистру СчетаБухгалтерскогоУчета
	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СчетУчета                   = СтруктураШапкиДокумента.СчетУчетаБУ;
	Движение.СчетНачисленияАмортизации   = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
	
	// 
	Движение = Движения.СобытияНМАОрганизацийБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.Событие                     = СтруктураШапкиДокумента.Событие;
	
	// Движения по регистру ПараметрыАмортизации
	Движение = Движения.ПараметрыАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив                         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                                 = СтруктураШапкиДокумента.Организация;
	Движение.КоэффициентАмортизации                      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииБУ;
	Движение.СтоимостьДляВычисленияАмортизации           = 0; //Строка.Сумма;
	
	
КонецПроцедуры // ФормированиеДвиженийРегл()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

    
	Если НЕ Отказ Тогда
	// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,  Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мДатаПерехода = Дата("20060101");