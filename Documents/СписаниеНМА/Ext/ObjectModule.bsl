// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем мВалютаРегламентированногоУчета;
Перем ПоддержкаПБУ18;
Перем ТаблицаТекущегоСостояния;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)


КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.НачислятьАмортизацию        = ложь;
	//Движение.ПервоначальнаяСтоимость     = ;
	//Движение.СпособНачисленияАмортизации = ;
	//Движение.СпособПоступления           = ;
	//Движение.СрокПолезногоИспользования  = ;

	Движение = Движения.СостоянияНМАОрганизацийБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.ДатаСостояния               = СтруктураШапкиДокумента.Дата;
	Движение.Состояние                   =  Перечисления.ВидыСостоянийНМА.Списан;
			
	//Списание БС
	Если СтоимостьБУ <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период       = Дата;
		Проводка.Активность   = Истина;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Списана балансовая ст-ть";
		Проводка.НомерЖурнала = "";
		Проводка.Сумма        = СтоимостьБУ;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А9220;
		
		Проводка.СчетКт = СчетУчетаБУ;
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, НематериальныйАктив);
		
	КонецЕсли;
	
	//Списание аморт.
	СуммаПроводки = АмортизацияБУ + АмортизацияЗаМесяцБУ;
	//Списание БС
	Если СуммаПроводки <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период       = Дата;
		Проводка.Активность   = Истина;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Списана амортизация";
		Проводка.НомерЖурнала = "";
		Проводка.Сумма        = СуммаПроводки;
		
		Проводка.СчетДт = СчетАмортизацииБУ;
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, НематериальныйАктив);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А9220;
		
	КонецЕсли;
	
	СуммаПрибылиУбытка = СтоимостьБУ - СуммаПроводки;
	
	Если СуммаПрибылиУбытка > 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Убытки от списания НМА";
		Проводка.НомерЖурнала = "";
		Проводка.Сумма        = СуммаПрибылиУбытка;
		
		Проводка.СчетДт = СтруктураШапкиДокумента.СпособУчетаРасходовБУ.Счет;
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СпособУчетаРасходовБУ.Субконто1);
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СпособУчетаРасходовБУ.Субконто2);
		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СпособУчетаРасходовБУ.Субконто3);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А9220;
		
	ИначеЕсли СуммаПроводки < 0 Тогда	
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Прибыль от списания НМА";
		
		Проводка.НомерЖурнала = "";
		Проводка.Сумма        = -СуммаПрибылиУбытка;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А9220;
		
		Проводка.СчетКт = СтруктураШапкиДокумента.СпособУчетаДоходовБУ.Счет;
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СпособУчетаДоходовБУ.Субконто1);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СпособУчетаДоходовБУ.Субконто2);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СпособУчетаДоходовБУ.Субконто3);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		
		ТабАмортизации  = РасчетАмортизацииНМА(Дата, СтруктураШапкиДокумента.Организация,НематериальныйАктив);

		ТабАмортизации.Колонки.Добавить("МОЛ");
		ТабАмортизации.Колонки.Добавить("Подразделение");
		ТабАмортизации.Колонки.Добавить("ГруппаОС");
		
		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.НематериальныйАктив.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "НМА");

		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры
