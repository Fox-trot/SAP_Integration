
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация,СобытиеОС,СчетУчетаРасчетовСКонтрагентом,ВидПередачи";

	НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета,  , СтруктураШапкиДокумента);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство, СтоимостьБУ";

	// Логические проверки
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("ОсновноеСредство",           "ОсновноеСредство");
	//СтруктураПолей.Вставить("СтатусСтатЗатрат", "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	//СтруктураПолей.Вставить("ВидРасходов",      "СтатьяЗатрат.ВидРасходов");
	//ТаблицаМатериалов = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();

	//// Проверим что нет услуг
	//Для Каждого Строка Из ТаблицаМатериалов Цикл
	//	Если Строка.Услуга Тогда
	//		ОшибкаПриПроведении("Нельзя использовать услугу! (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
	//	КонецЕсли;
	//	Если ЗначениеНеЗаполнено(Строка.ВидРасходов) Тогда
	//		ОшибкаПриПроведении("Не указан вид расходов в статье затрат (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;

	НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета,  "ОС", СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.Направление_БУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	//ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоОС);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = "ОС";

	СобытияОС               = Движения.СобытияОСОрганизацийБухгалтерскийУчет;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ПроводкиБУ              = Движения.Хозрасчетный;

	// Подготовим таблицу с данными по амортизации для списания амортизации по  направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	ТабАмортизации.Колонки.Добавить("МОЛ");
	ТабАмортизации.Колонки.Добавить("Подразделение");
	ТабАмортизации.Колонки.Добавить("ГруппаОС");
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
			
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
			НоваяСтрока.МОЛ                    = СтрокаОС.МОЛБУ;
			НоваяСтрока.Подразделение          = СтрокаОС.ПодразделениеБУ;
			НоваяСтрока.ГруппаОС               = СтрокаОС.ГруппаОС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух", НомерЖурнала);
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// Движения по регистру СобытияОСОрганизацийБухгалтерскийУчет
		Движение = СобытияОС.Добавить();
		
		Движение.Период             = ДатаДока;
		Движение.ОсновноеСредство   = ТекОС;
		Движение.Организация        = ТекОрганизация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		//Если СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		//	ИЛИ СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		
		// Движения по регистру НачислениеАмортизацииБУ
		Движение = НачислениеАмортизацииБУ.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;
		
		//КонецЕсли;
		
		//Если СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		// списание амортизации Д 02.01 К 01.09
		СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана амортизация";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "МОЛ", СтрокаТЧ.МОЛБУ);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
			
			Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3);
			
		КонецЕсли;
		
		//КонецЕсли;
		
		СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана балансовая ст-ть";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "МОЛ", СтрокаТЧ.МОЛБУ);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
			
		КонецЕсли;
		
		Если СтрокаТЧ.ПереоценкаБУ <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаТЧ.ПереоценкаБУ;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.А8510;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекОС);
			
			Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3);
			
			
		КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
	ПРоводкиБУ.Записать(Ложь);
	
КонецПроцедуры

Процедура ДвиженияПоСписаниюОтсроченногоЗачетаНДС()
	Для каждого СтрокаТЧ Из ЗачетНДС Цикл
		Если СтрокаТЧ.Количество=0 И СтрокаТЧ.Сумма=0 Тогда
			Продолжить;
		КонецЕсли;
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание	 = "Списание отсроченного зачета по НДС";     
		//
		Проводка.СчетДт = СчетУчетаАвансаПлатежа("НДС");
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиИОбязательныеПлатежи",Справочники.ПлатежиВБюджет.НДС);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтрокаТЧ.ПлатежПоНДС.СтавкаНДС);
		//
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.А4401;
		УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПлатежиПоНДС",СтрокаТЧ.ПлатежПоНДС);
		Проводка.КоличествоКт = СтрокаТЧ.Количество;
		//
		Проводка.Сумма = СтрокаТЧ.Сумма; 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПодготовкаКПередачеОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	|ГДЕ
	|	ПодготовкаКПередачеОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовкаКПередачеОСОС.НомерСтроки,
	|	ПодготовкаКПередачеОСОС.ОсновноеСредство,
	|	ПодготовкаКПередачеОСОС.СтоимостьБУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияБУ,
	|	ПодготовкаКПередачеОСОС.ПереоценкаБУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияЗаМесяцБУ,
	|	ПодготовкаКПередачеОСОС.МОЛБУ,
	|	ПодготовкаКПередачеОСОС.ПодразделениеБУ,
	|	ПодготовкаКПередачеОСОС.ГруппаОС,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В("+СписокОС+")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ПодготовкаКПередачеОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();

	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		ДвиженияПоСписаниюОтсроченногоЗачетаНДС();
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры
