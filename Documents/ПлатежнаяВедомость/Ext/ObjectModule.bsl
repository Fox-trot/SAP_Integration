
Перем Месяц;
Перем СведенияОСотрудниках;
Перем КоличествоСтрокНаСтранице;
Перем ОсталосьСтрокНаСтранице;
Перем Макет;
Перем Руководители;


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежнаяВедомость,ПлатежнаяВедомостьВБанк,РасчетноПлатежнаяВедомость","Платежная ведомость","Платежная ведомость в банк","Расчетно - платежная ведомость");
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Выплачено=0;
	Депонировано=0;
	
	Для Каждого СтрокаСотрудники из Сотрудники  Цикл
		Если СтрокаСотрудники.Депонировать Тогда
			Депонировано=Депонировано+СтрокаСотрудники.СуммаКВыплате;
		Иначе	
			Выплачено=Выплачено+СтрокаСотрудники.СуммаКВыплате;
		КонецЕсли;
	КонецЦикла; 
	
	
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДвиженияПоРегистрам(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	
КонецПроцедуры

Процедура	ДвиженияПоРегистрам(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Для Каждого СтрокаСотрудники из Сотрудники Цикл
		
		Если не СтрокаСотрудники.Депонировать Тогда
			
			Расчет=Движения.Удержания.Добавить();
			Расчет.ПериодРегистрации=НачалоМесяца(Дата);
			
			Расчет.Организация=Организация;
			Расчет.Сотрудник=СтрокаСотрудники.Сотрудник;
			Расчет.Подразделение=Подразделение;
			
			Расчет.Результат=СтрокаСотрудники.СуммаКВыплате;
			
			Расчет.ДатаНачала=НачалоМесяца(МесяцВыплаты);
			Расчет.ДатаОкончания=КонецМесяца(МесяцВыплаты);
			Расчет.ВидРасчета=ВидРасчета;
			Расчет.КодВидаРасчета=ВидРасчета.Код;
			Расчет.ОчередностьРасчета=ВидРасчета.ОчередностьРасчета;
			Расчет.Фиксированный=истина;
			
		Иначе	
			
			Расчет=Движения.Удержания.Добавить();
			Расчет.ПериодРегистрации=НачалоМесяца(Дата);
			
			Расчет.Организация=Организация;
			Расчет.Сотрудник=СтрокаСотрудники.Сотрудник;
			Расчет.Подразделение=Подразделение;
			
			Расчет.Результат=СтрокаСотрудники.СуммаКВыплате;
			
			Расчет.ДатаНачала=НачалоМесяца(МесяцВыплаты);
			Расчет.ДатаОкончания=КонецМесяца(МесяцВыплаты);
			Расчет.ВидРасчета=ПланыВидовРасчета.Удержания.ДепонированныеСуммы;
			Расчет.КодВидаРасчета=ПланыВидовРасчета.Удержания.ДепонированныеСуммы.Код;
			Расчет.ОчередностьРасчета=ПланыВидовРасчета.Удержания.ДепонированныеСуммы.ОчередностьРасчета;
			Расчет.Фиксированный=истина;
			
		КонецЕсли; 
		
	КонецЦикла;	
	
	Движения.Удержания.Записать();
	
	Счет6710=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6710");
	Счет6720=ПланыСчетов.Хозрасчетный.НайтиПоКоду("6720");
	Счет5010=ПланыСчетов.Хозрасчетный.НайтиПоКоду("5010");
	
	Для каждого СтрокаСотрудники Из Сотрудники Цикл
		
		Если не СтрокаСотрудники.Депонировать Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание = "";     
			
			Проводка.СчетДт      = СчетДт;
			
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаСотрудники.Сотрудник);
			
			Проводка.СчетКт      = Счет;
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Субконто1);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Субконто2);
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,Субконто3);
			
			Проводка.Сумма=СтрокаСотрудники.СуммаКВыплате;
		Иначе
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание = "";     
			
			Проводка.СчетДт      = Счет6710;
			
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаСотрудники.Сотрудник);
			
			Проводка.СчетКт      = Счет6720;
			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаСотрудники.Сотрудник);
			
			Проводка.Сумма=СтрокаСотрудники.СуммаКВыплате;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Функция СумТийин(Сумма)
	
	Тийин=Сумма-Цел(Сумма);
	Если Тийин=0 Тогда
		Возврат Строка(Цел(Сумма))+" сум 00 т.";
	Иначе	
		Возврат Строка(Цел(Сумма))+" сум "+Прав(Строка(Тийин),2)+" т.";
	КонецЕсли; 
	
КонецФункции	

Функция ПечатьПлатежнаяВедомость(ИмяМакета) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
	
	Область = Макет.ПолучитьОбласть("ТитульныйЛист");
	Область.Параметры.Организация = Организация;
	
	Если ИмяМакета="ПлатежнаяВедомость" Тогда
		Область.Параметры.ДатаЧисло = Прав("00"+День(Дата),2);
		Область.Параметры.ДатаМесяц = Прав("00"+Месяц(Дата),2);
		Область.Параметры.ДатаГод = Прав(Год(Дата),2);
		Область.Параметры.СтруктурноеПодразделение= Подразделение;
		Область.Параметры.Номер = ПолучитьНомерНаПечать(ЭтотОбъект);
		Область.Параметры.ОбщаяСуммаКВыплатеПрописью = СформироватьСуммуПрописью(Сотрудники.Итог("СуммаКВыплате"),Константы.ВалютаРегламентированногоУчета.Получить());
		Область.Параметры.ОбщаяСуммаКВыплате = СумТийин(Сотрудники.Итог("СуммаКВыплате"));
	КонецЕсли;
	
	Область.Параметры.Месяц = Формат(МесяцВыплаты,"ДФ='MMMM yyyy'")+" г.";
	Область.Параметры.ВидВыплаты = ВидРасчета.Наименование;
	Область.Параметры.Заполнить(Руководители);
	ТабДок.Вывести(Область);
	
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерСтраницы=1;
	ШапкаТаблицы=Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
	ТабДок.Вывести(ШапкаТаблицы);
	
	ИтогПоЛисту=Макет.ПолучитьОбласть("ИтогПоЛисту");
	
	КоличествоСтрокНаЛисте=20;
	ТекущаяСтрока=0;
	СтрокаТаблицы=Макет.ПолучитьОбласть("Строка");
	
	СуммаКВыплатеПоЛисту=0;
	
	Для Каждого СтрокаСотрудники из Сотрудники Цикл
		
		ТекущаяСтрока=ТекущаяСтрока+1;
		
		Если ТекущаяСтрока>КоличествоСтрокНаЛисте Тогда
			ИтогПоЛисту.Параметры.СуммаКВыплатеПоЛисту = СуммаКВыплатеПоЛисту;
			ТабДок.Вывести(ИтогПоЛисту);
			
			КоличествоСтрокНаЛисте=34;
			НомерСтраницы=НомерСтраницы+1;
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ШапкаТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабДок.Вывести(ШапкаТаблицы);
			ТекущаяСтрока=1;
			СуммаКВыплатеПоЛисту=0;
		КонецЕсли;
		
		СуммаКВыплатеПоЛисту=СуммаКВыплатеПоЛисту+СтрокаСотрудники.СуммаКВыплате;
		СтрокаТаблицы.Параметры.Заполнить(СтрокаСотрудники); 	
		
		Если ИмяМакета="ПлатежнаяВедомость" Тогда
			СтрокаТаблицы.Параметры.ТабельныйНомер = СтрокаСотрудники.Сотрудник.Код ; 
		КонецЕсли;
		
		Если ИмяМакета="ПлатежнаяВедомостьВБанк" Тогда
			СтрокаТаблицы.Параметры.НомерПластКарты = СтрокаСотрудники.Сотрудник.ФизическоеЛицо.НомерПластКарточки ;
			//СтрокаТаблицы.Параметры.БанкКодПластКарточки = СтрокаСотрудники.Сотрудник.ФизическоеЛицо.БанкКодПластКарточки ;
		КонецЕсли;
		
		ТабДок.Вывести(СтрокаТаблицы);
		
	КонецЦикла; 
	
	ИтогПоЛисту.Параметры.СуммаКВыплатеПоЛисту = СуммаКВыплатеПоЛисту;
	ТабДок.Вывести(ИтогПоЛисту);
	
	ПодвалТаблицы=Макет.ПолучитьОбласть("Подвал");
	ПодвалТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
	ПодвалТаблицы.Параметры.СуммаКВыплате = Сотрудники.Итог("СуммаКВыплате");
	ТабДок.Вывести(ПодвалТаблицы);
	
	Область = Макет.ПолучитьОбласть("ИтогВедомости");
	Область.Параметры.Заполнить(Руководители);
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
КонецФункции

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета="ПлатежнаяВедомость" Тогда
		ТабДокумент = ПечатьПлатежнаяВедомость(ИмяМакета);
	ИначеЕсли ИмяМакета="ПлатежнаяВедомостьВБанк" Тогда
		ТабДокумент = ПечатьПлатежнаяВедомость(ИмяМакета);
	ИначеЕсли ИмяМакета="РасчетноПлатежнаяВедомость" Тогда
		ТабДокумент = ПечатьРасчетноПлатежнаяВедомость(ИмяМакета);
	КонецЕсли; 
		
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "");
	
КонецПроцедуры // Печать()

Процедура ОбработкаЗаполнения(Основание)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДополнительныеРасчеты") Тогда
		// Заполнение шапки
		
		Процент=0;
	
		ВвестиЧисло(Процент,"Введите процент для заполнения",15,2); 

		Подразделение = Основание.Подразделение;
		ПроцентВыплаты=Процент;
		
		Для Каждого СТрока из Основание.Сотрудники Цикл
			
			НоваяСтрока=Сотрудники.Добавить();
			НоваяСтрока.Сотрудник=Строка.Сотрудник;
			
			СуммаКВыплате=окр(Строка.Параметр*Процент/100);
			СуммаКВыплате=окр(СуммаКВыплате/1000)*1000;
			
			НоваяСтрока.СуммаКВыплате=СуммаКВыплате;
			НоваяСтрока.Депонировать=ложь;
			
		КонецЦикла;	
			
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
КонецПроцедуры

Функция ПечатьРасчетноПлатежнаяВедомость(ИмяМакета)
	
	Руководители = ОтветственныеЛица(Организация, Дата);	

	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет(ИмяМакета);
	
	ТабДок.Очистить();
	
	ТабДок.АвтоМасштаб=истина;
	ТабДок.ПолеСверху=20;
	ТабДок.ПолеСлева=20;
	ТабДок.ПолеСнизу=20;
	ТабДок.ПолеСправа=10;
	
	
	КоличествоСтрокНаСтранице=92;
	ОсталосьСтрокНаСтранице=КоличествоСтрокНаСтранице;
	
	
	
	МассивСотрудников=Сотрудники.ВыгрузитьКолонку("Сотрудник");
	СведенияОСотрудниках=СведенияОСотрудниках(МассивСотрудников,Организация,КонецМесяца(МесяцВыплаты));
	
	т1=новый ТаблицаЗначений;
	т1.Колонки.Добавить("Сотрудник");
	т1.Колонки.Добавить("СведенияОСальдо");
	т1.Колонки.Добавить("КодВидаРасчета");
	т1.Колонки.Добавить("ВидРасчета");
	т1.Колонки.Добавить("Результат");
	т1.Колонки.Добавить("Дни");
	т1.Колонки.Добавить("Часы");
	т1.Колонки.Добавить("Месяц");
	т1.Колонки.Добавить("Вид");
	
	
	Разделитель = Макет.ПолучитьОбласть("Разделитель|ВертСекция");

	т2=т1.Скопировать();
	т3=т1.Скопировать();
	
	ТекущаяСтрока=1;
	
	Пока ТекущаяСтрока<=Сотрудники.Количество()  Цикл
		
		Если т1.Количество()=0 Тогда
			Отчет(ТабДок,Сотрудники[ТекущаяСтрока-1].Сотрудник,т1,Сотрудники[ТекущаяСтрока-1].СуммаКВыплате);
		ИначеЕсли т2.Количество()=0 Тогда
			Отчет(ТабДок,Сотрудники[ТекущаяСтрока-1].Сотрудник,т2,Сотрудники[ТекущаяСтрока-1].СуммаКВыплате);
		ИначеЕсли т3.Количество()=0 Тогда
			Отчет(ТабДок,Сотрудники[ТекущаяСтрока-1].Сотрудник,т3,Сотрудники[ТекущаяСтрока-1].СуммаКВыплате);
		КонецЕсли; 
		
		Если т1.Количество()>0 и т2.Количество()>0 и т3.Количество()>0 Тогда
			
			т1.Сортировать("Вид");
			т2.Сортировать("Вид");
			т3.Сортировать("Вид");
			
			ВывестиТаблицы(ТабДок,т1,т2,т3);
			
			ТабДок.Вывести(Разделитель);
			ТабДок.Присоединить(Разделитель);
			ТабДок.Присоединить(Разделитель);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			т1.Очистить();
			т2.Очистить();
			т3.Очистить();
		КонецЕсли; 
		
		ТекущаяСтрока=ТекущаяСтрока+1;
		
	КонецЦикла; 
	
	Если т1.Количество()>0 или т2.Количество()>0 или т3.Количество()>0 Тогда
		ВывестиТаблицы(ТабДок,т1,т2,т3);
		
		ТабДок.Вывести(Разделитель);
		ТабДок.Присоединить(Разделитель);
		ТабДок.Присоединить(Разделитель);
	КонецЕсли;
    ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДок;
	
КонецФункции

Процедура Отчет(ТабДок,Сотрудник,т,СуммаКВыплате) Экспорт

	Макет = ПолучитьМакет("РасчетноПлатежнаяВедомость");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Результат,
	|	Начисления.ВидРасчета,
	|	ПРЕДСТАВЛЕНИЕ(Начисления.ВидРасчета),
	|	Начисления.Дни,
	|	Начисления.Часы,
	|	Начисления.ДатаНачала,
	|	Начисления.КодВидаРасчета КАК КодВидаРасчета,
	|	Начисления.ВидРасчета.КраткоеНаименование
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ПериодРегистрации = &ПериодРегистрации
	|	И Начисления.Активность
	|	И Начисления.Организация = &Организация
	|	И Начисления.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	КодВидаРасчета";

	//|	И Начисления.ВидРасчета НЕ В(&ПрочиеДоходы)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцВыплаты);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	//Запрос.УстановитьПараметр("ПрочиеДоходы", Справочники.ГруппыНачислений.ПрочиеДоходы.Расчеты.ВыгрузитьКолонку("ВидРасчета"));
	
	РезультатНачислений = Запрос.Выполнить().Выбрать();

	Всего=0;
	Пока РезультатНачислений .Следующий()  Цикл
		
		СтрокаТ=т.добавить();  
		СтрокаТ.Сотрудник=Сотрудник;
		СтрокаТ.КодВидаРасчета=РезультатНачислений.КодВидаРасчета;
		СтрокаТ.ВидРасчета=РезультатНачислений.ВидРасчета;
		СтрокаТ.Результат=РезультатНачислений.Результат;
		СтрокаТ.Дни=РезультатНачислений.Дни;
		СтрокаТ.Часы=РезультатНачислений.Часы;
		СтрокаТ.Месяц=Месяц(РезультатНачислений.ДатаНачала);
		СтрокаТ.Вид=10;
		Если не ВходитВГруппуНачислений(РезультатНачислений.ВидРасчета,Справочники.ГруппыНачислений.ПрочиеДоходы) Тогда
			Всего=Всего+РезультатНачислений.Результат;
		КонецЕсли; 
	
	КонецЦикла; 
	ВсегоНачислено=Всего;
	
	СтрокаТ=т.добавить();  
	СтрокаТ.Результат=Всего;
	СтрокаТ.Вид=20;
	
	СтрокаТ=т.добавить();  
	СтрокаТ.Результат=0;
	СтрокаТ.Вид=25;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Начисления.Результат,
	//|	Начисления.ВидРасчета,
	//|	ПРЕДСТАВЛЕНИЕ(Начисления.ВидРасчета),
	//|	Начисления.ДатаНачала,
	//|	Начисления.КодВидаРасчета КАК КодВидаРасчета,
	//|	Начисления.ВидРасчета.КраткоеНаименование
	//|ИЗ
	//|	РегистрРасчета.Начисления КАК Начисления
	//|ГДЕ
	//|	Начисления.ПериодРегистрации = &ПериодРегистрации
	//|	И Начисления.Активность
	//|	И Начисления.Организация = &Организация
	//|	И Начисления.Сотрудник = &Сотрудник
	//|	И Начисления.ВидРасчета В(&ПрочиеДоходы)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Начисления.Сотрудник,
	//|	КодВидаРасчета";

	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("ПериодРегистрации", МесяцВыплаты);
	//Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	//Запрос.УстановитьПараметр("ПрочиеДоходы", Справочники.ГруппыНачислений.ПрочиеДоходы.Расчеты.ВыгрузитьКолонку("ВидРасчета"));
	//
	//Результат = Запрос.Выполнить().Выбрать();

	//Всего=0;
	//Пока Результат .Следующий()  Цикл
	//	
	//	СтрокаТ=т.добавить();  
	//	СтрокаТ.Сотрудник=Сотрудник;
	//	СтрокаТ.КодВидаРасчета=Результат.КодВидаРасчета;
	//	СтрокаТ.ВидРасчета=Результат.ВидРасчета;
	//	СтрокаТ.Результат=Результат.Результат;
	//	СтрокаТ.Месяц=Месяц(Результат.ДатаНачала);
	//	СтрокаТ.Вид=50;
	//	Всего=Всего+Результат.Результат;
	//
	//КонецЦикла; 
	//
	//Если Всего<>0 Тогда
	//	СтрокаТ=т.добавить();  
	//	СтрокаТ.Результат=0;
	//	СтрокаТ.Вид=45;
	//
	//КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Результат,
	|	Удержания.ВидРасчета,
	|	ПРЕДСТАВЛЕНИЕ(Удержания.ВидРасчета),
	|	Удержания.ДатаНачала,
	|	Удержания.КодВидаРасчета КАК КодВидаРасчета
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.ПериодРегистрации = &ПериодРегистрации
	|	И Удержания.Активность
	|	И Удержания.Организация = &Организация
	|	И Удержания.Сотрудник = &Сотрудник
	|	И Удержания.ВидРасчета НЕ В(&ПрочиеРасходы)
	|	И Удержания.Регистратор.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержания.Сотрудник,
	|	КодВидаРасчета";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцВыплаты);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ПрочиеРасходы", Справочники.ГруппыУдержаний.ПрочиеРасходы.Расчеты.ВыгрузитьКолонку("ВидРасчета"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выбрать();
	
	Всего=0;
	Пока Результат .Следующий()  Цикл
		
		СтрокаТ=т.добавить();  
		СтрокаТ.Сотрудник=Сотрудник;
		СтрокаТ.КодВидаРасчета=Результат.КодВидаРасчета;
		СтрокаТ.ВидРасчета=Результат.ВидРасчета;
		СтрокаТ.Результат=Результат.Результат;
		СтрокаТ.Месяц=Месяц(Результат.ДатаНачала);
		СтрокаТ.Вид=30;
		Всего=Всего+Результат.Результат;
	
	КонецЦикла; 
	ВсегоУдержано=Всего;
	
	СтрокаТ=т.добавить();  
	СтрокаТ.Результат=Всего;
	СтрокаТ.Вид=40;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сальдо.Результат,
	|	Сальдо.ВидРасчета,
	|	ПРЕДСТАВЛЕНИЕ(Сальдо.ВидРасчета)
	|ИЗ
	|	РегистрРасчета.Сальдо КАК Сальдо
	|ГДЕ
	|	Сальдо.ПериодРегистрации = &ПериодРегистрации
	|	И Сальдо.Активность
	|	И Сальдо.Организация = &Организация
	|	И Сальдо.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сальдо.Сотрудник";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцВыплаты);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

	Результат = Запрос.Выполнить().Выгрузить();
	
	НаРуки=ВсегоНачислено-ВсегоУдержано;
	
	Сальдо=НаРуки;
	СНК=0;
	СНД=0;
	СКК=0;
	СКД=0;

	
	Для Каждого СтрокаРезультат из Результат Цикл
		
		Если СтрокаРезультат.ВидРасчета=ПланыВидовРасчета.Сальдо.НачальноеСальдоКредит Тогда
			Сальдо=Сальдо+СтрокаРезультат.Результат;
			СНК=СНК+СтрокаРезультат.Результат;
		ИначеЕсли СтрокаРезультат.ВидРасчета=ПланыВидовРасчета.Сальдо.НачальноеСальдоДебет Тогда
			Сальдо=Сальдо-СтрокаРезультат.Результат;
			СНД=СНД+СтрокаРезультат.Результат;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если Сальдо>0 Тогда
		СКК=Сальдо;
		СКД=0;
	Иначе	
		СКК=0;
		СКД=-Сальдо;
	КонецЕсли; 
	
	
	СведенияОСальдо=новый Структура("снк,снд,скк,скд,наруки",СНК,СНД,СКК,СКД,НаРуки);
	Если т.количество()>0 Тогда
		т[0].СведенияОСальдо=СведенияОСальдо;	
	КонецЕсли; 
	
	
	СтрокаТ=т.добавить();  
	СтрокаТ.Результат=СуммаКВыплате;
	СтрокаТ.Вид=100;
	
	СтрокаТ=т.добавить();  
	СтрокаТ.Результат=СуммаКВыплате;
	СтрокаТ.Вид=101;
	
КонецПроцедуры

Функция ЗаполнитьСведенияОСотруднике(СведенияОСотруднике,т)
	
	
	СведенияОСотруднике.Параметры.Период="";
	СведенияОСотруднике.Параметры.Сотрудник="";
	СведенияОСотруднике.Параметры.ТабельныйНомер="";
	СведенияОСотруднике.Параметры.Подразделение="";
	СведенияОСотруднике.Параметры.Должность="";
	СведенияОСотруднике.Параметры.ОкладТариф="";
		
	Если т.количество()>0  Тогда
		СведенияОСотруднике.Параметры.Период=ПредставлениеПериода(НАчалоМесяца(МесяцВыплаты),КонецМесяца(МесяцВыплаты),"ФП=истина");
		Если СведенияОСотрудниках.Количество()>0 Тогда
			
			СтрокаСведений=СведенияОСотрудниках.Найти(т[0].Сотрудник,"Сотрудник");	
			Если СтрокаСведений<>неопределено Тогда
				СведенияОСотруднике.Параметры.Сотрудник=СтрокаСведений.Сотрудник;
				СведенияОСотруднике.Параметры.ТабельныйНомер=СтрокаСведений.Сотрудник.Код;
				СведенияОСотруднике.Параметры.Подразделение=СтрокаСведений.Подразделение;
				СведенияОСотруднике.Параметры.Должность=СтрокаСведений.Должность;
				СведенияОСотруднике.Параметры.ОкладТариф=?(СтрокаСведений.Оклад<>0,СтрокаСведений.Оклад,СтрокаСведений.Тариф);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	СведенияОСотруднике.Параметры.Заполнить(Руководители);
	
	Возврат СведенияОСотруднике;
	
КонецФункции	

Процедура ВывестиТаблицы(ТабДок,т1,т2,т3) Экспорт

	КоличествоНачислений=0;
	КоличествоУдержаний=0;
	КоличествоПрочихДоходов=0;
	
	СтрокВШапкахИИтогах=17;
	
	Макет = ПолучитьМакет("РасчетноПлатежнаяВедомость");

	
	//ВЫВОД НАЧИСЛЕНИЙ
 	ШапкаНачислений = Макет.ПолучитьОбласть("ШапкаНачислений|ВертСекция");
	Начисление = Макет.ПолучитьОбласть("Начисление|ВертСекция");
	ИтогНачислений = Макет.ПолучитьОбласть("ИтогНачислений|ВертСекция");
	
	ШапкаУдержаний = Макет.ПолучитьОбласть("ШапкаУдержаний|ВертСекция");
	Удержание = Макет.ПолучитьОбласть("Удержание|ВертСекция");
	ИтогУдержаний = Макет.ПолучитьОбласть("ИтогУдержаний|ВертСекция");
	
	ШапкаПрочиеДоходы = Макет.ПолучитьОбласть("ШапкаПрочиеДоходы|ВертСекция");
	ПрочиеДоходы = Макет.ПолучитьОбласть("ПрочиеДоходы|ВертСекция");
	
	Пустая = Макет.ПолучитьОбласть("Пустая|ВертСекция");
	НаРуки1 = Макет.ПолучитьОбласть("НаРуки1|ВертСекция");
	НаРуки2 = Макет.ПолучитьОбласть("НаРуки2|ВертСекция");
	Разделитель = Макет.ПолучитьОбласть("Разделитель|ВертСекция");
	
	СведенияОСотруднике = Макет.ПолучитьОбласть("СведенияОСотруднике|ВертСекция");
	
	ТабДок.Вывести(ЗаполнитьСведенияОСотруднике(СведенияОСотруднике,т1));
	
	ТабДок.Присоединить(ЗаполнитьСведенияОСотруднике(СведенияОСотруднике,т2));
	
	ТабДок.Присоединить(ЗаполнитьСведенияОСотруднике(СведенияОСотруднике,т3));
	
	ТабДок.Вывести(ШапкаНачислений);
	ТабДок.Присоединить(ШапкаНачислений);
	ТабДок.Присоединить(ШапкаНачислений);
	
	МаксСтрок=Макс(т1.Количество(),т2.Количество(),т3.количество());
	
	//ИтогВыведен1=ложь;
	//ИтогВыведен2=ложь;
	//ИтогВыведен3=ложь;
	
	
	Для н=1 по МаксСтрок Цикл
		
		Если н<=т1.Количество() Тогда
			СтрокаТ=т1[н-1];
			
			Если СтрокаТ.Вид=10 Тогда
				Начисление.Параметры.Заполнить(СтрокаТ);
				ТабДок.Вывести(Начисление);	
				
			ИначеЕсли СтрокаТ.Вид=20 Тогда
				ИтогНачислений.Параметры.Заполнить(СтрокаТ);
				ТабДок.Вывести(ИтогНачислений);	
				
			ИначеЕсли СтрокаТ.Вид=25 Тогда
				ТабДок.Вывести(ШапкаУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=30 Тогда
				Удержание.Параметры.Заполнить(СтрокаТ);
				ТабДок.Вывести(Удержание);	
				
			ИначеЕсли СтрокаТ.Вид=40 Тогда
				ИтогУдержаний.Параметры.Заполнить(СтрокаТ);
				ТабДок.Вывести(ИтогУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=45 Тогда
				ТабДок.Вывести(ШапкаПрочиеДоходы);	
				
			ИначеЕсли СтрокаТ.Вид=50 Тогда
				ПрочиеДоходы.Параметры.Заполнить(СтрокаТ);
				ТабДок.Вывести(ПрочиеДоходы);	
				
			ИначеЕсли СтрокаТ.Вид=100 Тогда
				НаРуки1.Параметры.Заполнить(СтрокаТ);
				НаРуки1.Параметры.НаРуки=СтрокаТ.Результат;
				ТабДок.Вывести(НаРуки1);	
			ИначеЕсли СтрокаТ.Вид=101 Тогда
				НаРуки2.Параметры.Заполнить(СтрокаТ);
				НаРуки2.Параметры.СуммаКВыплате=СформироватьСуммуПрописью(СтрокаТ.Результат,Константы.ВалютаРегламентированногоУчета.Получить());;
				ТабДок.Вывести(НаРуки2);	
				
			Иначе
				ТабДок.Вывести(Пустая);	
			КонецЕсли; 
		Иначе	
			ТабДок.Вывести(Пустая);	
		КонецЕсли; 
	
		Если н<=т2.Количество() Тогда
			СтрокаТ=т2[н-1];
			
			Если СтрокаТ.Вид=10 Тогда
				Начисление.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(Начисление);	
				
			ИначеЕсли СтрокаТ.Вид=20 Тогда
				ИтогНачислений.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ИтогНачислений);
				
			ИначеЕсли СтрокаТ.Вид=25 Тогда
				ТабДок.Присоединить(ШапкаУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=30 Тогда
				Удержание.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(Удержание);	
				
			ИначеЕсли СтрокаТ.Вид=40 Тогда
				ИтогУдержаний.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ИтогУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=45 Тогда
				ТабДок.Присоединить(ШапкаПрочиеДоходы);	
				
			ИначеЕсли СтрокаТ.Вид=50 Тогда
				ПрочиеДоходы.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ПрочиеДоходы);	
			ИначеЕсли СтрокаТ.Вид=100 Тогда
				НаРуки1.Параметры.Заполнить(СтрокаТ);
				НаРуки1.Параметры.НаРуки=СтрокаТ.Результат;
				ТабДок.Присоединить(НаРуки1);	
			ИначеЕсли СтрокаТ.Вид=101 Тогда
				НаРуки2.Параметры.Заполнить(СтрокаТ);
				НаРуки2.Параметры.СуммаКВыплате=СформироватьСуммуПрописью(СтрокаТ.Результат,Константы.ВалютаРегламентированногоУчета.Получить());;
				ТабДок.Присоединить(НаРуки2);	
			Иначе
				ТабДок.Присоединить(Пустая);	
				
			КонецЕсли; 
		Иначе	
			ТабДок.Присоединить(Пустая);	
		КонецЕсли; 
		
		Если н<=т3.Количество() Тогда
			СтрокаТ=т3[н-1];
			
			Если СтрокаТ.Вид=10 Тогда
				Начисление.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(Начисление);
				
			ИначеЕсли СтрокаТ.Вид=20 Тогда
				ИтогНачислений.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ИтогНачислений);	
				
			ИначеЕсли СтрокаТ.Вид=25 Тогда
				ТабДок.Присоединить(ШапкаУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=30 Тогда
				Удержание.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(Удержание);	
				
			ИначеЕсли СтрокаТ.Вид=40 Тогда
				ИтогУдержаний.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ИтогУдержаний);	
				
			ИначеЕсли СтрокаТ.Вид=45 Тогда
				ТабДок.Присоединить(ШапкаПрочиеДоходы);	
				
			ИначеЕсли СтрокаТ.Вид=50 Тогда
				ПрочиеДоходы.Параметры.Заполнить(СтрокаТ);
				ТабДок.Присоединить(ПрочиеДоходы);	
			ИначеЕсли СтрокаТ.Вид=100 Тогда
				НаРуки1.Параметры.Заполнить(СтрокаТ);
				НаРуки1.Параметры.НаРуки=СтрокаТ.Результат;
				ТабДок.Присоединить(НаРуки1);	
			ИначеЕсли СтрокаТ.Вид=101 Тогда
				НаРуки2.Параметры.Заполнить(СтрокаТ);
				НаРуки2.Параметры.СуммаКВыплате=СформироватьСуммуПрописью(СтрокаТ.Результат,Константы.ВалютаРегламентированногоУчета.Получить());;
				ТабДок.Присоединить(НаРуки2);	
			Иначе
				ТабДок.Присоединить(Пустая);	
				
			КонецЕсли; 
		Иначе	
			ТабДок.Присоединить(Пустая);	
		КонецЕсли; 
	КонецЦикла; 




КонецПроцедуры

Процедура ПечатьПлатежнаяВедомостьВБанк(ИмяМакета) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
	
	Область = Макет.ПолучитьОбласть("ТитульныйЛист");
	Область.Параметры.Организация = Организация;
	Область.Параметры.Месяц = Формат(МесяцВыплаты,"ДФ='MMMM yyyy'")+" г.";
	//Область.Параметры.ОбщаяСуммаКВыплатеПрописью = СформироватьСуммуПрописью(Сотрудники.Итог("СуммаКВыплате"),Константы.ВалютаРегламентированногоУчета.Получить());
	//Область.Параметры.ОбщаяСуммаКВыплате = СумТийин(Сотрудники.Итог("СуммаКВыплате"));
	Область.Параметры.ВидВыплаты = ВидРасчета.Наименование;
	Область.Параметры.Заполнить(Руководители);
	ТабДок.Вывести(Область);
	
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерСтраницы=1;
	ШапкаТаблицы=Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
	ТабДок.Вывести(ШапкаТаблицы);
	
	ИтогПоЛисту=Макет.ПолучитьОбласть("ИтогПоЛисту");
	
	КоличествоСтрокНаЛисте=20;
	ТекущаяСтрока=0;
	СтрокаТаблицы=Макет.ПолучитьОбласть("Строка");
	
	СуммаКВыплатеПоЛисту=0;
	
	Для Каждого СтрокаСотрудники из Сотрудники Цикл
		
		ТекущаяСтрока=ТекущаяСтрока+1;
		
		Если ТекущаяСтрока>КоличествоСтрокНаЛисте Тогда
			ИтогПоЛисту.Параметры.СуммаКВыплатеПоЛисту = СуммаКВыплатеПоЛисту;
			ТабДок.Вывести(ИтогПоЛисту);
			
			КоличествоСтрокНаЛисте=34;
			НомерСтраницы=НомерСтраницы+1;
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			ШапкаТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
			ТабДок.Вывести(ШапкаТаблицы);
			ТекущаяСтрока=1;
			СуммаКВыплатеПоЛисту=0;
		КонецЕсли;
		
		СуммаКВыплатеПоЛисту=СуммаКВыплатеПоЛисту+СтрокаСотрудники.СуммаКВыплате;
		СтрокаТаблицы.Параметры.Заполнить(СтрокаСотрудники); 		
		СтрокаТаблицы.Параметры.НомерПластКарты = СтрокаСотрудники.Сотрудник.ФизическоеЛицо.НомерПластКарточки ;
//		СтрокаТаблицы.Параметры.БанкКодПластКарточки = СтрокаСотрудники.Сотрудник.ФизическоеЛицо.БанкКодПластКарточки ;
		
		ТабДок.Вывести(СтрокаТаблицы);
		
	КонецЦикла; 
	
	ИтогПоЛисту.Параметры.СуммаКВыплатеПоЛисту = СуммаКВыплатеПоЛисту;
	ТабДок.Вывести(ИтогПоЛисту);
	
	ПодвалТаблицы=Макет.ПолучитьОбласть("Подвал");
	ПодвалТаблицы.Параметры.НомерСтраницы = НомерСтраницы;
	ПодвалТаблицы.Параметры.СуммаКВыплате = Сотрудники.Итог("СуммаКВыплате");
	ТабДок.Вывести(ПодвалТаблицы);
	
	Область = Макет.ПолучитьОбласть("ИтогВедомости");
	Область.Параметры.Заполнить(Руководители); 
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.АвтоМасштаб = Истина ;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет ;
	ТабДок.ОтображатьЗаголовки = Ложь ;
	ТабДок.ОтображатьСетку = Ложь ;
	
	ТабДок.Показать();
	
КонецПроцедуры

Функция СформироватьФайлЭксель (ИмяФайлаДанных) Экспорт   	
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
	
	НашExcel = Новый COMОбъект("Excel.Application");
	Книга = НашExcel.WorkBooks.Open(ИмяФайлаДанных);
	//Книга = НашExcel.WorkBooks.Add(1); 
	Лист = Книга.WorkSheets(1);   
	НашExcel.Visible = Ложь;   
	
	Лист.Cells(1, 1).Font.Bold = Истина; 	
	Лист.Cells(3, 3).Font.Bold = Истина;
	Лист.Cells(4, 3).Font.Bold = Истина; 
	Лист.Cells(5, 3).Font.Bold = Истина;
	
	Лист.Cells(1, 1).Value = Строка(Организация); 	
	Лист.Cells(3, 3).Value = "Ведомость";
	Лист.Cells(4, 3).Value = "за " + Формат(МесяцВыплаты,"ДФ='MMMM yyyy'")+" г."; 
	Лист.Cells(5, 3).Value = "вид выплаты: " + ВидРасчета.Наименование;
	
	
	Лист.Cells(7, 1).Font.Bold = Истина; 	
	Лист.Cells(7, 2).Font.Bold = Истина;
	Лист.Cells(7, 3).Font.Bold = Истина;
	Лист.Cells(7, 4).Font.Bold = Истина;
	
	//Лист.Cells(5, 1).Value = "Номер по порядку."; 	
	Лист.Cells(7, 1).Value = "Номер пластиковой карты."; 	
	Лист.Cells(7, 2).Value = "Код";
	Лист.Cells(7, 3).Value = "Сумма";
	Лист.Cells(7, 4).Value = "ФИО";
	
	поз = 8; 
	Сообщить ("Идет выгрузка данных ...");
	Для Каждого СтрокаСотрудники из Сотрудники Цикл
		
		//Попытка
		//	Лист.Cells(поз, 1).Value = Число(СтрокаСотрудники.НомерСтроки);
		//Исключение
		//КонецПопытки;
		
		Попытка
			Лист.Cells(поз, 1).NumberFormat = "@" ;
			Лист.Cells(поз, 1).Value = Формат(СтрокаСотрудники.Сотрудник.ФизическоеЛицо.НомерПластКарточки,"ЧГ=0" );
		Исключение
		КонецПопытки;
		
		Попытка
			Лист.Cells(поз, 2).NumberFormat = "@" ; 
			Лист.Cells(поз, 2).Value = СтрокаСотрудники.Сотрудник.ФизическоеЛицо.БанкКодПластКарточки;
		Исключение
		КонецПопытки;   		
		
		Попытка         
			Лист.Cells(поз, 3).NumberFormat = "# ##0,00" ;
			Лист.Cells(поз, 3).Value = СтрокаСотрудники.СуммаКВыплате;
		Исключение
		КонецПопытки;
		
		Попытка
			Лист.Cells(поз, 4).Value = Строка(СтрокаСотрудники.Сотрудник);
		Исключение
		КонецПопытки;  
		поз = поз + 1; 
	КонецЦикла ;
	
	Попытка
		Лист.Cells(поз+1, 3).NumberFormat = "# ##0,00" ; 
		Лист.Cells(поз+1, 3).Value = Сотрудники.Итог("СуммаКВыплате");
		Лист.Cells(поз+1, 3).Font.Bold = Истина ;
	Исключение
	КонецПопытки;  
	
	Попытка
		Лист.Cells(поз+3,1).Value = Строка(Руководители.РуководительДолжность);
		Лист.Cells(поз+3,4).Value = Руководители.РуководительПредставление; 
		Лист.Cells(поз+3,1).Font.Bold = Истина;
		Лист.Cells(поз+3,4).Font.Bold = Истина;
		//Лист.Cells(поз+3,4).HorizontalAlignment = "xlRight" ; 
	Исключение
	КонецПопытки;  
	
	Попытка
		Лист.Cells(поз+5,1).Value = "Гавный бухгалтер";
		Лист.Cells(поз+5,4).Value = Руководители.ГлавныйБухгалтерПредставление; 
		Лист.Cells(поз+5,1).Font.Bold = Истина;
		Лист.Cells(поз+5,4).Font.Bold = Истина;
		//Лист.Cells(поз+5,4).HorizontalAlignment = "xlRight" ;
	Исключение
	КонецПопытки;  
	
	//Книга.SaveAs(ИмяФайлаДанных, 56) ;
	Книга.Save() ; 
	Книга.Close();
	НашExcel.Quit();  
	Сообщить ("Выгрузка данных завершена!"); 
	
КонецФункции

Функция РасчитатьАванс (ПериодРегистрации, Подразделение) Экспорт
	
	Если  Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
		ПодразделениеОрганизации = "";
	Иначе
		ПодразделениеОрганизации = "И ПодразделениеОрганизации = &ПодразделениеОрганизации";
		
	КонецЕсли;
             
	Запрос = Новый Запрос ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &Дата1 И &Дата2
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацияРабочихДнейДляДопНачисленийОбороты.Сотрудник,
	|	СУММА(РегистрацияРабочихДнейДляДопНачисленийОбороты.ОтработанныеДниОборот) КАК ОтработанныеДниОборот
	|ПОМЕСТИТЬ ОтработаныеДни
	|ИЗ
	|	РегистрНакопления.РегистрацияРабочихДнейДляДопНачислений.Обороты(
	|			&дата1,
	|			&дата2,
	|			Период,
	|			Организация = Организация
	|				" + ПодразделениеОрганизации + ") КАК РегистрацияРабочихДнейДляДопНачисленийОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияРабочихДнейДляДопНачисленийОбороты.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	ДанныеДляРасчетаЗПСрезПоследних.*,
	|	ОтработаныеДни.ОтработанныеДниОборот КАК ОтработанныеДни,
	|	Графики.ОсновноеЗначение,
	|	ДанныеДляРасчетаЗПСрезПоследних.Оклад / Графики.ОсновноеЗначение * ОтработаныеДни.ОтработанныеДниОборот КАК СуммаКВыплате,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния,
	|	ДанныеДляРасчетаЗПСрезПоследних.ГрафикРаботы,
	|	Графики.ВидУчетаВремени,
	|	ДанныеДляРасчетаЗПСрезПоследних.ФормаТруда,
	|	Графики.ДополнительноеЗначение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&дата1,
	|			Организация = &Организация
	|				" + ПодразделениеОрганизации + ") КАК РаботникиОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляРасчетаЗП.СрезПоследних(&дата1, Организация = &Организация) КАК ДанныеДляРасчетаЗПСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
	|			ПО ДанныеДляРасчетаЗПСрезПоследних.ГрафикРаботы = Графики.ГрафикРаботы
	|				И (ВЫБОР
	|					КОГДА Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|							И ДанныеДляРасчетаЗПСрезПоследних.ФормаТруда = ЗНАЧЕНИЕ(Перечисление.ФормыТруда.Повременная)
	|						ТОГДА ИСТИНА
	|					
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтработаныеДни КАК ОтработаныеДни
	|			ПО ДанныеДляРасчетаЗПСрезПоследних.Сотрудник = ОтработаныеДни.Сотрудник
	|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ДанныеДляРасчетаЗПСрезПоследних.Сотрудник
	|			И РаботникиОрганизацийСрезПоследних.Организация = ДанныеДляРасчетаЗПСрезПоследних.Организация
	|ГДЕ
	|	(НЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &ПричинаИзмененияСостояния)";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",Подразделение);
	
	Запрос.УстановитьПараметр("Дата1",НачалоМесяца(дата));
	Запрос.УстановитьПараметр("Дата2",КонецДня(КонецМесяца(дата)));
	
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	РезТабл = Запрос.Выполнить().Выгрузить(); 	
	
	Возврат РезТабл ;
	
КонецФункции






