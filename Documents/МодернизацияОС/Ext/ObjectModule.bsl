
// Строки, хранят реквизиты имеющие смысл только для бух. учета
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОС-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-14 (приходный ордер).
//
Функция ПечатьОС3()

	Макет       = ПолучитьМакет("ОС3");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МодернизацияОСОС.Ссылка.Номер КАК НомерДок,
	               |	МодернизацияОСОС.Ссылка.Дата КАК ДатаДок,
	               |	МодернизацияОСОС.Ссылка.СобытиеОС КАК ВидРабот,
	               |	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	МодернизацияОСОС.ОсновноеСредство.Наименование КАК НаимОС,
	               |	МодернизацияОСОС.ОсновноеСредство.ИнвентарныйНомер КАК ИнвНомер,
	               |	МодернизацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	               |	МодернизацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	               |	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	               |	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаЗатрат
	               |ИЗ
	               |	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	               |ГДЕ
	               |	МодернизацияОСОС.Ссылка = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	// Печать лицевой стороны.
	// Секция № 1
	Шапка         = Макет.ПолучитьОбласть("Шапка1");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
	Подвал        = Макет.ПолучитьОбласть("Строка1П");
	
	Шапка.Параметры.Заполнить(Выборка);
	ТабДокумент.Вывести(Шапка);

	НомПП = 0;
	ДокВводаБУ  = Неопределено;
	ДатаВводаБУ = Дата('00000000');
	
	Выборка = РезультатЗапроса.Выгрузить();
	
    Для каждого СтрокаВыборки Из Выборка Цикл
	
		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		ПолучитьДокументБухСостоянияОС(СтрокаВыборки.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВводаБУ, ДатаВводаБУ);
		
		НомПП = НомПП + 1;
		СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
		
		СтрокаТаблицы.Параметры.СрокЭкспл = "";
		
		СтрокаТаблицы.Параметры.ВосстановительнаяСтоимостьПеч = Формат( СтрокаВыборки.СтоимостьБУ, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=-; ЧГ=3,0");

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	// Секция № 2
	Шапка         = Макет.ПолучитьОбласть("Шапка2");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка2");
	Подвал        = Макет.ПолучитьОбласть("Строка2П");
	
	ТабДокумент.Вывести(Шапка);
	
	НомПП = 0;
	
    Для каждого СтрокаВыборки Из Выборка Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		
		НомПП = НомПП + 1;
		СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.ИтогоСуммаЗатрат = Выборка.ИТОГ("СуммаЗатрат");
	
	Если Выборка.Количество()=1 Тогда
	    Подвал.Параметры.СтоимостьКонечнаяПеч = Выборка.ИТОГ("СтоимостьБУ")+Выборка.ИТОГ("СуммаЗатрат") ;
	КонецЕсли; 
	
	ТабДокумент.Вывести(Подвал);
	
	// Печать оборотной стороны.
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
	ТабДокумент.Вывести(ОбластьПечати);
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб=Истина;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОС3()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС3" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьОС3();
		
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС3","Форма ОС-3");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОстСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";


КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ЕдиныйОбъектСтроительства Тогда
		ОбязательныеРеквизитыШапки = "ОбъектСтроительства,СчетУчетаБУВнеоборотногоАктива";
	КонецЕсли;
	
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, ,СтруктураШапкиДокумента);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	Если не ЕдиныйОбъектСтроительства Тогда
		РеквизитыТабОС =РеквизитыТабОС+ ",СчетКредит"; //через запятую
	КонецЕсли;
	
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБухУчета, "ОС", СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в бух. учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчетаБУ Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с бух. учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	//ОперацииОС             = Движения.СобытияОСОрганизаций;
	//ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ПроводкиБУ             = Движения.Хозрасчетный;
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		//Движение =Движения.СобытияОСОрганизацийБухгалтерскийУчет.Добавить();
		//Движение.Период             = ДатаДока;
		//Движение.ОсновноеСредство   = ТекОС;
		//Движение.Организация        = ТекОрганизация;
		//Движение.Событие            = СтруктураШапкиДокумента.СобытиеОС;
		//Движение.НазваниеДокумента  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		//Движение.НомерДокумента     = СтруктураШапкиДокумента.Номер;
		//Движение.СуммаЗатрат        = СтрокаТЧ.СуммаМодернизацииБУ;
		//
		//// Движения по регистру ПараметрыАмортизации
		//Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		//Движение.Период                                      = ДатаДока;
		//Движение.ОсновноеСредство                            = ТекОС;
		//Движение.Организация                                 = ТекОрганизация;
		//Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ;
		//Движение.КоэффициентАмортизации                      = СтрокаТЧ.КоэффициентАмортизацииБУ;
		//Движение.КорректирующийКоэффициент                   = СтрокаТЧ.КорректирующийКоэффициент;
		//Движение.ПараметрВыработкиОС                         = СтрокаТЧ.ПараметрВыработкиОС;
		
		// списание амортизации Д 01.01 К 08.03
		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ;
		
		Если НЕ (СуммаПроводки = 0) Тогда
			
			Если ЕдиныйОбъектСтроительства Тогда
				ЗатратыОсновногоСредства = Затраты.НайтиСтроки(Новый Структура("ОсновноеСредство",ТекОС));
				Для каждого СтрокаЗатрат из ЗатратыОсновногоСредства Цикл
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "";
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "МОЛ", СтрокаТЧ.МОЛБУ);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтроительныеЗатраты", СтрокаЗатрат.ВидСтроительныхЗатрат);
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СтрокаЗатрат.СуммаЗатрат;
					
				КонецЦикла;
			Иначе
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "";
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "МОЛ", СтрокаТЧ.МОЛБУ);
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеБУ);
				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОС", СтрокаТЧ.ГруппаОС);
				Проводка.СчетКт       = СтрокаТЧ.СчетКредит;
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, СтрокаТЧ.СубконтоК1);
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,2, СтрокаТЧ.СубконтоК2);
				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,3, СтрокаТЧ.СубконтоК3);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДляСпискаОС()

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();
	ТаблицаАмортизацииНал = Новый ТаблицаЗначений();

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Период",   	 Дата);
	Запрос.УстановитьПараметр("СубконтоОС",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтоимостьОС_БУ.СуммаОстатокДт КАК СтоимостьБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ПараметрВыработкиОС КАК ПараметрВыработкиОС,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК МестонахождениеБУ,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ГруппаОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|					&Период,
	|					Организация = &Организация
	|						И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|						&Период,
	|						,
	|						&СубконтоОС,
	|						Организация = &Организация
	|							И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
	|				ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1
	|					И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС_БУ.Счет
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|						&Период,
	|						,
	|						&СубконтоОС,
	|						Организация = &Организация
	|							И Субконто1 В (&СписокОС)) КАК АмортизацияОС_БУ
	|				ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
	|					И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС_БУ.Счет
	|			ПО (СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство)
	|		ПО (ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|			И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация";
	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СостояниеОС", 	Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОСОрганизацийБухгалтерскийУчет.ДатаСостояния КАК ДатаБУ,
	|	СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство КАК ОС_БУ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацийБухгалтерскийУчет
	|
	|ГДЕ
	|	СостоянияОСОрганизацийБухгалтерскийУчет.ОсновноеСредство В(&СписокОС) И
	|	СостоянияОСОрганизацийБухгалтерскийУчет.Организация = &Организация И
	|	СостоянияОСОрганизацийБухгалтерскийУчет.Состояние = &СостояниеОС";

	ТЗСрокБУ = Запрос.Выполнить().Выгрузить();

	ТаблицаАмортизацииБух = РасчетАмортизацииБухРегл(Дата, Организация, СписокОС);

	Для каждого Строка Из ОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.ОсновноеСредство,"ОсновноеСредство");

		Если СтрокаТЗБУ = Неопределено Тогда

			Строка.СтоимостьБУ = 0;
			//Строка.СуммаМодернизацииБУ = 0;
			Строка.КоэффициентАмортизацииБУ = 0;

		Иначе

			Строка.СтоимостьБУ               = СтрокаТЗБУ.СтоимостьБУ;
			//Строка.СуммаМодернизацииБУ       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьБУ.Значение / ОС.Количество(),0);
			Строка.КоэффициентАмортизацииБУ  = СтрокаТЗБУ.КоэффициентАмортизацииБУ;
			Строка.МолБУ                     = СтрокаТЗБУ.МолБУ;
			Строка.ПодразделениеБУ           = СтрокаТЗБУ.МестонахождениеБУ;
 			Строка.ГруппаОС                  = СтрокаТЗБУ.ГруппаОС;
 			Строка.ПараметрВыработкиОС       = СтрокаТЗБУ.ПараметрВыработкиОС;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ЗаполнитьДляСпискаОС();

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.НомерСтроки КАК НомерСтроки,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СуммаМодернизацииБУ,
	|	МодернизацияОСОС.Количество,
	|	МодернизацияОСОС.КоэффициентАмортизацииБУ,
	|	МодернизацияОСОС.КорректирующийКоэффициент,
	|	МодернизацияОСОС.ПараметрВыработкиОС,
	|	МодернизацияОСОС.МОЛБУ,
	|	МодернизацияОСОС.ПодразделениеБУ,
	|	МодернизацияОСОС.ГруппаОС,
	|	МодернизацияОСОС.СчетКредит,
	|	МодернизацияОСОС.СубконтоК1,
	|	МодернизацияОСОС.СубконтоК2,
	|	МодернизацияОСОС.СубконтоК3,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчетаБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчетаБУ
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследнихБУ.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследнихБУ
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследнихБУ.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследнихБУ.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследнихБУ.ОсновноеСредство В("+СписокОС+")
	|			И СостоянияОСОрганизацииСрезПоследнихБУ.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчетаБУ
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОС_СнятыеСУчетаБУ.ОсновноеСредство
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	//ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
