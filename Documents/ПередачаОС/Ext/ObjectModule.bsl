Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЗатрат;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	//Процедура заполняет параметры организации-получателя формы ОС1 
	Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
		
		СведенияОбОрганизации = СведенияОЮрФизЛице(ПараметрыДокумента.Получатель, ,ПараметрыДокумента.ДатаДок);
		
		ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,КодПоОКПОПолучателя");	
		
		ПараметрыОрганизации.ОрганизацияПолучатель = СведенияОбОрганизации.КонтрагентНаименование;
		ПараметрыОрганизации.АдресПолучателя = ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
		ПараметрыОрганизации.РеквПолучателя = ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,МФО,КоррСчет,");
		
		ОтветственныеЛицаОрганизации = ОтветственныеЛица(ПараметрыДокумента.Получатель, ПараметрыДокумента.ДатаДок);
		ПараметрыОрганизации.РукПолучателя = ОтветственныеЛицаОрганизации.РуководительПредставление;
		ПараметрыОрганизации.ДолжРукПолуч = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
	КонецПроцедуры
	
	//Процедура заполняет параметры организации-сдатчика формы ОС1 
	Процедура ЗаполнитьДанныеОрганизацииСдатчика(ПараметрыДокумента, ОбластьМакета)
		
		СведенияОбОрганизации = СведенияОЮрФизЛице(ПараметрыДокумента.Сдатчик, ,ПараметрыДокумента.ДатаДок);
		ОтветственныеЛицаОрганизации = ОтветственныеЛица(ПараметрыДокумента.Сдатчик, ПараметрыДокумента.ДатаДок);
		
		ПараметрыОрганизации = Новый структура("НаимСдатчика,АдресСдатчика,РеквСдатчика,ДолжРукСдатчика,РукСдатчика,КодПоОКПОСдатчика");	
		
		ПараметрыОрганизации.НаимСдатчика = СведенияОбОрганизации.ОрганизацияНаименование;
		ПараметрыОрганизации.АдресСдатчика = ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
		ПараметрыОрганизации.РеквСдатчика = ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,МФО,КоррСчет,");
		
		ПараметрыОрганизации.РукСдатчика = ОтветственныеЛицаОрганизации.РуководительПредставление;
		ПараметрыОрганизации.ДолжРукСдатчика = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
	КонецПроцедуры
	
	// Функция формирует табличный документ с печатной формой ОС-15,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьОС1()
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаОС.Дата КАК ДатаДок,
		|	ПередачаОС.Номер КАК НомерАкта,
		|	ПередачаОС.Ответственный,
		|	ПередачаОС.ПодразделениеОрганизации КАК ПодрСдатчика,
		|	ПередачаОС.Контрагент.НаименованиеПолное КАК ОрганизацияПолучатель,
		|	ПередачаОС.Дата КАК ДатаПередачи,
		|	ПередачаОС.Контрагент КАК Получатель,
		|	ПередачаОС.Организация КАК Сдатчик
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Ссылка = &Ссылка";
		ВыборкаОС = Запрос.Выполнить().Выбрать();
		ВыборкаОС.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",  Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("КонДата", Дата);
		Запрос.УстановитьПараметр("Курс",      КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаОСОС.НомерСтроки,
		|	ПередачаОСОС.ОсновноеСредство,
		|	ПередачаОСОС.СтоимостьБУ - ПередачаОСОС.АмортизацияБУ - ПередачаОСОС.АмортизацияЗаМесяцБУ КАК ОстСтоимость,
		|	ПередачаОСОС.АмортизацияБУ + ПередачаОСОС.АмортизацияЗаМесяцБУ КАК НачАмортизация,
		|	ПередачаОСОС.Сумма * &Курс / &Кратность КАК ЦенаПродажи,
		|	ПередачаОСОС.СтавкаНДС,
		|	ПередачаОСОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОс,
		|	ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПередачаОСОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
		|	МестонахождениеОС.Местонахождение,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ГруппаОС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОС
		|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК ПараметрыАмортизации
		|		ПО ПередачаОСОС.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПередачаОСОС.Ссылка = &Ссылка";
		ВыборкаПоОС = Запрос.Выполнить().Выбрать();
		
		ДокВвода  = Неопределено;
		ДатаВвода = Дата('00000000');
		
		Если ВыборкаПоОС.Количество() = 1 Тогда
			
			ВыборкаПоОС.Следующий();
			
			ТабДокумент   = Новый ТабличныйДокумент();
			Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
				ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				
				ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
				
				Макет         = ПолучитьОбщийМакет("ОС1");
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				ОбластьМакета.Параметры.НомерАкта=ПолучитьНомерНаПечать(ЭтотОбъект);
				
				ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, ВыборкаОС.Сдатчик, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода,        ДатаВвода);
				СрокЭкспл = ОпределитьФактическийСрокИспользования(ДатаВвода, Дата);
				
				ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
				ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
				ОбластьМакета.Параметры.ДатаВводаПриПередаче  = ДатаВвода;
				//ОбластьМакета.Параметры.СрокЭкспл  = ?(ЗначениеНеЗаполнено(СрокЭкспл),
				//"-",
				//Строка(СрокЭкспл) + " мес.");			
				//Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					ОбластьМакета.Параметры.НаименованиеОС = ВыборкаПоОС.ОсновноеСредство.Наименование+", код: "+ВыборкаПоОС.ОсновноеСредство.Код;
				//КонецЕсли; 
				
				ОбластьМакета.Параметры.ПредседательКомиссии = ФИОСотрудника(ПредседательКомиссии,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии1 = ФИОСотрудника(ЧленКомиссии1,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии2 = ФИОСотрудника(ЧленКомиссии2,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии3 = ФИОСотрудника(ЧленКомиссии3,Дата);
				
				ОбластьМакета.Параметры.ДолжностьПредседателя = ДолжностьСотрудника(ПредседательКомиссии,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК1 = ДолжностьСотрудника(ЧленКомиссии1,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК2 = ДолжностьСотрудника(ЧленКомиссии2,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК3 = ДолжностьСотрудника(ЧленКомиссии3,Дата);
				
				ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
				ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			Иначе // Здание (сооружение)
				
				ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1а";
				
				ОС1а_Страница1 = Новый ТабличныйДокумент();
				МакетОС1а      = ПолучитьОбщийМакет("ОС1а");
				ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				ОбластьМакета.Параметры.НомерАкта=ПолучитьНомерНаПечать(ЭтотОбъект);
				
				ПолучитьДокументБухСостоянияОС( ВыборкаПоОС.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода, ДатаВвода);
				СрокЭкспл = ОпределитьФактическийСрокИспользования(ДатаВвода, Дата);
				
				ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
				ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
				//ОбластьМакета.Параметры.СрокЭкспл  = ?(ЗначениеНеЗаполнено(СрокЭкспл),
				//"-",
				//Строка(СрокЭкспл) + " мес.");			
				//Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					ОбластьМакета.Параметры.НаименованиеОС = ВыборкаПоОС.ОсновноеСредство.Наименование+", код: "+ВыборкаПоОС.ОсновноеСредство.Код;
				//КонецЕсли; 
				
				ОбластьМакета.Параметры.ПредседательКомиссии = ФИОСотрудника(ПредседательКомиссии,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии1 = ФИОСотрудника(ЧленКомиссии1,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии2 = ФИОСотрудника(ЧленКомиссии2,Дата);
				ОбластьМакета.Параметры.ЧленКомиссии3 = ФИОСотрудника(ЧленКомиссии3,Дата);
				
				ОбластьМакета.Параметры.ДолжностьПредседателя = ДолжностьСотрудника(ПредседательКомиссии,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК1 = ДолжностьСотрудника(ЧленКомиссии1,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК2 = ДолжностьСотрудника(ЧленКомиссии2,Дата);
				ОбластьМакета.Параметры.ДолжностьЧК3 = ДолжностьСотрудника(ЧленКомиссии3,Дата);
				
				ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
				ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			Возврат ТабДокумент;
			
		Иначе // Объектов много - групповая печать.
			
			ОС1б_Страница1 = Новый ТабличныйДокумент();
			ОС1б_Страница2 = Новый ТабличныйДокумент();
			ОС1б_Страница3 = Новый ТабличныйДокумент();
			ОС1б_Страница4 = Новый ТабличныйДокумент();
			
			МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
			
			Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
			Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
			Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
			Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
			Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
			Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
			Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
			Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
			Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
			Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");
			
			Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Шапка1ОС1б.Параметры.НомерДок=ПолучитьНомерНаПечать(ЭтотОбъект);
			
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
			ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, Шапка1ОС1б);
			
			ОС1б_Страница1.Вывести(Шапка1ОС1б);
			
			Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница2.Вывести(Шапка2ОС1б);
			
			Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Шапка3ОС1б);
			
			Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница4.Вывести(Шапка4ОС1б);
			
			ИтогЦенаПродажи = 0;
			
			Пока ВыборкаПоОС.Следующий() Цикл
				
				ИтогЦенаПродажи = ИтогЦенаПродажи + ВыборкаПоОС.ЦенаПродажи;
				
				ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, ВыборкаОС.Сдатчик, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода, ДатаВвода);
				СрокЭкспл = ОпределитьФактическийСрокИспользования(ДатаВвода, Дата);
				
				Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
				Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
				Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					Строка2ОС1б.Параметры.НаименованиеОС = ВыборкаПоОС.ОсновноеСредство.Наименование+", код: "+ВыборкаПоОС.ОсновноеСредство.Код;
				КонецЕсли; 
				Строка2ОС1б.Параметры.ДатаВвода = ДатаВвода;
				ОС1б_Страница2.Вывести(Строка2ОС1б);
				
				Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
				Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
				Строка3ОС1б.Параметры.СрокЭкспл = ?(ЗначениеНеЗаполнено(СрокЭкспл),
				"-",
				Строка(СрокЭкспл) + " мес.");			
				ОС1б_Страница3.Вывести(Строка3ОС1б);
				
			КонецЦикла;
			
			Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница2.Вывести(Строка2ПОС1б);
			
			Подвал2.Параметры.Заполнить(ВыборкаОС);
			Подвал2.Параметры.Заполнить(ВыборкаПоОС);
			
			Подвал2.Параметры.ПредседательКомиссии = ФИОСотрудника(ПредседательКомиссии,Дата);
			Подвал2.Параметры.ЧленКомиссии1 = ФИОСотрудника(ЧленКомиссии1,Дата);
			Подвал2.Параметры.ЧленКомиссии2 = ФИОСотрудника(ЧленКомиссии2,Дата);
			Подвал2.Параметры.ЧленКомиссии3 = ФИОСотрудника(ЧленКомиссии3,Дата);
			
			Подвал2.Параметры.ДолжностьПредседателя = ДолжностьСотрудника(ПредседательКомиссии,Дата);
			Подвал2.Параметры.ДолжностьЧК1 = ДолжностьСотрудника(ЧленКомиссии1,Дата);
			Подвал2.Параметры.ДолжностьЧК2 = ДолжностьСотрудника(ЧленКомиссии2,Дата);
			Подвал2.Параметры.ДолжностьЧК3 = ДолжностьСотрудника(ЧленКомиссии3,Дата);
		
			ОС1б_Страница2.Вывести(Подвал2);
			
			Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ПОС1б);
			
			Подвал3.Параметры.Заполнить(ВыборкаОС);
			Подвал3.Параметры.Заполнить(ВыборкаПоОС);
			Подвал3.Параметры.ИтогЦенаПродажи = ИтогЦенаПродажи;
			ОС1б_Страница3.Вывести(Подвал3);
			
			НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
			НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
			НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
			НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецФункции // ПечатьОС1()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС1" тогда
			
			ТабДокумент = ПечатьОС1();
		ИначеЕсли ИмяМакета = "СчетФактура" тогда
			
			ТабДокумент = ПечатьСчетФактура();
			
		КонецЕсли;
		
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
		
	КонецПроцедуры // Печать
	
#КонецЕсли

Функция ПечатьСчетФактура() Экспорт
	
	ТабДок   = Новый ТабличныйДокумент();
	
	Если Дата<Дата(2019,1,22) Тогда
		Макет = ПолучитьМакет("СчетФактура2017");
	Иначе 	
		Макет = ПолучитьМакет("СчетФактура");
	КонецЕсли;
		
	//+?(Дата>=Дата(2014,1,1),"2014",""));
	
	СведенияОбОрганизации=СведенияОЮрФизЛице(Организация, БанковскийСчет, Дата);		
	СведенияОКонтрагенте=СведенияОЮрФизЛице(Контрагент, БанковскийСчетКонтрагента, Дата);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Номер=ПолучитьНомерНаПечать(ЭтотОбъект);
	Область.Параметры.ДоговорПродажи=ДоговорКонтрагента;
	Область.Параметры.Дата=Формат(Дата,"ДЛФ=D")+" г.";
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(СведенияОбОрганизации);
	Область.Параметры.Заполнить(СведенияОКонтрагенте);
		ТабДок.Вывести(Область);
		
	Для Каждого СтрокаОС из ОС  Цикл
		
		Если СтрокаОС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ
			СтрокаОС.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка()Тогда
			Область = Макет.ПолучитьОбласть("СтрокаБезНДС");
		Иначе	
			Область = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		
		
		Область.Параметры.Заполнить(СтрокаОС);
		Область.Параметры.Цена=Окр(СтрокаОС.СтоимостьБУ - СтрокаОС.АмортизацияБУ - СтрокаОС.АмортизацияЗаМесяцБУ,2);
		Область.Параметры.ЕдиницаИзмерения="";
		Область.Параметры.Всего=СтрокаОС.Сумма + СтрокаОС.СуммаНДС;
		//Если Дата>=Дата(2014,1,1) Тогда
		//	Область.Параметры.СуммаСУчетомАкцизаИНДС=СтрокаОС.Сумма;;
		//КонецЕсли;
		ТабДок.Вывести(Область);
		
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Сумма=ОС.Итог("Сумма");
	Область.Параметры.СуммаНДС=ОС.Итог("СуммаНДС");
	Область.Параметры.Всего=ОС.Итог("Сумма")+ ОС.Итог("СуммаНДС");
	Область.Параметры.ВсегоПрописью=СформироватьСуммуПрописью(ОС.Итог("Сумма")+ ОС.Итог("СуммаНДС"),Константы.ВалютаРегламентированногоУчета.Получить());;
	Если Дата<Дата(2019,1,22) Тогда
		Область.Параметры.Доверенность	= ДоверенностьПолучателя;
		Область.Параметры.Получатель	= Получатель;
	КонецЕсли;
	
	Руководители = ОтветственныеЛица(Организация, Дата);	
    Область.Параметры.Заполнить(Руководители);
	
	ТабДок.Вывести(Область);
		
	ТабДок.ФиксацияСверху=0;
	ТабДок.ФиксацияСлева=0;
	ТабДок.ЭкземпляровНаСтранице=0;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции



// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС1,СчетФактура","Форма ОС-1","Счет - фактура");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		//СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	
	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент","Не выбран контрагент.");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента","Не выбран договор.");
	СтруктураОбязательныхПолей.Вставить("ДокПодготовкаКПередачеОС","Не выбран документ-подготовки к передаче ОС.");
		
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не выбран счет учета расчетов с контрагентом.");
	СтруктураОбязательныхПолей.Вставить("СпособУчетаДоходовБУ","Не выбран счет учета доходов (БУ).");
	СтруктураОбязательныхПолей.Вставить("СпособУчетаРасходовБУ","Не выбран счет учета расходов (БУ).");
	
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьПоБУ Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		//Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		//	ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		
		Если ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаОС.Направление_БУ) Тогда
			СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоТоварам, Отказ, Заголовок)
	ТаблицаИСФ=СоздатьТаблицуИСФ();
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;
	НомерЖурнала   = "ОС";
	
	//Фиксация выручки и НДС по БУ (проводки)
	ПроводкиБУ = Движения.Хозрасчетный;
	Если Дата<Дата(2019,1,1) Тогда
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Выручка от реализации ОС";
		Проводка.НомерЖурнала = НомерЖурнала;
		//
		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
		УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = ТаблицаПоТоварам.Итог("СуммаВал");
		КонецЕсли;
		//
		Проводка.СчетКт = ДокПодготовкаКПередачеОС.СчетУчетаРасчетовСКонтрагентом;
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ДокПодготовкаКПередачеОС.Субконто1);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДокПодготовкаКПередачеОС.Субконто2);
		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДокПодготовкаКПередачеОС.Субконто3);
		//
		Проводка.Сумма = ТаблицаПоТоварам.Итог("Сумма");
		//// НДС
		Если ТаблицаПоТоварам.Итог("НДС") > 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Выделен НДС";
			Проводка.НомерЖурнала = НомерЖурнала;
			//
			Проводка.СчетДт = ДокПодготовкаКПередачеОС.СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ДокПодготовкаКПередачеОС.Субконто1);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ДокПодготовкаКПередачеОС.Субконто2);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ДокПодготовкаКПередачеОС.Субконто3);
			//
			Проводка.СчетКт = СчетУчетаПлатежа("НДС");
			//
			Проводка.Сумма = ТаблицаПоТоварам.Итог("НДС");
		КонецЕсли;
	Иначе 	
		Для каждого СтрокаТЗ Из ТаблицаПоТоварам Цикл
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание	 = "Выручка от реализации ОС";     
			Проводка.НомерЖурнала = НомерЖурнала;
			//
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			//
			Проводка.СчетКт = ДокПодготовкаКПередачеОС.СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ДокПодготовкаКПередачеОС.Субконто1);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДокПодготовкаКПередачеОС.Субконто2);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДокПодготовкаКПередачеОС.Субконто3);
			//
			Проводка.Сумма = СтрокаТЗ.Сумма; 
			////
			Если СтрокаТЗ.НДС<>0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание	 = "НДС";     
				//
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				//
				Проводка.СчетКт = СчетУчетаПлатежа("НДС");
				УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтавкиНДС",СтрокаТЗ.СтавкаНДС);
				//
				Проводка.Сумма = СтрокаТЗ.НДС; 
			КонецЕсли; 
			////
			Движение = ТаблицаИСФ.Добавить();
			Движение.Период				= ДатаДока;
			Движение.Организация		= СтруктураШапкиДокумента.Организация;
			Движение.Контрагент			= СтруктураШапкиДокумента.Контрагент;
			Движение.Ссылка				= Ссылка;
			Движение.Документ			= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект())+" от "+Формат(Ссылка.Дата, "ДФ='dd.MM.yyyy ""г.""'");
			Движение.ДокументНомер		= ПолучитьНомерНаПечать(Ссылка.ПолучитьОбъект());
			Движение.ДокументДата		= ДатаДока;
			Движение.СтавкаНДС			= СтрокаТЗ.СтавкаНДС;
			Движение.ВидДеятельностиНДС	= СтруктураШапкиДокумента.Организация.ОсновнойВидДеятельностиНДС;
			Движение.ПорядокУплатыНДС	= ПолучитьПорядокУплатыНДС(ДатаДока,СтруктураШапкиДокумента.Организация);
			Движение.Сумма				= СтрокаТЗ.Сумма;
			Движение.СуммаНДС			= СтрокаТЗ.НДС;
			Движение.Всего				= СтрокаТЗ.Сумма+СтрокаТЗ.НДС;
		КонецЦикла;
	КонецЕсли;
	
	// Движения по регистрам подсистемы ОсновныеСредства
	СостояниеОС             = Движения.СостоянияОСОрганизацийБухгалтерскийУчет;
	СобытияОС               = Движения.СобытияОСОрганизацийБухгалтерскийУчет;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	
	
	// Создание движений документа по БУ	
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// Движения по регистру СостоянияОСОрганизацийБухгалтерскийУчет
		Движение = СостояниеОС.Добавить();
		
		Движение.ДатаСостояния    = Дата;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Движения по регистру СобытияОСОрганизацийБухгалтерскийУчет
		Движение = СобытияОС.Добавить();
		
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// списание остаточной стоимости Д 91.02 К 01.09
		СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ - СтрокаТЧ.ПереоценкаБУ - СтрокаТЧ.Сумма + СтрокаТЧ.НДС;
		
		Если СуммаПроводки > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Отражены убытки от выбытия ОС";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт = СпособУчетаРасходовБУ.Счет;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СпособУчетаРасходовБУ.Субконто1);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СпособУчетаРасходовБУ.Субконто2);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СпособУчетаРасходовБУ.Субконто3);
			
			Проводка.СчетКт = ДокПодготовкаКПередачеОС.СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ДокПодготовкаКПередачеОС.Субконто1);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДокПодготовкаКПередачеОС.Субконто2);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДокПодготовкаКПередачеОС.Субконто3);
			
		ИначеЕсли СуммаПроводки < 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Отражена прибыль от выбытия ОС";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = -СуммаПроводки;
			
			Проводка.СчетДт = ДокПодготовкаКПередачеОС.СчетУчетаРасчетовСКонтрагентом;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ДокПодготовкаКПередачеОС.Субконто1);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ДокПодготовкаКПередачеОС.Субконто2);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ДокПодготовкаКПередачеОС.Субконто3);
			
			Проводка.СчетКт = СпособУчетаДоходовБУ.Счет;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СпособУчетаДоходовБУ.Субконто1);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СпособУчетаДоходовБУ.Субконто2);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СпособУчетаДоходовБУ.Субконто3);
			
		КонецЕсли;
		
	КонецЦикла;
	ПРоводкиБУ.Записать(Ложь);
	
	ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизацийБухгалтерскийУчет,Отказ,Заголовок);
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		
		//ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		
	КонецЕсли; // Учет курсовых разниц
	ТаблицаИСФ.Свернуть("Период,Организация,Контрагент,Ссылка,Документ,ДокументНомер,ДокументДата,СтавкаНДС,ВидДеятельностиНДС,ПорядокУплатыНДС","Сумма,СуммаНДС,Всего");	
	Движения.ИсходящиеСчетаФактуры.Загрузить(ТаблицаИСФ);	
КонецПроцедуры // ДвиженияПоРегистрамРегл()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаВключаетНДС=Ложь;
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПередачаОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство,
	|	ПередачаОСОС.Сумма,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС КАК НДС,
	|	ПередачаОСОС.НомерСтроки КАК НомерСтроки1,
	|	ПередачаОСОС.СтоимостьБУ,
	|	ПередачаОСОС.АмортизацияБУ,
	|	ПередачаОСОС.АмортизацияЗаМесяцБУ,
	|	ПередачаОСОС.ПереоценкаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьПоБУ,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В ("+СписокОС+")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизацийБухгалтерскийУчет КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В("+СписокОС+")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО ПередачаОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	// Подготовим таблицу товаров для проведения
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	ПроверитьДублиОС(ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проверка заполнения ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
