// Переменная для хранения текущего пользователя ("Справочник.Пользователи")
Перем глТекущийПользователь Экспорт;

// поддержка внутреннего совместительства
Перем глУчетнаяПолитикаПоПерсоналуОрганизации Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАВЕРШЕНИЯ РАБОТЫ ПОЛЬЗОВАТЕЛЕЙ И ОБРАБОТКИ ПАРАМЕТРОВ

// Процедура выполняется при старте системы во внешнем сосединении
//
Процедура ПриНачалеРаботыСистемы()

	ОпределитьФактИспользованияРИБ();
	
	// Определим параметры сеанса, необходимые для ограничения прав доступа.
	ПараметрыСеанса.ОбластьДанныхБухгалтера  = Перечисления.НаборПравПользователей.Бухгалтер;
	ПараметрыСеанса.ОбластьДанныхГлавногоБухгалтера = Перечисления.НаборПравПользователей.ГлавныйБухгалтер;
	ПараметрыСеанса.ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	ОпределитьТекущегоПользователя();
	
	УстановитьПараметрыСеанса(глТекущийПользователь);
	ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
	
    глУчетнаяПолитикаПоБухгалтерскомуУчету = СоздатьКЭШУчетнойПолитики("БухгалтерскийУчет");
	ПараметрыСеанса.УчетнаяПолитикаПоБухгалтерскомуУчету = Новый ХранилищеЗначения(глУчетнаяПолитикаПоБухгалтерскомуУчету, 
																Новый СжатиеДанных(0));
																
КонецПроцедуры //ПриНачалеРаботыСистемы()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ПАРАМЕТРОВ СЕАНСА


// Определение текущего пользователя ИБ
//
Процедура ОпределитьТекущегоПользователя()

	Если ПустаяСтрока(ИмяПользователя()) Тогда

		ИмяПользователя           = "ВнешнееCоединение";
		ПолноеИмяПользователя     = "Внешнее соединение";

	Иначе

		ИмяПользователя           = ИмяПользователя();

		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;

	КонецЕсли;

	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);

	Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда

		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;
		ОбъектПользователь.Записать();

		глТекущийПользователь = ОбъектПользователь.Ссылка;

		// Запишем в качестве основного ответственного самого пользователя.
		ЗаписьРегистра = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Пользователь = ОбъектПользователь.Ссылка;
		ЗаписьРегистра.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный;
		ЗаписьРегистра.Значение     = ОбъектПользователь.Ссылка;
		ЗаписьРегистра.Записать();

	КонецЕсли;

КонецПроцедуры // ОпределитьТекущегоПользователя()

// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
// Переменная содержит соответствие, где организация является ключом, а поддержка 
// поддержка внутреннего совместительства значением.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт

	парамПустаяОрганизация					= Справочники.Организации.ПустаяСсылка();
	глУчетнаяПолитикаПоПерсоналуОрганизации	= Новый Соответствие;
	глУчетнаяПолитикаПоПерсоналуОрганизации.Вставить(парамПустаяОрганизация, Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Ложь, Ложь));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
	|		ПО (ВЫБОР
	|				КОГДА Организации.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА Организации.Ссылка
	|				ИНАЧЕ Организации.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоПерсоналу.Организация)");
	Запрос.УстановитьПараметр("парамПустаяОрганизация", парамПустаяОрганизация);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		глУчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
	                                            Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Выборка.ПоддержкаВнутреннегоСовместительства, Выборка.УпрощенныйУчетНДФЛ));

	КонецЦикла;
	
	УстановитьПараметрСеансаУчетнаяПолитикаПоПерсоналу(глУчетнаяПолитикаПоПерсоналуОрганизации);

КонецПроцедуры // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации()

///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ

#Если ВнешнееСоединение Тогда
	
// Функция возвращает значение экспортных переменных модуля приложений
//
// Параметры
//  ИмяПеременной - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
//
Функция глЗначениеПеременной(ИмяПеременной) Экспорт
	Если ИмяПеременной = "глУчетнаяПолитикаПоПерсоналуОрганизации" Тогда
		Возврат глУчетнаяПолитикаПоПерсоналуОрганизации
	ИначеЕсли ИмяПеременной = "глТекущийПользователь" Тогда
		Возврат глТекущийПользователь
	Иначе 
		Возврат Неопределено
	КонецЕсли;
КонецФункции

#КонецЕсли

