Перем глДанныеОбОСРассчитаны Экспорт;
Перем глДанныеОбОС Экспорт;
// Переменная для макс. количества субконто БУ
Перем глКоличествоСубконтоБУ Экспорт;

// Переменная для хранения текущего пользователя ("Справочник.Пользователи")
Перем глТекущийПользователь Экспорт;

// Адрес сервера, на котором хранятся данные для интернет-поддержки.
Перем АдресРесурсовОбозревателя Экспорт;

// Ссылка на обработку "Обработки.ТорговоеОборудование"
Перем глТорговоеОборудование Экспорт;

// Быстрый доступ к бухгалтерским итогам 
Перем БИ Экспорт;
Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;

// Учет ведется по одной организации - или по нескольким.
Перем УчетПоВсемОрганизациям Экспорт;
Перем ОсновнаяОрганизация Экспорт;

// поддержка внутреннего совместительства
Перем глУчетнаяПолитикаПоПерсоналуОрганизации Экспорт;

// Прочие переменные, используемые только в процедурах данного модуля.
Перем глЗапрашиватьПодтверждениеПриЗакрытии;
Перем ТекущаяСтадияЗавершенияРаботыСистемы;

// обработка обмена данными										 
Перем глОбработкаАвтоОбменДанными Экспорт;

// количество секунд опроса для произведения периодического обмена данными
Перем глКоличествоСекундОпросаОбмена Экспорт;


Перем глОстаткиНоменклатуры Экспорт;
Перем глОстаткиРассчитаны Экспорт;


Перем глДанныеОСотрудниках Экспорт;
Перем глДанныеОСотрудникахРассчитаны Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ГЛОБАЛЬНОГО КОНТЕКСТА

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глОбработкаАвтоОбменДанными = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глОбработкаАвтоОбменДанными.ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глКоличествоСекундОпросаОбмена);

КонецПроцедуры

// Процедура - обработчик события "Перед завершением работы системы".
//
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПотверждение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЗапрашиватьПодтверждениеПриЗакрытии");
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
		ТекущийРежим = Константы.РежимЗавершенияРаботыПользователей.Получить();
		Если ТекущийРежим <> Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу Тогда
			ЗапрашиватьПотверждение = Ложь;
			ОтветНаВопрос = Вопрос(("Установлен режим завершения работы пользователей """ + ТекущийРежим + """. Завершить работу системы?"), РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет, "Завершение работы системы");
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				ЗапрашиватьПотверждение = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ВыполнитьОбменПриЗавершенииРаботыПрограммы(глОбработкаАвтоОбменДанными);
			
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "При завершением работы системы".
//
Процедура ПриЗавершенииРаботыСистемы()

	ОтключитьТорговоеОборудование();

КонецПроцедуры

// Процедура - обработчик события "Перед началом работы системы".
//
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	ПроверитьВозможностьРаботыПользователя(Отказ);
	ПроверитьВозможностьРаботыПользователяВРежимеЗавершенияРаботыПользователей(Отказ);
	
КонецПроцедуры

Процедура ПроверитьПланСчетовХозрасчетный()
	
	НачатьТранзакцию();
	Счета=ПланыСчетов.Хозрасчетный.Выбрать();
	
	Пока Счета.Следующий() Цикл
		Счет=Счета.ПолучитьОбъект();
		//Код=Счет.Код;
		////Счет.Код=СтрЗаменить(Код,".","");
		//Если СтрДлина(Счет.Код)=2 Тогда
		//	Счет.ЗапретитьИспользоватьВПроводках=Истина;
		//Иначе
		//	Счет.ЗапретитьИспользоватьВПроводках=Ложь;
		//КонецЕсли; 
		Счет.Записать();
	КонецЦикла; 
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	//ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	//ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	//ОбъектВидКонтактнойИнформации.Записать();

	//ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	//ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	//ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресНаАнглийскомКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресНаАнглийскомОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	//СписокПредопределенныхЭлементов = Новый СписокЗначений;
	//СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	//СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
	//СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
	//СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
	//СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	//УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);
	
	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

	//Контактные лица.
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()

// Заполнение реквизитов справочника "Льготы по налогу на доходы"
//
Процедура ЗаполнитьСправочникЛьготыПоНДФЛ()

	// Кредит молодых семей
	ОбъектЛьготаПоНДФЛ = Справочники.ЛьготыПоНДФЛ.ИпотечныйКредитМолодыхСемей.ПолучитьОбъект();
	ОбъектЛьготаПоНДФЛ.СтатьяЛьготыПоНДФЛ = Перечисления.СтатьиЛьготПоНДФЛ.Статья179;
	ОбъектЛьготаПоНДФЛ.Записать();

	// Кредит АКБ "Кишлок курилиш банк"
	ОбъектЛьготаПоНДФЛ = Справочники.ЛьготыПоНДФЛ.ИпотечныйКредитКишлокКурилишБанка.ПолучитьОбъект();
	ОбъектЛьготаПоНДФЛ.СтатьяЛьготыПоНДФЛ = Перечисления.СтатьиЛьготПоНДФЛ.Статья179;
	ОбъектЛьготаПоНДФЛ.Записать();

	// Обучение в ВУЗах РУз
	ОбъектЛьготаПоНДФЛ = Справочники.ЛьготыПоНДФЛ.ОбучениеВУЗ.ПолучитьОбъект();
	ОбъектЛьготаПоНДФЛ.СтатьяЛьготыПоНДФЛ = Перечисления.СтатьиЛьготПоНДФЛ.Статья179;
	ОбъектЛьготаПоНДФЛ.Записать();

	// Добровольный ИНПС
	ОбъектЛьготаПоНДФЛ = Справочники.ЛьготыПоНДФЛ.ДобровольныйИНПС.ПолучитьОбъект();
	ОбъектЛьготаПоНДФЛ.СтатьяЛьготыПоНДФЛ = Перечисления.СтатьиЛьготПоНДФЛ.Статья179;
	ОбъектЛьготаПоНДФЛ.Записать();
	
КонецПроцедуры // ЗаполнитьСправочникЛьготыПоНДФЛ()

// Процедура - обработчик события "При начале работы системы".
//
Процедура ПриНачалеРаботыСистемы()

	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
		
	// есть ли права администратора
	ПравоАдминистратора = ПравоДоступа("Администрирование", Метаданные);
	Если ПравоАдминистратора Тогда
		МетаданныеПользователей = Метаданные.Справочники.Пользователи;
		ПараметрыЧтениеПользователи = ПараметрыДоступа("Чтение", МетаданныеПользователей, "ФизЛицо");
		ПараметрыДобавлениеПользователи = ПараметрыДоступа("Добавление", МетаданныеПользователей, "ФизЛицо");
		
		ПравоАдминистратора = ПараметрыЧтениеПользователи.Доступность И НЕ ПараметрыЧтениеПользователи.ОграничениеУсловием 
							И ПараметрыДобавлениеПользователи.Доступность И НЕ ПараметрыДобавлениеПользователи.ОграничениеУсловием 	
	КонецЕсли;
				
	Если ПервыйЗапуск Тогда
		ЗаполнитьСправочникЛьготыПоНДФЛ();
				
	////Если ПравоАдминистратора Тогда
	//	СинхронизироватьПользователейИПользователейБД();
	//	ЗаполнитьСправочникВидыКонтактнойИнформации();
	////КонецЕсли;
	КонецЕсли;
	
	БИ = Обработки.БухгалтерскиеИтоги.Создать();
	
	ОпределитьФактИспользованияРИБ();

	// Определим параметры сеанса, необходимые для ограничения прав доступа.
	//ПараметрыСеанса.ОбластьДанныхБухгалтера  = Перечисления.НаборПравПользователей.Бухгалтер;
	//ПараметрыСеанса.ОбластьДанныхГлавногоБухгалтера = Перечисления.НаборПравПользователей.ГлавныйБухгалтер;
	ПараметрыСеанса.ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ПараметрыСеанса.ВидДоступаЧтение=Перечисления.ВидыДоступа.Чтение;
	
	ПараметрыСеанса.ЕстьПраваНаРедактированиеЧужихДокументов=РольДоступна("РедактированиеЧужихДокументов") или РольДоступна("ПолныеПрава");
	ПараметрыСеанса.ЕстьПраваНаПросмотрБанковскихСчетов=истина;
	
	СпособОценкиМПЗ = Константы.СпособОценкиМПЗ.Получить();
	ПараметрыСеанса.ВедетсяПартионныйУчет = СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
	
	ОпределитьТекущегоПользователя();
	
	УстановитьПараметрыСеанса(глТекущийПользователь);
	
	Если УжеУстановилСоединение(глТекущийПользователь) Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли;	

	УстановитьЗаголовокСистемы(ОсновнаяОрганизация.Наименование);
	
	глУчетнаяПолитикаПоБухгалтерскомуУчету = СоздатьКЭШУчетнойПолитики("БухгалтерскийУчет");
	ПараметрыСеанса.УчетнаяПолитикаПоБухгалтерскомуУчету = Новый ХранилищеЗначения(глУчетнаяПолитикаПоБухгалтерскомуУчету, 
																Новый СжатиеДанных(0));
																
    ВыполнитьОбновлениеИнформационнойБазы();
	
	// отработка режима завершения работы системы
	
	Если ОбработатьПараметрЗапуска() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьКонтрольРежимаЗавершенияРаботыПользователей();

	ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();

	ОпределитьНеобходимостьПерестановкиГраницыИтогов();

	//ПровритьНаличиеОбновлений();

	//ПодключитьТорговоеОборудование();
	
	//РУЗ
	//ПроверитьПланСчетовХозрасчетный();
	
	глКоличествоСубконтоБУ = 3;

	ОсновнаяОрганизация  = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");

	// ПАНЕЛЬ ФУНКЦИЙ
	//
	Если РольДоступна("ПолныеПрава") или РольДоступна("ПолныйПросмотр")или РольДоступна("ГлавныйБухгалтер") Тогда
		ОткрытьПанельФункций = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьПриЗапускеПанельФункций");	
		Если ОткрытьПанельФункций Тогда
			Обработки.ПанельФункций.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	//
	
	ЗагрузитьКурсыВалют = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЗагружатьКурсыВалют");
	Если ЗагрузитьКурсыВалют Тогда
		Обработка = Обработки.ЗагрузкаКурсовВалют.Создать();		
		Обработка.ЗагрузитьКурсы();
	КонецЕсли;
	
	глОбработкаАвтоОбменДанными = ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
	// автообмен данными
	Если глОбработкаАвтоОбменДанными <> Неопределено Тогда
		
		// подключим обработчик обменов данными
		ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глКоличествоСекундОпросаОбмена);
			
	КонецЕсли;
	
	глОстаткиНоменклатуры = "";
	глОстаткиРассчитаны = истина;

	глДанныеОСотрудниках = "";
	глДанныеОСотрудникахРассчитаны = ложь;
	
	глДанныеОбОС = "";
	глДанныеОбОСРассчитаны = ложь;
	
	//ПроверитьНахождениеБазы();
	
	//Константы.РежимРасчетаРабочегоВремени.Установить(Перечисления.РежимыРасчетаРабочегоВремени.Автоматический);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ПАРАМЕТРОВ СЕАНСА

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Процедура ОпределитьТекущегоПользователя()

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		ИмяПользователя       = "НеАвторизован";
		ПолноеИмяПользователя = "Не авторизован";

	Иначе
		ИмяПользователя       = ИмяПользователя();

		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;

	КонецЕсли;

	ДлинаКодаПользователя = Метаданные.Справочники.Пользователи.ДлинаКода;
	Если СтрДлина(ИмяПользователя) > ДлинаКодаПользователя Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДлинаКодаПользователя);
	КонецЕсли; 
	
	глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);

	Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда

		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;

		ОбъектПользователь.Записать();

		// Запишем в качестве основного ответственного самого пользователя.
		ЗаписьРегистра = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Пользователь = ОбъектПользователь.Ссылка;
		ЗаписьРегистра.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный;
		ЗаписьРегистра.Значение     = ОбъектПользователь.Ссылка;
		ЗаписьРегистра.Записать();

		Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
		глТекущийПользователь = ОбъектПользователь.Ссылка;
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Использование = Истина;
		Набор.Отбор.Пользователь.Значение      = глТекущийПользователь;
		
		// Инициализируем признак учета по всем организациям
		Режим = Истина;
		
		// установим пользователю основную организацию
		Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Количество() > 0 Тогда

				Если Выборка.Количество() = 1 Тогда

					// выбирать не из чего - запишем значения без лишних вопросов
					Выборка.Следующий();
					ОсновнаяОрганизация = Выборка.Ссылка;
					
				Иначе

					ФормаВыбора = ПолучитьОбщуюФорму("УправлениеУчетомПоОрганизациям");

					СтруктураВозврата = ФормаВыбора.ОткрытьМодально();

					Если НЕ (СтруктураВозврата = Неопределено) Тогда
						Режим               = СтруктураВозврата.Режим;
						ОсновнаяОрганизация = СтруктураВозврата.Организация;
					КонецЕсли;

					//// Пользователь отказался от однофирмености = включим многофирменность
					//// т.к. по умолчанию включена как раз однофирменность
					//Запись = Набор.Добавить();

					//Запись.Пользователь = глТекущийПользователь;
					//Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
					//Запись.Значение     = Режим;

					Если ОсновнаяОрганизация = Неопределено Тогда
						ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка()
					КонецЕсли;

				КонецЕсли; // Если Выборка.Количество() > 0 Тогда

			КонецЕсли; // Если Выборка.Количество() = 1 Тогда

			Запись = Набор.Добавить();

			Запись.Пользователь = глТекущийПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
			Запись.Значение     = ОсновнаяОрганизация;
			
		КонецЕсли;

		Запись = Набор.Добавить();
		
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии;
		Запись.Значение     = Истина;

		Запись = Набор.Добавить();
		
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета;
		Запись.Значение     = Истина;
		
		Запись = Набор.Добавить();

		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
		Запись.Значение     = Режим;
		
		Набор.Записать();

	КонецЕсли; // Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда

	ОсновнаяОрганизация    = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	УчетПоВсемОрганизациям = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетПоВсемОрганизациям");

КонецПроцедуры // ОпределитьТекущегоПользователя()

// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
// Переменная содержит соответствие, где организация является ключом, а поддержка 
// поддержка внутреннего совместительства значением.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт

	парамПустаяОрганизация                  = Справочники.Организации.ПустаяСсылка();
	глУчетнаяПолитикаПоПерсоналуОрганизации = Новый Соответствие;
	глУчетнаяПолитикаПоПерсоналуОрганизации.Вставить(парамПустаяОрганизация, Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Ложь, Ложь));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
	|		ПО (ВЫБОР
	|				КОГДА Организации.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА Организации.Ссылка
	|				ИНАЧЕ Организации.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоПерсоналу.Организация)");
	Запрос.УстановитьПараметр("парамПустаяОрганизация", парамПустаяОрганизация);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		глУчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
		                                      Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Выборка.ПоддержкаВнутреннегоСовместительства, Выборка.УпрощенныйУчетНДФЛ));

	КонецЦикла;
	
	УстановитьПараметрСеансаУчетнаяПолитикаПоПерсоналу(глУчетнаяПолитикаПоПерсоналуОрганизации);

КонецПроцедуры // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации

///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	// Проверка необходимости обновления информационной базы.
	
	Если НЕ ПустаяСтрока(Метаданные.Версия) и   Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		Если Константы.НомерВерсииКонфигурации.Получить()="" тогда
			//Обработка первого запуска
		Иначе
			Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
		КонецЕслИ;
	Иначе
		Возврат;
	КонецЕсли;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда

		Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");
        глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;

	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);

	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
		глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
		ЗавершитьРаботуСистемы();
		Возврат;

	КонецПопытки;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда

		Сообщить("Обновление информационной базы не выполнено.", СтатусСообщения.Важное);

		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;

	Иначе
		Сообщить("Обновление информационной базы выполнено успешно.", СтатусСообщения.Информация);

	КонецЕсли;

КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		СообщитьОбОшибке("Не задан текущий пользователь.");

	Иначе
		глТекущийПользователь.ПолучитьФорму().Открыть();

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

//Процедура проверяет, есть ли необходимость пересчета регистров
//
Процедура ОпределитьНеобходимостьПерестановкиГраницыИтогов()

	ДеньМесяцаНачалаНапоминания     = 5;
	ДеньМесяцаБезусловногоПересчета = 10;

	ТекущийДеньМесяца = День(ТекущаяДата());
	НадоПересчитывать = Истина;

	Если ТекущийДеньМесяца < ДеньМесяцаНачалаНапоминания Тогда

		НадоПересчитывать = Ложь;

	Иначе

		Если ТекущийДеньМесяца<ДеньМесяцаБезусловногоПересчета Тогда

			ЕстьПользователиВБазе = Ложь;

			Попытка
				УстановитьМонопольныйРежим(Истина);

			Исключение
				ЕстьПользователиВБазе = Истина;

			КонецПопытки;

			Если Не ЕстьПользователиВБазе Тогда
				УстановитьМонопольныйРежим(Ложь);
			КонецЕсли;

			НадоПересчитывать = Не ЕстьПользователиВБазе;

		Иначе

			НадоПересчитывать = Истина;

		КонецЕсли;

	КонецЕсли;

	Если Не НадоПересчитывать Тогда
		Возврат;
	КонецЕсли;

	ПредпочтительнаяДатаРасчетаИтогов = НачалоМесяца(ТекущаяДата()) - 1;

	СписокРегистровКРассчету= Новый СписокЗначений;

	Для Каждого Регистр ИЗ РегистрыНакопления Цикл

		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип(Регистр));

		Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда

			Если Регистр.ПолучитьПериодРассчитанныхИтогов()<ПредпочтительнаяДатаРасчетаИтогов  Тогда

				Если ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда

					СписокРегистровКРассчету.Добавить(Регистр, "Регистр накопления "+МетаданныеРегистра.Синоним);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для Каждого Регистр ИЗ РегистрыБухгалтерии Цикл

		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип(Регистр));

		Если Регистр.ПолучитьПериодРассчитанныхИтогов()<ПредпочтительнаяДатаРасчетаИтогов  Тогда

			Если ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда

				СписокРегистровКРассчету.Добавить(Регистр, "Регистр бухгалтерии "+МетаданныеРегистра.Синоним);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если СписокРегистровКРассчету.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	Если Вопрос("Для повышения производительности рекомендуется выполнить"+Символы.ПС+
				"расчет итогов регистров по "+Формат(ПредпочтительнаяДатаРасчетаИтогов, "ДФ=дд.ММ.гггг" )+". Выполнить его сейчас?", 

		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
		Возврат;

	КонецЕсли;

	Для Каждого РегистрИзСписка Из СписокРегистровКРассчету Цикл

		РегистрИзСписка.Значение.УстановитьПериодРассчитанныхИтогов(ПредпочтительнаяДатаРасчетаИтогов );

		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(РегистрИзСписка.Значение));

		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
			ТипРегистра = " накопления ";
		Иначе
			ТипРегистра = " бухгалтерии "
		КонецЕсли;

		Сообщить("Итоги регистра"+ТипРегистра+""""+МетаданныеРегистра.Синоним+""""+" были рассчитаны по: "+Формат(ПредпочтительнаяДатаРасчетаИтогов, "ДФ=дд.ММ.гггг" ));

	КонецЦикла;

КонецПроцедуры

// Процедура проверяет необходимость проверки наличия комплекта обновления конфигурации
//
Процедура ПровритьНаличиеОбновлений()

	ПроверятьПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияПроверятьПриЗапуске");
	ПроверятьПриЗапуске = ?(ТипЗнч(ПроверятьПриЗапуске) = Тип("Неопределено"), Ложь, ПроверятьПриЗапуске);

	Если НЕ ПроверятьПриЗапуске Тогда
		Возврат;
	КонецЕсли;

	Обозреватель = Обработки.Обозреватель.Создать();
	Форма        = Обозреватель.ПолучитьФорму("ПроверкаНаличияОбновления");

	Если Обозреватель.Проверить(Форма.ЭлементыФормы) Тогда

		ПоказПриПоявленииНовойВерсии = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоказПриПоявленииНовойВерсии");
		ПоказПриПоявленииНовойВерсии = ?(ТипЗнч(ПоказПриПоявленииНовойВерсии)=Тип("Неопределено"), Ложь, ПоказПриПоявленииНовойВерсии);

		ВерсияДистрибутива = ВосстановитьЗначение("ПроверкаНаличияОбновленияПоследняяВерсия");

		Если ПоказПриПоявленииНовойВерсии Тогда

			Если ВерсияДистрибутива <> Форма.ЭлементыФормы.ВерсияДистрибутива.Значение Тогда
				Форма.Открыть();
			КонецЕсли;

		Иначе
			Форма.Открыть();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //ПровритьНаличиеОбновлений()

// Подключение торгового оборудования, подключенного к данному компьютеру
//
Процедура ПодключитьТорговоеОборудование() Экспорт
	Если глТорговоеОборудование = Неопределено Тогда
		глТорговоеОборудование = Обработки.ТорговоеОборудование.Создать();
	КонецЕсли;

	глТорговоеОборудование.ПодключитьОборудование();
КонецПроцедуры

// Отключение торгового оборудования, подключенного к данному компьютеру
//
Процедура ОтключитьТорговоеОборудование() Экспорт
	Если глТорговоеОборудование <> Неопределено Тогда
		глТорговоеОборудование.ОтключитьОборудование();
	КонецЕсли;
КонецПроцедуры

#Если Клиент Тогда
	
// Функция возвращает значение экспортных переменных модуля приложений
//
// Параметры
//  ИмяПеременной - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
//
Функция глЗначениеПеременной(ИмяПеременной) Экспорт
	Если ИмяПеременной = "глТекущийПользователь" Тогда
		Возврат глТекущийПользователь
	ИначеЕсли ИмяПеременной = "АдресРесурсовОбозревателя" Тогда
		Возврат АдресРесурсовОбозревателя
	ИначеЕсли ИмяПеременной = "глТорговоеОборудование" Тогда
		Возврат глТорговоеОборудование
	ИначеЕсли ИмяПеременной = "БИ" Тогда
		Возврат БИ
	ИначеЕсли ИмяПеременной = "УчетПоВсемОрганизациям" Тогда
		Возврат УчетПоВсемОрганизациям
	ИначеЕсли ИмяПеременной = "ОсновнаяОрганизация" Тогда
		Возврат ОсновнаяОрганизация
	ИначеЕсли ИмяПеременной = "глУчетнаяПолитикаПоПерсоналуОрганизации" Тогда
		Возврат глУчетнаяПолитикаПоПерсоналуОрганизации
	Иначе 
		Возврат Неопределено
	КонецЕсли;
КонецФункции

#КонецЕсли

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

Процедура ПолныйОткрытьФормуТекущегоПользователя() Экспорт
	Если ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
		СообщитьОбОшибке("Не задан текущий пользователь.");

	Иначе
		глТекущийПользователь.ПолучитьФорму().Открыть();

	КонецЕсли;
КонецПроцедуры

Функция УжеУстановилСоединение(Пользователь)
	
	Если не ЕстьПолныеПрава() Тогда
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы(); 
		
		Для Каждого Соединение из МассивСоединений Цикл 
			
			Попытка
				Если Соединение.ИмяПриложения="1CV8" Тогда
					Если Сокрлп(Соединение.Пользователь.Имя)=Сокрлп(Пользователь.Наименование) 
						и НомерСоединенияИнформационнойБазы()<>Соединение.НомерСоединения Тогда
						Предупреждение("Выбранный пользователь уже вошел в систему. "+Символы.ПС+"Начало сеанса: "+Строка(Соединение.НачалоСеанса)+Символы.ПС+"Компьютер: "+Строка(Соединение.ИмяКомпьютера),10);
						Возврат Истина;
					КонецЕсли;	
				КонецЕсли;	
			Исключение
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ложь;
	
КонецФункции	

ТекущаяСтадияЗавершенияРаботыСистемы = 0;
АдресРесурсовОбозревателя = "Accounting";

глОбработкаАвтоОбменДанными = Неопределено;

глКоличествоСекундОпросаОбмена = ПолучитьКоличествоСекундОпросаЗапускаОбменаДанными();
